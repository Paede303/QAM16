
QAMDec.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000422e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000186  00802000  0000422e  000042c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000d21  00802186  00802186  00004448  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004448  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000780  00000000  00000000  000044b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010617  00000000  00000000  00004c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005346  00000000  00000000  0001524f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000053b8  00000000  00000000  0001a595  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000198c  00000000  00000000  0001f950  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000728b  00000000  00000000  000212dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ae0f  00000000  00000000  00028567  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b40  00000000  00000000  00033376  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__ctors_end>
       4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      10:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      14:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      18:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      1c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      20:	0c 94 c6 1d 	jmp	0x3b8c	; 0x3b8c <__vector_8>
      24:	0c 94 06 1e 	jmp	0x3c0c	; 0x3c0c <__vector_9>
      28:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      2c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      30:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      34:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      38:	0c 94 57 05 	jmp	0xaae	; 0xaae <__vector_14>
      3c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      40:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      44:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      48:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      4c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      50:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      54:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      58:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      5c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      60:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      64:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      68:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      6c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      70:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      74:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      78:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      7c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      80:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      84:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      88:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      8c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      90:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      94:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      98:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      9c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      a0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      a4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      a8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      ac:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      b0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      b4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      b8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      bc:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      c0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      c4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      c8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      cc:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      d0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      d4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      d8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      dc:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      e0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      e4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      e8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      ec:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      f0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      f4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      f8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      fc:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     100:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     104:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     108:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     10c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     110:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     114:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     118:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     11c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     120:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     124:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     128:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     12c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     130:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     134:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     138:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     13c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     140:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     144:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     148:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     14c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     150:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     154:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     158:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     15c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     160:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     164:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     168:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     16c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     170:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     174:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     178:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     17c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     180:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     184:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     188:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     18c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     190:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     194:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     198:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     19c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1a0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1a4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1a8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1ac:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1b0:	0c 94 c8 12 	jmp	0x2590	; 0x2590 <__vector_108>
     1b4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1b8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1bc:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1c0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1c4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1c8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1cc:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1d0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1d4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1d8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1dc:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1e0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1e4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1e8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1ec:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1f0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1f4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1f8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1fc:	b2 10       	cpse	r11, r2
     1fe:	b2 10       	cpse	r11, r2
     200:	b2 10       	cpse	r11, r2
     202:	53 10       	cpse	r5, r3
     204:	9b 10       	cpse	r9, r11
     206:	ed 10       	cpse	r14, r13
     208:	b2 10       	cpse	r11, r2
     20a:	b2 10       	cpse	r11, r2
     20c:	53 10       	cpse	r5, r3
     20e:	9b 10       	cpse	r9, r11

00000210 <__trampolines_start>:
     210:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <prvIdleTask>
     214:	0c 94 36 03 	jmp	0x66c	; 0x66c <vEventGroupSetBitsCallback>
     218:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <prvTimerTask+0x94>
     21c:	0c 94 ed 10 	jmp	0x21da	; 0x21da <prvTimerTask+0x1c8>
     220:	0c 94 85 14 	jmp	0x290a	; 0x290a <vDisplayUpdateTask>
     224:	0c 94 09 10 	jmp	0x2012	; 0x2012 <prvTimerTask>
     228:	0c 94 dc 1c 	jmp	0x39b8	; 0x39b8 <vQAMDec>
     22c:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <prvTimerTask+0x124>
     230:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <vControl>
     234:	0c 94 e9 18 	jmp	0x31d2	; 0x31d2 <xProtocolDecoder>
     238:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <prvTimerTask+0x152>

0000023c <__ctors_end>:
     23c:	11 24       	eor	r1, r1
     23e:	1f be       	out	0x3f, r1	; 63
     240:	cf ef       	ldi	r28, 0xFF	; 255
     242:	cd bf       	out	0x3d, r28	; 61
     244:	df e3       	ldi	r29, 0x3F	; 63
     246:	de bf       	out	0x3e, r29	; 62
     248:	00 e0       	ldi	r16, 0x00	; 0
     24a:	0c bf       	out	0x3c, r16	; 60

0000024c <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     24c:	e7 ea       	ldi	r30, 0xA7	; 167
     24e:	fe e2       	ldi	r31, 0x2E	; 46
     250:	8a ea       	ldi	r24, 0xAA	; 170
     252:	90 e4       	ldi	r25, 0x40	; 64
     254:	81 93       	st	Z+, r24
     256:	e0 30       	cpi	r30, 0x00	; 0
     258:	f9 07       	cpc	r31, r25
     25a:	e0 f3       	brcs	.-8      	; 0x254 <init_mem+0x8>

0000025c <__do_copy_data>:
     25c:	11 e2       	ldi	r17, 0x21	; 33
     25e:	a0 e0       	ldi	r26, 0x00	; 0
     260:	b0 e2       	ldi	r27, 0x20	; 32
     262:	ee e2       	ldi	r30, 0x2E	; 46
     264:	f2 e4       	ldi	r31, 0x42	; 66
     266:	00 e0       	ldi	r16, 0x00	; 0
     268:	0b bf       	out	0x3b, r16	; 59
     26a:	02 c0       	rjmp	.+4      	; 0x270 <__do_copy_data+0x14>
     26c:	07 90       	elpm	r0, Z+
     26e:	0d 92       	st	X+, r0
     270:	a6 38       	cpi	r26, 0x86	; 134
     272:	b1 07       	cpc	r27, r17
     274:	d9 f7       	brne	.-10     	; 0x26c <__do_copy_data+0x10>

00000276 <__do_clear_bss>:
     276:	2e e2       	ldi	r18, 0x2E	; 46
     278:	a6 e8       	ldi	r26, 0x86	; 134
     27a:	b1 e2       	ldi	r27, 0x21	; 33
     27c:	01 c0       	rjmp	.+2      	; 0x280 <.do_clear_bss_start>

0000027e <.do_clear_bss_loop>:
     27e:	1d 92       	st	X+, r1

00000280 <.do_clear_bss_start>:
     280:	a7 3a       	cpi	r26, 0xA7	; 167
     282:	b2 07       	cpc	r27, r18
     284:	e1 f7       	brne	.-8      	; 0x27e <.do_clear_bss_loop>
     286:	0e 94 89 12 	call	0x2512	; 0x2512 <main>
     28a:	0c 94 15 21 	jmp	0x422a	; 0x422a <_exit>

0000028e <__bad_interrupt>:
     28e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000292 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     292:	61 11       	cpse	r22, r1
     294:	06 c0       	rjmp	.+12     	; 0x2a2 <CLKSYS_XOSC_Config+0x10>
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	84 2b       	or	r24, r20
     29a:	89 2b       	or	r24, r25
     29c:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
     2a0:	08 95       	ret
     2a2:	90 e2       	ldi	r25, 0x20	; 32
     2a4:	84 2b       	or	r24, r20
     2a6:	89 2b       	or	r24, r25
     2a8:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
     2ac:	08 95       	ret

000002ae <CLKSYS_PLL_Config>:
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     2ae:	6f 71       	andi	r22, 0x1F	; 31
     2b0:	86 2b       	or	r24, r22
     2b2:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
     2b6:	08 95       	ret

000002b8 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     2b8:	e0 e5       	ldi	r30, 0x50	; 80
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	90 81       	ld	r25, Z
     2be:	28 2f       	mov	r18, r24
     2c0:	20 95       	com	r18
     2c2:	92 23       	and	r25, r18
     2c4:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     2c6:	90 81       	ld	r25, Z
	return clkEnabled;
}
     2c8:	89 23       	and	r24, r25
     2ca:	08 95       	ret

000002cc <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
     2cc:	0f 93       	push	r16
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	1f 92       	push	r1
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     2d8:	9f b7       	in	r25, 0x3f	; 63
     2da:	99 83       	std	Y+1, r25	; 0x01
     2dc:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     2de:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     2e0:	86 2b       	or	r24, r22
     2e2:	21 e4       	ldi	r18, 0x41	; 65
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	f9 01       	movw	r30, r18
     2e8:	08 ed       	ldi	r16, 0xD8	; 216
     2ea:	04 bf       	out	0x34, r16	; 52
     2ec:	80 83       	st	Z, r24
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	8f bf       	out	0x3f, r24	; 63
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
}
     2f2:	0f 90       	pop	r0
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	0f 91       	pop	r16
     2fa:	08 95       	ret

000002fc <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     2fc:	0f 93       	push	r16
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	1f 92       	push	r1
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     308:	a0 e4       	ldi	r26, 0x40	; 64
     30a:	b0 e0       	ldi	r27, 0x00	; 0
     30c:	9c 91       	ld	r25, X

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     30e:	2f b7       	in	r18, 0x3f	; 63
     310:	29 83       	std	Y+1, r18	; 0x01
     312:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     314:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     316:	98 7f       	andi	r25, 0xF8	; 248
     318:	98 2b       	or	r25, r24
     31a:	20 e4       	ldi	r18, 0x40	; 64
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	f9 01       	movw	r30, r18
     320:	08 ed       	ldi	r16, 0xD8	; 216
     322:	04 bf       	out	0x34, r16	; 52
     324:	90 83       	st	Z, r25
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     326:	99 81       	ldd	r25, Y+1	; 0x01
     328:	9f bf       	out	0x3f, r25	; 63
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
	CCPWrite( &CLK.CTRL, clkCtrl );
	clkCtrl = ( CLK.CTRL & clockSource );
     32a:	9c 91       	ld	r25, X
	return clkCtrl;
}
     32c:	89 23       	and	r24, r25
     32e:	0f 90       	pop	r0
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	0f 91       	pop	r16
     336:	08 95       	ret

00000338 <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
     338:	fc 01       	movw	r30, r24
     33a:	90 81       	ld	r25, Z
     33c:	90 7f       	andi	r25, 0xF0	; 240
     33e:	69 2b       	or	r22, r25
     340:	60 83       	st	Z, r22
     342:	08 95       	ret

00000344 <TC1_ConfigClockSource>:
     344:	fc 01       	movw	r30, r24
     346:	90 81       	ld	r25, Z
     348:	90 7f       	andi	r25, 0xF0	; 240
     34a:	69 2b       	or	r22, r25
     34c:	60 83       	st	Z, r22
     34e:	08 95       	ret

00000350 <TC0_ConfigWGM>:
     350:	fc 01       	movw	r30, r24
     352:	91 81       	ldd	r25, Z+1	; 0x01
     354:	98 7f       	andi	r25, 0xF8	; 248
     356:	69 2b       	or	r22, r25
     358:	61 83       	std	Z+1, r22	; 0x01
     35a:	08 95       	ret

0000035c <TC1_ConfigWGM>:
     35c:	fc 01       	movw	r30, r24
     35e:	91 81       	ldd	r25, Z+1	; 0x01
     360:	98 7f       	andi	r25, 0xF8	; 248
     362:	69 2b       	or	r22, r25
     364:	61 83       	std	Z+1, r22	; 0x01
     366:	08 95       	ret

00000368 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     368:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     36a:	96 81       	ldd	r25, Z+6	; 0x06
     36c:	9c 7f       	andi	r25, 0xFC	; 252
     36e:	69 2b       	or	r22, r25
     370:	66 83       	std	Z+6, r22	; 0x06
     372:	08 95       	ret

00000374 <vApplicationStackOverflowHook>:

 //----------------------------------------------
 //
 void software_reset(void)
 {	 
	 asm("nop");
     374:	00 00       	nop
	 CPU_CCP  = CCP_IOREG_gc;
     376:	88 ed       	ldi	r24, 0xD8	; 216
     378:	84 bf       	out	0x34, r24	; 52
	 RST.CTRL = RST_SWRST_bm ;	 
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     380:	08 95       	ret

00000382 <xEventGroupCreate>:
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	80 e1       	ldi	r24, 0x10	; 16
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0e 94 45 03 	call	0x68a	; 0x68a <pvPortMalloc>
     38e:	ec 01       	movw	r28, r24
     390:	00 97       	sbiw	r24, 0x00	; 0
     392:	41 f0       	breq	.+16     	; 0x3a4 <xEventGroupCreate+0x22>
     394:	fc 01       	movw	r30, r24
     396:	11 92       	st	Z+, r1
     398:	11 92       	st	Z+, r1
     39a:	11 92       	st	Z+, r1
     39c:	11 92       	st	Z+, r1
     39e:	cf 01       	movw	r24, r30
     3a0:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
     3a4:	ce 01       	movw	r24, r28
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	08 95       	ret

000003ac <xEventGroupWaitBits>:
     3ac:	2f 92       	push	r2
     3ae:	3f 92       	push	r3
     3b0:	4f 92       	push	r4
     3b2:	5f 92       	push	r5
     3b4:	6f 92       	push	r6
     3b6:	7f 92       	push	r7
     3b8:	8f 92       	push	r8
     3ba:	9f 92       	push	r9
     3bc:	af 92       	push	r10
     3be:	bf 92       	push	r11
     3c0:	cf 92       	push	r12
     3c2:	df 92       	push	r13
     3c4:	ef 92       	push	r14
     3c6:	ff 92       	push	r15
     3c8:	0f 93       	push	r16
     3ca:	1f 93       	push	r17
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	ec 01       	movw	r28, r24
     3d2:	4a 01       	movw	r8, r20
     3d4:	5b 01       	movw	r10, r22
     3d6:	62 2e       	mov	r6, r18
     3d8:	70 2e       	mov	r7, r16
     3da:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <vTaskSuspendAll>
     3de:	28 80       	ld	r2, Y
     3e0:	39 80       	ldd	r3, Y+1	; 0x01
     3e2:	4a 80       	ldd	r4, Y+2	; 0x02
     3e4:	5b 80       	ldd	r5, Y+3	; 0x03
     3e6:	d2 01       	movw	r26, r4
     3e8:	c1 01       	movw	r24, r2
     3ea:	88 21       	and	r24, r8
     3ec:	99 21       	and	r25, r9
     3ee:	aa 21       	and	r26, r10
     3f0:	bb 21       	and	r27, r11
     3f2:	01 11       	cpse	r16, r1
     3f4:	1d c0       	rjmp	.+58     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     3f6:	89 2b       	or	r24, r25
     3f8:	8a 2b       	or	r24, r26
     3fa:	8b 2b       	or	r24, r27
     3fc:	f1 f0       	breq	.+60     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     3fe:	61 10       	cpse	r6, r1
     400:	66 c0       	rjmp	.+204    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     402:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <xTaskResumeAll>
     406:	c2 01       	movw	r24, r4
     408:	b1 01       	movw	r22, r2
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	1f 91       	pop	r17
     410:	0f 91       	pop	r16
     412:	ff 90       	pop	r15
     414:	ef 90       	pop	r14
     416:	df 90       	pop	r13
     418:	cf 90       	pop	r12
     41a:	bf 90       	pop	r11
     41c:	af 90       	pop	r10
     41e:	9f 90       	pop	r9
     420:	8f 90       	pop	r8
     422:	7f 90       	pop	r7
     424:	6f 90       	pop	r6
     426:	5f 90       	pop	r5
     428:	4f 90       	pop	r4
     42a:	3f 90       	pop	r3
     42c:	2f 90       	pop	r2
     42e:	08 95       	ret
     430:	88 16       	cp	r8, r24
     432:	99 06       	cpc	r9, r25
     434:	aa 06       	cpc	r10, r26
     436:	bb 06       	cpc	r11, r27
     438:	11 f3       	breq	.-60     	; 0x3fe <xEventGroupWaitBits+0x52>
     43a:	c1 14       	cp	r12, r1
     43c:	d1 04       	cpc	r13, r1
     43e:	e1 04       	cpc	r14, r1
     440:	f1 04       	cpc	r15, r1
     442:	f9 f2       	breq	.-66     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     444:	61 10       	cpse	r6, r1
     446:	50 c0       	rjmp	.+160    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     448:	40 e0       	ldi	r20, 0x00	; 0
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	ba 01       	movw	r22, r20
     44e:	71 10       	cpse	r7, r1
     450:	74 60       	ori	r23, 0x04	; 4
     452:	48 29       	or	r20, r8
     454:	59 29       	or	r21, r9
     456:	6a 29       	or	r22, r10
     458:	7b 29       	or	r23, r11
     45a:	97 01       	movw	r18, r14
     45c:	86 01       	movw	r16, r12
     45e:	ce 01       	movw	r24, r28
     460:	04 96       	adiw	r24, 0x04	; 4
     462:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <vTaskPlaceOnUnorderedEventList>
     466:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <xTaskResumeAll>
     46a:	88 23       	and	r24, r24
     46c:	09 f4       	brne	.+2      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     46e:	41 c0       	rjmp	.+130    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     470:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <uxTaskResetEventItemValue>
     474:	91 fd       	sbrc	r25, 1
     476:	27 c0       	rjmp	.+78     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     478:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     47c:	ff 93       	push	r31
     47e:	f8 7f       	andi	r31, 0xF8	; 248
     480:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     484:	68 81       	ld	r22, Y
     486:	79 81       	ldd	r23, Y+1	; 0x01
     488:	8a 81       	ldd	r24, Y+2	; 0x02
     48a:	9b 81       	ldd	r25, Y+3	; 0x03
     48c:	75 01       	movw	r14, r10
     48e:	64 01       	movw	r12, r8
     490:	c6 22       	and	r12, r22
     492:	d7 22       	and	r13, r23
     494:	e8 22       	and	r14, r24
     496:	f9 22       	and	r15, r25
     498:	71 10       	cpse	r7, r1
     49a:	2e c0       	rjmp	.+92     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     49c:	cd 28       	or	r12, r13
     49e:	ce 28       	or	r12, r14
     4a0:	cf 28       	or	r12, r15
     4a2:	71 f0       	breq	.+28     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4a4:	66 20       	and	r6, r6
     4a6:	61 f0       	breq	.+24     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4a8:	80 94       	com	r8
     4aa:	90 94       	com	r9
     4ac:	a0 94       	com	r10
     4ae:	b0 94       	com	r11
     4b0:	86 22       	and	r8, r22
     4b2:	97 22       	and	r9, r23
     4b4:	a8 22       	and	r10, r24
     4b6:	b9 22       	and	r11, r25
     4b8:	88 82       	st	Y, r8
     4ba:	99 82       	std	Y+1, r9	; 0x01
     4bc:	aa 82       	std	Y+2, r10	; 0x02
     4be:	bb 82       	std	Y+3, r11	; 0x03
     4c0:	ff 91       	pop	r31
     4c2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     4c6:	1b 01       	movw	r2, r22
     4c8:	2c 01       	movw	r4, r24
     4ca:	55 24       	eor	r5, r5
     4cc:	9c cf       	rjmp	.-200    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     4ce:	80 94       	com	r8
     4d0:	90 94       	com	r9
     4d2:	a0 94       	com	r10
     4d4:	b0 94       	com	r11
     4d6:	82 20       	and	r8, r2
     4d8:	93 20       	and	r9, r3
     4da:	a4 20       	and	r10, r4
     4dc:	b5 20       	and	r11, r5
     4de:	88 82       	st	Y, r8
     4e0:	99 82       	std	Y+1, r9	; 0x01
     4e2:	aa 82       	std	Y+2, r10	; 0x02
     4e4:	bb 82       	std	Y+3, r11	; 0x03
     4e6:	8d cf       	rjmp	.-230    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     4e8:	40 e0       	ldi	r20, 0x00	; 0
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	60 e0       	ldi	r22, 0x00	; 0
     4ee:	71 e0       	ldi	r23, 0x01	; 1
     4f0:	ae cf       	rjmp	.-164    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     4f2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <vPortYield>
     4f6:	bc cf       	rjmp	.-136    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     4f8:	8c 14       	cp	r8, r12
     4fa:	9d 04       	cpc	r9, r13
     4fc:	ae 04       	cpc	r10, r14
     4fe:	bf 04       	cpc	r11, r15
     500:	f9 f6       	brne	.-66     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     502:	d0 cf       	rjmp	.-96     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>

00000504 <xEventGroupClearBits>:
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     50c:	ff 93       	push	r31
     50e:	f8 7f       	andi	r31, 0xF8	; 248
     510:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     514:	fc 01       	movw	r30, r24
     516:	00 81       	ld	r16, Z
     518:	11 81       	ldd	r17, Z+1	; 0x01
     51a:	22 81       	ldd	r18, Z+2	; 0x02
     51c:	33 81       	ldd	r19, Z+3	; 0x03
     51e:	40 95       	com	r20
     520:	50 95       	com	r21
     522:	60 95       	com	r22
     524:	70 95       	com	r23
     526:	40 23       	and	r20, r16
     528:	51 23       	and	r21, r17
     52a:	62 23       	and	r22, r18
     52c:	73 23       	and	r23, r19
     52e:	40 83       	st	Z, r20
     530:	51 83       	std	Z+1, r21	; 0x01
     532:	62 83       	std	Z+2, r22	; 0x02
     534:	73 83       	std	Z+3, r23	; 0x03
     536:	ff 91       	pop	r31
     538:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     53c:	c9 01       	movw	r24, r18
     53e:	b8 01       	movw	r22, r16
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	08 95       	ret

00000546 <xEventGroupSetBits>:
     546:	2f 92       	push	r2
     548:	3f 92       	push	r3
     54a:	4f 92       	push	r4
     54c:	5f 92       	push	r5
     54e:	6f 92       	push	r6
     550:	7f 92       	push	r7
     552:	8f 92       	push	r8
     554:	9f 92       	push	r9
     556:	af 92       	push	r10
     558:	bf 92       	push	r11
     55a:	cf 92       	push	r12
     55c:	df 92       	push	r13
     55e:	ef 92       	push	r14
     560:	ff 92       	push	r15
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	1c 01       	movw	r2, r24
     56c:	6a 01       	movw	r12, r20
     56e:	7b 01       	movw	r14, r22
     570:	8c 01       	movw	r16, r24
     572:	09 5f       	subi	r16, 0xF9	; 249
     574:	1f 4f       	sbci	r17, 0xFF	; 255
     576:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <vTaskSuspendAll>
     57a:	d1 01       	movw	r26, r2
     57c:	1b 96       	adiw	r26, 0x0b	; 11
     57e:	ed 91       	ld	r30, X+
     580:	fc 91       	ld	r31, X
     582:	1c 97       	sbiw	r26, 0x0c	; 12
     584:	4d 91       	ld	r20, X+
     586:	5d 91       	ld	r21, X+
     588:	6d 91       	ld	r22, X+
     58a:	7c 91       	ld	r23, X
     58c:	13 97       	sbiw	r26, 0x03	; 3
     58e:	4c 29       	or	r20, r12
     590:	5d 29       	or	r21, r13
     592:	6e 29       	or	r22, r14
     594:	7f 29       	or	r23, r15
     596:	4d 93       	st	X+, r20
     598:	5d 93       	st	X+, r21
     59a:	6d 93       	st	X+, r22
     59c:	7c 93       	st	X, r23
     59e:	13 97       	sbiw	r26, 0x03	; 3
     5a0:	0e 17       	cp	r16, r30
     5a2:	1f 07       	cpc	r17, r31
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <xEventGroupSetBits+0x62>
     5a6:	5d c0       	rjmp	.+186    	; 0x662 <xEventGroupSetBits+0x11c>
     5a8:	c1 2c       	mov	r12, r1
     5aa:	d1 2c       	mov	r13, r1
     5ac:	76 01       	movw	r14, r12
     5ae:	17 c0       	rjmp	.+46     	; 0x5de <xEventGroupSetBits+0x98>
     5b0:	45 28       	or	r4, r5
     5b2:	46 28       	or	r4, r6
     5b4:	47 28       	or	r4, r7
     5b6:	79 f0       	breq	.+30     	; 0x5d6 <xEventGroupSetBits+0x90>
     5b8:	b0 ff       	sbrs	r27, 0
     5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <xEventGroupSetBits+0x7e>
     5bc:	c8 28       	or	r12, r8
     5be:	d9 28       	or	r13, r9
     5c0:	ea 28       	or	r14, r10
     5c2:	fb 28       	or	r15, r11
     5c4:	72 60       	ori	r23, 0x02	; 2
     5c6:	cf 01       	movw	r24, r30
     5c8:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <vTaskRemoveFromUnorderedEventList>
     5cc:	f1 01       	movw	r30, r2
     5ce:	40 81       	ld	r20, Z
     5d0:	51 81       	ldd	r21, Z+1	; 0x01
     5d2:	62 81       	ldd	r22, Z+2	; 0x02
     5d4:	73 81       	ldd	r23, Z+3	; 0x03
     5d6:	fe 01       	movw	r30, r28
     5d8:	0c 17       	cp	r16, r28
     5da:	1d 07       	cpc	r17, r29
     5dc:	d1 f0       	breq	.+52     	; 0x612 <xEventGroupSetBits+0xcc>
     5de:	c4 81       	ldd	r28, Z+4	; 0x04
     5e0:	d5 81       	ldd	r29, Z+5	; 0x05
     5e2:	80 81       	ld	r24, Z
     5e4:	91 81       	ldd	r25, Z+1	; 0x01
     5e6:	a2 81       	ldd	r26, Z+2	; 0x02
     5e8:	b3 81       	ldd	r27, Z+3	; 0x03
     5ea:	4c 01       	movw	r8, r24
     5ec:	5d 01       	movw	r10, r26
     5ee:	bb 24       	eor	r11, r11
     5f0:	24 01       	movw	r4, r8
     5f2:	35 01       	movw	r6, r10
     5f4:	44 22       	and	r4, r20
     5f6:	55 22       	and	r5, r21
     5f8:	66 22       	and	r6, r22
     5fa:	77 22       	and	r7, r23
     5fc:	b2 ff       	sbrs	r27, 2
     5fe:	d8 cf       	rjmp	.-80     	; 0x5b0 <xEventGroupSetBits+0x6a>
     600:	84 14       	cp	r8, r4
     602:	95 04       	cpc	r9, r5
     604:	a6 04       	cpc	r10, r6
     606:	b7 04       	cpc	r11, r7
     608:	b9 f2       	breq	.-82     	; 0x5b8 <xEventGroupSetBits+0x72>
     60a:	fe 01       	movw	r30, r28
     60c:	0c 17       	cp	r16, r28
     60e:	1d 07       	cpc	r17, r29
     610:	31 f7       	brne	.-52     	; 0x5de <xEventGroupSetBits+0x98>
     612:	c0 94       	com	r12
     614:	d0 94       	com	r13
     616:	e0 94       	com	r14
     618:	f0 94       	com	r15
     61a:	4c 21       	and	r20, r12
     61c:	5d 21       	and	r21, r13
     61e:	6e 21       	and	r22, r14
     620:	7f 21       	and	r23, r15
     622:	d1 01       	movw	r26, r2
     624:	4d 93       	st	X+, r20
     626:	5d 93       	st	X+, r21
     628:	6d 93       	st	X+, r22
     62a:	7c 93       	st	X, r23
     62c:	13 97       	sbiw	r26, 0x03	; 3
     62e:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <xTaskResumeAll>
     632:	f1 01       	movw	r30, r2
     634:	60 81       	ld	r22, Z
     636:	71 81       	ldd	r23, Z+1	; 0x01
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
     644:	ff 90       	pop	r15
     646:	ef 90       	pop	r14
     648:	df 90       	pop	r13
     64a:	cf 90       	pop	r12
     64c:	bf 90       	pop	r11
     64e:	af 90       	pop	r10
     650:	9f 90       	pop	r9
     652:	8f 90       	pop	r8
     654:	7f 90       	pop	r7
     656:	6f 90       	pop	r6
     658:	5f 90       	pop	r5
     65a:	4f 90       	pop	r4
     65c:	3f 90       	pop	r3
     65e:	2f 90       	pop	r2
     660:	08 95       	ret
     662:	cc 24       	eor	r12, r12
     664:	ca 94       	dec	r12
     666:	dc 2c       	mov	r13, r12
     668:	76 01       	movw	r14, r12
     66a:	d7 cf       	rjmp	.-82     	; 0x61a <xEventGroupSetBits+0xd4>

0000066c <vEventGroupSetBitsCallback>:
     66c:	0c 94 a3 02 	jmp	0x546	; 0x546 <xEventGroupSetBits>

00000670 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     674:	89 01       	movw	r16, r18
     676:	9a 01       	movw	r18, r20
     678:	ab 01       	movw	r20, r22
     67a:	bc 01       	movw	r22, r24
     67c:	86 e3       	ldi	r24, 0x36	; 54
     67e:	93 e0       	ldi	r25, 0x03	; 3
     680:	0e 94 74 11 	call	0x22e8	; 0x22e8 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
     684:	1f 91       	pop	r17
     686:	0f 91       	pop	r16
     688:	08 95       	ret

0000068a <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     690:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     694:	20 91 86 21 	lds	r18, 0x2186	; 0x802186 <__data_end>
     698:	30 91 87 21 	lds	r19, 0x2187	; 0x802187 <__data_end+0x1>
     69c:	c9 01       	movw	r24, r18
     69e:	8c 0f       	add	r24, r28
     6a0:	9d 1f       	adc	r25, r29
     6a2:	88 3b       	cpi	r24, 0xB8	; 184
     6a4:	4b e0       	ldi	r20, 0x0B	; 11
     6a6:	94 07       	cpc	r25, r20
     6a8:	80 f4       	brcc	.+32     	; 0x6ca <pvPortMalloc+0x40>
     6aa:	28 17       	cp	r18, r24
     6ac:	39 07       	cpc	r19, r25
     6ae:	68 f4       	brcc	.+26     	; 0x6ca <pvPortMalloc+0x40>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     6b0:	e9 01       	movw	r28, r18
     6b2:	c8 57       	subi	r28, 0x78	; 120
     6b4:	de 4d       	sbci	r29, 0xDE	; 222
			xNextFreeByte += xWantedSize;			
     6b6:	80 93 86 21 	sts	0x2186, r24	; 0x802186 <__data_end>
     6ba:	90 93 87 21 	sts	0x2187, r25	; 0x802187 <__data_end+0x1>
		}	
	}
	xTaskResumeAll();
     6be:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     6c2:	ce 01       	movw	r24, r28
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     6ca:	c0 e0       	ldi	r28, 0x00	; 0
     6cc:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     6ce:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     6d2:	ce 01       	movw	r24, r28
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     6da:	08 95       	ret

000006dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     6dc:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6de:	03 96       	adiw	r24, 0x03	; 3
     6e0:	81 83       	std	Z+1, r24	; 0x01
     6e2:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     6e4:	4f ef       	ldi	r20, 0xFF	; 255
     6e6:	5f ef       	ldi	r21, 0xFF	; 255
     6e8:	ba 01       	movw	r22, r20
     6ea:	43 83       	std	Z+3, r20	; 0x03
     6ec:	54 83       	std	Z+4, r21	; 0x04
     6ee:	65 83       	std	Z+5, r22	; 0x05
     6f0:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6f2:	87 83       	std	Z+7, r24	; 0x07
     6f4:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6f6:	81 87       	std	Z+9, r24	; 0x09
     6f8:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     6fa:	10 82       	st	Z, r1
     6fc:	08 95       	ret

000006fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     6fe:	fc 01       	movw	r30, r24
     700:	12 86       	std	Z+10, r1	; 0x0a
     702:	13 86       	std	Z+11, r1	; 0x0b
     704:	08 95       	ret

00000706 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	9c 01       	movw	r18, r24
     70c:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     70e:	dc 01       	movw	r26, r24
     710:	11 96       	adiw	r26, 0x01	; 1
     712:	cd 91       	ld	r28, X+
     714:	dc 91       	ld	r29, X
     716:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     718:	c4 83       	std	Z+4, r28	; 0x04
     71a:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     71c:	8e 81       	ldd	r24, Y+6	; 0x06
     71e:	9f 81       	ldd	r25, Y+7	; 0x07
     720:	86 83       	std	Z+6, r24	; 0x06
     722:	97 83       	std	Z+7, r25	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     724:	8e 81       	ldd	r24, Y+6	; 0x06
     726:	9f 81       	ldd	r25, Y+7	; 0x07
     728:	dc 01       	movw	r26, r24
     72a:	14 96       	adiw	r26, 0x04	; 4
     72c:	6d 93       	st	X+, r22
     72e:	7c 93       	st	X, r23
     730:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxPrevious = pxNewListItem;
     732:	6e 83       	std	Y+6, r22	; 0x06
     734:	7f 83       	std	Y+7, r23	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     736:	22 87       	std	Z+10, r18	; 0x0a
     738:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     73a:	f9 01       	movw	r30, r18
     73c:	80 81       	ld	r24, Z
     73e:	8f 5f       	subi	r24, 0xFF	; 255
     740:	80 83       	st	Z, r24
}
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	ec 01       	movw	r28, r24
     752:	cb 01       	movw	r24, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     754:	fb 01       	movw	r30, r22
     756:	00 81       	ld	r16, Z
     758:	11 81       	ldd	r17, Z+1	; 0x01
     75a:	22 81       	ldd	r18, Z+2	; 0x02
     75c:	33 81       	ldd	r19, Z+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     75e:	0f 3f       	cpi	r16, 0xFF	; 255
     760:	ff ef       	ldi	r31, 0xFF	; 255
     762:	1f 07       	cpc	r17, r31
     764:	2f 07       	cpc	r18, r31
     766:	3f 07       	cpc	r19, r31
     768:	49 f1       	breq	.+82     	; 0x7bc <vListInsert+0x74>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     76a:	de 01       	movw	r26, r28
     76c:	13 96       	adiw	r26, 0x03	; 3
     76e:	01 c0       	rjmp	.+2      	; 0x772 <vListInsert+0x2a>
     770:	df 01       	movw	r26, r30
     772:	14 96       	adiw	r26, 0x04	; 4
     774:	ed 91       	ld	r30, X+
     776:	fc 91       	ld	r31, X
     778:	15 97       	sbiw	r26, 0x05	; 5
     77a:	40 81       	ld	r20, Z
     77c:	51 81       	ldd	r21, Z+1	; 0x01
     77e:	62 81       	ldd	r22, Z+2	; 0x02
     780:	73 81       	ldd	r23, Z+3	; 0x03
     782:	04 17       	cp	r16, r20
     784:	15 07       	cpc	r17, r21
     786:	26 07       	cpc	r18, r22
     788:	37 07       	cpc	r19, r23
     78a:	90 f7       	brcc	.-28     	; 0x770 <vListInsert+0x28>
     78c:	9f 01       	movw	r18, r30
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     78e:	fc 01       	movw	r30, r24
     790:	24 83       	std	Z+4, r18	; 0x04
     792:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     794:	f9 01       	movw	r30, r18
     796:	86 83       	std	Z+6, r24	; 0x06
     798:	97 83       	std	Z+7, r25	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
     79a:	fc 01       	movw	r30, r24
     79c:	a6 83       	std	Z+6, r26	; 0x06
     79e:	b7 83       	std	Z+7, r27	; 0x07
	pxIterator->pxNext = pxNewListItem;
     7a0:	14 96       	adiw	r26, 0x04	; 4
     7a2:	8d 93       	st	X+, r24
     7a4:	9c 93       	st	X, r25
     7a6:	15 97       	sbiw	r26, 0x05	; 5

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     7a8:	c2 87       	std	Z+10, r28	; 0x0a
     7aa:	d3 87       	std	Z+11, r29	; 0x0b

	( pxList->uxNumberOfItems )++;
     7ac:	88 81       	ld	r24, Y
     7ae:	8f 5f       	subi	r24, 0xFF	; 255
     7b0:	88 83       	st	Y, r24
}
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	08 95       	ret
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     7bc:	a9 85       	ldd	r26, Y+9	; 0x09
     7be:	ba 85       	ldd	r27, Y+10	; 0x0a
     7c0:	14 96       	adiw	r26, 0x04	; 4
     7c2:	2d 91       	ld	r18, X+
     7c4:	3c 91       	ld	r19, X
     7c6:	15 97       	sbiw	r26, 0x05	; 5
     7c8:	e2 cf       	rjmp	.-60     	; 0x78e <vListInsert+0x46>

000007ca <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     7d0:	a2 85       	ldd	r26, Z+10	; 0x0a
     7d2:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     7d4:	24 81       	ldd	r18, Z+4	; 0x04
     7d6:	35 81       	ldd	r19, Z+5	; 0x05
     7d8:	86 81       	ldd	r24, Z+6	; 0x06
     7da:	97 81       	ldd	r25, Z+7	; 0x07
     7dc:	e9 01       	movw	r28, r18
     7de:	8e 83       	std	Y+6, r24	; 0x06
     7e0:	9f 83       	std	Y+7, r25	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     7e2:	86 81       	ldd	r24, Z+6	; 0x06
     7e4:	97 81       	ldd	r25, Z+7	; 0x07
     7e6:	ec 01       	movw	r28, r24
     7e8:	2c 83       	std	Y+4, r18	; 0x04
     7ea:	3d 83       	std	Y+5, r19	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     7ec:	11 96       	adiw	r26, 0x01	; 1
     7ee:	2d 91       	ld	r18, X+
     7f0:	3c 91       	ld	r19, X
     7f2:	12 97       	sbiw	r26, 0x02	; 2
     7f4:	e2 17       	cp	r30, r18
     7f6:	f3 07       	cpc	r31, r19
     7f8:	49 f0       	breq	.+18     	; 0x80c <uxListRemove+0x42>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     7fa:	12 86       	std	Z+10, r1	; 0x0a
     7fc:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     7fe:	8c 91       	ld	r24, X
     800:	81 50       	subi	r24, 0x01	; 1
     802:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     804:	8c 91       	ld	r24, X
}
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	08 95       	ret
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     80c:	11 96       	adiw	r26, 0x01	; 1
     80e:	8d 93       	st	X+, r24
     810:	9c 93       	st	X, r25
     812:	12 97       	sbiw	r26, 0x02	; 2
     814:	f2 cf       	rjmp	.-28     	; 0x7fa <uxListRemove+0x30>

00000816 <_portSetInterruptMaskFromIsr>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     816:	e0 ea       	ldi	r30, 0xA0	; 160
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	82 81       	ldd	r24, Z+2	; 0x02
     81c:	92 81       	ldd	r25, Z+2	; 0x02
     81e:	98 7f       	andi	r25, 0xF8	; 248
     820:	92 83       	std	Z+2, r25	; 0x02
     822:	08 95       	ret

00000824 <pxPortInitialiseStack>:
     824:	cf 92       	push	r12
     826:	df 92       	push	r13
     828:	ef 92       	push	r14
     82a:	ff 92       	push	r15
     82c:	0f 93       	push	r16
     82e:	1f 93       	push	r17
     830:	31 e1       	ldi	r19, 0x11	; 17
     832:	fc 01       	movw	r30, r24
     834:	30 83       	st	Z, r19
     836:	31 97       	sbiw	r30, 0x01	; 1
     838:	22 e2       	ldi	r18, 0x22	; 34
     83a:	20 83       	st	Z, r18
     83c:	31 97       	sbiw	r30, 0x01	; 1
     83e:	a3 e3       	ldi	r26, 0x33	; 51
     840:	a0 83       	st	Z, r26
     842:	6b 01       	movw	r12, r22
     844:	31 97       	sbiw	r30, 0x01	; 1
     846:	60 83       	st	Z, r22
     848:	31 97       	sbiw	r30, 0x01	; 1
     84a:	d0 82       	st	Z, r13
     84c:	31 97       	sbiw	r30, 0x01	; 1
     84e:	10 82       	st	Z, r1
     850:	31 97       	sbiw	r30, 0x01	; 1
     852:	61 e3       	ldi	r22, 0x31	; 49
     854:	60 83       	st	Z, r22
     856:	31 97       	sbiw	r30, 0x01	; 1
     858:	60 e8       	ldi	r22, 0x80	; 128
     85a:	60 83       	st	Z, r22
     85c:	31 97       	sbiw	r30, 0x01	; 1
     85e:	67 e8       	ldi	r22, 0x87	; 135
     860:	60 83       	st	Z, r22
     862:	31 97       	sbiw	r30, 0x01	; 1
     864:	10 82       	st	Z, r1
     866:	31 97       	sbiw	r30, 0x01	; 1
     868:	10 82       	st	Z, r1
     86a:	31 97       	sbiw	r30, 0x01	; 1
     86c:	62 e0       	ldi	r22, 0x02	; 2
     86e:	60 83       	st	Z, r22
     870:	31 97       	sbiw	r30, 0x01	; 1
     872:	63 e0       	ldi	r22, 0x03	; 3
     874:	60 83       	st	Z, r22
     876:	31 97       	sbiw	r30, 0x01	; 1
     878:	64 e0       	ldi	r22, 0x04	; 4
     87a:	60 83       	st	Z, r22
     87c:	31 97       	sbiw	r30, 0x01	; 1
     87e:	65 e0       	ldi	r22, 0x05	; 5
     880:	60 83       	st	Z, r22
     882:	31 97       	sbiw	r30, 0x01	; 1
     884:	66 e0       	ldi	r22, 0x06	; 6
     886:	60 83       	st	Z, r22
     888:	31 97       	sbiw	r30, 0x01	; 1
     88a:	67 e0       	ldi	r22, 0x07	; 7
     88c:	60 83       	st	Z, r22
     88e:	31 97       	sbiw	r30, 0x01	; 1
     890:	68 e0       	ldi	r22, 0x08	; 8
     892:	60 83       	st	Z, r22
     894:	31 97       	sbiw	r30, 0x01	; 1
     896:	69 e0       	ldi	r22, 0x09	; 9
     898:	60 83       	st	Z, r22
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	60 e1       	ldi	r22, 0x10	; 16
     89e:	60 83       	st	Z, r22
     8a0:	31 97       	sbiw	r30, 0x01	; 1
     8a2:	30 83       	st	Z, r19
     8a4:	31 97       	sbiw	r30, 0x01	; 1
     8a6:	32 e1       	ldi	r19, 0x12	; 18
     8a8:	30 83       	st	Z, r19
     8aa:	31 97       	sbiw	r30, 0x01	; 1
     8ac:	33 e1       	ldi	r19, 0x13	; 19
     8ae:	30 83       	st	Z, r19
     8b0:	31 97       	sbiw	r30, 0x01	; 1
     8b2:	34 e1       	ldi	r19, 0x14	; 20
     8b4:	30 83       	st	Z, r19
     8b6:	31 97       	sbiw	r30, 0x01	; 1
     8b8:	35 e1       	ldi	r19, 0x15	; 21
     8ba:	30 83       	st	Z, r19
     8bc:	31 97       	sbiw	r30, 0x01	; 1
     8be:	36 e1       	ldi	r19, 0x16	; 22
     8c0:	30 83       	st	Z, r19
     8c2:	31 97       	sbiw	r30, 0x01	; 1
     8c4:	37 e1       	ldi	r19, 0x17	; 23
     8c6:	30 83       	st	Z, r19
     8c8:	31 97       	sbiw	r30, 0x01	; 1
     8ca:	38 e1       	ldi	r19, 0x18	; 24
     8cc:	30 83       	st	Z, r19
     8ce:	31 97       	sbiw	r30, 0x01	; 1
     8d0:	39 e1       	ldi	r19, 0x19	; 25
     8d2:	30 83       	st	Z, r19
     8d4:	31 97       	sbiw	r30, 0x01	; 1
     8d6:	30 e2       	ldi	r19, 0x20	; 32
     8d8:	30 83       	st	Z, r19
     8da:	31 97       	sbiw	r30, 0x01	; 1
     8dc:	31 e2       	ldi	r19, 0x21	; 33
     8de:	30 83       	st	Z, r19
     8e0:	31 97       	sbiw	r30, 0x01	; 1
     8e2:	20 83       	st	Z, r18
     8e4:	31 97       	sbiw	r30, 0x01	; 1
     8e6:	23 e2       	ldi	r18, 0x23	; 35
     8e8:	20 83       	st	Z, r18
     8ea:	8a 01       	movw	r16, r20
     8ec:	31 97       	sbiw	r30, 0x01	; 1
     8ee:	40 83       	st	Z, r20
     8f0:	31 97       	sbiw	r30, 0x01	; 1
     8f2:	10 83       	st	Z, r17
     8f4:	31 97       	sbiw	r30, 0x01	; 1
     8f6:	26 e2       	ldi	r18, 0x26	; 38
     8f8:	20 83       	st	Z, r18
     8fa:	31 97       	sbiw	r30, 0x01	; 1
     8fc:	27 e2       	ldi	r18, 0x27	; 39
     8fe:	20 83       	st	Z, r18
     900:	31 97       	sbiw	r30, 0x01	; 1
     902:	28 e2       	ldi	r18, 0x28	; 40
     904:	20 83       	st	Z, r18
     906:	31 97       	sbiw	r30, 0x01	; 1
     908:	29 e2       	ldi	r18, 0x29	; 41
     90a:	20 83       	st	Z, r18
     90c:	31 97       	sbiw	r30, 0x01	; 1
     90e:	20 e3       	ldi	r18, 0x30	; 48
     910:	20 83       	st	Z, r18
     912:	88 97       	sbiw	r24, 0x28	; 40
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	ff 90       	pop	r15
     91a:	ef 90       	pop	r14
     91c:	df 90       	pop	r13
     91e:	cf 90       	pop	r12
     920:	08 95       	ret

00000922 <xPortStartScheduler>:
     922:	83 ef       	ldi	r24, 0xF3	; 243
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     92a:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     92e:	65 e0       	ldi	r22, 0x05	; 5
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	98 e0       	ldi	r25, 0x08	; 8
     934:	0e 94 9c 01 	call	0x338	; 0x338 <TC0_ConfigClockSource>
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	98 e0       	ldi	r25, 0x08	; 8
     93e:	0e 94 b4 01 	call	0x368	; 0x368 <TC0_SetOverflowIntLevel>
     942:	a0 91 ae 2d 	lds	r26, 0x2DAE	; 0x802dae <pxCurrentTCB>
     946:	b0 91 af 2d 	lds	r27, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
     94a:	0d 90       	ld	r0, X+
     94c:	0d be       	out	0x3d, r0	; 61
     94e:	0d 90       	ld	r0, X+
     950:	0e be       	out	0x3e, r0	; 62
     952:	ef 91       	pop	r30
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	bf 91       	pop	r27
     95a:	af 91       	pop	r26
     95c:	9f 91       	pop	r25
     95e:	8f 91       	pop	r24
     960:	7f 91       	pop	r23
     962:	6f 91       	pop	r22
     964:	5f 91       	pop	r21
     966:	4f 91       	pop	r20
     968:	3f 91       	pop	r19
     96a:	2f 91       	pop	r18
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	ff 90       	pop	r15
     972:	ef 90       	pop	r14
     974:	df 90       	pop	r13
     976:	cf 90       	pop	r12
     978:	bf 90       	pop	r11
     97a:	af 90       	pop	r10
     97c:	9f 90       	pop	r9
     97e:	8f 90       	pop	r8
     980:	7f 90       	pop	r7
     982:	6f 90       	pop	r6
     984:	5f 90       	pop	r5
     986:	4f 90       	pop	r4
     988:	3f 90       	pop	r3
     98a:	2f 90       	pop	r2
     98c:	1f 90       	pop	r1
     98e:	0f 90       	pop	r0
     990:	ff 91       	pop	r31
     992:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     996:	ff 91       	pop	r31
     998:	ff bf       	out	0x3f, r31	; 63
     99a:	ff 91       	pop	r31
     99c:	08 95       	ret
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	08 95       	ret

000009a2 <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     9a2:	ff 93       	push	r31
     9a4:	ff b7       	in	r31, 0x3f	; 63
     9a6:	ff 93       	push	r31
     9a8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     9ac:	ff 93       	push	r31
     9ae:	f8 7f       	andi	r31, 0xF8	; 248
     9b0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     9b4:	0f 92       	push	r0
     9b6:	1f 92       	push	r1
     9b8:	11 24       	eor	r1, r1
     9ba:	2f 92       	push	r2
     9bc:	3f 92       	push	r3
     9be:	4f 92       	push	r4
     9c0:	5f 92       	push	r5
     9c2:	6f 92       	push	r6
     9c4:	7f 92       	push	r7
     9c6:	8f 92       	push	r8
     9c8:	9f 92       	push	r9
     9ca:	af 92       	push	r10
     9cc:	bf 92       	push	r11
     9ce:	cf 92       	push	r12
     9d0:	df 92       	push	r13
     9d2:	ef 92       	push	r14
     9d4:	ff 92       	push	r15
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	2f 93       	push	r18
     9dc:	3f 93       	push	r19
     9de:	4f 93       	push	r20
     9e0:	5f 93       	push	r21
     9e2:	6f 93       	push	r22
     9e4:	7f 93       	push	r23
     9e6:	8f 93       	push	r24
     9e8:	9f 93       	push	r25
     9ea:	af 93       	push	r26
     9ec:	bf 93       	push	r27
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	ef 93       	push	r30
     9f4:	a0 91 ae 2d 	lds	r26, 0x2DAE	; 0x802dae <pxCurrentTCB>
     9f8:	b0 91 af 2d 	lds	r27, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
     9fc:	0d b6       	in	r0, 0x3d	; 61
     9fe:	0d 92       	st	X+, r0
     a00:	0e b6       	in	r0, 0x3e	; 62
     a02:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     a04:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     a08:	a0 91 ae 2d 	lds	r26, 0x2DAE	; 0x802dae <pxCurrentTCB>
     a0c:	b0 91 af 2d 	lds	r27, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
     a10:	0d 90       	ld	r0, X+
     a12:	0d be       	out	0x3d, r0	; 61
     a14:	0d 90       	ld	r0, X+
     a16:	0e be       	out	0x3e, r0	; 62
     a18:	ef 91       	pop	r30
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	bf 91       	pop	r27
     a20:	af 91       	pop	r26
     a22:	9f 91       	pop	r25
     a24:	8f 91       	pop	r24
     a26:	7f 91       	pop	r23
     a28:	6f 91       	pop	r22
     a2a:	5f 91       	pop	r21
     a2c:	4f 91       	pop	r20
     a2e:	3f 91       	pop	r19
     a30:	2f 91       	pop	r18
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	ff 90       	pop	r15
     a38:	ef 90       	pop	r14
     a3a:	df 90       	pop	r13
     a3c:	cf 90       	pop	r12
     a3e:	bf 90       	pop	r11
     a40:	af 90       	pop	r10
     a42:	9f 90       	pop	r9
     a44:	8f 90       	pop	r8
     a46:	7f 90       	pop	r7
     a48:	6f 90       	pop	r6
     a4a:	5f 90       	pop	r5
     a4c:	4f 90       	pop	r4
     a4e:	3f 90       	pop	r3
     a50:	2f 90       	pop	r2
     a52:	1f 90       	pop	r1
     a54:	0f 90       	pop	r0
     a56:	ff 91       	pop	r31
     a58:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     a5c:	ff 91       	pop	r31
     a5e:	ff bf       	out	0x3f, r31	; 63
     a60:	ff 91       	pop	r31
	asm volatile ( "ret" );
     a62:	08 95       	ret

00000a64 <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
     a64:	cf 93       	push	r28
		intTaskSwitchPending |= xSwitchRequired;					
     a66:	90 91 1c 2e 	lds	r25, 0x2E1C	; 0x802e1c <intTaskSwitchPending>
     a6a:	89 2b       	or	r24, r25
     a6c:	80 93 1c 2e 	sts	0x2E1C, r24	; 0x802e1c <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
     a70:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     a74:	91 30       	cpi	r25, 0x01	; 1
     a76:	51 f0       	breq	.+20     	; 0xa8c <portTaskSwitchContext+0x28>
     a78:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     a7c:	92 30       	cpi	r25, 0x02	; 2
     a7e:	31 f0       	breq	.+12     	; 0xa8c <portTaskSwitchContext+0x28>
     a80:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     a84:	94 30       	cpi	r25, 0x04	; 4
     a86:	11 f0       	breq	.+4      	; 0xa8c <portTaskSwitchContext+0x28>
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
			intTaskSwitchPending = 0;								
			vTaskSwitchContext();                   				
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
		}                                          					
	}
     a88:	cf 91       	pop	r28
     a8a:	08 95       	ret
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
		intTaskSwitchPending |= xSwitchRequired;					
																
		if(NOT_NESTING() && intTaskSwitchPending)					
     a8c:	88 23       	and	r24, r24
     a8e:	e1 f3       	breq	.-8      	; 0xa88 <portTaskSwitchContext+0x24>
// Higher interrupts are still active and not locked out.
//
//portBASE_TYPE _portSetInterruptMaskFromIsr(void) __attribute__((always_inline));
portBASE_TYPE _portSetInterruptMaskFromIsr(void)
{
	register portBASE_TYPE r = PMIC.CTRL;
     a90:	c0 91 a2 00 	lds	r28, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	PMIC.CTRL &= ~PMIC_BITS;
     a94:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     a98:	88 7f       	andi	r24, 0xF8	; 248
     a9a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
			intTaskSwitchPending = 0;								
     a9e:	10 92 1c 2e 	sts	0x2E1C, r1	; 0x802e1c <intTaskSwitchPending>
			vTaskSwitchContext();                   				
     aa2:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
     aa6:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		}                                          					
	}
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
     aae:	ff 93       	push	r31
     ab0:	ff b7       	in	r31, 0x3f	; 63
     ab2:	ff 93       	push	r31
     ab4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ab8:	ff 93       	push	r31
     aba:	f8 7f       	andi	r31, 0xF8	; 248
     abc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ac0:	0f 92       	push	r0
     ac2:	1f 92       	push	r1
     ac4:	11 24       	eor	r1, r1
     ac6:	2f 92       	push	r2
     ac8:	3f 92       	push	r3
     aca:	4f 92       	push	r4
     acc:	5f 92       	push	r5
     ace:	6f 92       	push	r6
     ad0:	7f 92       	push	r7
     ad2:	8f 92       	push	r8
     ad4:	9f 92       	push	r9
     ad6:	af 92       	push	r10
     ad8:	bf 92       	push	r11
     ada:	cf 92       	push	r12
     adc:	df 92       	push	r13
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	2f 93       	push	r18
     ae8:	3f 93       	push	r19
     aea:	4f 93       	push	r20
     aec:	5f 93       	push	r21
     aee:	6f 93       	push	r22
     af0:	7f 93       	push	r23
     af2:	8f 93       	push	r24
     af4:	9f 93       	push	r25
     af6:	af 93       	push	r26
     af8:	bf 93       	push	r27
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	ef 93       	push	r30
     b00:	a0 91 ae 2d 	lds	r26, 0x2DAE	; 0x802dae <pxCurrentTCB>
     b04:	b0 91 af 2d 	lds	r27, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
     b08:	0d b6       	in	r0, 0x3d	; 61
     b0a:	0d 92       	st	X+, r0
     b0c:	0e b6       	in	r0, 0x3e	; 62
     b0e:	0d 92       	st	X+, r0
// Higher interrupts are still active and not locked out.
//
//portBASE_TYPE _portSetInterruptMaskFromIsr(void) __attribute__((always_inline));
portBASE_TYPE _portSetInterruptMaskFromIsr(void)
{
	register portBASE_TYPE r = PMIC.CTRL;
     b10:	c0 ea       	ldi	r28, 0xA0	; 160
     b12:	d0 e0       	ldi	r29, 0x00	; 0
     b14:	1a 81       	ldd	r17, Y+2	; 0x02
	PMIC.CTRL &= ~PMIC_BITS;
     b16:	8a 81       	ldd	r24, Y+2	; 0x02
     b18:	88 7f       	andi	r24, 0xF8	; 248
     b1a:	8a 83       	std	Y+2, r24	; 0x02
	static void portTaskIncrementTick( void )
	{
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
		xTaskIncrementTick();
     b1c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
     b20:	1a 83       	std	Y+2, r17	; 0x02
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
		portTaskIncrementTick();
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	0e 94 32 05 	call	0xa64	; 0xa64 <portTaskSwitchContext>
     b28:	a0 91 ae 2d 	lds	r26, 0x2DAE	; 0x802dae <pxCurrentTCB>
     b2c:	b0 91 af 2d 	lds	r27, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
     b30:	0d 90       	ld	r0, X+
     b32:	0d be       	out	0x3d, r0	; 61
     b34:	0d 90       	ld	r0, X+
     b36:	0e be       	out	0x3e, r0	; 62
     b38:	ef 91       	pop	r30
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	bf 91       	pop	r27
     b40:	af 91       	pop	r26
     b42:	9f 91       	pop	r25
     b44:	8f 91       	pop	r24
     b46:	7f 91       	pop	r23
     b48:	6f 91       	pop	r22
     b4a:	5f 91       	pop	r21
     b4c:	4f 91       	pop	r20
     b4e:	3f 91       	pop	r19
     b50:	2f 91       	pop	r18
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	cf 90       	pop	r12
     b5e:	bf 90       	pop	r11
     b60:	af 90       	pop	r10
     b62:	9f 90       	pop	r9
     b64:	8f 90       	pop	r8
     b66:	7f 90       	pop	r7
     b68:	6f 90       	pop	r6
     b6a:	5f 90       	pop	r5
     b6c:	4f 90       	pop	r4
     b6e:	3f 90       	pop	r3
     b70:	2f 90       	pop	r2
     b72:	1f 90       	pop	r1
     b74:	0f 90       	pop	r0
     b76:	ff 91       	pop	r31
     b78:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b7c:	ff 91       	pop	r31
     b7e:	ff bf       	out	0x3f, r31	; 63
     b80:	ff 91       	pop	r31
     b82:	18 95       	reti

00000b84 <prvCopyDataToQueue>:
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
				{
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
					{
						*pxCoRoutineWoken = pdTRUE;
     b84:	0f 93       	push	r16
     b86:	1f 93       	push	r17
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	ec 01       	movw	r28, r24
     b8e:	04 2f       	mov	r16, r20
     b90:	1e 8d       	ldd	r17, Y+30	; 0x1e
     b92:	48 a1       	ldd	r20, Y+32	; 0x20
     b94:	44 23       	and	r20, r20
     b96:	99 f0       	breq	.+38     	; 0xbbe <prvCopyDataToQueue+0x3a>
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	01 11       	cpse	r16, r1
     b9c:	18 c0       	rjmp	.+48     	; 0xbce <prvCopyDataToQueue+0x4a>
     b9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ba0:	9d 81       	ldd	r25, Y+5	; 0x05
     ba2:	0e 94 c1 20 	call	0x4182	; 0x4182 <memcpy>
     ba6:	28 a1       	ldd	r18, Y+32	; 0x20
     ba8:	8c 81       	ldd	r24, Y+4	; 0x04
     baa:	9d 81       	ldd	r25, Y+5	; 0x05
     bac:	82 0f       	add	r24, r18
     bae:	91 1d       	adc	r25, r1
     bb0:	8c 83       	std	Y+4, r24	; 0x04
     bb2:	9d 83       	std	Y+5, r25	; 0x05
     bb4:	2a 81       	ldd	r18, Y+2	; 0x02
     bb6:	3b 81       	ldd	r19, Y+3	; 0x03
     bb8:	82 17       	cp	r24, r18
     bba:	93 07       	cpc	r25, r19
     bbc:	40 f5       	brcc	.+80     	; 0xc0e <prvCopyDataToQueue+0x8a>
     bbe:	1f 5f       	subi	r17, 0xFF	; 255
     bc0:	1e 8f       	std	Y+30, r17	; 0x1e
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	08 95       	ret
     bce:	8e 81       	ldd	r24, Y+6	; 0x06
     bd0:	9f 81       	ldd	r25, Y+7	; 0x07
     bd2:	0e 94 c1 20 	call	0x4182	; 0x4182 <memcpy>
     bd6:	88 a1       	ldd	r24, Y+32	; 0x20
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	91 95       	neg	r25
     bdc:	81 95       	neg	r24
     bde:	91 09       	sbc	r25, r1
     be0:	2e 81       	ldd	r18, Y+6	; 0x06
     be2:	3f 81       	ldd	r19, Y+7	; 0x07
     be4:	28 0f       	add	r18, r24
     be6:	39 1f       	adc	r19, r25
     be8:	2e 83       	std	Y+6, r18	; 0x06
     bea:	3f 83       	std	Y+7, r19	; 0x07
     bec:	48 81       	ld	r20, Y
     bee:	59 81       	ldd	r21, Y+1	; 0x01
     bf0:	24 17       	cp	r18, r20
     bf2:	35 07       	cpc	r19, r21
     bf4:	30 f4       	brcc	.+12     	; 0xc02 <prvCopyDataToQueue+0x7e>
     bf6:	2a 81       	ldd	r18, Y+2	; 0x02
     bf8:	3b 81       	ldd	r19, Y+3	; 0x03
     bfa:	82 0f       	add	r24, r18
     bfc:	93 1f       	adc	r25, r19
     bfe:	8e 83       	std	Y+6, r24	; 0x06
     c00:	9f 83       	std	Y+7, r25	; 0x07
     c02:	02 30       	cpi	r16, 0x02	; 2
     c04:	e1 f6       	brne	.-72     	; 0xbbe <prvCopyDataToQueue+0x3a>
     c06:	11 11       	cpse	r17, r1
     c08:	db cf       	rjmp	.-74     	; 0xbc0 <prvCopyDataToQueue+0x3c>
     c0a:	11 e0       	ldi	r17, 0x01	; 1
     c0c:	d9 cf       	rjmp	.-78     	; 0xbc0 <prvCopyDataToQueue+0x3c>
     c0e:	88 81       	ld	r24, Y
     c10:	99 81       	ldd	r25, Y+1	; 0x01
     c12:	8c 83       	std	Y+4, r24	; 0x04
     c14:	9d 83       	std	Y+5, r25	; 0x05
     c16:	1f 5f       	subi	r17, 0xFF	; 255
     c18:	1e 8f       	std	Y+30, r17	; 0x1e
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	08 95       	ret

00000c26 <prvCopyDataFromQueue>:
     c26:	fc 01       	movw	r30, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	40 a1       	ldd	r20, Z+32	; 0x20
     c2c:	44 23       	and	r20, r20
     c2e:	91 f0       	breq	.+36     	; 0xc54 <prvCopyDataFromQueue+0x2e>
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	66 81       	ldd	r22, Z+6	; 0x06
     c34:	77 81       	ldd	r23, Z+7	; 0x07
     c36:	64 0f       	add	r22, r20
     c38:	75 1f       	adc	r23, r21
     c3a:	66 83       	std	Z+6, r22	; 0x06
     c3c:	77 83       	std	Z+7, r23	; 0x07
     c3e:	22 81       	ldd	r18, Z+2	; 0x02
     c40:	33 81       	ldd	r19, Z+3	; 0x03
     c42:	62 17       	cp	r22, r18
     c44:	73 07       	cpc	r23, r19
     c46:	20 f0       	brcs	.+8      	; 0xc50 <prvCopyDataFromQueue+0x2a>
     c48:	60 81       	ld	r22, Z
     c4a:	71 81       	ldd	r23, Z+1	; 0x01
     c4c:	66 83       	std	Z+6, r22	; 0x06
     c4e:	77 83       	std	Z+7, r23	; 0x07
     c50:	0c 94 c1 20 	jmp	0x4182	; 0x4182 <memcpy>
     c54:	08 95       	ret

00000c56 <prvUnlockQueue>:
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	8c 01       	movw	r16, r24
     c62:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c66:	ff 93       	push	r31
     c68:	f8 7f       	andi	r31, 0xF8	; 248
     c6a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c6e:	fc 01       	movw	r30, r24
     c70:	c2 a1       	ldd	r28, Z+34	; 0x22
     c72:	1c 16       	cp	r1, r28
     c74:	c4 f4       	brge	.+48     	; 0xca6 <prvUnlockQueue+0x50>
     c76:	fc 01       	movw	r30, r24
     c78:	83 89       	ldd	r24, Z+19	; 0x13
     c7a:	88 23       	and	r24, r24
     c7c:	a1 f0       	breq	.+40     	; 0xca6 <prvUnlockQueue+0x50>
     c7e:	78 01       	movw	r14, r16
     c80:	f3 e1       	ldi	r31, 0x13	; 19
     c82:	ef 0e       	add	r14, r31
     c84:	f1 1c       	adc	r15, r1
     c86:	06 c0       	rjmp	.+12     	; 0xc94 <prvUnlockQueue+0x3e>
     c88:	c1 50       	subi	r28, 0x01	; 1
     c8a:	69 f0       	breq	.+26     	; 0xca6 <prvUnlockQueue+0x50>
     c8c:	f8 01       	movw	r30, r16
     c8e:	83 89       	ldd	r24, Z+19	; 0x13
     c90:	88 23       	and	r24, r24
     c92:	49 f0       	breq	.+18     	; 0xca6 <prvUnlockQueue+0x50>
     c94:	c7 01       	movw	r24, r14
     c96:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xTaskRemoveFromEventList>
     c9a:	88 23       	and	r24, r24
     c9c:	a9 f3       	breq	.-22     	; 0xc88 <prvUnlockQueue+0x32>
     c9e:	0e 94 57 0e 	call	0x1cae	; 0x1cae <vTaskMissedYield>
     ca2:	c1 50       	subi	r28, 0x01	; 1
     ca4:	99 f7       	brne	.-26     	; 0xc8c <prvUnlockQueue+0x36>
     ca6:	8f ef       	ldi	r24, 0xFF	; 255
     ca8:	f8 01       	movw	r30, r16
     caa:	82 a3       	std	Z+34, r24	; 0x22
     cac:	ff 91       	pop	r31
     cae:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     cb2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     cb6:	ff 93       	push	r31
     cb8:	f8 7f       	andi	r31, 0xF8	; 248
     cba:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     cbe:	f8 01       	movw	r30, r16
     cc0:	c1 a1       	ldd	r28, Z+33	; 0x21
     cc2:	1c 16       	cp	r1, r28
     cc4:	c4 f4       	brge	.+48     	; 0xcf6 <prvUnlockQueue+0xa0>
     cc6:	f8 01       	movw	r30, r16
     cc8:	80 85       	ldd	r24, Z+8	; 0x08
     cca:	88 23       	and	r24, r24
     ccc:	a1 f0       	breq	.+40     	; 0xcf6 <prvUnlockQueue+0xa0>
     cce:	78 01       	movw	r14, r16
     cd0:	f8 e0       	ldi	r31, 0x08	; 8
     cd2:	ef 0e       	add	r14, r31
     cd4:	f1 1c       	adc	r15, r1
     cd6:	06 c0       	rjmp	.+12     	; 0xce4 <prvUnlockQueue+0x8e>
     cd8:	c1 50       	subi	r28, 0x01	; 1
     cda:	69 f0       	breq	.+26     	; 0xcf6 <prvUnlockQueue+0xa0>
     cdc:	f8 01       	movw	r30, r16
     cde:	80 85       	ldd	r24, Z+8	; 0x08
     ce0:	88 23       	and	r24, r24
     ce2:	49 f0       	breq	.+18     	; 0xcf6 <prvUnlockQueue+0xa0>
     ce4:	c7 01       	movw	r24, r14
     ce6:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xTaskRemoveFromEventList>
     cea:	88 23       	and	r24, r24
     cec:	a9 f3       	breq	.-22     	; 0xcd8 <prvUnlockQueue+0x82>
     cee:	0e 94 57 0e 	call	0x1cae	; 0x1cae <vTaskMissedYield>
     cf2:	c1 50       	subi	r28, 0x01	; 1
     cf4:	99 f7       	brne	.-26     	; 0xcdc <prvUnlockQueue+0x86>
     cf6:	8f ef       	ldi	r24, 0xFF	; 255
     cf8:	f8 01       	movw	r30, r16
     cfa:	81 a3       	std	Z+33, r24	; 0x21
     cfc:	ff 91       	pop	r31
     cfe:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	08 95       	ret

00000d0e <xQueueGenericReset>:
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	ec 01       	movw	r28, r24
     d14:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d18:	ff 93       	push	r31
     d1a:	f8 7f       	andi	r31, 0xF8	; 248
     d1c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d20:	28 81       	ld	r18, Y
     d22:	39 81       	ldd	r19, Y+1	; 0x01
     d24:	9f 8d       	ldd	r25, Y+31	; 0x1f
     d26:	48 a1       	ldd	r20, Y+32	; 0x20
     d28:	94 9f       	mul	r25, r20
     d2a:	c0 01       	movw	r24, r0
     d2c:	11 24       	eor	r1, r1
     d2e:	f9 01       	movw	r30, r18
     d30:	e8 0f       	add	r30, r24
     d32:	f9 1f       	adc	r31, r25
     d34:	ea 83       	std	Y+2, r30	; 0x02
     d36:	fb 83       	std	Y+3, r31	; 0x03
     d38:	1e 8e       	std	Y+30, r1	; 0x1e
     d3a:	2c 83       	std	Y+4, r18	; 0x04
     d3c:	3d 83       	std	Y+5, r19	; 0x05
     d3e:	84 1b       	sub	r24, r20
     d40:	91 09       	sbc	r25, r1
     d42:	82 0f       	add	r24, r18
     d44:	93 1f       	adc	r25, r19
     d46:	8e 83       	std	Y+6, r24	; 0x06
     d48:	9f 83       	std	Y+7, r25	; 0x07
     d4a:	8f ef       	ldi	r24, 0xFF	; 255
     d4c:	89 a3       	std	Y+33, r24	; 0x21
     d4e:	8a a3       	std	Y+34, r24	; 0x22
     d50:	61 11       	cpse	r22, r1
     d52:	13 c0       	rjmp	.+38     	; 0xd7a <xQueueGenericReset+0x6c>
     d54:	88 85       	ldd	r24, Y+8	; 0x08
     d56:	81 11       	cpse	r24, r1
     d58:	07 c0       	rjmp	.+14     	; 0xd68 <xQueueGenericReset+0x5a>
     d5a:	ff 91       	pop	r31
     d5c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	08 95       	ret
     d68:	ce 01       	movw	r24, r28
     d6a:	08 96       	adiw	r24, 0x08	; 8
     d6c:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xTaskRemoveFromEventList>
     d70:	88 23       	and	r24, r24
     d72:	99 f3       	breq	.-26     	; 0xd5a <xQueueGenericReset+0x4c>
     d74:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <vPortYield>
     d78:	f0 cf       	rjmp	.-32     	; 0xd5a <xQueueGenericReset+0x4c>
     d7a:	ce 01       	movw	r24, r28
     d7c:	08 96       	adiw	r24, 0x08	; 8
     d7e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
     d82:	ce 01       	movw	r24, r28
     d84:	43 96       	adiw	r24, 0x13	; 19
     d86:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
     d8a:	e7 cf       	rjmp	.-50     	; 0xd5a <xQueueGenericReset+0x4c>

00000d8c <xQueueGenericCreate>:
     d8c:	ff 92       	push	r15
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	08 2f       	mov	r16, r24
     d98:	16 2f       	mov	r17, r22
     d9a:	f4 2e       	mov	r15, r20
     d9c:	66 23       	and	r22, r22
     d9e:	d1 f0       	breq	.+52     	; 0xdd4 <xQueueGenericCreate+0x48>
     da0:	86 9f       	mul	r24, r22
     da2:	c0 01       	movw	r24, r0
     da4:	11 24       	eor	r1, r1
     da6:	85 96       	adiw	r24, 0x25	; 37
     da8:	0e 94 45 03 	call	0x68a	; 0x68a <pvPortMalloc>
     dac:	ec 01       	movw	r28, r24
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	51 f0       	breq	.+20     	; 0xdc6 <xQueueGenericCreate+0x3a>
     db2:	85 96       	adiw	r24, 0x25	; 37
     db4:	88 83       	st	Y, r24
     db6:	99 83       	std	Y+1, r25	; 0x01
     db8:	0f 8f       	std	Y+31, r16	; 0x1f
     dba:	18 a3       	std	Y+32, r17	; 0x20
     dbc:	61 e0       	ldi	r22, 0x01	; 1
     dbe:	ce 01       	movw	r24, r28
     dc0:	0e 94 87 06 	call	0xd0e	; 0xd0e <xQueueGenericReset>
     dc4:	fc a2       	std	Y+36, r15	; 0x24
     dc6:	ce 01       	movw	r24, r28
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	ff 90       	pop	r15
     dd2:	08 95       	ret
     dd4:	85 e2       	ldi	r24, 0x25	; 37
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 45 03 	call	0x68a	; 0x68a <pvPortMalloc>
     ddc:	ec 01       	movw	r28, r24
     dde:	89 2b       	or	r24, r25
     de0:	91 f3       	breq	.-28     	; 0xdc6 <xQueueGenericCreate+0x3a>
     de2:	c8 83       	st	Y, r28
     de4:	d9 83       	std	Y+1, r29	; 0x01
     de6:	0f 8f       	std	Y+31, r16	; 0x1f
     de8:	18 a3       	std	Y+32, r17	; 0x20
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	ce 01       	movw	r24, r28
     dee:	0e 94 87 06 	call	0xd0e	; 0xd0e <xQueueGenericReset>
     df2:	fc a2       	std	Y+36, r15	; 0x24
     df4:	ce 01       	movw	r24, r28
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	1f 91       	pop	r17
     dfc:	0f 91       	pop	r16
     dfe:	ff 90       	pop	r15
     e00:	08 95       	ret

00000e02 <xQueueGenericSend>:
     e02:	af 92       	push	r10
     e04:	bf 92       	push	r11
     e06:	cf 92       	push	r12
     e08:	df 92       	push	r13
     e0a:	ef 92       	push	r14
     e0c:	ff 92       	push	r15
     e0e:	0f 93       	push	r16
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	29 97       	sbiw	r28, 0x09	; 9
     e1a:	cd bf       	out	0x3d, r28	; 61
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	7c 01       	movw	r14, r24
     e20:	5b 01       	movw	r10, r22
     e22:	2e 83       	std	Y+6, r18	; 0x06
     e24:	3f 83       	std	Y+7, r19	; 0x07
     e26:	48 87       	std	Y+8, r20	; 0x08
     e28:	59 87       	std	Y+9, r21	; 0x09
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	6c 01       	movw	r12, r24
     e2e:	88 e0       	ldi	r24, 0x08	; 8
     e30:	c8 0e       	add	r12, r24
     e32:	d1 1c       	adc	r13, r1
     e34:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e38:	ff 93       	push	r31
     e3a:	f8 7f       	andi	r31, 0xF8	; 248
     e3c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e40:	f7 01       	movw	r30, r14
     e42:	96 8d       	ldd	r25, Z+30	; 0x1e
     e44:	87 8d       	ldd	r24, Z+31	; 0x1f
     e46:	98 17       	cp	r25, r24
     e48:	08 f4       	brcc	.+2      	; 0xe4c <xQueueGenericSend+0x4a>
     e4a:	63 c0       	rjmp	.+198    	; 0xf12 <xQueueGenericSend+0x110>
     e4c:	02 30       	cpi	r16, 0x02	; 2
     e4e:	09 f4       	brne	.+2      	; 0xe52 <xQueueGenericSend+0x50>
     e50:	60 c0       	rjmp	.+192    	; 0xf12 <xQueueGenericSend+0x110>
     e52:	8e 81       	ldd	r24, Y+6	; 0x06
     e54:	9f 81       	ldd	r25, Y+7	; 0x07
     e56:	a8 85       	ldd	r26, Y+8	; 0x08
     e58:	b9 85       	ldd	r27, Y+9	; 0x09
     e5a:	89 2b       	or	r24, r25
     e5c:	8a 2b       	or	r24, r26
     e5e:	8b 2b       	or	r24, r27
     e60:	09 f4       	brne	.+2      	; 0xe64 <xQueueGenericSend+0x62>
     e62:	73 c0       	rjmp	.+230    	; 0xf4a <xQueueGenericSend+0x148>
     e64:	22 23       	and	r18, r18
     e66:	09 f4       	brne	.+2      	; 0xe6a <xQueueGenericSend+0x68>
     e68:	4b c0       	rjmp	.+150    	; 0xf00 <xQueueGenericSend+0xfe>
     e6a:	ff 91       	pop	r31
     e6c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e70:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <vTaskSuspendAll>
     e74:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e78:	ff 93       	push	r31
     e7a:	f8 7f       	andi	r31, 0xF8	; 248
     e7c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e80:	f7 01       	movw	r30, r14
     e82:	81 a1       	ldd	r24, Z+33	; 0x21
     e84:	8f 3f       	cpi	r24, 0xFF	; 255
     e86:	09 f4       	brne	.+2      	; 0xe8a <xQueueGenericSend+0x88>
     e88:	42 c0       	rjmp	.+132    	; 0xf0e <xQueueGenericSend+0x10c>
     e8a:	f7 01       	movw	r30, r14
     e8c:	82 a1       	ldd	r24, Z+34	; 0x22
     e8e:	8f 3f       	cpi	r24, 0xFF	; 255
     e90:	09 f4       	brne	.+2      	; 0xe94 <xQueueGenericSend+0x92>
     e92:	3b c0       	rjmp	.+118    	; 0xf0a <xQueueGenericSend+0x108>
     e94:	ff 91       	pop	r31
     e96:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e9a:	be 01       	movw	r22, r28
     e9c:	6a 5f       	subi	r22, 0xFA	; 250
     e9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ea0:	ce 01       	movw	r24, r28
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <xTaskCheckForTimeOut>
     ea8:	81 11       	cpse	r24, r1
     eaa:	54 c0       	rjmp	.+168    	; 0xf54 <xQueueGenericSend+0x152>
     eac:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     eb0:	ff 93       	push	r31
     eb2:	f8 7f       	andi	r31, 0xF8	; 248
     eb4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     eb8:	f7 01       	movw	r30, r14
     eba:	96 8d       	ldd	r25, Z+30	; 0x1e
     ebc:	ff 91       	pop	r31
     ebe:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ec2:	f7 01       	movw	r30, r14
     ec4:	87 8d       	ldd	r24, Z+31	; 0x1f
     ec6:	98 13       	cpse	r25, r24
     ec8:	14 c0       	rjmp	.+40     	; 0xef2 <xQueueGenericSend+0xf0>
     eca:	4e 81       	ldd	r20, Y+6	; 0x06
     ecc:	5f 81       	ldd	r21, Y+7	; 0x07
     ece:	68 85       	ldd	r22, Y+8	; 0x08
     ed0:	79 85       	ldd	r23, Y+9	; 0x09
     ed2:	c6 01       	movw	r24, r12
     ed4:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <vTaskPlaceOnEventList>
     ed8:	c7 01       	movw	r24, r14
     eda:	0e 94 2b 06 	call	0xc56	; 0xc56 <prvUnlockQueue>
     ede:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <xTaskResumeAll>
     ee2:	88 23       	and	r24, r24
     ee4:	11 f0       	breq	.+4      	; 0xeea <xQueueGenericSend+0xe8>
     ee6:	21 e0       	ldi	r18, 0x01	; 1
     ee8:	a5 cf       	rjmp	.-182    	; 0xe34 <xQueueGenericSend+0x32>
     eea:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <vPortYield>
     eee:	21 e0       	ldi	r18, 0x01	; 1
     ef0:	a1 cf       	rjmp	.-190    	; 0xe34 <xQueueGenericSend+0x32>
     ef2:	c7 01       	movw	r24, r14
     ef4:	0e 94 2b 06 	call	0xc56	; 0xc56 <prvUnlockQueue>
     ef8:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <xTaskResumeAll>
     efc:	21 e0       	ldi	r18, 0x01	; 1
     efe:	9a cf       	rjmp	.-204    	; 0xe34 <xQueueGenericSend+0x32>
     f00:	ce 01       	movw	r24, r28
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <vTaskInternalSetTimeOutState>
     f08:	b0 cf       	rjmp	.-160    	; 0xe6a <xQueueGenericSend+0x68>
     f0a:	12 a2       	std	Z+34, r1	; 0x22
     f0c:	c3 cf       	rjmp	.-122    	; 0xe94 <xQueueGenericSend+0x92>
     f0e:	11 a2       	std	Z+33, r1	; 0x21
     f10:	bc cf       	rjmp	.-136    	; 0xe8a <xQueueGenericSend+0x88>
     f12:	40 2f       	mov	r20, r16
     f14:	b5 01       	movw	r22, r10
     f16:	c7 01       	movw	r24, r14
     f18:	0e 94 c2 05 	call	0xb84	; 0xb84 <prvCopyDataToQueue>
     f1c:	f7 01       	movw	r30, r14
     f1e:	93 89       	ldd	r25, Z+19	; 0x13
     f20:	91 11       	cpse	r25, r1
     f22:	22 c0       	rjmp	.+68     	; 0xf68 <xQueueGenericSend+0x166>
     f24:	81 11       	cpse	r24, r1
     f26:	1d c0       	rjmp	.+58     	; 0xf62 <xQueueGenericSend+0x160>
     f28:	ff 91       	pop	r31
     f2a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	29 96       	adiw	r28, 0x09	; 9
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	0f 91       	pop	r16
     f3c:	ff 90       	pop	r15
     f3e:	ef 90       	pop	r14
     f40:	df 90       	pop	r13
     f42:	cf 90       	pop	r12
     f44:	bf 90       	pop	r11
     f46:	af 90       	pop	r10
     f48:	08 95       	ret
     f4a:	ff 91       	pop	r31
     f4c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	ee cf       	rjmp	.-36     	; 0xf30 <xQueueGenericSend+0x12e>
     f54:	c7 01       	movw	r24, r14
     f56:	0e 94 2b 06 	call	0xc56	; 0xc56 <prvUnlockQueue>
     f5a:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <xTaskResumeAll>
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	e7 cf       	rjmp	.-50     	; 0xf30 <xQueueGenericSend+0x12e>
     f62:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <vPortYield>
     f66:	e0 cf       	rjmp	.-64     	; 0xf28 <xQueueGenericSend+0x126>
     f68:	c7 01       	movw	r24, r14
     f6a:	43 96       	adiw	r24, 0x13	; 19
     f6c:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xTaskRemoveFromEventList>
     f70:	88 23       	and	r24, r24
     f72:	d1 f2       	breq	.-76     	; 0xf28 <xQueueGenericSend+0x126>
     f74:	f6 cf       	rjmp	.-20     	; 0xf62 <xQueueGenericSend+0x160>

00000f76 <xQueueGenericSendFromISR>:
     f76:	af 92       	push	r10
     f78:	bf 92       	push	r11
     f7a:	cf 92       	push	r12
     f7c:	df 92       	push	r13
     f7e:	ff 92       	push	r15
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	ec 01       	movw	r28, r24
     f8a:	6b 01       	movw	r12, r22
     f8c:	5a 01       	movw	r10, r20
     f8e:	02 2f       	mov	r16, r18
     f90:	0e 94 0b 04 	call	0x816	; 0x816 <_portSetInterruptMaskFromIsr>
     f94:	f8 2e       	mov	r15, r24
     f96:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f98:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f9a:	98 17       	cp	r25, r24
     f9c:	78 f0       	brcs	.+30     	; 0xfbc <xQueueGenericSendFromISR+0x46>
     f9e:	02 30       	cpi	r16, 0x02	; 2
     fa0:	69 f0       	breq	.+26     	; 0xfbc <xQueueGenericSendFromISR+0x46>
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	f0 92 a2 00 	sts	0x00A2, r15	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	ff 90       	pop	r15
     fb2:	df 90       	pop	r13
     fb4:	cf 90       	pop	r12
     fb6:	bf 90       	pop	r11
     fb8:	af 90       	pop	r10
     fba:	08 95       	ret
     fbc:	1a a1       	ldd	r17, Y+34	; 0x22
     fbe:	40 2f       	mov	r20, r16
     fc0:	b6 01       	movw	r22, r12
     fc2:	ce 01       	movw	r24, r28
     fc4:	0e 94 c2 05 	call	0xb84	; 0xb84 <prvCopyDataToQueue>
     fc8:	1f 3f       	cpi	r17, 0xFF	; 255
     fca:	21 f0       	breq	.+8      	; 0xfd4 <xQueueGenericSendFromISR+0x5e>
     fcc:	1f 5f       	subi	r17, 0xFF	; 255
     fce:	1a a3       	std	Y+34, r17	; 0x22
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	e8 cf       	rjmp	.-48     	; 0xfa4 <xQueueGenericSendFromISR+0x2e>
     fd4:	8b 89       	ldd	r24, Y+19	; 0x13
     fd6:	88 23       	and	r24, r24
     fd8:	d9 f3       	breq	.-10     	; 0xfd0 <xQueueGenericSendFromISR+0x5a>
     fda:	ce 01       	movw	r24, r28
     fdc:	43 96       	adiw	r24, 0x13	; 19
     fde:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xTaskRemoveFromEventList>
     fe2:	88 23       	and	r24, r24
     fe4:	a9 f3       	breq	.-22     	; 0xfd0 <xQueueGenericSendFromISR+0x5a>
     fe6:	a1 14       	cp	r10, r1
     fe8:	b1 04       	cpc	r11, r1
     fea:	91 f3       	breq	.-28     	; 0xfd0 <xQueueGenericSendFromISR+0x5a>
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	f5 01       	movw	r30, r10
     ff0:	80 83       	st	Z, r24
     ff2:	d8 cf       	rjmp	.-80     	; 0xfa4 <xQueueGenericSendFromISR+0x2e>

00000ff4 <xQueueReceive>:
     ff4:	af 92       	push	r10
     ff6:	bf 92       	push	r11
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	29 97       	sbiw	r28, 0x09	; 9
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	8c 01       	movw	r16, r24
    1012:	5b 01       	movw	r10, r22
    1014:	2e 83       	std	Y+6, r18	; 0x06
    1016:	3f 83       	std	Y+7, r19	; 0x07
    1018:	48 87       	std	Y+8, r20	; 0x08
    101a:	59 87       	std	Y+9, r21	; 0x09
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	6c 01       	movw	r12, r24
    1020:	83 e1       	ldi	r24, 0x13	; 19
    1022:	c8 0e       	add	r12, r24
    1024:	d1 1c       	adc	r13, r1
    1026:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    102a:	ff 93       	push	r31
    102c:	f8 7f       	andi	r31, 0xF8	; 248
    102e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1032:	f8 01       	movw	r30, r16
    1034:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1036:	f1 10       	cpse	r15, r1
    1038:	7d c0       	rjmp	.+250    	; 0x1134 <xQueueReceive+0x140>
    103a:	8e 81       	ldd	r24, Y+6	; 0x06
    103c:	9f 81       	ldd	r25, Y+7	; 0x07
    103e:	a8 85       	ldd	r26, Y+8	; 0x08
    1040:	b9 85       	ldd	r27, Y+9	; 0x09
    1042:	89 2b       	or	r24, r25
    1044:	8a 2b       	or	r24, r26
    1046:	8b 2b       	or	r24, r27
    1048:	09 f4       	brne	.+2      	; 0x104c <xQueueReceive+0x58>
    104a:	83 c0       	rjmp	.+262    	; 0x1152 <xQueueReceive+0x15e>
    104c:	22 23       	and	r18, r18
    104e:	09 f4       	brne	.+2      	; 0x1052 <xQueueReceive+0x5e>
    1050:	68 c0       	rjmp	.+208    	; 0x1122 <xQueueReceive+0x12e>
    1052:	ff 91       	pop	r31
    1054:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1058:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <vTaskSuspendAll>
    105c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1060:	ff 93       	push	r31
    1062:	f8 7f       	andi	r31, 0xF8	; 248
    1064:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1068:	f8 01       	movw	r30, r16
    106a:	81 a1       	ldd	r24, Z+33	; 0x21
    106c:	8f 3f       	cpi	r24, 0xFF	; 255
    106e:	09 f4       	brne	.+2      	; 0x1072 <xQueueReceive+0x7e>
    1070:	5f c0       	rjmp	.+190    	; 0x1130 <xQueueReceive+0x13c>
    1072:	f8 01       	movw	r30, r16
    1074:	82 a1       	ldd	r24, Z+34	; 0x22
    1076:	8f 3f       	cpi	r24, 0xFF	; 255
    1078:	09 f4       	brne	.+2      	; 0x107c <xQueueReceive+0x88>
    107a:	58 c0       	rjmp	.+176    	; 0x112c <xQueueReceive+0x138>
    107c:	ff 91       	pop	r31
    107e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1082:	be 01       	movw	r22, r28
    1084:	6a 5f       	subi	r22, 0xFA	; 250
    1086:	7f 4f       	sbci	r23, 0xFF	; 255
    1088:	ce 01       	movw	r24, r28
    108a:	01 96       	adiw	r24, 0x01	; 1
    108c:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <xTaskCheckForTimeOut>
    1090:	81 11       	cpse	r24, r1
    1092:	28 c0       	rjmp	.+80     	; 0x10e4 <xQueueReceive+0xf0>
    1094:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1098:	ff 93       	push	r31
    109a:	f8 7f       	andi	r31, 0xF8	; 248
    109c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    10a0:	f8 01       	movw	r30, r16
    10a2:	86 8d       	ldd	r24, Z+30	; 0x1e
    10a4:	ff 91       	pop	r31
    10a6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    10aa:	81 11       	cpse	r24, r1
    10ac:	14 c0       	rjmp	.+40     	; 0x10d6 <xQueueReceive+0xe2>
    10ae:	4e 81       	ldd	r20, Y+6	; 0x06
    10b0:	5f 81       	ldd	r21, Y+7	; 0x07
    10b2:	68 85       	ldd	r22, Y+8	; 0x08
    10b4:	79 85       	ldd	r23, Y+9	; 0x09
    10b6:	c6 01       	movw	r24, r12
    10b8:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <vTaskPlaceOnEventList>
    10bc:	c8 01       	movw	r24, r16
    10be:	0e 94 2b 06 	call	0xc56	; 0xc56 <prvUnlockQueue>
    10c2:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <xTaskResumeAll>
    10c6:	88 23       	and	r24, r24
    10c8:	11 f0       	breq	.+4      	; 0x10ce <xQueueReceive+0xda>
    10ca:	21 e0       	ldi	r18, 0x01	; 1
    10cc:	ac cf       	rjmp	.-168    	; 0x1026 <xQueueReceive+0x32>
    10ce:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <vPortYield>
    10d2:	21 e0       	ldi	r18, 0x01	; 1
    10d4:	a8 cf       	rjmp	.-176    	; 0x1026 <xQueueReceive+0x32>
    10d6:	c8 01       	movw	r24, r16
    10d8:	0e 94 2b 06 	call	0xc56	; 0xc56 <prvUnlockQueue>
    10dc:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <xTaskResumeAll>
    10e0:	21 e0       	ldi	r18, 0x01	; 1
    10e2:	a1 cf       	rjmp	.-190    	; 0x1026 <xQueueReceive+0x32>
    10e4:	c8 01       	movw	r24, r16
    10e6:	0e 94 2b 06 	call	0xc56	; 0xc56 <prvUnlockQueue>
    10ea:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <xTaskResumeAll>
    10ee:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    10f2:	ff 93       	push	r31
    10f4:	f8 7f       	andi	r31, 0xF8	; 248
    10f6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    10fa:	f8 01       	movw	r30, r16
    10fc:	86 8d       	ldd	r24, Z+30	; 0x1e
    10fe:	ff 91       	pop	r31
    1100:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1104:	81 11       	cpse	r24, r1
    1106:	e1 cf       	rjmp	.-62     	; 0x10ca <xQueueReceive+0xd6>
    1108:	29 96       	adiw	r28, 0x09	; 9
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	ff 90       	pop	r15
    1118:	df 90       	pop	r13
    111a:	cf 90       	pop	r12
    111c:	bf 90       	pop	r11
    111e:	af 90       	pop	r10
    1120:	08 95       	ret
    1122:	ce 01       	movw	r24, r28
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <vTaskInternalSetTimeOutState>
    112a:	93 cf       	rjmp	.-218    	; 0x1052 <xQueueReceive+0x5e>
    112c:	12 a2       	std	Z+34, r1	; 0x22
    112e:	a6 cf       	rjmp	.-180    	; 0x107c <xQueueReceive+0x88>
    1130:	11 a2       	std	Z+33, r1	; 0x21
    1132:	9f cf       	rjmp	.-194    	; 0x1072 <xQueueReceive+0x7e>
    1134:	b5 01       	movw	r22, r10
    1136:	c8 01       	movw	r24, r16
    1138:	0e 94 13 06 	call	0xc26	; 0xc26 <prvCopyDataFromQueue>
    113c:	fa 94       	dec	r15
    113e:	f8 01       	movw	r30, r16
    1140:	f6 8e       	std	Z+30, r15	; 0x1e
    1142:	80 85       	ldd	r24, Z+8	; 0x08
    1144:	81 11       	cpse	r24, r1
    1146:	0a c0       	rjmp	.+20     	; 0x115c <xQueueReceive+0x168>
    1148:	ff 91       	pop	r31
    114a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	db cf       	rjmp	.-74     	; 0x1108 <xQueueReceive+0x114>
    1152:	ff 91       	pop	r31
    1154:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	d6 cf       	rjmp	.-84     	; 0x1108 <xQueueReceive+0x114>
    115c:	c8 01       	movw	r24, r16
    115e:	08 96       	adiw	r24, 0x08	; 8
    1160:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xTaskRemoveFromEventList>
    1164:	88 23       	and	r24, r24
    1166:	81 f3       	breq	.-32     	; 0x1148 <xQueueReceive+0x154>
    1168:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <vPortYield>
    116c:	ed cf       	rjmp	.-38     	; 0x1148 <xQueueReceive+0x154>

0000116e <uxQueueMessagesWaiting>:
    116e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1172:	ff 93       	push	r31
    1174:	f8 7f       	andi	r31, 0xF8	; 248
    1176:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    117a:	fc 01       	movw	r30, r24
    117c:	86 8d       	ldd	r24, Z+30	; 0x1e
    117e:	ff 91       	pop	r31
    1180:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1184:	08 95       	ret

00001186 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    118c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1190:	ff 93       	push	r31
    1192:	f8 7f       	andi	r31, 0xF8	; 248
    1194:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1198:	89 a1       	ldd	r24, Y+33	; 0x21
    119a:	8f 3f       	cpi	r24, 0xFF	; 255
    119c:	a1 f0       	breq	.+40     	; 0x11c6 <vQueueWaitForMessageRestricted+0x40>
    119e:	8a a1       	ldd	r24, Y+34	; 0x22
    11a0:	8f 3f       	cpi	r24, 0xFF	; 255
    11a2:	79 f0       	breq	.+30     	; 0x11c2 <vQueueWaitForMessageRestricted+0x3c>
    11a4:	ff 91       	pop	r31
    11a6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    11aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11ac:	81 11       	cpse	r24, r1
    11ae:	04 c0       	rjmp	.+8      	; 0x11b8 <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    11b0:	ce 01       	movw	r24, r28
    11b2:	43 96       	adiw	r24, 0x13	; 19
    11b4:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    11b8:	ce 01       	movw	r24, r28
	}
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    11be:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <prvUnlockQueue>
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    11c2:	1a a2       	std	Y+34, r1	; 0x22
    11c4:	ef cf       	rjmp	.-34     	; 0x11a4 <vQueueWaitForMessageRestricted+0x1e>
    11c6:	19 a2       	std	Y+33, r1	; 0x21
    11c8:	ea cf       	rjmp	.-44     	; 0x119e <vQueueWaitForMessageRestricted+0x18>

000011ca <prvIdleTask>:
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;

		return xReturn;
	}
    11ca:	80 91 82 2d 	lds	r24, 0x2D82	; 0x802d82 <pxReadyTasksLists>
    11ce:	82 30       	cpi	r24, 0x02	; 2
    11d0:	10 f0       	brcs	.+4      	; 0x11d6 <prvIdleTask+0xc>
    11d2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <vPortYield>
    11d6:	0e 94 88 12 	call	0x2510	; 0x2510 <vApplicationIdleHook>
    11da:	f7 cf       	rjmp	.-18     	; 0x11ca <prvIdleTask>

000011dc <prvResetNextTaskUnblockTime.part.1>:
    11dc:	e0 91 6a 2d 	lds	r30, 0x2D6A	; 0x802d6a <pxDelayedTaskList>
    11e0:	f0 91 6b 2d 	lds	r31, 0x2D6B	; 0x802d6b <pxDelayedTaskList+0x1>
    11e4:	07 80       	ldd	r0, Z+7	; 0x07
    11e6:	f0 85       	ldd	r31, Z+8	; 0x08
    11e8:	e0 2d       	mov	r30, r0
    11ea:	00 84       	ldd	r0, Z+8	; 0x08
    11ec:	f1 85       	ldd	r31, Z+9	; 0x09
    11ee:	e0 2d       	mov	r30, r0
    11f0:	82 81       	ldd	r24, Z+2	; 0x02
    11f2:	93 81       	ldd	r25, Z+3	; 0x03
    11f4:	a4 81       	ldd	r26, Z+4	; 0x04
    11f6:	b5 81       	ldd	r27, Z+5	; 0x05
    11f8:	80 93 43 2d 	sts	0x2D43, r24	; 0x802d43 <xNextTaskUnblockTime>
    11fc:	90 93 44 2d 	sts	0x2D44, r25	; 0x802d44 <xNextTaskUnblockTime+0x1>
    1200:	a0 93 45 2d 	sts	0x2D45, r26	; 0x802d45 <xNextTaskUnblockTime+0x2>
    1204:	b0 93 46 2d 	sts	0x2D46, r27	; 0x802d46 <xNextTaskUnblockTime+0x3>
    1208:	08 95       	ret

0000120a <prvAddCurrentTaskToDelayedList>:
    120a:	8f 92       	push	r8
    120c:	9f 92       	push	r9
    120e:	af 92       	push	r10
    1210:	bf 92       	push	r11
    1212:	cf 92       	push	r12
    1214:	df 92       	push	r13
    1216:	ef 92       	push	r14
    1218:	ff 92       	push	r15
    121a:	cf 93       	push	r28
    121c:	6b 01       	movw	r12, r22
    121e:	7c 01       	movw	r14, r24
    1220:	c4 2f       	mov	r28, r20
    1222:	80 90 4d 2d 	lds	r8, 0x2D4D	; 0x802d4d <xTickCount>
    1226:	90 90 4e 2d 	lds	r9, 0x2D4E	; 0x802d4e <xTickCount+0x1>
    122a:	a0 90 4f 2d 	lds	r10, 0x2D4F	; 0x802d4f <xTickCount+0x2>
    122e:	b0 90 50 2d 	lds	r11, 0x2D50	; 0x802d50 <xTickCount+0x3>
    1232:	80 91 ae 2d 	lds	r24, 0x2DAE	; 0x802dae <pxCurrentTCB>
    1236:	90 91 af 2d 	lds	r25, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    123a:	02 96       	adiw	r24, 0x02	; 2
    123c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <uxListRemove>
    1240:	8f ef       	ldi	r24, 0xFF	; 255
    1242:	c8 16       	cp	r12, r24
    1244:	d8 06       	cpc	r13, r24
    1246:	e8 06       	cpc	r14, r24
    1248:	f8 06       	cpc	r15, r24
    124a:	09 f4       	brne	.+2      	; 0x124e <prvAddCurrentTaskToDelayedList+0x44>
    124c:	4d c0       	rjmp	.+154    	; 0x12e8 <prvAddCurrentTaskToDelayedList+0xde>
    124e:	c8 0c       	add	r12, r8
    1250:	d9 1c       	adc	r13, r9
    1252:	ea 1c       	adc	r14, r10
    1254:	fb 1c       	adc	r15, r11
    1256:	e0 91 ae 2d 	lds	r30, 0x2DAE	; 0x802dae <pxCurrentTCB>
    125a:	f0 91 af 2d 	lds	r31, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    125e:	c2 82       	std	Z+2, r12	; 0x02
    1260:	d3 82       	std	Z+3, r13	; 0x03
    1262:	e4 82       	std	Z+4, r14	; 0x04
    1264:	f5 82       	std	Z+5, r15	; 0x05
    1266:	60 91 ae 2d 	lds	r22, 0x2DAE	; 0x802dae <pxCurrentTCB>
    126a:	70 91 af 2d 	lds	r23, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    126e:	c8 14       	cp	r12, r8
    1270:	d9 04       	cpc	r13, r9
    1272:	ea 04       	cpc	r14, r10
    1274:	fb 04       	cpc	r15, r11
    1276:	38 f1       	brcs	.+78     	; 0x12c6 <prvAddCurrentTaskToDelayedList+0xbc>
    1278:	80 91 6a 2d 	lds	r24, 0x2D6A	; 0x802d6a <pxDelayedTaskList>
    127c:	90 91 6b 2d 	lds	r25, 0x2D6B	; 0x802d6b <pxDelayedTaskList+0x1>
    1280:	6e 5f       	subi	r22, 0xFE	; 254
    1282:	7f 4f       	sbci	r23, 0xFF	; 255
    1284:	0e 94 a4 03 	call	0x748	; 0x748 <vListInsert>
    1288:	80 91 43 2d 	lds	r24, 0x2D43	; 0x802d43 <xNextTaskUnblockTime>
    128c:	90 91 44 2d 	lds	r25, 0x2D44	; 0x802d44 <xNextTaskUnblockTime+0x1>
    1290:	a0 91 45 2d 	lds	r26, 0x2D45	; 0x802d45 <xNextTaskUnblockTime+0x2>
    1294:	b0 91 46 2d 	lds	r27, 0x2D46	; 0x802d46 <xNextTaskUnblockTime+0x3>
    1298:	c8 16       	cp	r12, r24
    129a:	d9 06       	cpc	r13, r25
    129c:	ea 06       	cpc	r14, r26
    129e:	fb 06       	cpc	r15, r27
    12a0:	40 f4       	brcc	.+16     	; 0x12b2 <prvAddCurrentTaskToDelayedList+0xa8>
    12a2:	c0 92 43 2d 	sts	0x2D43, r12	; 0x802d43 <xNextTaskUnblockTime>
    12a6:	d0 92 44 2d 	sts	0x2D44, r13	; 0x802d44 <xNextTaskUnblockTime+0x1>
    12aa:	e0 92 45 2d 	sts	0x2D45, r14	; 0x802d45 <xNextTaskUnblockTime+0x2>
    12ae:	f0 92 46 2d 	sts	0x2D46, r15	; 0x802d46 <xNextTaskUnblockTime+0x3>
    12b2:	cf 91       	pop	r28
    12b4:	ff 90       	pop	r15
    12b6:	ef 90       	pop	r14
    12b8:	df 90       	pop	r13
    12ba:	cf 90       	pop	r12
    12bc:	bf 90       	pop	r11
    12be:	af 90       	pop	r10
    12c0:	9f 90       	pop	r9
    12c2:	8f 90       	pop	r8
    12c4:	08 95       	ret
    12c6:	80 91 68 2d 	lds	r24, 0x2D68	; 0x802d68 <pxOverflowDelayedTaskList>
    12ca:	90 91 69 2d 	lds	r25, 0x2D69	; 0x802d69 <pxOverflowDelayedTaskList+0x1>
    12ce:	6e 5f       	subi	r22, 0xFE	; 254
    12d0:	7f 4f       	sbci	r23, 0xFF	; 255
    12d2:	cf 91       	pop	r28
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	df 90       	pop	r13
    12da:	cf 90       	pop	r12
    12dc:	bf 90       	pop	r11
    12de:	af 90       	pop	r10
    12e0:	9f 90       	pop	r9
    12e2:	8f 90       	pop	r8
    12e4:	0c 94 a4 03 	jmp	0x748	; 0x748 <vListInsert>
    12e8:	cc 23       	and	r28, r28
    12ea:	09 f4       	brne	.+2      	; 0x12ee <prvAddCurrentTaskToDelayedList+0xe4>
    12ec:	b0 cf       	rjmp	.-160    	; 0x124e <prvAddCurrentTaskToDelayedList+0x44>
    12ee:	60 91 ae 2d 	lds	r22, 0x2DAE	; 0x802dae <pxCurrentTCB>
    12f2:	70 91 af 2d 	lds	r23, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    12f6:	6e 5f       	subi	r22, 0xFE	; 254
    12f8:	7f 4f       	sbci	r23, 0xFF	; 255
    12fa:	82 e5       	ldi	r24, 0x52	; 82
    12fc:	9d e2       	ldi	r25, 0x2D	; 45
    12fe:	cf 91       	pop	r28
    1300:	ff 90       	pop	r15
    1302:	ef 90       	pop	r14
    1304:	df 90       	pop	r13
    1306:	cf 90       	pop	r12
    1308:	bf 90       	pop	r11
    130a:	af 90       	pop	r10
    130c:	9f 90       	pop	r9
    130e:	8f 90       	pop	r8
    1310:	0c 94 83 03 	jmp	0x706	; 0x706 <vListInsertEnd>

00001314 <vTaskSwitchContext.part.4>:
    1314:	10 92 49 2d 	sts	0x2D49, r1	; 0x802d49 <xYieldPending>
    1318:	e0 91 ae 2d 	lds	r30, 0x2DAE	; 0x802dae <pxCurrentTCB>
    131c:	f0 91 af 2d 	lds	r31, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    1320:	03 8c       	ldd	r0, Z+27	; 0x1b
    1322:	f4 8d       	ldd	r31, Z+28	; 0x1c
    1324:	e0 2d       	mov	r30, r0
    1326:	80 81       	ld	r24, Z
    1328:	91 81       	ldd	r25, Z+1	; 0x01
    132a:	a2 81       	ldd	r26, Z+2	; 0x02
    132c:	b3 81       	ldd	r27, Z+3	; 0x03
    132e:	85 3a       	cpi	r24, 0xA5	; 165
    1330:	95 4a       	sbci	r25, 0xA5	; 165
    1332:	a5 4a       	sbci	r26, 0xA5	; 165
    1334:	b5 4a       	sbci	r27, 0xA5	; 165
    1336:	09 f4       	brne	.+2      	; 0x133a <vTaskSwitchContext.part.4+0x26>
    1338:	49 c0       	rjmp	.+146    	; 0x13cc <vTaskSwitchContext.part.4+0xb8>
    133a:	60 91 ae 2d 	lds	r22, 0x2DAE	; 0x802dae <pxCurrentTCB>
    133e:	70 91 af 2d 	lds	r23, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    1342:	80 91 ae 2d 	lds	r24, 0x2DAE	; 0x802dae <pxCurrentTCB>
    1346:	90 91 af 2d 	lds	r25, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    134a:	63 5e       	subi	r22, 0xE3	; 227
    134c:	7f 4f       	sbci	r23, 0xFF	; 255
    134e:	0e 94 ba 01 	call	0x374	; 0x374 <vApplicationStackOverflowHook>
    1352:	80 91 4c 2d 	lds	r24, 0x2D4C	; 0x802d4c <uxTopReadyPriority>
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	9b e0       	ldi	r25, 0x0B	; 11
    135c:	89 9f       	mul	r24, r25
    135e:	f0 01       	movw	r30, r0
    1360:	11 24       	eor	r1, r1
    1362:	ee 57       	subi	r30, 0x7E	; 126
    1364:	f2 4d       	sbci	r31, 0xD2	; 210
    1366:	90 81       	ld	r25, Z
    1368:	91 11       	cpse	r25, r1
    136a:	0e c0       	rjmp	.+28     	; 0x1388 <vTaskSwitchContext.part.4+0x74>
    136c:	4b e0       	ldi	r20, 0x0B	; 11
    136e:	81 50       	subi	r24, 0x01	; 1
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	42 9f       	mul	r20, r18
    1376:	f0 01       	movw	r30, r0
    1378:	43 9f       	mul	r20, r19
    137a:	f0 0d       	add	r31, r0
    137c:	11 24       	eor	r1, r1
    137e:	ee 57       	subi	r30, 0x7E	; 126
    1380:	f2 4d       	sbci	r31, 0xD2	; 210
    1382:	90 81       	ld	r25, Z
    1384:	99 23       	and	r25, r25
    1386:	99 f3       	breq	.-26     	; 0x136e <vTaskSwitchContext.part.4+0x5a>
    1388:	9b e0       	ldi	r25, 0x0B	; 11
    138a:	92 9f       	mul	r25, r18
    138c:	a0 01       	movw	r20, r0
    138e:	93 9f       	mul	r25, r19
    1390:	50 0d       	add	r21, r0
    1392:	11 24       	eor	r1, r1
    1394:	da 01       	movw	r26, r20
    1396:	ae 57       	subi	r26, 0x7E	; 126
    1398:	b2 4d       	sbci	r27, 0xD2	; 210
    139a:	11 96       	adiw	r26, 0x01	; 1
    139c:	ed 91       	ld	r30, X+
    139e:	fc 91       	ld	r31, X
    13a0:	12 97       	sbiw	r26, 0x02	; 2
    13a2:	04 80       	ldd	r0, Z+4	; 0x04
    13a4:	f5 81       	ldd	r31, Z+5	; 0x05
    13a6:	e0 2d       	mov	r30, r0
    13a8:	11 96       	adiw	r26, 0x01	; 1
    13aa:	ed 93       	st	X+, r30
    13ac:	fc 93       	st	X, r31
    13ae:	12 97       	sbiw	r26, 0x02	; 2
    13b0:	4b 57       	subi	r20, 0x7B	; 123
    13b2:	52 4d       	sbci	r21, 0xD2	; 210
    13b4:	e4 17       	cp	r30, r20
    13b6:	f5 07       	cpc	r31, r21
    13b8:	41 f1       	breq	.+80     	; 0x140a <vTaskSwitchContext.part.4+0xf6>
    13ba:	20 85       	ldd	r18, Z+8	; 0x08
    13bc:	31 85       	ldd	r19, Z+9	; 0x09
    13be:	20 93 ae 2d 	sts	0x2DAE, r18	; 0x802dae <pxCurrentTCB>
    13c2:	30 93 af 2d 	sts	0x2DAF, r19	; 0x802daf <pxCurrentTCB+0x1>
    13c6:	80 93 4c 2d 	sts	0x2D4C, r24	; 0x802d4c <uxTopReadyPriority>
    13ca:	08 95       	ret
    13cc:	84 81       	ldd	r24, Z+4	; 0x04
    13ce:	95 81       	ldd	r25, Z+5	; 0x05
    13d0:	a6 81       	ldd	r26, Z+6	; 0x06
    13d2:	b7 81       	ldd	r27, Z+7	; 0x07
    13d4:	85 3a       	cpi	r24, 0xA5	; 165
    13d6:	95 4a       	sbci	r25, 0xA5	; 165
    13d8:	a5 4a       	sbci	r26, 0xA5	; 165
    13da:	b5 4a       	sbci	r27, 0xA5	; 165
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <vTaskSwitchContext.part.4+0xcc>
    13de:	ad cf       	rjmp	.-166    	; 0x133a <vTaskSwitchContext.part.4+0x26>
    13e0:	80 85       	ldd	r24, Z+8	; 0x08
    13e2:	91 85       	ldd	r25, Z+9	; 0x09
    13e4:	a2 85       	ldd	r26, Z+10	; 0x0a
    13e6:	b3 85       	ldd	r27, Z+11	; 0x0b
    13e8:	85 3a       	cpi	r24, 0xA5	; 165
    13ea:	95 4a       	sbci	r25, 0xA5	; 165
    13ec:	a5 4a       	sbci	r26, 0xA5	; 165
    13ee:	b5 4a       	sbci	r27, 0xA5	; 165
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <vTaskSwitchContext.part.4+0xe0>
    13f2:	a3 cf       	rjmp	.-186    	; 0x133a <vTaskSwitchContext.part.4+0x26>
    13f4:	84 85       	ldd	r24, Z+12	; 0x0c
    13f6:	95 85       	ldd	r25, Z+13	; 0x0d
    13f8:	a6 85       	ldd	r26, Z+14	; 0x0e
    13fa:	b7 85       	ldd	r27, Z+15	; 0x0f
    13fc:	85 3a       	cpi	r24, 0xA5	; 165
    13fe:	95 4a       	sbci	r25, 0xA5	; 165
    1400:	a5 4a       	sbci	r26, 0xA5	; 165
    1402:	b5 4a       	sbci	r27, 0xA5	; 165
    1404:	09 f0       	breq	.+2      	; 0x1408 <vTaskSwitchContext.part.4+0xf4>
    1406:	99 cf       	rjmp	.-206    	; 0x133a <vTaskSwitchContext.part.4+0x26>
    1408:	a4 cf       	rjmp	.-184    	; 0x1352 <vTaskSwitchContext.part.4+0x3e>
    140a:	04 80       	ldd	r0, Z+4	; 0x04
    140c:	f5 81       	ldd	r31, Z+5	; 0x05
    140e:	e0 2d       	mov	r30, r0
    1410:	11 96       	adiw	r26, 0x01	; 1
    1412:	ed 93       	st	X+, r30
    1414:	fc 93       	st	X, r31
    1416:	12 97       	sbiw	r26, 0x02	; 2
    1418:	d0 cf       	rjmp	.-96     	; 0x13ba <vTaskSwitchContext.part.4+0xa6>

0000141a <xTaskCreate>:
    141a:	5f 92       	push	r5
    141c:	6f 92       	push	r6
    141e:	7f 92       	push	r7
    1420:	8f 92       	push	r8
    1422:	9f 92       	push	r9
    1424:	af 92       	push	r10
    1426:	bf 92       	push	r11
    1428:	cf 92       	push	r12
    142a:	df 92       	push	r13
    142c:	ef 92       	push	r14
    142e:	ff 92       	push	r15
    1430:	0f 93       	push	r16
    1432:	1f 93       	push	r17
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    1438:	4c 01       	movw	r8, r24
    143a:	76 2e       	mov	r7, r22
    143c:	67 2e       	mov	r6, r23
    143e:	6a 01       	movw	r12, r20
    1440:	59 01       	movw	r10, r18
    1442:	50 2e       	mov	r5, r16
    1444:	ca 01       	movw	r24, r20
    1446:	0e 94 45 03 	call	0x68a	; 0x68a <pvPortMalloc>
    144a:	8c 01       	movw	r16, r24
    144c:	89 2b       	or	r24, r25
    144e:	09 f4       	brne	.+2      	; 0x1452 <xTaskCreate+0x38>
    1450:	f4 c0       	rjmp	.+488    	; 0x163a <xTaskCreate+0x220>
    1452:	8c e2       	ldi	r24, 0x2C	; 44
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 45 03 	call	0x68a	; 0x68a <pvPortMalloc>
    145a:	ec 01       	movw	r28, r24
    145c:	89 2b       	or	r24, r25
    145e:	09 f4       	brne	.+2      	; 0x1462 <xTaskCreate+0x48>
    1460:	e9 c0       	rjmp	.+466    	; 0x1634 <xTaskCreate+0x21a>
    1462:	0b 8f       	std	Y+27, r16	; 0x1b
    1464:	1c 8f       	std	Y+28, r17	; 0x1c
    1466:	a6 01       	movw	r20, r12
    1468:	65 ea       	ldi	r22, 0xA5	; 165
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	c8 01       	movw	r24, r16
    146e:	0e 94 ca 20 	call	0x4194	; 0x4194 <memset>
    1472:	21 e0       	ldi	r18, 0x01	; 1
    1474:	c2 1a       	sub	r12, r18
    1476:	d1 08       	sbc	r13, r1
    1478:	8b 8d       	ldd	r24, Y+27	; 0x1b
    147a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    147c:	c8 0e       	add	r12, r24
    147e:	d9 1e       	adc	r13, r25
    1480:	be 01       	movw	r22, r28
    1482:	63 5e       	subi	r22, 0xE3	; 227
    1484:	7f 4f       	sbci	r23, 0xFF	; 255
    1486:	e7 2d       	mov	r30, r7
    1488:	f6 2d       	mov	r31, r6
    148a:	9f 01       	movw	r18, r30
    148c:	28 5f       	subi	r18, 0xF8	; 248
    148e:	3f 4f       	sbci	r19, 0xFF	; 255
    1490:	cf 01       	movw	r24, r30
    1492:	41 91       	ld	r20, Z+
    1494:	db 01       	movw	r26, r22
    1496:	4d 93       	st	X+, r20
    1498:	bd 01       	movw	r22, r26
    149a:	dc 01       	movw	r26, r24
    149c:	8c 91       	ld	r24, X
    149e:	88 23       	and	r24, r24
    14a0:	19 f0       	breq	.+6      	; 0x14a8 <xTaskCreate+0x8e>
    14a2:	e2 17       	cp	r30, r18
    14a4:	f3 07       	cpc	r31, r19
    14a6:	a1 f7       	brne	.-24     	; 0x1490 <xTaskCreate+0x76>
    14a8:	1c a2       	std	Y+36, r1	; 0x24
    14aa:	05 2d       	mov	r16, r5
    14ac:	04 30       	cpi	r16, 0x04	; 4
    14ae:	08 f0       	brcs	.+2      	; 0x14b2 <xTaskCreate+0x98>
    14b0:	bb c0       	rjmp	.+374    	; 0x1628 <xTaskCreate+0x20e>
    14b2:	0a 8f       	std	Y+26, r16	; 0x1a
    14b4:	3e 01       	movw	r6, r28
    14b6:	b2 e0       	ldi	r27, 0x02	; 2
    14b8:	6b 0e       	add	r6, r27
    14ba:	71 1c       	adc	r7, r1
    14bc:	c3 01       	movw	r24, r6
    14be:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vListInitialiseItem>
    14c2:	ce 01       	movw	r24, r28
    14c4:	0e 96       	adiw	r24, 0x0e	; 14
    14c6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vListInitialiseItem>
    14ca:	ca 87       	std	Y+10, r28	; 0x0a
    14cc:	db 87       	std	Y+11, r29	; 0x0b
    14ce:	84 e0       	ldi	r24, 0x04	; 4
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a0 e0       	ldi	r26, 0x00	; 0
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	80 1b       	sub	r24, r16
    14d8:	91 09       	sbc	r25, r1
    14da:	a1 09       	sbc	r26, r1
    14dc:	b1 09       	sbc	r27, r1
    14de:	8e 87       	std	Y+14, r24	; 0x0e
    14e0:	9f 87       	std	Y+15, r25	; 0x0f
    14e2:	a8 8b       	std	Y+16, r26	; 0x10
    14e4:	b9 8b       	std	Y+17, r27	; 0x11
    14e6:	ce 8b       	std	Y+22, r28	; 0x16
    14e8:	df 8b       	std	Y+23, r29	; 0x17
    14ea:	1f a2       	std	Y+39, r1	; 0x27
    14ec:	18 a6       	std	Y+40, r1	; 0x28
    14ee:	19 a6       	std	Y+41, r1	; 0x29
    14f0:	1a a6       	std	Y+42, r1	; 0x2a
    14f2:	1b a6       	std	Y+43, r1	; 0x2b
    14f4:	a5 01       	movw	r20, r10
    14f6:	b4 01       	movw	r22, r8
    14f8:	c6 01       	movw	r24, r12
    14fa:	0e 94 12 04 	call	0x824	; 0x824 <pxPortInitialiseStack>
    14fe:	88 83       	st	Y, r24
    1500:	99 83       	std	Y+1, r25	; 0x01
    1502:	e1 14       	cp	r14, r1
    1504:	f1 04       	cpc	r15, r1
    1506:	19 f0       	breq	.+6      	; 0x150e <xTaskCreate+0xf4>
    1508:	f7 01       	movw	r30, r14
    150a:	c0 83       	st	Z, r28
    150c:	d1 83       	std	Z+1, r29	; 0x01
    150e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1512:	ff 93       	push	r31
    1514:	f8 7f       	andi	r31, 0xF8	; 248
    1516:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    151a:	80 91 51 2d 	lds	r24, 0x2D51	; 0x802d51 <uxCurrentNumberOfTasks>
    151e:	8f 5f       	subi	r24, 0xFF	; 255
    1520:	80 93 51 2d 	sts	0x2D51, r24	; 0x802d51 <uxCurrentNumberOfTasks>
    1524:	80 91 ae 2d 	lds	r24, 0x2DAE	; 0x802dae <pxCurrentTCB>
    1528:	90 91 af 2d 	lds	r25, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    152c:	89 2b       	or	r24, r25
    152e:	89 f0       	breq	.+34     	; 0x1552 <xTaskCreate+0x138>
    1530:	80 91 4b 2d 	lds	r24, 0x2D4B	; 0x802d4b <xSchedulerRunning>
    1534:	81 11       	cpse	r24, r1
    1536:	41 c0       	rjmp	.+130    	; 0x15ba <xTaskCreate+0x1a0>
    1538:	e0 91 ae 2d 	lds	r30, 0x2DAE	; 0x802dae <pxCurrentTCB>
    153c:	f0 91 af 2d 	lds	r31, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    1540:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1542:	92 8d       	ldd	r25, Z+26	; 0x1a
    1544:	89 17       	cp	r24, r25
    1546:	d0 f1       	brcs	.+116    	; 0x15bc <xTaskCreate+0x1a2>
    1548:	c0 93 ae 2d 	sts	0x2DAE, r28	; 0x802dae <pxCurrentTCB>
    154c:	d0 93 af 2d 	sts	0x2DAF, r29	; 0x802daf <pxCurrentTCB+0x1>
    1550:	35 c0       	rjmp	.+106    	; 0x15bc <xTaskCreate+0x1a2>
    1552:	c0 93 ae 2d 	sts	0x2DAE, r28	; 0x802dae <pxCurrentTCB>
    1556:	d0 93 af 2d 	sts	0x2DAF, r29	; 0x802daf <pxCurrentTCB+0x1>
    155a:	80 91 51 2d 	lds	r24, 0x2D51	; 0x802d51 <uxCurrentNumberOfTasks>
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	61 f5       	brne	.+88     	; 0x15ba <xTaskCreate+0x1a0>
    1562:	82 e8       	ldi	r24, 0x82	; 130
    1564:	9d e2       	ldi	r25, 0x2D	; 45
    1566:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
    156a:	8d e8       	ldi	r24, 0x8D	; 141
    156c:	9d e2       	ldi	r25, 0x2D	; 45
    156e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
    1572:	88 e9       	ldi	r24, 0x98	; 152
    1574:	9d e2       	ldi	r25, 0x2D	; 45
    1576:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
    157a:	83 ea       	ldi	r24, 0xA3	; 163
    157c:	9d e2       	ldi	r25, 0x2D	; 45
    157e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
    1582:	87 e7       	ldi	r24, 0x77	; 119
    1584:	9d e2       	ldi	r25, 0x2D	; 45
    1586:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
    158a:	8c e6       	ldi	r24, 0x6C	; 108
    158c:	9d e2       	ldi	r25, 0x2D	; 45
    158e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
    1592:	8d e5       	ldi	r24, 0x5D	; 93
    1594:	9d e2       	ldi	r25, 0x2D	; 45
    1596:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
    159a:	82 e5       	ldi	r24, 0x52	; 82
    159c:	9d e2       	ldi	r25, 0x2D	; 45
    159e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
    15a2:	87 e7       	ldi	r24, 0x77	; 119
    15a4:	9d e2       	ldi	r25, 0x2D	; 45
    15a6:	80 93 6a 2d 	sts	0x2D6A, r24	; 0x802d6a <pxDelayedTaskList>
    15aa:	90 93 6b 2d 	sts	0x2D6B, r25	; 0x802d6b <pxDelayedTaskList+0x1>
    15ae:	8c e6       	ldi	r24, 0x6C	; 108
    15b0:	9d e2       	ldi	r25, 0x2D	; 45
    15b2:	80 93 68 2d 	sts	0x2D68, r24	; 0x802d68 <pxOverflowDelayedTaskList>
    15b6:	90 93 69 2d 	sts	0x2D69, r25	; 0x802d69 <pxOverflowDelayedTaskList+0x1>
    15ba:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15bc:	90 91 47 2d 	lds	r25, 0x2D47	; 0x802d47 <uxTaskNumber>
    15c0:	9f 5f       	subi	r25, 0xFF	; 255
    15c2:	90 93 47 2d 	sts	0x2D47, r25	; 0x802d47 <uxTaskNumber>
    15c6:	9d a3       	std	Y+37, r25	; 0x25
    15c8:	90 91 4c 2d 	lds	r25, 0x2D4C	; 0x802d4c <uxTopReadyPriority>
    15cc:	98 17       	cp	r25, r24
    15ce:	48 f1       	brcs	.+82     	; 0x1622 <xTaskCreate+0x208>
    15d0:	fb e0       	ldi	r31, 0x0B	; 11
    15d2:	8f 9f       	mul	r24, r31
    15d4:	c0 01       	movw	r24, r0
    15d6:	11 24       	eor	r1, r1
    15d8:	b3 01       	movw	r22, r6
    15da:	8e 57       	subi	r24, 0x7E	; 126
    15dc:	92 4d       	sbci	r25, 0xD2	; 210
    15de:	0e 94 83 03 	call	0x706	; 0x706 <vListInsertEnd>
    15e2:	ff 91       	pop	r31
    15e4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    15e8:	80 91 4b 2d 	lds	r24, 0x2D4B	; 0x802d4b <xSchedulerRunning>
    15ec:	88 23       	and	r24, r24
    15ee:	41 f0       	breq	.+16     	; 0x1600 <xTaskCreate+0x1e6>
    15f0:	e0 91 ae 2d 	lds	r30, 0x2DAE	; 0x802dae <pxCurrentTCB>
    15f4:	f0 91 af 2d 	lds	r31, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    15f8:	92 8d       	ldd	r25, Z+26	; 0x1a
    15fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15fc:	98 17       	cp	r25, r24
    15fe:	b0 f0       	brcs	.+44     	; 0x162c <xTaskCreate+0x212>
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	1f 91       	pop	r17
    1608:	0f 91       	pop	r16
    160a:	ff 90       	pop	r15
    160c:	ef 90       	pop	r14
    160e:	df 90       	pop	r13
    1610:	cf 90       	pop	r12
    1612:	bf 90       	pop	r11
    1614:	af 90       	pop	r10
    1616:	9f 90       	pop	r9
    1618:	8f 90       	pop	r8
    161a:	7f 90       	pop	r7
    161c:	6f 90       	pop	r6
    161e:	5f 90       	pop	r5
    1620:	08 95       	ret
    1622:	80 93 4c 2d 	sts	0x2D4C, r24	; 0x802d4c <uxTopReadyPriority>
    1626:	d4 cf       	rjmp	.-88     	; 0x15d0 <xTaskCreate+0x1b6>
    1628:	03 e0       	ldi	r16, 0x03	; 3
    162a:	43 cf       	rjmp	.-378    	; 0x14b2 <xTaskCreate+0x98>
    162c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <vPortYield>
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	e7 cf       	rjmp	.-50     	; 0x1602 <xTaskCreate+0x1e8>
    1634:	c8 01       	movw	r24, r16
    1636:	0e 94 6d 03 	call	0x6da	; 0x6da <vPortFree>
    163a:	8f ef       	ldi	r24, 0xFF	; 255
    163c:	e2 cf       	rjmp	.-60     	; 0x1602 <xTaskCreate+0x1e8>

0000163e <vTaskStartScheduler>:
    163e:	ef 92       	push	r14
    1640:	ff 92       	push	r15
    1642:	0f 93       	push	r16
    1644:	81 e4       	ldi	r24, 0x41	; 65
    1646:	e8 2e       	mov	r14, r24
    1648:	8d e2       	ldi	r24, 0x2D	; 45
    164a:	f8 2e       	mov	r15, r24
    164c:	00 e0       	ldi	r16, 0x00	; 0
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	48 ec       	ldi	r20, 0xC8	; 200
    1654:	50 e0       	ldi	r21, 0x00	; 0
    1656:	64 e0       	ldi	r22, 0x04	; 4
    1658:	71 e2       	ldi	r23, 0x21	; 33
    165a:	85 ee       	ldi	r24, 0xE5	; 229
    165c:	98 e0       	ldi	r25, 0x08	; 8
    165e:	0e 94 0d 0a 	call	0x141a	; 0x141a <xTaskCreate>
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	21 f0       	breq	.+8      	; 0x166e <vTaskStartScheduler+0x30>
    1666:	0f 91       	pop	r16
    1668:	ff 90       	pop	r15
    166a:	ef 90       	pop	r14
    166c:	08 95       	ret
    166e:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <xTimerCreateTimerTask>
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	c1 f7       	brne	.-16     	; 0x1666 <vTaskStartScheduler+0x28>
    1676:	90 91 a2 00 	lds	r25, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    167a:	98 7f       	andi	r25, 0xF8	; 248
    167c:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1680:	4f ef       	ldi	r20, 0xFF	; 255
    1682:	5f ef       	ldi	r21, 0xFF	; 255
    1684:	ba 01       	movw	r22, r20
    1686:	40 93 43 2d 	sts	0x2D43, r20	; 0x802d43 <xNextTaskUnblockTime>
    168a:	50 93 44 2d 	sts	0x2D44, r21	; 0x802d44 <xNextTaskUnblockTime+0x1>
    168e:	60 93 45 2d 	sts	0x2D45, r22	; 0x802d45 <xNextTaskUnblockTime+0x2>
    1692:	70 93 46 2d 	sts	0x2D46, r23	; 0x802d46 <xNextTaskUnblockTime+0x3>
    1696:	80 93 4b 2d 	sts	0x2D4B, r24	; 0x802d4b <xSchedulerRunning>
    169a:	10 92 4d 2d 	sts	0x2D4D, r1	; 0x802d4d <xTickCount>
    169e:	10 92 4e 2d 	sts	0x2D4E, r1	; 0x802d4e <xTickCount+0x1>
    16a2:	10 92 4f 2d 	sts	0x2D4F, r1	; 0x802d4f <xTickCount+0x2>
    16a6:	10 92 50 2d 	sts	0x2D50, r1	; 0x802d50 <xTickCount+0x3>
    16aa:	0f 91       	pop	r16
    16ac:	ff 90       	pop	r15
    16ae:	ef 90       	pop	r14
    16b0:	0c 94 91 04 	jmp	0x922	; 0x922 <xPortStartScheduler>

000016b4 <vTaskSuspendAll>:
    16b4:	80 91 40 2d 	lds	r24, 0x2D40	; 0x802d40 <uxSchedulerSuspended>
    16b8:	8f 5f       	subi	r24, 0xFF	; 255
    16ba:	80 93 40 2d 	sts	0x2D40, r24	; 0x802d40 <uxSchedulerSuspended>
    16be:	08 95       	ret

000016c0 <xTaskGetTickCount>:
    16c0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    16c4:	ff 93       	push	r31
    16c6:	f8 7f       	andi	r31, 0xF8	; 248
    16c8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    16cc:	60 91 4d 2d 	lds	r22, 0x2D4D	; 0x802d4d <xTickCount>
    16d0:	70 91 4e 2d 	lds	r23, 0x2D4E	; 0x802d4e <xTickCount+0x1>
    16d4:	80 91 4f 2d 	lds	r24, 0x2D4F	; 0x802d4f <xTickCount+0x2>
    16d8:	90 91 50 2d 	lds	r25, 0x2D50	; 0x802d50 <xTickCount+0x3>
    16dc:	ff 91       	pop	r31
    16de:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    16e2:	08 95       	ret

000016e4 <xTaskIncrementTick>:
    16e4:	af 92       	push	r10
    16e6:	bf 92       	push	r11
    16e8:	cf 92       	push	r12
    16ea:	df 92       	push	r13
    16ec:	ef 92       	push	r14
    16ee:	ff 92       	push	r15
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	80 91 40 2d 	lds	r24, 0x2D40	; 0x802d40 <uxSchedulerSuspended>
    16fc:	81 11       	cpse	r24, r1
    16fe:	c9 c0       	rjmp	.+402    	; 0x1892 <xTaskIncrementTick+0x1ae>
    1700:	c0 90 4d 2d 	lds	r12, 0x2D4D	; 0x802d4d <xTickCount>
    1704:	d0 90 4e 2d 	lds	r13, 0x2D4E	; 0x802d4e <xTickCount+0x1>
    1708:	e0 90 4f 2d 	lds	r14, 0x2D4F	; 0x802d4f <xTickCount+0x2>
    170c:	f0 90 50 2d 	lds	r15, 0x2D50	; 0x802d50 <xTickCount+0x3>
    1710:	8f ef       	ldi	r24, 0xFF	; 255
    1712:	c8 1a       	sub	r12, r24
    1714:	d8 0a       	sbc	r13, r24
    1716:	e8 0a       	sbc	r14, r24
    1718:	f8 0a       	sbc	r15, r24
    171a:	c0 92 4d 2d 	sts	0x2D4D, r12	; 0x802d4d <xTickCount>
    171e:	d0 92 4e 2d 	sts	0x2D4E, r13	; 0x802d4e <xTickCount+0x1>
    1722:	e0 92 4f 2d 	sts	0x2D4F, r14	; 0x802d4f <xTickCount+0x2>
    1726:	f0 92 50 2d 	sts	0x2D50, r15	; 0x802d50 <xTickCount+0x3>
    172a:	c1 14       	cp	r12, r1
    172c:	d1 04       	cpc	r13, r1
    172e:	e1 04       	cpc	r14, r1
    1730:	f1 04       	cpc	r15, r1
    1732:	39 f5       	brne	.+78     	; 0x1782 <xTaskIncrementTick+0x9e>
    1734:	80 91 6a 2d 	lds	r24, 0x2D6A	; 0x802d6a <pxDelayedTaskList>
    1738:	90 91 6b 2d 	lds	r25, 0x2D6B	; 0x802d6b <pxDelayedTaskList+0x1>
    173c:	20 91 68 2d 	lds	r18, 0x2D68	; 0x802d68 <pxOverflowDelayedTaskList>
    1740:	30 91 69 2d 	lds	r19, 0x2D69	; 0x802d69 <pxOverflowDelayedTaskList+0x1>
    1744:	20 93 6a 2d 	sts	0x2D6A, r18	; 0x802d6a <pxDelayedTaskList>
    1748:	30 93 6b 2d 	sts	0x2D6B, r19	; 0x802d6b <pxDelayedTaskList+0x1>
    174c:	80 93 68 2d 	sts	0x2D68, r24	; 0x802d68 <pxOverflowDelayedTaskList>
    1750:	90 93 69 2d 	sts	0x2D69, r25	; 0x802d69 <pxOverflowDelayedTaskList+0x1>
    1754:	80 91 48 2d 	lds	r24, 0x2D48	; 0x802d48 <xNumOfOverflows>
    1758:	8f 5f       	subi	r24, 0xFF	; 255
    175a:	80 93 48 2d 	sts	0x2D48, r24	; 0x802d48 <xNumOfOverflows>
    175e:	e0 91 6a 2d 	lds	r30, 0x2D6A	; 0x802d6a <pxDelayedTaskList>
    1762:	f0 91 6b 2d 	lds	r31, 0x2D6B	; 0x802d6b <pxDelayedTaskList+0x1>
    1766:	80 81       	ld	r24, Z
    1768:	81 11       	cpse	r24, r1
    176a:	9a c0       	rjmp	.+308    	; 0x18a0 <xTaskIncrementTick+0x1bc>
    176c:	8f ef       	ldi	r24, 0xFF	; 255
    176e:	9f ef       	ldi	r25, 0xFF	; 255
    1770:	dc 01       	movw	r26, r24
    1772:	80 93 43 2d 	sts	0x2D43, r24	; 0x802d43 <xNextTaskUnblockTime>
    1776:	90 93 44 2d 	sts	0x2D44, r25	; 0x802d44 <xNextTaskUnblockTime+0x1>
    177a:	a0 93 45 2d 	sts	0x2D45, r26	; 0x802d45 <xNextTaskUnblockTime+0x2>
    177e:	b0 93 46 2d 	sts	0x2D46, r27	; 0x802d46 <xNextTaskUnblockTime+0x3>
    1782:	80 91 43 2d 	lds	r24, 0x2D43	; 0x802d43 <xNextTaskUnblockTime>
    1786:	90 91 44 2d 	lds	r25, 0x2D44	; 0x802d44 <xNextTaskUnblockTime+0x1>
    178a:	a0 91 45 2d 	lds	r26, 0x2D45	; 0x802d45 <xNextTaskUnblockTime+0x2>
    178e:	b0 91 46 2d 	lds	r27, 0x2D46	; 0x802d46 <xNextTaskUnblockTime+0x3>
    1792:	b1 2c       	mov	r11, r1
    1794:	c8 16       	cp	r12, r24
    1796:	d9 06       	cpc	r13, r25
    1798:	ea 06       	cpc	r14, r26
    179a:	fb 06       	cpc	r15, r27
    179c:	08 f4       	brcc	.+2      	; 0x17a0 <xTaskIncrementTick+0xbc>
    179e:	57 c0       	rjmp	.+174    	; 0x184e <xTaskIncrementTick+0x16a>
    17a0:	8b e0       	ldi	r24, 0x0B	; 11
    17a2:	a8 2e       	mov	r10, r24
    17a4:	e0 91 6a 2d 	lds	r30, 0x2D6A	; 0x802d6a <pxDelayedTaskList>
    17a8:	f0 91 6b 2d 	lds	r31, 0x2D6B	; 0x802d6b <pxDelayedTaskList+0x1>
    17ac:	80 81       	ld	r24, Z
    17ae:	88 23       	and	r24, r24
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <xTaskIncrementTick+0xd0>
    17b2:	42 c0       	rjmp	.+132    	; 0x1838 <xTaskIncrementTick+0x154>
    17b4:	e0 91 6a 2d 	lds	r30, 0x2D6A	; 0x802d6a <pxDelayedTaskList>
    17b8:	f0 91 6b 2d 	lds	r31, 0x2D6B	; 0x802d6b <pxDelayedTaskList+0x1>
    17bc:	07 80       	ldd	r0, Z+7	; 0x07
    17be:	f0 85       	ldd	r31, Z+8	; 0x08
    17c0:	e0 2d       	mov	r30, r0
    17c2:	c0 85       	ldd	r28, Z+8	; 0x08
    17c4:	d1 85       	ldd	r29, Z+9	; 0x09
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	9b 81       	ldd	r25, Y+3	; 0x03
    17ca:	ac 81       	ldd	r26, Y+4	; 0x04
    17cc:	bd 81       	ldd	r27, Y+5	; 0x05
    17ce:	c8 16       	cp	r12, r24
    17d0:	d9 06       	cpc	r13, r25
    17d2:	ea 06       	cpc	r14, r26
    17d4:	fb 06       	cpc	r15, r27
    17d6:	08 f4       	brcc	.+2      	; 0x17da <xTaskIncrementTick+0xf6>
    17d8:	66 c0       	rjmp	.+204    	; 0x18a6 <xTaskIncrementTick+0x1c2>
    17da:	8e 01       	movw	r16, r28
    17dc:	0e 5f       	subi	r16, 0xFE	; 254
    17de:	1f 4f       	sbci	r17, 0xFF	; 255
    17e0:	c8 01       	movw	r24, r16
    17e2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <uxListRemove>
    17e6:	88 8d       	ldd	r24, Y+24	; 0x18
    17e8:	99 8d       	ldd	r25, Y+25	; 0x19
    17ea:	89 2b       	or	r24, r25
    17ec:	21 f0       	breq	.+8      	; 0x17f6 <xTaskIncrementTick+0x112>
    17ee:	ce 01       	movw	r24, r28
    17f0:	0e 96       	adiw	r24, 0x0e	; 14
    17f2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <uxListRemove>
    17f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17f8:	90 91 4c 2d 	lds	r25, 0x2D4C	; 0x802d4c <uxTopReadyPriority>
    17fc:	98 17       	cp	r25, r24
    17fe:	10 f4       	brcc	.+4      	; 0x1804 <xTaskIncrementTick+0x120>
    1800:	80 93 4c 2d 	sts	0x2D4C, r24	; 0x802d4c <uxTopReadyPriority>
    1804:	a8 9e       	mul	r10, r24
    1806:	c0 01       	movw	r24, r0
    1808:	11 24       	eor	r1, r1
    180a:	b8 01       	movw	r22, r16
    180c:	8e 57       	subi	r24, 0x7E	; 126
    180e:	92 4d       	sbci	r25, 0xD2	; 210
    1810:	0e 94 83 03 	call	0x706	; 0x706 <vListInsertEnd>
    1814:	e0 91 ae 2d 	lds	r30, 0x2DAE	; 0x802dae <pxCurrentTCB>
    1818:	f0 91 af 2d 	lds	r31, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    181c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    181e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1820:	98 17       	cp	r25, r24
    1822:	08 f4       	brcc	.+2      	; 0x1826 <xTaskIncrementTick+0x142>
    1824:	bf cf       	rjmp	.-130    	; 0x17a4 <xTaskIncrementTick+0xc0>
    1826:	bb 24       	eor	r11, r11
    1828:	b3 94       	inc	r11
    182a:	e0 91 6a 2d 	lds	r30, 0x2D6A	; 0x802d6a <pxDelayedTaskList>
    182e:	f0 91 6b 2d 	lds	r31, 0x2D6B	; 0x802d6b <pxDelayedTaskList+0x1>
    1832:	80 81       	ld	r24, Z
    1834:	81 11       	cpse	r24, r1
    1836:	be cf       	rjmp	.-132    	; 0x17b4 <xTaskIncrementTick+0xd0>
    1838:	8f ef       	ldi	r24, 0xFF	; 255
    183a:	9f ef       	ldi	r25, 0xFF	; 255
    183c:	dc 01       	movw	r26, r24
    183e:	80 93 43 2d 	sts	0x2D43, r24	; 0x802d43 <xNextTaskUnblockTime>
    1842:	90 93 44 2d 	sts	0x2D44, r25	; 0x802d44 <xNextTaskUnblockTime+0x1>
    1846:	a0 93 45 2d 	sts	0x2D45, r26	; 0x802d45 <xNextTaskUnblockTime+0x2>
    184a:	b0 93 46 2d 	sts	0x2D46, r27	; 0x802d46 <xNextTaskUnblockTime+0x3>
    184e:	e0 91 ae 2d 	lds	r30, 0x2DAE	; 0x802dae <pxCurrentTCB>
    1852:	f0 91 af 2d 	lds	r31, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    1856:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1858:	8b e0       	ldi	r24, 0x0B	; 11
    185a:	e8 9f       	mul	r30, r24
    185c:	f0 01       	movw	r30, r0
    185e:	11 24       	eor	r1, r1
    1860:	ee 57       	subi	r30, 0x7E	; 126
    1862:	f2 4d       	sbci	r31, 0xD2	; 210
    1864:	80 81       	ld	r24, Z
    1866:	82 30       	cpi	r24, 0x02	; 2
    1868:	10 f0       	brcs	.+4      	; 0x186e <xTaskIncrementTick+0x18a>
    186a:	bb 24       	eor	r11, r11
    186c:	b3 94       	inc	r11
    186e:	80 91 49 2d 	lds	r24, 0x2D49	; 0x802d49 <xYieldPending>
    1872:	88 23       	and	r24, r24
    1874:	11 f0       	breq	.+4      	; 0x187a <xTaskIncrementTick+0x196>
    1876:	bb 24       	eor	r11, r11
    1878:	b3 94       	inc	r11
    187a:	8b 2d       	mov	r24, r11
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	ff 90       	pop	r15
    1886:	ef 90       	pop	r14
    1888:	df 90       	pop	r13
    188a:	cf 90       	pop	r12
    188c:	bf 90       	pop	r11
    188e:	af 90       	pop	r10
    1890:	08 95       	ret
    1892:	80 91 4a 2d 	lds	r24, 0x2D4A	; 0x802d4a <uxPendedTicks>
    1896:	8f 5f       	subi	r24, 0xFF	; 255
    1898:	80 93 4a 2d 	sts	0x2D4A, r24	; 0x802d4a <uxPendedTicks>
    189c:	b1 2c       	mov	r11, r1
    189e:	e7 cf       	rjmp	.-50     	; 0x186e <xTaskIncrementTick+0x18a>
    18a0:	0e 94 ee 08 	call	0x11dc	; 0x11dc <prvResetNextTaskUnblockTime.part.1>
    18a4:	6e cf       	rjmp	.-292    	; 0x1782 <xTaskIncrementTick+0x9e>
    18a6:	80 93 43 2d 	sts	0x2D43, r24	; 0x802d43 <xNextTaskUnblockTime>
    18aa:	90 93 44 2d 	sts	0x2D44, r25	; 0x802d44 <xNextTaskUnblockTime+0x1>
    18ae:	a0 93 45 2d 	sts	0x2D45, r26	; 0x802d45 <xNextTaskUnblockTime+0x2>
    18b2:	b0 93 46 2d 	sts	0x2D46, r27	; 0x802d46 <xNextTaskUnblockTime+0x3>
    18b6:	cb cf       	rjmp	.-106    	; 0x184e <xTaskIncrementTick+0x16a>

000018b8 <xTaskResumeAll>:
    18b8:	ef 92       	push	r14
    18ba:	ff 92       	push	r15
    18bc:	0f 93       	push	r16
    18be:	1f 93       	push	r17
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    18c8:	ff 93       	push	r31
    18ca:	f8 7f       	andi	r31, 0xF8	; 248
    18cc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    18d0:	80 91 40 2d 	lds	r24, 0x2D40	; 0x802d40 <uxSchedulerSuspended>
    18d4:	81 50       	subi	r24, 0x01	; 1
    18d6:	80 93 40 2d 	sts	0x2D40, r24	; 0x802d40 <uxSchedulerSuspended>
    18da:	80 91 40 2d 	lds	r24, 0x2D40	; 0x802d40 <uxSchedulerSuspended>
    18de:	81 11       	cpse	r24, r1
    18e0:	62 c0       	rjmp	.+196    	; 0x19a6 <xTaskResumeAll+0xee>
    18e2:	80 91 51 2d 	lds	r24, 0x2D51	; 0x802d51 <uxCurrentNumberOfTasks>
    18e6:	88 23       	and	r24, r24
    18e8:	09 f4       	brne	.+2      	; 0x18ec <xTaskResumeAll+0x34>
    18ea:	5d c0       	rjmp	.+186    	; 0x19a6 <xTaskResumeAll+0xee>
    18ec:	c0 e0       	ldi	r28, 0x00	; 0
    18ee:	d0 e0       	ldi	r29, 0x00	; 0
    18f0:	8b e0       	ldi	r24, 0x0B	; 11
    18f2:	f8 2e       	mov	r15, r24
    18f4:	ee 24       	eor	r14, r14
    18f6:	e3 94       	inc	r14
    18f8:	80 91 5d 2d 	lds	r24, 0x2D5D	; 0x802d5d <xPendingReadyList>
    18fc:	88 23       	and	r24, r24
    18fe:	69 f1       	breq	.+90     	; 0x195a <xTaskResumeAll+0xa2>
    1900:	e0 91 64 2d 	lds	r30, 0x2D64	; 0x802d64 <xPendingReadyList+0x7>
    1904:	f0 91 65 2d 	lds	r31, 0x2D65	; 0x802d65 <xPendingReadyList+0x8>
    1908:	c0 85       	ldd	r28, Z+8	; 0x08
    190a:	d1 85       	ldd	r29, Z+9	; 0x09
    190c:	ce 01       	movw	r24, r28
    190e:	0e 96       	adiw	r24, 0x0e	; 14
    1910:	0e 94 e5 03 	call	0x7ca	; 0x7ca <uxListRemove>
    1914:	8e 01       	movw	r16, r28
    1916:	0e 5f       	subi	r16, 0xFE	; 254
    1918:	1f 4f       	sbci	r17, 0xFF	; 255
    191a:	c8 01       	movw	r24, r16
    191c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <uxListRemove>
    1920:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1922:	90 91 4c 2d 	lds	r25, 0x2D4C	; 0x802d4c <uxTopReadyPriority>
    1926:	98 17       	cp	r25, r24
    1928:	10 f4       	brcc	.+4      	; 0x192e <xTaskResumeAll+0x76>
    192a:	80 93 4c 2d 	sts	0x2D4C, r24	; 0x802d4c <uxTopReadyPriority>
    192e:	f8 9e       	mul	r15, r24
    1930:	c0 01       	movw	r24, r0
    1932:	11 24       	eor	r1, r1
    1934:	b8 01       	movw	r22, r16
    1936:	8e 57       	subi	r24, 0x7E	; 126
    1938:	92 4d       	sbci	r25, 0xD2	; 210
    193a:	0e 94 83 03 	call	0x706	; 0x706 <vListInsertEnd>
    193e:	e0 91 ae 2d 	lds	r30, 0x2DAE	; 0x802dae <pxCurrentTCB>
    1942:	f0 91 af 2d 	lds	r31, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    1946:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1948:	82 8d       	ldd	r24, Z+26	; 0x1a
    194a:	98 17       	cp	r25, r24
    194c:	a8 f2       	brcs	.-86     	; 0x18f8 <xTaskResumeAll+0x40>
    194e:	e0 92 49 2d 	sts	0x2D49, r14	; 0x802d49 <xYieldPending>
    1952:	80 91 5d 2d 	lds	r24, 0x2D5D	; 0x802d5d <xPendingReadyList>
    1956:	81 11       	cpse	r24, r1
    1958:	d3 cf       	rjmp	.-90     	; 0x1900 <xTaskResumeAll+0x48>
    195a:	cd 2b       	or	r28, r29
    195c:	91 f0       	breq	.+36     	; 0x1982 <xTaskResumeAll+0xca>
    195e:	e0 91 6a 2d 	lds	r30, 0x2D6A	; 0x802d6a <pxDelayedTaskList>
    1962:	f0 91 6b 2d 	lds	r31, 0x2D6B	; 0x802d6b <pxDelayedTaskList+0x1>
    1966:	80 81       	ld	r24, Z
    1968:	81 11       	cpse	r24, r1
    196a:	2c c0       	rjmp	.+88     	; 0x19c4 <xTaskResumeAll+0x10c>
    196c:	8f ef       	ldi	r24, 0xFF	; 255
    196e:	9f ef       	ldi	r25, 0xFF	; 255
    1970:	dc 01       	movw	r26, r24
    1972:	80 93 43 2d 	sts	0x2D43, r24	; 0x802d43 <xNextTaskUnblockTime>
    1976:	90 93 44 2d 	sts	0x2D44, r25	; 0x802d44 <xNextTaskUnblockTime+0x1>
    197a:	a0 93 45 2d 	sts	0x2D45, r26	; 0x802d45 <xNextTaskUnblockTime+0x2>
    197e:	b0 93 46 2d 	sts	0x2D46, r27	; 0x802d46 <xNextTaskUnblockTime+0x3>
    1982:	c0 91 4a 2d 	lds	r28, 0x2D4A	; 0x802d4a <uxPendedTicks>
    1986:	cc 23       	and	r28, r28
    1988:	51 f0       	breq	.+20     	; 0x199e <xTaskResumeAll+0xe6>
    198a:	d1 e0       	ldi	r29, 0x01	; 1
    198c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <xTaskIncrementTick>
    1990:	81 11       	cpse	r24, r1
    1992:	d0 93 49 2d 	sts	0x2D49, r29	; 0x802d49 <xYieldPending>
    1996:	c1 50       	subi	r28, 0x01	; 1
    1998:	c9 f7       	brne	.-14     	; 0x198c <xTaskResumeAll+0xd4>
    199a:	10 92 4a 2d 	sts	0x2D4A, r1	; 0x802d4a <uxPendedTicks>
    199e:	80 91 49 2d 	lds	r24, 0x2D49	; 0x802d49 <xYieldPending>
    19a2:	81 11       	cpse	r24, r1
    19a4:	0b c0       	rjmp	.+22     	; 0x19bc <xTaskResumeAll+0x104>
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	ff 91       	pop	r31
    19aa:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	1f 91       	pop	r17
    19b4:	0f 91       	pop	r16
    19b6:	ff 90       	pop	r15
    19b8:	ef 90       	pop	r14
    19ba:	08 95       	ret
    19bc:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <vPortYield>
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	f2 cf       	rjmp	.-28     	; 0x19a8 <xTaskResumeAll+0xf0>
    19c4:	0e 94 ee 08 	call	0x11dc	; 0x11dc <prvResetNextTaskUnblockTime.part.1>
    19c8:	dc cf       	rjmp	.-72     	; 0x1982 <xTaskResumeAll+0xca>

000019ca <vTaskDelay>:
    19ca:	61 15       	cp	r22, r1
    19cc:	71 05       	cpc	r23, r1
    19ce:	81 05       	cpc	r24, r1
    19d0:	91 05       	cpc	r25, r1
    19d2:	19 f4       	brne	.+6      	; 0x19da <vTaskDelay+0x10>
    19d4:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <vPortYield>
    19d8:	08 95       	ret
    19da:	20 91 40 2d 	lds	r18, 0x2D40	; 0x802d40 <uxSchedulerSuspended>
    19de:	2f 5f       	subi	r18, 0xFF	; 255
    19e0:	20 93 40 2d 	sts	0x2D40, r18	; 0x802d40 <uxSchedulerSuspended>
    19e4:	40 e0       	ldi	r20, 0x00	; 0
    19e6:	0e 94 05 09 	call	0x120a	; 0x120a <prvAddCurrentTaskToDelayedList>
    19ea:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <xTaskResumeAll>
    19ee:	88 23       	and	r24, r24
    19f0:	89 f3       	breq	.-30     	; 0x19d4 <vTaskDelay+0xa>
    19f2:	08 95       	ret

000019f4 <vTaskSwitchContext>:
    19f4:	80 91 40 2d 	lds	r24, 0x2D40	; 0x802d40 <uxSchedulerSuspended>
    19f8:	81 11       	cpse	r24, r1
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <vTaskSwitchContext+0xc>
    19fc:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <vTaskSwitchContext.part.4>
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	80 93 49 2d 	sts	0x2D49, r24	; 0x802d49 <xYieldPending>
    1a06:	08 95       	ret

00001a08 <vTaskPlaceOnEventList>:
    1a08:	cf 92       	push	r12
    1a0a:	df 92       	push	r13
    1a0c:	ef 92       	push	r14
    1a0e:	ff 92       	push	r15
    1a10:	6a 01       	movw	r12, r20
    1a12:	7b 01       	movw	r14, r22
    1a14:	60 91 ae 2d 	lds	r22, 0x2DAE	; 0x802dae <pxCurrentTCB>
    1a18:	70 91 af 2d 	lds	r23, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    1a1c:	62 5f       	subi	r22, 0xF2	; 242
    1a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a20:	0e 94 a4 03 	call	0x748	; 0x748 <vListInsert>
    1a24:	41 e0       	ldi	r20, 0x01	; 1
    1a26:	c7 01       	movw	r24, r14
    1a28:	b6 01       	movw	r22, r12
    1a2a:	ff 90       	pop	r15
    1a2c:	ef 90       	pop	r14
    1a2e:	df 90       	pop	r13
    1a30:	cf 90       	pop	r12
    1a32:	0c 94 05 09 	jmp	0x120a	; 0x120a <prvAddCurrentTaskToDelayedList>

00001a36 <vTaskPlaceOnUnorderedEventList>:
    1a36:	cf 92       	push	r12
    1a38:	df 92       	push	r13
    1a3a:	ef 92       	push	r14
    1a3c:	ff 92       	push	r15
    1a3e:	0f 93       	push	r16
    1a40:	1f 93       	push	r17
    1a42:	68 01       	movw	r12, r16
    1a44:	79 01       	movw	r14, r18
    1a46:	e0 91 ae 2d 	lds	r30, 0x2DAE	; 0x802dae <pxCurrentTCB>
    1a4a:	f0 91 af 2d 	lds	r31, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    1a4e:	70 68       	ori	r23, 0x80	; 128
    1a50:	46 87       	std	Z+14, r20	; 0x0e
    1a52:	57 87       	std	Z+15, r21	; 0x0f
    1a54:	60 8b       	std	Z+16, r22	; 0x10
    1a56:	71 8b       	std	Z+17, r23	; 0x11
    1a58:	60 91 ae 2d 	lds	r22, 0x2DAE	; 0x802dae <pxCurrentTCB>
    1a5c:	70 91 af 2d 	lds	r23, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    1a60:	62 5f       	subi	r22, 0xF2	; 242
    1a62:	7f 4f       	sbci	r23, 0xFF	; 255
    1a64:	0e 94 83 03 	call	0x706	; 0x706 <vListInsertEnd>
    1a68:	41 e0       	ldi	r20, 0x01	; 1
    1a6a:	c7 01       	movw	r24, r14
    1a6c:	b6 01       	movw	r22, r12
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	ff 90       	pop	r15
    1a74:	ef 90       	pop	r14
    1a76:	df 90       	pop	r13
    1a78:	cf 90       	pop	r12
    1a7a:	0c 94 05 09 	jmp	0x120a	; 0x120a <prvAddCurrentTaskToDelayedList>

00001a7e <vTaskPlaceOnEventListRestricted>:
    1a7e:	cf 92       	push	r12
    1a80:	df 92       	push	r13
    1a82:	ef 92       	push	r14
    1a84:	ff 92       	push	r15
    1a86:	cf 93       	push	r28
    1a88:	6a 01       	movw	r12, r20
    1a8a:	7b 01       	movw	r14, r22
    1a8c:	c2 2f       	mov	r28, r18
    1a8e:	60 91 ae 2d 	lds	r22, 0x2DAE	; 0x802dae <pxCurrentTCB>
    1a92:	70 91 af 2d 	lds	r23, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    1a96:	62 5f       	subi	r22, 0xF2	; 242
    1a98:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9a:	0e 94 83 03 	call	0x706	; 0x706 <vListInsertEnd>
    1a9e:	cc 23       	and	r28, r28
    1aa0:	21 f0       	breq	.+8      	; 0x1aaa <vTaskPlaceOnEventListRestricted+0x2c>
    1aa2:	cc 24       	eor	r12, r12
    1aa4:	ca 94       	dec	r12
    1aa6:	dc 2c       	mov	r13, r12
    1aa8:	76 01       	movw	r14, r12
    1aaa:	4c 2f       	mov	r20, r28
    1aac:	c7 01       	movw	r24, r14
    1aae:	b6 01       	movw	r22, r12
    1ab0:	cf 91       	pop	r28
    1ab2:	ff 90       	pop	r15
    1ab4:	ef 90       	pop	r14
    1ab6:	df 90       	pop	r13
    1ab8:	cf 90       	pop	r12
    1aba:	0c 94 05 09 	jmp	0x120a	; 0x120a <prvAddCurrentTaskToDelayedList>

00001abe <xTaskRemoveFromEventList>:
    1abe:	0f 93       	push	r16
    1ac0:	1f 93       	push	r17
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	17 96       	adiw	r26, 0x07	; 7
    1aca:	ed 91       	ld	r30, X+
    1acc:	fc 91       	ld	r31, X
    1ace:	18 97       	sbiw	r26, 0x08	; 8
    1ad0:	c0 85       	ldd	r28, Z+8	; 0x08
    1ad2:	d1 85       	ldd	r29, Z+9	; 0x09
    1ad4:	8e 01       	movw	r16, r28
    1ad6:	02 5f       	subi	r16, 0xF2	; 242
    1ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    1ada:	c8 01       	movw	r24, r16
    1adc:	0e 94 e5 03 	call	0x7ca	; 0x7ca <uxListRemove>
    1ae0:	80 91 40 2d 	lds	r24, 0x2D40	; 0x802d40 <uxSchedulerSuspended>
    1ae4:	81 11       	cpse	r24, r1
    1ae6:	23 c0       	rjmp	.+70     	; 0x1b2e <xTaskRemoveFromEventList+0x70>
    1ae8:	0c 50       	subi	r16, 0x0C	; 12
    1aea:	11 09       	sbc	r17, r1
    1aec:	c8 01       	movw	r24, r16
    1aee:	0e 94 e5 03 	call	0x7ca	; 0x7ca <uxListRemove>
    1af2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1af4:	90 91 4c 2d 	lds	r25, 0x2D4C	; 0x802d4c <uxTopReadyPriority>
    1af8:	98 17       	cp	r25, r24
    1afa:	f8 f0       	brcs	.+62     	; 0x1b3a <xTaskRemoveFromEventList+0x7c>
    1afc:	bb e0       	ldi	r27, 0x0B	; 11
    1afe:	8b 9f       	mul	r24, r27
    1b00:	c0 01       	movw	r24, r0
    1b02:	11 24       	eor	r1, r1
    1b04:	b8 01       	movw	r22, r16
    1b06:	8e 57       	subi	r24, 0x7E	; 126
    1b08:	92 4d       	sbci	r25, 0xD2	; 210
    1b0a:	0e 94 83 03 	call	0x706	; 0x706 <vListInsertEnd>
    1b0e:	e0 91 ae 2d 	lds	r30, 0x2DAE	; 0x802dae <pxCurrentTCB>
    1b12:	f0 91 af 2d 	lds	r31, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    1b16:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b18:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b1a:	89 17       	cp	r24, r25
    1b1c:	88 f4       	brcc	.+34     	; 0x1b40 <xTaskRemoveFromEventList+0x82>
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	80 93 49 2d 	sts	0x2D49, r24	; 0x802d49 <xYieldPending>
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	08 95       	ret
    1b2e:	b8 01       	movw	r22, r16
    1b30:	8d e5       	ldi	r24, 0x5D	; 93
    1b32:	9d e2       	ldi	r25, 0x2D	; 45
    1b34:	0e 94 83 03 	call	0x706	; 0x706 <vListInsertEnd>
    1b38:	ea cf       	rjmp	.-44     	; 0x1b0e <xTaskRemoveFromEventList+0x50>
    1b3a:	80 93 4c 2d 	sts	0x2D4C, r24	; 0x802d4c <uxTopReadyPriority>
    1b3e:	de cf       	rjmp	.-68     	; 0x1afc <xTaskRemoveFromEventList+0x3e>
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	1f 91       	pop	r17
    1b48:	0f 91       	pop	r16
    1b4a:	08 95       	ret

00001b4c <vTaskRemoveFromUnorderedEventList>:
    1b4c:	0f 93       	push	r16
    1b4e:	1f 93       	push	r17
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
    1b54:	70 68       	ori	r23, 0x80	; 128
    1b56:	fc 01       	movw	r30, r24
    1b58:	40 83       	st	Z, r20
    1b5a:	51 83       	std	Z+1, r21	; 0x01
    1b5c:	62 83       	std	Z+2, r22	; 0x02
    1b5e:	73 83       	std	Z+3, r23	; 0x03
    1b60:	c0 85       	ldd	r28, Z+8	; 0x08
    1b62:	d1 85       	ldd	r29, Z+9	; 0x09
    1b64:	0e 94 e5 03 	call	0x7ca	; 0x7ca <uxListRemove>
    1b68:	8e 01       	movw	r16, r28
    1b6a:	0e 5f       	subi	r16, 0xFE	; 254
    1b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6e:	c8 01       	movw	r24, r16
    1b70:	0e 94 e5 03 	call	0x7ca	; 0x7ca <uxListRemove>
    1b74:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b76:	90 91 4c 2d 	lds	r25, 0x2D4C	; 0x802d4c <uxTopReadyPriority>
    1b7a:	98 17       	cp	r25, r24
    1b7c:	10 f4       	brcc	.+4      	; 0x1b82 <vTaskRemoveFromUnorderedEventList+0x36>
    1b7e:	80 93 4c 2d 	sts	0x2D4C, r24	; 0x802d4c <uxTopReadyPriority>
    1b82:	fb e0       	ldi	r31, 0x0B	; 11
    1b84:	8f 9f       	mul	r24, r31
    1b86:	c0 01       	movw	r24, r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	b8 01       	movw	r22, r16
    1b8c:	8e 57       	subi	r24, 0x7E	; 126
    1b8e:	92 4d       	sbci	r25, 0xD2	; 210
    1b90:	0e 94 83 03 	call	0x706	; 0x706 <vListInsertEnd>
    1b94:	e0 91 ae 2d 	lds	r30, 0x2DAE	; 0x802dae <pxCurrentTCB>
    1b98:	f0 91 af 2d 	lds	r31, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    1b9c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b9e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ba0:	89 17       	cp	r24, r25
    1ba2:	18 f4       	brcc	.+6      	; 0x1baa <vTaskRemoveFromUnorderedEventList+0x5e>
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	80 93 49 2d 	sts	0x2D49, r24	; 0x802d49 <xYieldPending>
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	1f 91       	pop	r17
    1bb0:	0f 91       	pop	r16
    1bb2:	08 95       	ret

00001bb4 <vTaskInternalSetTimeOutState>:
    1bb4:	20 91 48 2d 	lds	r18, 0x2D48	; 0x802d48 <xNumOfOverflows>
    1bb8:	fc 01       	movw	r30, r24
    1bba:	20 83       	st	Z, r18
    1bbc:	40 91 4d 2d 	lds	r20, 0x2D4D	; 0x802d4d <xTickCount>
    1bc0:	50 91 4e 2d 	lds	r21, 0x2D4E	; 0x802d4e <xTickCount+0x1>
    1bc4:	60 91 4f 2d 	lds	r22, 0x2D4F	; 0x802d4f <xTickCount+0x2>
    1bc8:	70 91 50 2d 	lds	r23, 0x2D50	; 0x802d50 <xTickCount+0x3>
    1bcc:	41 83       	std	Z+1, r20	; 0x01
    1bce:	52 83       	std	Z+2, r21	; 0x02
    1bd0:	63 83       	std	Z+3, r22	; 0x03
    1bd2:	74 83       	std	Z+4, r23	; 0x04
    1bd4:	08 95       	ret

00001bd6 <xTaskCheckForTimeOut>:
    1bd6:	cf 92       	push	r12
    1bd8:	df 92       	push	r13
    1bda:	ef 92       	push	r14
    1bdc:	ff 92       	push	r15
    1bde:	0f 93       	push	r16
    1be0:	1f 93       	push	r17
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	dc 01       	movw	r26, r24
    1be8:	eb 01       	movw	r28, r22
    1bea:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1bee:	ff 93       	push	r31
    1bf0:	f8 7f       	andi	r31, 0xF8	; 248
    1bf2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1bf6:	40 91 4d 2d 	lds	r20, 0x2D4D	; 0x802d4d <xTickCount>
    1bfa:	50 91 4e 2d 	lds	r21, 0x2D4E	; 0x802d4e <xTickCount+0x1>
    1bfe:	60 91 4f 2d 	lds	r22, 0x2D4F	; 0x802d4f <xTickCount+0x2>
    1c02:	70 91 50 2d 	lds	r23, 0x2D50	; 0x802d50 <xTickCount+0x3>
    1c06:	08 81       	ld	r16, Y
    1c08:	19 81       	ldd	r17, Y+1	; 0x01
    1c0a:	2a 81       	ldd	r18, Y+2	; 0x02
    1c0c:	3b 81       	ldd	r19, Y+3	; 0x03
    1c0e:	0f 3f       	cpi	r16, 0xFF	; 255
    1c10:	8f ef       	ldi	r24, 0xFF	; 255
    1c12:	18 07       	cpc	r17, r24
    1c14:	28 07       	cpc	r18, r24
    1c16:	38 07       	cpc	r19, r24
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <xTaskCheckForTimeOut+0x46>
    1c1a:	47 c0       	rjmp	.+142    	; 0x1caa <xTaskCheckForTimeOut+0xd4>
    1c1c:	11 96       	adiw	r26, 0x01	; 1
    1c1e:	cd 90       	ld	r12, X+
    1c20:	dd 90       	ld	r13, X+
    1c22:	ed 90       	ld	r14, X+
    1c24:	fc 90       	ld	r15, X
    1c26:	14 97       	sbiw	r26, 0x04	; 4
    1c28:	80 91 48 2d 	lds	r24, 0x2D48	; 0x802d48 <xNumOfOverflows>
    1c2c:	9c 91       	ld	r25, X
    1c2e:	98 17       	cp	r25, r24
    1c30:	29 f0       	breq	.+10     	; 0x1c3c <xTaskCheckForTimeOut+0x66>
    1c32:	4c 15       	cp	r20, r12
    1c34:	5d 05       	cpc	r21, r13
    1c36:	6e 05       	cpc	r22, r14
    1c38:	7f 05       	cpc	r23, r15
    1c3a:	d0 f4       	brcc	.+52     	; 0x1c70 <xTaskCheckForTimeOut+0x9a>
    1c3c:	4c 19       	sub	r20, r12
    1c3e:	5d 09       	sbc	r21, r13
    1c40:	6e 09       	sbc	r22, r14
    1c42:	7f 09       	sbc	r23, r15
    1c44:	40 17       	cp	r20, r16
    1c46:	51 07       	cpc	r21, r17
    1c48:	62 07       	cpc	r22, r18
    1c4a:	73 07       	cpc	r23, r19
    1c4c:	98 f0       	brcs	.+38     	; 0x1c74 <xTaskCheckForTimeOut+0x9e>
    1c4e:	18 82       	st	Y, r1
    1c50:	19 82       	std	Y+1, r1	; 0x01
    1c52:	1a 82       	std	Y+2, r1	; 0x02
    1c54:	1b 82       	std	Y+3, r1	; 0x03
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	ff 91       	pop	r31
    1c5a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c5e:	df 91       	pop	r29
    1c60:	cf 91       	pop	r28
    1c62:	1f 91       	pop	r17
    1c64:	0f 91       	pop	r16
    1c66:	ff 90       	pop	r15
    1c68:	ef 90       	pop	r14
    1c6a:	df 90       	pop	r13
    1c6c:	cf 90       	pop	r12
    1c6e:	08 95       	ret
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	f2 cf       	rjmp	.-28     	; 0x1c58 <xTaskCheckForTimeOut+0x82>
    1c74:	04 1b       	sub	r16, r20
    1c76:	15 0b       	sbc	r17, r21
    1c78:	26 0b       	sbc	r18, r22
    1c7a:	37 0b       	sbc	r19, r23
    1c7c:	08 83       	st	Y, r16
    1c7e:	19 83       	std	Y+1, r17	; 0x01
    1c80:	2a 83       	std	Y+2, r18	; 0x02
    1c82:	3b 83       	std	Y+3, r19	; 0x03
    1c84:	80 91 48 2d 	lds	r24, 0x2D48	; 0x802d48 <xNumOfOverflows>
    1c88:	8c 93       	st	X, r24
    1c8a:	40 91 4d 2d 	lds	r20, 0x2D4D	; 0x802d4d <xTickCount>
    1c8e:	50 91 4e 2d 	lds	r21, 0x2D4E	; 0x802d4e <xTickCount+0x1>
    1c92:	60 91 4f 2d 	lds	r22, 0x2D4F	; 0x802d4f <xTickCount+0x2>
    1c96:	70 91 50 2d 	lds	r23, 0x2D50	; 0x802d50 <xTickCount+0x3>
    1c9a:	11 96       	adiw	r26, 0x01	; 1
    1c9c:	4d 93       	st	X+, r20
    1c9e:	5d 93       	st	X+, r21
    1ca0:	6d 93       	st	X+, r22
    1ca2:	7c 93       	st	X, r23
    1ca4:	14 97       	sbiw	r26, 0x04	; 4
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	d7 cf       	rjmp	.-82     	; 0x1c58 <xTaskCheckForTimeOut+0x82>
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	d5 cf       	rjmp	.-86     	; 0x1c58 <xTaskCheckForTimeOut+0x82>

00001cae <vTaskMissedYield>:
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	80 93 49 2d 	sts	0x2D49, r24	; 0x802d49 <xYieldPending>
    1cb4:	08 95       	ret

00001cb6 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1cb6:	80 91 4b 2d 	lds	r24, 0x2D4B	; 0x802d4b <xSchedulerRunning>
    1cba:	88 23       	and	r24, r24
    1cbc:	41 f0       	breq	.+16     	; 0x1cce <xTaskGetSchedulerState+0x18>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1cbe:	80 91 40 2d 	lds	r24, 0x2D40	; 0x802d40 <uxSchedulerSuspended>
    1cc2:	81 11       	cpse	r24, r1
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <xTaskGetSchedulerState+0x14>
			{
				xReturn = taskSCHEDULER_RUNNING;
    1cc6:	82 e0       	ldi	r24, 0x02	; 2
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    1cc8:	08 95       	ret
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	08 95       	ret
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	08 95       	ret

00001cd2 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    1cd2:	8f 92       	push	r8
    1cd4:	9f 92       	push	r9
    1cd6:	af 92       	push	r10
    1cd8:	bf 92       	push	r11
    1cda:	cf 92       	push	r12
    1cdc:	df 92       	push	r13
    1cde:	ef 92       	push	r14
    1ce0:	ff 92       	push	r15
    1ce2:	0f 93       	push	r16
    1ce4:	1f 93       	push	r17
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1ce6:	e0 91 ae 2d 	lds	r30, 0x2DAE	; 0x802dae <pxCurrentTCB>
    1cea:	f0 91 af 2d 	lds	r31, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    1cee:	66 85       	ldd	r22, Z+14	; 0x0e
    1cf0:	77 85       	ldd	r23, Z+15	; 0x0f
    1cf2:	80 89       	ldd	r24, Z+16	; 0x10
    1cf4:	91 89       	ldd	r25, Z+17	; 0x11

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1cf6:	e0 91 ae 2d 	lds	r30, 0x2DAE	; 0x802dae <pxCurrentTCB>
    1cfa:	f0 91 af 2d 	lds	r31, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    1cfe:	a0 91 ae 2d 	lds	r26, 0x2DAE	; 0x802dae <pxCurrentTCB>
    1d02:	b0 91 af 2d 	lds	r27, 0x2DAF	; 0x802daf <pxCurrentTCB+0x1>
    1d06:	5a 96       	adiw	r26, 0x1a	; 26
    1d08:	2c 91       	ld	r18, X
    1d0a:	34 e0       	ldi	r19, 0x04	; 4
    1d0c:	c3 2e       	mov	r12, r19
    1d0e:	d1 2c       	mov	r13, r1
    1d10:	e1 2c       	mov	r14, r1
    1d12:	f1 2c       	mov	r15, r1
    1d14:	46 01       	movw	r8, r12
    1d16:	57 01       	movw	r10, r14
    1d18:	82 1a       	sub	r8, r18
    1d1a:	91 08       	sbc	r9, r1
    1d1c:	a1 08       	sbc	r10, r1
    1d1e:	b1 08       	sbc	r11, r1
    1d20:	86 86       	std	Z+14, r8	; 0x0e
    1d22:	97 86       	std	Z+15, r9	; 0x0f
    1d24:	a0 8a       	std	Z+16, r10	; 0x10
    1d26:	b1 8a       	std	Z+17, r11	; 0x11

	return uxReturn;
}
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	ff 90       	pop	r15
    1d2e:	ef 90       	pop	r14
    1d30:	df 90       	pop	r13
    1d32:	cf 90       	pop	r12
    1d34:	bf 90       	pop	r11
    1d36:	af 90       	pop	r10
    1d38:	9f 90       	pop	r9
    1d3a:	8f 90       	pop	r8
    1d3c:	08 95       	ret

00001d3e <prvCheckForValidListAndQueue>:

	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
    1d3e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1d42:	ff 93       	push	r31
    1d44:	f8 7f       	andi	r31, 0xF8	; 248
    1d46:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1d4a:	80 91 b6 2d 	lds	r24, 0x2DB6	; 0x802db6 <xTimerQueue>
    1d4e:	90 91 b7 2d 	lds	r25, 0x2DB7	; 0x802db7 <xTimerQueue+0x1>
    1d52:	89 2b       	or	r24, r25
    1d54:	21 f0       	breq	.+8      	; 0x1d5e <prvCheckForValidListAndQueue+0x20>
    1d56:	ff 91       	pop	r31
    1d58:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1d5c:	08 95       	ret
    1d5e:	87 ec       	ldi	r24, 0xC7	; 199
    1d60:	9d e2       	ldi	r25, 0x2D	; 45
    1d62:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
    1d66:	8c eb       	ldi	r24, 0xBC	; 188
    1d68:	9d e2       	ldi	r25, 0x2D	; 45
    1d6a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
    1d6e:	87 ec       	ldi	r24, 0xC7	; 199
    1d70:	9d e2       	ldi	r25, 0x2D	; 45
    1d72:	80 93 ba 2d 	sts	0x2DBA, r24	; 0x802dba <pxCurrentTimerList>
    1d76:	90 93 bb 2d 	sts	0x2DBB, r25	; 0x802dbb <pxCurrentTimerList+0x1>
    1d7a:	8c eb       	ldi	r24, 0xBC	; 188
    1d7c:	9d e2       	ldi	r25, 0x2D	; 45
    1d7e:	80 93 b8 2d 	sts	0x2DB8, r24	; 0x802db8 <pxOverflowTimerList>
    1d82:	90 93 b9 2d 	sts	0x2DB9, r25	; 0x802db9 <pxOverflowTimerList+0x1>
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	69 e0       	ldi	r22, 0x09	; 9
    1d8a:	85 e0       	ldi	r24, 0x05	; 5
    1d8c:	0e 94 c6 06 	call	0xd8c	; 0xd8c <xQueueGenericCreate>
    1d90:	80 93 b6 2d 	sts	0x2DB6, r24	; 0x802db6 <xTimerQueue>
    1d94:	90 93 b7 2d 	sts	0x2DB7, r25	; 0x802db7 <xTimerQueue+0x1>
    1d98:	ff 91       	pop	r31
    1d9a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1d9e:	08 95       	ret

00001da0 <prvInsertTimerInActiveList>:
    1da0:	cf 92       	push	r12
    1da2:	df 92       	push	r13
    1da4:	ef 92       	push	r14
    1da6:	ff 92       	push	r15
    1da8:	0f 93       	push	r16
    1daa:	1f 93       	push	r17
    1dac:	fc 01       	movw	r30, r24
    1dae:	42 83       	std	Z+2, r20	; 0x02
    1db0:	53 83       	std	Z+3, r21	; 0x03
    1db2:	64 83       	std	Z+4, r22	; 0x04
    1db4:	75 83       	std	Z+5, r23	; 0x05
    1db6:	82 87       	std	Z+10, r24	; 0x0a
    1db8:	93 87       	std	Z+11, r25	; 0x0b
    1dba:	04 17       	cp	r16, r20
    1dbc:	15 07       	cpc	r17, r21
    1dbe:	26 07       	cpc	r18, r22
    1dc0:	37 07       	cpc	r19, r23
    1dc2:	a8 f0       	brcs	.+42     	; 0x1dee <prvInsertTimerInActiveList+0x4e>
    1dc4:	0c 19       	sub	r16, r12
    1dc6:	1d 09       	sbc	r17, r13
    1dc8:	2e 09       	sbc	r18, r14
    1dca:	3f 09       	sbc	r19, r15
    1dcc:	86 85       	ldd	r24, Z+14	; 0x0e
    1dce:	97 85       	ldd	r25, Z+15	; 0x0f
    1dd0:	a0 89       	ldd	r26, Z+16	; 0x10
    1dd2:	b1 89       	ldd	r27, Z+17	; 0x11
    1dd4:	08 17       	cp	r16, r24
    1dd6:	19 07       	cpc	r17, r25
    1dd8:	2a 07       	cpc	r18, r26
    1dda:	3b 07       	cpc	r19, r27
    1ddc:	18 f1       	brcs	.+70     	; 0x1e24 <prvInsertTimerInActiveList+0x84>
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	1f 91       	pop	r17
    1de2:	0f 91       	pop	r16
    1de4:	ff 90       	pop	r15
    1de6:	ef 90       	pop	r14
    1de8:	df 90       	pop	r13
    1dea:	cf 90       	pop	r12
    1dec:	08 95       	ret
    1dee:	0c 15       	cp	r16, r12
    1df0:	1d 05       	cpc	r17, r13
    1df2:	2e 05       	cpc	r18, r14
    1df4:	3f 05       	cpc	r19, r15
    1df6:	28 f4       	brcc	.+10     	; 0x1e02 <prvInsertTimerInActiveList+0x62>
    1df8:	4c 15       	cp	r20, r12
    1dfa:	5d 05       	cpc	r21, r13
    1dfc:	6e 05       	cpc	r22, r14
    1dfe:	7f 05       	cpc	r23, r15
    1e00:	70 f7       	brcc	.-36     	; 0x1dde <prvInsertTimerInActiveList+0x3e>
    1e02:	bf 01       	movw	r22, r30
    1e04:	6e 5f       	subi	r22, 0xFE	; 254
    1e06:	7f 4f       	sbci	r23, 0xFF	; 255
    1e08:	80 91 ba 2d 	lds	r24, 0x2DBA	; 0x802dba <pxCurrentTimerList>
    1e0c:	90 91 bb 2d 	lds	r25, 0x2DBB	; 0x802dbb <pxCurrentTimerList+0x1>
    1e10:	0e 94 a4 03 	call	0x748	; 0x748 <vListInsert>
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	1f 91       	pop	r17
    1e18:	0f 91       	pop	r16
    1e1a:	ff 90       	pop	r15
    1e1c:	ef 90       	pop	r14
    1e1e:	df 90       	pop	r13
    1e20:	cf 90       	pop	r12
    1e22:	08 95       	ret
    1e24:	bf 01       	movw	r22, r30
    1e26:	6e 5f       	subi	r22, 0xFE	; 254
    1e28:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2a:	80 91 b8 2d 	lds	r24, 0x2DB8	; 0x802db8 <pxOverflowTimerList>
    1e2e:	90 91 b9 2d 	lds	r25, 0x2DB9	; 0x802db9 <pxOverflowTimerList+0x1>
    1e32:	0e 94 a4 03 	call	0x748	; 0x748 <vListInsert>
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	1f 91       	pop	r17
    1e3a:	0f 91       	pop	r16
    1e3c:	ff 90       	pop	r15
    1e3e:	ef 90       	pop	r14
    1e40:	df 90       	pop	r13
    1e42:	cf 90       	pop	r12
    1e44:	08 95       	ret

00001e46 <xTimerCreateTimerTask>:
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	0f 93       	push	r16
    1e4c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <prvCheckForValidListAndQueue>
    1e50:	80 91 b6 2d 	lds	r24, 0x2DB6	; 0x802db6 <xTimerQueue>
    1e54:	90 91 b7 2d 	lds	r25, 0x2DB7	; 0x802db7 <xTimerQueue+0x1>
    1e58:	89 2b       	or	r24, r25
    1e5a:	99 f0       	breq	.+38     	; 0x1e82 <xTimerCreateTimerTask+0x3c>
    1e5c:	84 eb       	ldi	r24, 0xB4	; 180
    1e5e:	e8 2e       	mov	r14, r24
    1e60:	8d e2       	ldi	r24, 0x2D	; 45
    1e62:	f8 2e       	mov	r15, r24
    1e64:	03 e0       	ldi	r16, 0x03	; 3
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	48 ec       	ldi	r20, 0xC8	; 200
    1e6c:	50 e0       	ldi	r21, 0x00	; 0
    1e6e:	69 e0       	ldi	r22, 0x09	; 9
    1e70:	71 e2       	ldi	r23, 0x21	; 33
    1e72:	89 e0       	ldi	r24, 0x09	; 9
    1e74:	90 e1       	ldi	r25, 0x10	; 16
    1e76:	0e 94 0d 0a 	call	0x141a	; 0x141a <xTaskCreate>
    1e7a:	0f 91       	pop	r16
    1e7c:	ff 90       	pop	r15
    1e7e:	ef 90       	pop	r14
    1e80:	08 95       	ret
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	0f 91       	pop	r16
    1e86:	ff 90       	pop	r15
    1e88:	ef 90       	pop	r14
    1e8a:	08 95       	ret

00001e8c <xTimerGenericCommand>:
    1e8c:	8f 92       	push	r8
    1e8e:	9f 92       	push	r9
    1e90:	af 92       	push	r10
    1e92:	bf 92       	push	r11
    1e94:	cf 92       	push	r12
    1e96:	df 92       	push	r13
    1e98:	ef 92       	push	r14
    1e9a:	ff 92       	push	r15
    1e9c:	0f 93       	push	r16
    1e9e:	1f 93       	push	r17
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	29 97       	sbiw	r28, 0x09	; 9
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	e0 91 b6 2d 	lds	r30, 0x2DB6	; 0x802db6 <xTimerQueue>
    1eb2:	f0 91 b7 2d 	lds	r31, 0x2DB7	; 0x802db7 <xTimerQueue+0x1>
    1eb6:	30 97       	sbiw	r30, 0x00	; 0
    1eb8:	09 f4       	brne	.+2      	; 0x1ebc <xTimerGenericCommand+0x30>
    1eba:	3f c0       	rjmp	.+126    	; 0x1f3a <xTimerGenericCommand+0xae>
    1ebc:	69 83       	std	Y+1, r22	; 0x01
    1ebe:	2a 83       	std	Y+2, r18	; 0x02
    1ec0:	3b 83       	std	Y+3, r19	; 0x03
    1ec2:	4c 83       	std	Y+4, r20	; 0x04
    1ec4:	5d 83       	std	Y+5, r21	; 0x05
    1ec6:	8e 83       	std	Y+6, r24	; 0x06
    1ec8:	9f 83       	std	Y+7, r25	; 0x07
    1eca:	66 30       	cpi	r22, 0x06	; 6
    1ecc:	94 f4       	brge	.+36     	; 0x1ef2 <xTimerGenericCommand+0x66>
    1ece:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <xTaskGetSchedulerState>
    1ed2:	00 e0       	ldi	r16, 0x00	; 0
    1ed4:	82 30       	cpi	r24, 0x02	; 2
    1ed6:	29 f1       	breq	.+74     	; 0x1f22 <xTimerGenericCommand+0x96>
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	a9 01       	movw	r20, r18
    1ede:	be 01       	movw	r22, r28
    1ee0:	6f 5f       	subi	r22, 0xFF	; 255
    1ee2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee4:	80 91 b6 2d 	lds	r24, 0x2DB6	; 0x802db6 <xTimerQueue>
    1ee8:	90 91 b7 2d 	lds	r25, 0x2DB7	; 0x802db7 <xTimerQueue+0x1>
    1eec:	0e 94 01 07 	call	0xe02	; 0xe02 <xQueueGenericSend>
    1ef0:	08 c0       	rjmp	.+16     	; 0x1f02 <xTimerGenericCommand+0x76>
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	a8 01       	movw	r20, r16
    1ef6:	be 01       	movw	r22, r28
    1ef8:	6f 5f       	subi	r22, 0xFF	; 255
    1efa:	7f 4f       	sbci	r23, 0xFF	; 255
    1efc:	cf 01       	movw	r24, r30
    1efe:	0e 94 bb 07 	call	0xf76	; 0xf76 <xQueueGenericSendFromISR>
    1f02:	29 96       	adiw	r28, 0x09	; 9
    1f04:	cd bf       	out	0x3d, r28	; 61
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	1f 91       	pop	r17
    1f0e:	0f 91       	pop	r16
    1f10:	ff 90       	pop	r15
    1f12:	ef 90       	pop	r14
    1f14:	df 90       	pop	r13
    1f16:	cf 90       	pop	r12
    1f18:	bf 90       	pop	r11
    1f1a:	af 90       	pop	r10
    1f1c:	9f 90       	pop	r9
    1f1e:	8f 90       	pop	r8
    1f20:	08 95       	ret
    1f22:	a7 01       	movw	r20, r14
    1f24:	96 01       	movw	r18, r12
    1f26:	be 01       	movw	r22, r28
    1f28:	6f 5f       	subi	r22, 0xFF	; 255
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	80 91 b6 2d 	lds	r24, 0x2DB6	; 0x802db6 <xTimerQueue>
    1f30:	90 91 b7 2d 	lds	r25, 0x2DB7	; 0x802db7 <xTimerQueue+0x1>
    1f34:	0e 94 01 07 	call	0xe02	; 0xe02 <xQueueGenericSend>
    1f38:	e4 cf       	rjmp	.-56     	; 0x1f02 <xTimerGenericCommand+0x76>
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	e2 cf       	rjmp	.-60     	; 0x1f02 <xTimerGenericCommand+0x76>

00001f3e <prvSwitchTimerLists>:
    1f3e:	8f 92       	push	r8
    1f40:	9f 92       	push	r9
    1f42:	af 92       	push	r10
    1f44:	bf 92       	push	r11
    1f46:	cf 92       	push	r12
    1f48:	df 92       	push	r13
    1f4a:	ef 92       	push	r14
    1f4c:	ff 92       	push	r15
    1f4e:	0f 93       	push	r16
    1f50:	1f 93       	push	r17
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	16 c0       	rjmp	.+44     	; 0x1f84 <prvSwitchTimerLists+0x46>
    1f58:	07 80       	ldd	r0, Z+7	; 0x07
    1f5a:	f0 85       	ldd	r31, Z+8	; 0x08
    1f5c:	e0 2d       	mov	r30, r0
    1f5e:	80 80       	ld	r8, Z
    1f60:	91 80       	ldd	r9, Z+1	; 0x01
    1f62:	a2 80       	ldd	r10, Z+2	; 0x02
    1f64:	b3 80       	ldd	r11, Z+3	; 0x03
    1f66:	c0 85       	ldd	r28, Z+8	; 0x08
    1f68:	d1 85       	ldd	r29, Z+9	; 0x09
    1f6a:	8e 01       	movw	r16, r28
    1f6c:	0e 5f       	subi	r16, 0xFE	; 254
    1f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f70:	c8 01       	movw	r24, r16
    1f72:	0e 94 e5 03 	call	0x7ca	; 0x7ca <uxListRemove>
    1f76:	ed 89       	ldd	r30, Y+21	; 0x15
    1f78:	fe 89       	ldd	r31, Y+22	; 0x16
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	19 95       	eicall
    1f7e:	8a 89       	ldd	r24, Y+18	; 0x12
    1f80:	81 30       	cpi	r24, 0x01	; 1
    1f82:	01 f1       	breq	.+64     	; 0x1fc4 <prvSwitchTimerLists+0x86>
    1f84:	e0 91 ba 2d 	lds	r30, 0x2DBA	; 0x802dba <pxCurrentTimerList>
    1f88:	f0 91 bb 2d 	lds	r31, 0x2DBB	; 0x802dbb <pxCurrentTimerList+0x1>
    1f8c:	80 81       	ld	r24, Z
    1f8e:	81 11       	cpse	r24, r1
    1f90:	e3 cf       	rjmp	.-58     	; 0x1f58 <prvSwitchTimerLists+0x1a>
    1f92:	80 91 b8 2d 	lds	r24, 0x2DB8	; 0x802db8 <pxOverflowTimerList>
    1f96:	90 91 b9 2d 	lds	r25, 0x2DB9	; 0x802db9 <pxOverflowTimerList+0x1>
    1f9a:	80 93 ba 2d 	sts	0x2DBA, r24	; 0x802dba <pxCurrentTimerList>
    1f9e:	90 93 bb 2d 	sts	0x2DBB, r25	; 0x802dbb <pxCurrentTimerList+0x1>
    1fa2:	e0 93 b8 2d 	sts	0x2DB8, r30	; 0x802db8 <pxOverflowTimerList>
    1fa6:	f0 93 b9 2d 	sts	0x2DB9, r31	; 0x802db9 <pxOverflowTimerList+0x1>
    1faa:	df 91       	pop	r29
    1fac:	cf 91       	pop	r28
    1fae:	1f 91       	pop	r17
    1fb0:	0f 91       	pop	r16
    1fb2:	ff 90       	pop	r15
    1fb4:	ef 90       	pop	r14
    1fb6:	df 90       	pop	r13
    1fb8:	cf 90       	pop	r12
    1fba:	bf 90       	pop	r11
    1fbc:	af 90       	pop	r10
    1fbe:	9f 90       	pop	r9
    1fc0:	8f 90       	pop	r8
    1fc2:	08 95       	ret
    1fc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fc8:	a8 89       	ldd	r26, Y+16	; 0x10
    1fca:	b9 89       	ldd	r27, Y+17	; 0x11
    1fcc:	88 0d       	add	r24, r8
    1fce:	99 1d       	adc	r25, r9
    1fd0:	aa 1d       	adc	r26, r10
    1fd2:	bb 1d       	adc	r27, r11
    1fd4:	88 16       	cp	r8, r24
    1fd6:	99 06       	cpc	r9, r25
    1fd8:	aa 06       	cpc	r10, r26
    1fda:	bb 06       	cpc	r11, r27
    1fdc:	70 f4       	brcc	.+28     	; 0x1ffa <prvSwitchTimerLists+0xbc>
    1fde:	8a 83       	std	Y+2, r24	; 0x02
    1fe0:	9b 83       	std	Y+3, r25	; 0x03
    1fe2:	ac 83       	std	Y+4, r26	; 0x04
    1fe4:	bd 83       	std	Y+5, r27	; 0x05
    1fe6:	ca 87       	std	Y+10, r28	; 0x0a
    1fe8:	db 87       	std	Y+11, r29	; 0x0b
    1fea:	b8 01       	movw	r22, r16
    1fec:	80 91 ba 2d 	lds	r24, 0x2DBA	; 0x802dba <pxCurrentTimerList>
    1ff0:	90 91 bb 2d 	lds	r25, 0x2DBB	; 0x802dbb <pxCurrentTimerList+0x1>
    1ff4:	0e 94 a4 03 	call	0x748	; 0x748 <vListInsert>
    1ff8:	c5 cf       	rjmp	.-118    	; 0x1f84 <prvSwitchTimerLists+0x46>
    1ffa:	c1 2c       	mov	r12, r1
    1ffc:	d1 2c       	mov	r13, r1
    1ffe:	76 01       	movw	r14, r12
    2000:	00 e0       	ldi	r16, 0x00	; 0
    2002:	10 e0       	ldi	r17, 0x00	; 0
    2004:	a5 01       	movw	r20, r10
    2006:	94 01       	movw	r18, r8
    2008:	60 e0       	ldi	r22, 0x00	; 0
    200a:	ce 01       	movw	r24, r28
    200c:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTimerGenericCommand>
    2010:	b9 cf       	rjmp	.-142    	; 0x1f84 <prvSwitchTimerLists+0x46>

00002012 <prvTimerTask>:
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	29 97       	sbiw	r28, 0x09	; 9
    201c:	cd bf       	out	0x3d, r28	; 61
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	e0 91 ba 2d 	lds	r30, 0x2DBA	; 0x802dba <pxCurrentTimerList>
    2024:	f0 91 bb 2d 	lds	r31, 0x2DBB	; 0x802dbb <pxCurrentTimerList+0x1>
    2028:	80 81       	ld	r24, Z
    202a:	88 23       	and	r24, r24
    202c:	09 f4       	brne	.+2      	; 0x2030 <prvTimerTask+0x1e>
    202e:	e6 c0       	rjmp	.+460    	; 0x21fc <prvTimerTask+0x1ea>
    2030:	07 80       	ldd	r0, Z+7	; 0x07
    2032:	f0 85       	ldd	r31, Z+8	; 0x08
    2034:	e0 2d       	mov	r30, r0
    2036:	40 80       	ld	r4, Z
    2038:	51 80       	ldd	r5, Z+1	; 0x01
    203a:	62 80       	ldd	r6, Z+2	; 0x02
    203c:	73 80       	ldd	r7, Z+3	; 0x03
    203e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <vTaskSuspendAll>
    2042:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <xTaskGetTickCount>
    2046:	4b 01       	movw	r8, r22
    2048:	5c 01       	movw	r10, r24
    204a:	80 91 b0 2d 	lds	r24, 0x2DB0	; 0x802db0 <xLastTime.4745>
    204e:	90 91 b1 2d 	lds	r25, 0x2DB1	; 0x802db1 <xLastTime.4745+0x1>
    2052:	a0 91 b2 2d 	lds	r26, 0x2DB2	; 0x802db2 <xLastTime.4745+0x2>
    2056:	b0 91 b3 2d 	lds	r27, 0x2DB3	; 0x802db3 <xLastTime.4745+0x3>
    205a:	88 16       	cp	r8, r24
    205c:	99 06       	cpc	r9, r25
    205e:	aa 06       	cpc	r10, r26
    2060:	bb 06       	cpc	r11, r27
    2062:	08 f4       	brcc	.+2      	; 0x2066 <prvTimerTask+0x54>
    2064:	f2 c0       	rjmp	.+484    	; 0x224a <prvTimerTask+0x238>
    2066:	80 92 b0 2d 	sts	0x2DB0, r8	; 0x802db0 <xLastTime.4745>
    206a:	90 92 b1 2d 	sts	0x2DB1, r9	; 0x802db1 <xLastTime.4745+0x1>
    206e:	a0 92 b2 2d 	sts	0x2DB2, r10	; 0x802db2 <xLastTime.4745+0x2>
    2072:	b0 92 b3 2d 	sts	0x2DB3, r11	; 0x802db3 <xLastTime.4745+0x3>
    2076:	84 14       	cp	r8, r4
    2078:	95 04       	cpc	r9, r5
    207a:	a6 04       	cpc	r10, r6
    207c:	b7 04       	cpc	r11, r7
    207e:	08 f0       	brcs	.+2      	; 0x2082 <prvTimerTask+0x70>
    2080:	f7 c0       	rjmp	.+494    	; 0x2270 <prvTimerTask+0x25e>
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	b3 01       	movw	r22, r6
    2086:	a2 01       	movw	r20, r4
    2088:	48 19       	sub	r20, r8
    208a:	59 09       	sbc	r21, r9
    208c:	6a 09       	sbc	r22, r10
    208e:	7b 09       	sbc	r23, r11
    2090:	80 91 b6 2d 	lds	r24, 0x2DB6	; 0x802db6 <xTimerQueue>
    2094:	90 91 b7 2d 	lds	r25, 0x2DB7	; 0x802db7 <xTimerQueue+0x1>
    2098:	0e 94 c3 08 	call	0x1186	; 0x1186 <vQueueWaitForMessageRestricted>
    209c:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <xTaskResumeAll>
    20a0:	88 23       	and	r24, r24
    20a2:	09 f4       	brne	.+2      	; 0x20a6 <prvTimerTask+0x94>
    20a4:	e2 c0       	rjmp	.+452    	; 0x226a <prvTimerTask+0x258>
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	a9 01       	movw	r20, r18
    20ac:	be 01       	movw	r22, r28
    20ae:	6f 5f       	subi	r22, 0xFF	; 255
    20b0:	7f 4f       	sbci	r23, 0xFF	; 255
    20b2:	80 91 b6 2d 	lds	r24, 0x2DB6	; 0x802db6 <xTimerQueue>
    20b6:	90 91 b7 2d 	lds	r25, 0x2DB7	; 0x802db7 <xTimerQueue+0x1>
    20ba:	0e 94 fa 07 	call	0xff4	; 0xff4 <xQueueReceive>
    20be:	88 23       	and	r24, r24
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <prvTimerTask+0xb2>
    20c2:	ae cf       	rjmp	.-164    	; 0x2020 <prvTimerTask+0xe>
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	87 fd       	sbrc	r24, 7
    20c8:	8c c0       	rjmp	.+280    	; 0x21e2 <prvTimerTask+0x1d0>
    20ca:	ae 80       	ldd	r10, Y+6	; 0x06
    20cc:	bf 80       	ldd	r11, Y+7	; 0x07
    20ce:	f5 01       	movw	r30, r10
    20d0:	84 85       	ldd	r24, Z+12	; 0x0c
    20d2:	95 85       	ldd	r25, Z+13	; 0x0d
    20d4:	89 2b       	or	r24, r25
    20d6:	21 f0       	breq	.+8      	; 0x20e0 <prvTimerTask+0xce>
    20d8:	c5 01       	movw	r24, r10
    20da:	02 96       	adiw	r24, 0x02	; 2
    20dc:	0e 94 e5 03 	call	0x7ca	; 0x7ca <uxListRemove>
    20e0:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <xTaskGetTickCount>
    20e4:	2b 01       	movw	r4, r22
    20e6:	3c 01       	movw	r6, r24
    20e8:	80 91 b0 2d 	lds	r24, 0x2DB0	; 0x802db0 <xLastTime.4745>
    20ec:	90 91 b1 2d 	lds	r25, 0x2DB1	; 0x802db1 <xLastTime.4745+0x1>
    20f0:	a0 91 b2 2d 	lds	r26, 0x2DB2	; 0x802db2 <xLastTime.4745+0x2>
    20f4:	b0 91 b3 2d 	lds	r27, 0x2DB3	; 0x802db3 <xLastTime.4745+0x3>
    20f8:	48 16       	cp	r4, r24
    20fa:	59 06       	cpc	r5, r25
    20fc:	6a 06       	cpc	r6, r26
    20fe:	7b 06       	cpc	r7, r27
    2100:	08 f4       	brcc	.+2      	; 0x2104 <prvTimerTask+0xf2>
    2102:	b0 c0       	rjmp	.+352    	; 0x2264 <prvTimerTask+0x252>
    2104:	40 92 b0 2d 	sts	0x2DB0, r4	; 0x802db0 <xLastTime.4745>
    2108:	50 92 b1 2d 	sts	0x2DB1, r5	; 0x802db1 <xLastTime.4745+0x1>
    210c:	60 92 b2 2d 	sts	0x2DB2, r6	; 0x802db2 <xLastTime.4745+0x2>
    2110:	70 92 b3 2d 	sts	0x2DB3, r7	; 0x802db3 <xLastTime.4745+0x3>
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	08 2e       	mov	r0, r24
    2118:	00 0c       	add	r0, r0
    211a:	99 0b       	sbc	r25, r25
    211c:	aa 0b       	sbc	r26, r26
    211e:	bb 0b       	sbc	r27, r27
    2120:	8a 30       	cpi	r24, 0x0A	; 10
    2122:	91 05       	cpc	r25, r1
    2124:	08 f0       	brcs	.+2      	; 0x2128 <prvTimerTask+0x116>
    2126:	bf cf       	rjmp	.-130    	; 0x20a6 <prvTimerTask+0x94>
    2128:	fc 01       	movw	r30, r24
    212a:	88 27       	eor	r24, r24
    212c:	e2 50       	subi	r30, 0x02	; 2
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	8f 4f       	sbci	r24, 0xFF	; 255
    2132:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__tablejump2__>
    2136:	4a 81       	ldd	r20, Y+2	; 0x02
    2138:	5b 81       	ldd	r21, Y+3	; 0x03
    213a:	6c 81       	ldd	r22, Y+4	; 0x04
    213c:	7d 81       	ldd	r23, Y+5	; 0x05
    213e:	d5 01       	movw	r26, r10
    2140:	1e 96       	adiw	r26, 0x0e	; 14
    2142:	4d 93       	st	X+, r20
    2144:	5d 93       	st	X+, r21
    2146:	6d 93       	st	X+, r22
    2148:	7c 93       	st	X, r23
    214a:	51 97       	sbiw	r26, 0x11	; 17
    214c:	44 0d       	add	r20, r4
    214e:	55 1d       	adc	r21, r5
    2150:	66 1d       	adc	r22, r6
    2152:	77 1d       	adc	r23, r7
    2154:	73 01       	movw	r14, r6
    2156:	62 01       	movw	r12, r4
    2158:	93 01       	movw	r18, r6
    215a:	82 01       	movw	r16, r4
    215c:	c5 01       	movw	r24, r10
    215e:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <prvInsertTimerInActiveList>
    2162:	a1 cf       	rjmp	.-190    	; 0x20a6 <prvTimerTask+0x94>
    2164:	ca 80       	ldd	r12, Y+2	; 0x02
    2166:	db 80       	ldd	r13, Y+3	; 0x03
    2168:	ec 80       	ldd	r14, Y+4	; 0x04
    216a:	fd 80       	ldd	r15, Y+5	; 0x05
    216c:	d5 01       	movw	r26, r10
    216e:	1e 96       	adiw	r26, 0x0e	; 14
    2170:	4d 91       	ld	r20, X+
    2172:	5d 91       	ld	r21, X+
    2174:	6d 91       	ld	r22, X+
    2176:	7c 91       	ld	r23, X
    2178:	51 97       	sbiw	r26, 0x11	; 17
    217a:	4c 0d       	add	r20, r12
    217c:	5d 1d       	adc	r21, r13
    217e:	6e 1d       	adc	r22, r14
    2180:	7f 1d       	adc	r23, r15
    2182:	93 01       	movw	r18, r6
    2184:	82 01       	movw	r16, r4
    2186:	c5 01       	movw	r24, r10
    2188:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <prvInsertTimerInActiveList>
    218c:	88 23       	and	r24, r24
    218e:	09 f4       	brne	.+2      	; 0x2192 <prvTimerTask+0x180>
    2190:	8a cf       	rjmp	.-236    	; 0x20a6 <prvTimerTask+0x94>
    2192:	d5 01       	movw	r26, r10
    2194:	55 96       	adiw	r26, 0x15	; 21
    2196:	ed 91       	ld	r30, X+
    2198:	fc 91       	ld	r31, X
    219a:	56 97       	sbiw	r26, 0x16	; 22
    219c:	c5 01       	movw	r24, r10
    219e:	19 95       	eicall
    21a0:	f5 01       	movw	r30, r10
    21a2:	82 89       	ldd	r24, Z+18	; 0x12
    21a4:	81 30       	cpi	r24, 0x01	; 1
    21a6:	09 f0       	breq	.+2      	; 0x21aa <prvTimerTask+0x198>
    21a8:	7e cf       	rjmp	.-260    	; 0x20a6 <prvTimerTask+0x94>
    21aa:	4a 81       	ldd	r20, Y+2	; 0x02
    21ac:	5b 81       	ldd	r21, Y+3	; 0x03
    21ae:	6c 81       	ldd	r22, Y+4	; 0x04
    21b0:	7d 81       	ldd	r23, Y+5	; 0x05
    21b2:	86 85       	ldd	r24, Z+14	; 0x0e
    21b4:	97 85       	ldd	r25, Z+15	; 0x0f
    21b6:	a0 89       	ldd	r26, Z+16	; 0x10
    21b8:	b1 89       	ldd	r27, Z+17	; 0x11
    21ba:	9a 01       	movw	r18, r20
    21bc:	ab 01       	movw	r20, r22
    21be:	28 0f       	add	r18, r24
    21c0:	39 1f       	adc	r19, r25
    21c2:	4a 1f       	adc	r20, r26
    21c4:	5b 1f       	adc	r21, r27
    21c6:	c1 2c       	mov	r12, r1
    21c8:	d1 2c       	mov	r13, r1
    21ca:	76 01       	movw	r14, r12
    21cc:	00 e0       	ldi	r16, 0x00	; 0
    21ce:	10 e0       	ldi	r17, 0x00	; 0
    21d0:	60 e0       	ldi	r22, 0x00	; 0
    21d2:	c5 01       	movw	r24, r10
    21d4:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTimerGenericCommand>
    21d8:	66 cf       	rjmp	.-308    	; 0x20a6 <prvTimerTask+0x94>
    21da:	c5 01       	movw	r24, r10
    21dc:	0e 94 6d 03 	call	0x6da	; 0x6da <vPortFree>
    21e0:	62 cf       	rjmp	.-316    	; 0x20a6 <prvTimerTask+0x94>
    21e2:	4e 81       	ldd	r20, Y+6	; 0x06
    21e4:	5f 81       	ldd	r21, Y+7	; 0x07
    21e6:	68 85       	ldd	r22, Y+8	; 0x08
    21e8:	79 85       	ldd	r23, Y+9	; 0x09
    21ea:	ea 81       	ldd	r30, Y+2	; 0x02
    21ec:	fb 81       	ldd	r31, Y+3	; 0x03
    21ee:	8c 81       	ldd	r24, Y+4	; 0x04
    21f0:	9d 81       	ldd	r25, Y+5	; 0x05
    21f2:	19 95       	eicall
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	87 fd       	sbrc	r24, 7
    21f8:	56 cf       	rjmp	.-340    	; 0x20a6 <prvTimerTask+0x94>
    21fa:	67 cf       	rjmp	.-306    	; 0x20ca <prvTimerTask+0xb8>
    21fc:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <vTaskSuspendAll>
    2200:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <xTaskGetTickCount>
    2204:	4b 01       	movw	r8, r22
    2206:	5c 01       	movw	r10, r24
    2208:	80 91 b0 2d 	lds	r24, 0x2DB0	; 0x802db0 <xLastTime.4745>
    220c:	90 91 b1 2d 	lds	r25, 0x2DB1	; 0x802db1 <xLastTime.4745+0x1>
    2210:	a0 91 b2 2d 	lds	r26, 0x2DB2	; 0x802db2 <xLastTime.4745+0x2>
    2214:	b0 91 b3 2d 	lds	r27, 0x2DB3	; 0x802db3 <xLastTime.4745+0x3>
    2218:	88 16       	cp	r8, r24
    221a:	99 06       	cpc	r9, r25
    221c:	aa 06       	cpc	r10, r26
    221e:	bb 06       	cpc	r11, r27
    2220:	a0 f0       	brcs	.+40     	; 0x224a <prvTimerTask+0x238>
    2222:	80 92 b0 2d 	sts	0x2DB0, r8	; 0x802db0 <xLastTime.4745>
    2226:	90 92 b1 2d 	sts	0x2DB1, r9	; 0x802db1 <xLastTime.4745+0x1>
    222a:	a0 92 b2 2d 	sts	0x2DB2, r10	; 0x802db2 <xLastTime.4745+0x2>
    222e:	b0 92 b3 2d 	sts	0x2DB3, r11	; 0x802db3 <xLastTime.4745+0x3>
    2232:	e0 91 b8 2d 	lds	r30, 0x2DB8	; 0x802db8 <pxOverflowTimerList>
    2236:	f0 91 b9 2d 	lds	r31, 0x2DB9	; 0x802db9 <pxOverflowTimerList+0x1>
    223a:	80 81       	ld	r24, Z
    223c:	21 e0       	ldi	r18, 0x01	; 1
    223e:	81 11       	cpse	r24, r1
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	41 2c       	mov	r4, r1
    2244:	51 2c       	mov	r5, r1
    2246:	32 01       	movw	r6, r4
    2248:	1d cf       	rjmp	.-454    	; 0x2084 <prvTimerTask+0x72>
    224a:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <prvSwitchTimerLists>
    224e:	80 92 b0 2d 	sts	0x2DB0, r8	; 0x802db0 <xLastTime.4745>
    2252:	90 92 b1 2d 	sts	0x2DB1, r9	; 0x802db1 <xLastTime.4745+0x1>
    2256:	a0 92 b2 2d 	sts	0x2DB2, r10	; 0x802db2 <xLastTime.4745+0x2>
    225a:	b0 92 b3 2d 	sts	0x2DB3, r11	; 0x802db3 <xLastTime.4745+0x3>
    225e:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <xTaskResumeAll>
    2262:	21 cf       	rjmp	.-446    	; 0x20a6 <prvTimerTask+0x94>
    2264:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <prvSwitchTimerLists>
    2268:	4d cf       	rjmp	.-358    	; 0x2104 <prvTimerTask+0xf2>
    226a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <vPortYield>
    226e:	1b cf       	rjmp	.-458    	; 0x20a6 <prvTimerTask+0x94>
    2270:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <xTaskResumeAll>
    2274:	e0 91 ba 2d 	lds	r30, 0x2DBA	; 0x802dba <pxCurrentTimerList>
    2278:	f0 91 bb 2d 	lds	r31, 0x2DBB	; 0x802dbb <pxCurrentTimerList+0x1>
    227c:	07 80       	ldd	r0, Z+7	; 0x07
    227e:	f0 85       	ldd	r31, Z+8	; 0x08
    2280:	e0 2d       	mov	r30, r0
    2282:	20 84       	ldd	r2, Z+8	; 0x08
    2284:	31 84       	ldd	r3, Z+9	; 0x09
    2286:	c1 01       	movw	r24, r2
    2288:	02 96       	adiw	r24, 0x02	; 2
    228a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <uxListRemove>
    228e:	d1 01       	movw	r26, r2
    2290:	52 96       	adiw	r26, 0x12	; 18
    2292:	8c 91       	ld	r24, X
    2294:	52 97       	sbiw	r26, 0x12	; 18
    2296:	81 30       	cpi	r24, 0x01	; 1
    2298:	41 f0       	breq	.+16     	; 0x22aa <prvTimerTask+0x298>
    229a:	d1 01       	movw	r26, r2
    229c:	55 96       	adiw	r26, 0x15	; 21
    229e:	ed 91       	ld	r30, X+
    22a0:	fc 91       	ld	r31, X
    22a2:	56 97       	sbiw	r26, 0x16	; 22
    22a4:	c1 01       	movw	r24, r2
    22a6:	19 95       	eicall
    22a8:	fe ce       	rjmp	.-516    	; 0x20a6 <prvTimerTask+0x94>
    22aa:	1e 96       	adiw	r26, 0x0e	; 14
    22ac:	4d 91       	ld	r20, X+
    22ae:	5d 91       	ld	r21, X+
    22b0:	6d 91       	ld	r22, X+
    22b2:	7c 91       	ld	r23, X
    22b4:	51 97       	sbiw	r26, 0x11	; 17
    22b6:	44 0d       	add	r20, r4
    22b8:	55 1d       	adc	r21, r5
    22ba:	66 1d       	adc	r22, r6
    22bc:	77 1d       	adc	r23, r7
    22be:	73 01       	movw	r14, r6
    22c0:	62 01       	movw	r12, r4
    22c2:	95 01       	movw	r18, r10
    22c4:	84 01       	movw	r16, r8
    22c6:	c1 01       	movw	r24, r2
    22c8:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <prvInsertTimerInActiveList>
    22cc:	88 23       	and	r24, r24
    22ce:	29 f3       	breq	.-54     	; 0x229a <prvTimerTask+0x288>
    22d0:	c1 2c       	mov	r12, r1
    22d2:	d1 2c       	mov	r13, r1
    22d4:	76 01       	movw	r14, r12
    22d6:	00 e0       	ldi	r16, 0x00	; 0
    22d8:	10 e0       	ldi	r17, 0x00	; 0
    22da:	a3 01       	movw	r20, r6
    22dc:	92 01       	movw	r18, r4
    22de:	60 e0       	ldi	r22, 0x00	; 0
    22e0:	c1 01       	movw	r24, r2
    22e2:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTimerGenericCommand>
    22e6:	d9 cf       	rjmp	.-78     	; 0x229a <prvTimerTask+0x288>

000022e8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    22e8:	0f 93       	push	r16
    22ea:	1f 93       	push	r17
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	29 97       	sbiw	r28, 0x09	; 9
    22f6:	cd bf       	out	0x3d, r28	; 61
    22f8:	de bf       	out	0x3e, r29	; 62
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    22fa:	ee ef       	ldi	r30, 0xFE	; 254
    22fc:	e9 83       	std	Y+1, r30	; 0x01
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    22fe:	8a 83       	std	Y+2, r24	; 0x02
    2300:	9b 83       	std	Y+3, r25	; 0x03
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    2302:	6c 83       	std	Y+4, r22	; 0x04
    2304:	7d 83       	std	Y+5, r23	; 0x05
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    2306:	2e 83       	std	Y+6, r18	; 0x06
    2308:	3f 83       	std	Y+7, r19	; 0x07
    230a:	48 87       	std	Y+8, r20	; 0x08
    230c:	59 87       	std	Y+9, r21	; 0x09

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	a8 01       	movw	r20, r16
    2312:	be 01       	movw	r22, r28
    2314:	6f 5f       	subi	r22, 0xFF	; 255
    2316:	7f 4f       	sbci	r23, 0xFF	; 255
    2318:	80 91 b6 2d 	lds	r24, 0x2DB6	; 0x802db6 <xTimerQueue>
    231c:	90 91 b7 2d 	lds	r25, 0x2DB7	; 0x802db7 <xTimerQueue+0x1>
    2320:	0e 94 bb 07 	call	0xf76	; 0xf76 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
    2324:	29 96       	adiw	r28, 0x09	; 9
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	df 91       	pop	r29
    232c:	cf 91       	pop	r28
    232e:	1f 91       	pop	r17
    2330:	0f 91       	pop	r16
    2332:	08 95       	ret

00002334 <vInitClock>:
#include "clksys_driver.h"


void vInitClock(void)
{
	CLKSYS_Enable( OSC_RC2MEN_bm );
    2334:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    2338:	81 60       	ori	r24, 0x01	; 1
    233a:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    233e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    2342:	80 ff       	sbrs	r24, 0
    2344:	fc cf       	rjmp	.-8      	; 0x233e <vInitClock+0xa>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	0e 94 7e 01 	call	0x2fc	; 0x2fc <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    234c:	8e e1       	ldi	r24, 0x1E	; 30
    234e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    2352:	60 e0       	ldi	r22, 0x00	; 0
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	0e 94 66 01 	call	0x2cc	; 0x2cc <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    235a:	43 e0       	ldi	r20, 0x03	; 3
    235c:	60 e0       	ldi	r22, 0x00	; 0
    235e:	80 e4       	ldi	r24, 0x40	; 64
    2360:	0e 94 49 01 	call	0x292	; 0x292 <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    2364:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    2368:	88 60       	ori	r24, 0x08	; 8
    236a:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    236e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    2372:	83 ff       	sbrs	r24, 3
    2374:	fc cf       	rjmp	.-8      	; 0x236e <vInitClock+0x3a>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    2376:	64 e0       	ldi	r22, 0x04	; 4
    2378:	80 ec       	ldi	r24, 0xC0	; 192
    237a:	0e 94 57 01 	call	0x2ae	; 0x2ae <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    237e:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    2382:	80 61       	ori	r24, 0x10	; 16
    2384:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    2388:	60 e0       	ldi	r22, 0x00	; 0
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	0e 94 66 01 	call	0x2cc	; 0x2cc <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    2390:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    2394:	84 ff       	sbrs	r24, 4
    2396:	fc cf       	rjmp	.-8      	; 0x2390 <vInitClock+0x5c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    2398:	84 e0       	ldi	r24, 0x04	; 4
    239a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    239e:	87 e0       	ldi	r24, 0x07	; 7
    23a0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <CLKSYS_Disable>

000023a4 <vControl>:
	vTaskStartScheduler();
	return 0;
}


void vControl(void* pvParameters) {
    23a4:	cf 93       	push	r28
    23a6:	df 93       	push	r29
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	c2 54       	subi	r28, 0x42	; 66
    23ae:	d1 09       	sbc	r29, r1
    23b0:	cd bf       	out	0x3d, r28	; 61
    23b2:	de bf       	out	0x3e, r29	; 62
uint8_t ucCommand;
uint8_t ucReceivedDataBytes;
uint8_t ucDataArray[32] = {};
    23b4:	80 e2       	ldi	r24, 0x20	; 32
    23b6:	7e 01       	movw	r14, r28
    23b8:	21 e2       	ldi	r18, 0x21	; 33
    23ba:	e2 0e       	add	r14, r18
    23bc:	f1 1c       	adc	r15, r1
    23be:	f7 01       	movw	r30, r14
    23c0:	28 2f       	mov	r18, r24
    23c2:	11 92       	st	Z+, r1
    23c4:	2a 95       	dec	r18
    23c6:	e9 f7       	brne	.-6      	; 0x23c2 <vControl+0x1e>
uint8_t ucOutputString[32] = {};
    23c8:	fe 01       	movw	r30, r28
    23ca:	31 96       	adiw	r30, 0x01	; 1
    23cc:	3f 01       	movw	r6, r30
    23ce:	11 92       	st	Z+, r1
    23d0:	8a 95       	dec	r24
    23d2:	e9 f7       	brne	.-6      	; 0x23ce <vControl+0x2a>
    {
        if(ucQAMGetData(&ucCommand, &ucReceivedDataBytes, ucDataArray) == pdTRUE)
        {
            if (ucCommand != 0)
            {
                vDisplayWriteStringAtPos(1, 0, "Command:   %d ", ucCommand);
    23d4:	31 e1       	ldi	r19, 0x11	; 17
    23d6:	83 2e       	mov	r8, r19
    23d8:	31 e2       	ldi	r19, 0x21	; 33
    23da:	93 2e       	mov	r9, r19
                vDisplayWriteStringAtPos(2, 0, "DataBytes: %d ", ucReceivedDataBytes);
    23dc:	40 e2       	ldi	r20, 0x20	; 32
    23de:	a4 2e       	mov	r10, r20
    23e0:	41 e2       	ldi	r20, 0x21	; 33
    23e2:	b4 2e       	mov	r11, r20
    23e4:	52 e0       	ldi	r21, 0x02	; 2
    23e6:	35 2e       	mov	r3, r21
                vDisplayWriteStringAtPos(3, 0, "                    ");
    23e8:	6f e2       	ldi	r22, 0x2F	; 47
    23ea:	c6 2e       	mov	r12, r22
    23ec:	61 e2       	ldi	r22, 0x21	; 33
    23ee:	d6 2e       	mov	r13, r22
    23f0:	73 e0       	ldi	r23, 0x03	; 3
    23f2:	47 2e       	mov	r4, r23
                    /* Print received data bytes. */
                    for (uint8_t ucDataPrintCounter = 0; ucDataPrintCounter < ucReceivedDataBytes; ++ucDataPrintCounter)
                    {
                        if (ucDataPrintCounter < ucReceivedDataBytes)
                        {
                            vDisplayWriteStringAtPos(3, ucDataPrintCounter * 2, "%x", ucDataArray[ucDataPrintCounter]);
    23f4:	04 e4       	ldi	r16, 0x44	; 68
    23f6:	11 e2       	ldi	r17, 0x21	; 33
uint8_t ucDataArray[32] = {};
uint8_t ucOutputString[32] = {};

    while(1)
    {
        if(ucQAMGetData(&ucCommand, &ucReceivedDataBytes, ucDataArray) == pdTRUE)
    23f8:	a7 01       	movw	r20, r14
    23fa:	be 01       	movw	r22, r28
    23fc:	6f 5b       	subi	r22, 0xBF	; 191
    23fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2400:	ce 01       	movw	r24, r28
    2402:	8e 5b       	subi	r24, 0xBE	; 190
    2404:	9f 4f       	sbci	r25, 0xFF	; 255
    2406:	0e 94 9f 1c 	call	0x393e	; 0x393e <ucQAMGetData>
    240a:	81 30       	cpi	r24, 0x01	; 1
    240c:	09 f0       	breq	.+2      	; 0x2410 <vControl+0x6c>
    240e:	5c c0       	rjmp	.+184    	; 0x24c8 <vControl+0x124>
        {
            if (ucCommand != 0)
    2410:	23 96       	adiw	r28, 0x03	; 3
    2412:	9f ad       	ldd	r25, Y+63	; 0x3f
    2414:	23 97       	sbiw	r28, 0x03	; 3
    2416:	99 23       	and	r25, r25
    2418:	09 f4       	brne	.+2      	; 0x241c <vControl+0x78>
    241a:	56 c0       	rjmp	.+172    	; 0x24c8 <vControl+0x124>
            {
                vDisplayWriteStringAtPos(1, 0, "Command:   %d ", ucCommand);
    241c:	1f 92       	push	r1
    241e:	9f 93       	push	r25
    2420:	9f 92       	push	r9
    2422:	8f 92       	push	r8
    2424:	1f 92       	push	r1
    2426:	1f 92       	push	r1
    2428:	1f 92       	push	r1
    242a:	8f 93       	push	r24
    242c:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <vDisplayWriteStringAtPos>
                vDisplayWriteStringAtPos(2, 0, "DataBytes: %d ", ucReceivedDataBytes);
    2430:	22 96       	adiw	r28, 0x02	; 2
    2432:	8f ad       	ldd	r24, Y+63	; 0x3f
    2434:	22 97       	sbiw	r28, 0x02	; 2
    2436:	1f 92       	push	r1
    2438:	8f 93       	push	r24
    243a:	bf 92       	push	r11
    243c:	af 92       	push	r10
    243e:	1f 92       	push	r1
    2440:	1f 92       	push	r1
    2442:	1f 92       	push	r1
    2444:	3f 92       	push	r3
    2446:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <vDisplayWriteStringAtPos>
                vDisplayWriteStringAtPos(3, 0, "                    ");
    244a:	df 92       	push	r13
    244c:	cf 92       	push	r12
    244e:	1f 92       	push	r1
    2450:	1f 92       	push	r1
    2452:	1f 92       	push	r1
    2454:	4f 92       	push	r4
    2456:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <vDisplayWriteStringAtPos>
                if (ucCommand != 3)
    245a:	cd bf       	out	0x3d, r28	; 61
    245c:	de bf       	out	0x3e, r29	; 62
    245e:	23 96       	adiw	r28, 0x03	; 3
    2460:	5f ac       	ldd	r5, Y+63	; 0x3f
    2462:	23 97       	sbiw	r28, 0x03	; 3
    2464:	33 e0       	ldi	r19, 0x03	; 3
    2466:	53 16       	cp	r5, r19
    2468:	b1 f1       	breq	.+108    	; 0x24d6 <vControl+0x132>
                {
                    /* Print received data bytes. */
                    for (uint8_t ucDataPrintCounter = 0; ucDataPrintCounter < ucReceivedDataBytes; ++ucDataPrintCounter)
    246a:	22 96       	adiw	r28, 0x02	; 2
    246c:	8f ad       	ldd	r24, Y+63	; 0x3f
    246e:	22 97       	sbiw	r28, 0x02	; 2
    2470:	88 23       	and	r24, r24
    2472:	21 f1       	breq	.+72     	; 0x24bc <vControl+0x118>
    2474:	51 2c       	mov	r5, r1
    2476:	06 c0       	rjmp	.+12     	; 0x2484 <vControl+0xe0>
    2478:	53 94       	inc	r5
    247a:	22 96       	adiw	r28, 0x02	; 2
    247c:	8f ad       	ldd	r24, Y+63	; 0x3f
    247e:	22 97       	sbiw	r28, 0x02	; 2
    2480:	58 16       	cp	r5, r24
    2482:	e0 f4       	brcc	.+56     	; 0x24bc <vControl+0x118>
                    {
                        if (ucDataPrintCounter < ucReceivedDataBytes)
    2484:	58 16       	cp	r5, r24
    2486:	c0 f7       	brcc	.-16     	; 0x2478 <vControl+0xd4>
                        {
                            vDisplayWriteStringAtPos(3, ucDataPrintCounter * 2, "%x", ucDataArray[ucDataPrintCounter]);
    2488:	85 2d       	mov	r24, r5
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	f7 01       	movw	r30, r14
    248e:	e8 0f       	add	r30, r24
    2490:	f9 1f       	adc	r31, r25
    2492:	20 81       	ld	r18, Z
    2494:	1f 92       	push	r1
    2496:	2f 93       	push	r18
    2498:	1f 93       	push	r17
    249a:	0f 93       	push	r16
    249c:	88 0f       	add	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	9f 93       	push	r25
    24a2:	8f 93       	push	r24
    24a4:	1f 92       	push	r1
    24a6:	4f 92       	push	r4
    24a8:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <vDisplayWriteStringAtPos>
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	de bf       	out	0x3e, r29	; 62
                vDisplayWriteStringAtPos(2, 0, "DataBytes: %d ", ucReceivedDataBytes);
                vDisplayWriteStringAtPos(3, 0, "                    ");
                if (ucCommand != 3)
                {
                    /* Print received data bytes. */
                    for (uint8_t ucDataPrintCounter = 0; ucDataPrintCounter < ucReceivedDataBytes; ++ucDataPrintCounter)
    24b0:	53 94       	inc	r5
    24b2:	22 96       	adiw	r28, 0x02	; 2
    24b4:	8f ad       	ldd	r24, Y+63	; 0x3f
    24b6:	22 97       	sbiw	r28, 0x02	; 2
    24b8:	58 16       	cp	r5, r24
    24ba:	20 f3       	brcs	.-56     	; 0x2484 <vControl+0xe0>
                {
                    /* Command 3 indicates a string which can now be printed. */
                    strncpy((char*)ucOutputString, (char*)ucDataArray, ucReceivedDataBytes);
                    vDisplayWriteStringAtPos(3, 0, "%s", ucOutputString);
                }
                ucCommand = 0;
    24bc:	23 96       	adiw	r28, 0x03	; 3
    24be:	1f ae       	std	Y+63, r1	; 0x3f
    24c0:	23 97       	sbiw	r28, 0x03	; 3
                ucReceivedDataBytes = 0;
    24c2:	22 96       	adiw	r28, 0x02	; 2
    24c4:	1f ae       	std	Y+63, r1	; 0x3f
    24c6:	22 97       	sbiw	r28, 0x02	; 2
            }
        }
        vTaskDelay(pdMS_TO_TICKS(2000));
    24c8:	60 ed       	ldi	r22, 0xD0	; 208
    24ca:	77 e0       	ldi	r23, 0x07	; 7
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <vTaskDelay>
    }   
    24d4:	91 cf       	rjmp	.-222    	; 0x23f8 <vControl+0x54>
                    }
                }
                else
                {
                    /* Command 3 indicates a string which can now be printed. */
                    strncpy((char*)ucOutputString, (char*)ucDataArray, ucReceivedDataBytes);
    24d6:	22 96       	adiw	r28, 0x02	; 2
    24d8:	4f ad       	ldd	r20, Y+63	; 0x3f
    24da:	22 97       	sbiw	r28, 0x02	; 2
    24dc:	50 e0       	ldi	r21, 0x00	; 0
    24de:	b7 01       	movw	r22, r14
    24e0:	c3 01       	movw	r24, r6
    24e2:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <strncpy>
                    vDisplayWriteStringAtPos(3, 0, "%s", ucOutputString);
    24e6:	7f 92       	push	r7
    24e8:	6f 92       	push	r6
    24ea:	e7 e4       	ldi	r30, 0x47	; 71
    24ec:	f1 e2       	ldi	r31, 0x21	; 33
    24ee:	ff 93       	push	r31
    24f0:	ef 93       	push	r30
    24f2:	1f 92       	push	r1
    24f4:	1f 92       	push	r1
    24f6:	1f 92       	push	r1
    24f8:	5f 92       	push	r5
    24fa:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <vDisplayWriteStringAtPos>
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	de bf       	out	0x3e, r29	; 62
                }
                ucCommand = 0;
    2502:	23 96       	adiw	r28, 0x03	; 3
    2504:	1f ae       	std	Y+63, r1	; 0x3f
    2506:	23 97       	sbiw	r28, 0x03	; 3
                ucReceivedDataBytes = 0;
    2508:	22 96       	adiw	r28, 0x02	; 2
    250a:	1f ae       	std	Y+63, r1	; 0x3f
    250c:	22 97       	sbiw	r28, 0x02	; 2
    250e:	dc cf       	rjmp	.-72     	; 0x24c8 <vControl+0x124>

00002510 <vApplicationIdleHook>:
extern void vApplicationIdleHook( void );
void vControl(void* pvParameters);


void vApplicationIdleHook( void )
{	
    2510:	08 95       	ret

00002512 <main>:
	
}

int main(void)
{
    2512:	ef 92       	push	r14
    2514:	ff 92       	push	r15
    2516:	0f 93       	push	r16
    2518:	cf 93       	push	r28
    resetReason_t reason = getResetReason();
    251a:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <getResetReason>
    251e:	c8 2f       	mov	r28, r24

	vInitClock();
    2520:	0e 94 9a 11 	call	0x2334	; 0x2334 <vInitClock>
	vInitDisplay();
    2524:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <vInitDisplay>
	
	xTaskCreate(vQAMDec, (const char *) "QAMDecoder", configMINIMAL_STACK_SIZE+800, NULL, 3, NULL);
    2528:	e1 2c       	mov	r14, r1
    252a:	f1 2c       	mov	r15, r1
    252c:	03 e0       	ldi	r16, 0x03	; 3
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	48 ee       	ldi	r20, 0xE8	; 232
    2534:	53 e0       	ldi	r21, 0x03	; 3
    2536:	6a e4       	ldi	r22, 0x4A	; 74
    2538:	71 e2       	ldi	r23, 0x21	; 33
    253a:	8c ed       	ldi	r24, 0xDC	; 220
    253c:	9c e1       	ldi	r25, 0x1C	; 28
    253e:	0e 94 0d 0a 	call	0x141a	; 0x141a <xTaskCreate>
    xTaskCreate(vControl, NULL, configMINIMAL_STACK_SIZE+100, NULL, 2, NULL);
    2542:	02 e0       	ldi	r16, 0x02	; 2
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	4c e2       	ldi	r20, 0x2C	; 44
    254a:	51 e0       	ldi	r21, 0x01	; 1
    254c:	60 e0       	ldi	r22, 0x00	; 0
    254e:	70 e0       	ldi	r23, 0x00	; 0
    2550:	82 ed       	ldi	r24, 0xD2	; 210
    2552:	91 e1       	ldi	r25, 0x11	; 17
    2554:	0e 94 0d 0a 	call	0x141a	; 0x141a <xTaskCreate>
	
	vDisplayClear();
    2558:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <vDisplayClear>
	vDisplayWriteStringAtPos(0,0,"QAM 4 Decoder  R: %d", reason);
    255c:	1f 92       	push	r1
    255e:	cf 93       	push	r28
    2560:	85 e5       	ldi	r24, 0x55	; 85
    2562:	91 e2       	ldi	r25, 0x21	; 33
    2564:	9f 93       	push	r25
    2566:	8f 93       	push	r24
    2568:	1f 92       	push	r1
    256a:	1f 92       	push	r1
    256c:	1f 92       	push	r1
    256e:	1f 92       	push	r1
    2570:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <vDisplayWriteStringAtPos>
	vTaskStartScheduler();
    2574:	0e 94 1f 0b 	call	0x163e	; 0x163e <vTaskStartScheduler>
    2578:	8d b7       	in	r24, 0x3d	; 61
    257a:	9e b7       	in	r25, 0x3e	; 62
    257c:	08 96       	adiw	r24, 0x08	; 8
    257e:	8d bf       	out	0x3d, r24	; 61
    2580:	9e bf       	out	0x3e, r25	; 62
	return 0;
}
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	cf 91       	pop	r28
    2588:	0f 91       	pop	r16
    258a:	ff 90       	pop	r15
    258c:	ef 90       	pop	r14
    258e:	08 95       	ret

00002590 <__vector_108>:
	 }
 }

 void _displayWriteStringAtPos(int line, int pos, char* s) {
	 _displaySetPos(line, pos);
	 _displayWriteString(s);
    2590:	1f 92       	push	r1
    2592:	0f 92       	push	r0
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	0f 92       	push	r0
    2598:	11 24       	eor	r1, r1
    259a:	0b b6       	in	r0, 0x3b	; 59
    259c:	0f 92       	push	r0
    259e:	2f 93       	push	r18
    25a0:	3f 93       	push	r19
    25a2:	4f 93       	push	r20
    25a4:	5f 93       	push	r21
    25a6:	6f 93       	push	r22
    25a8:	7f 93       	push	r23
    25aa:	8f 93       	push	r24
    25ac:	9f 93       	push	r25
    25ae:	af 93       	push	r26
    25b0:	bf 93       	push	r27
    25b2:	ef 93       	push	r30
    25b4:	ff 93       	push	r31
    25b6:	cf 93       	push	r28
    25b8:	df 93       	push	r29
    25ba:	1f 92       	push	r1
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
    25c0:	19 82       	std	Y+1, r1	; 0x01
    25c2:	9e 01       	movw	r18, r28
    25c4:	2f 5f       	subi	r18, 0xFF	; 255
    25c6:	3f 4f       	sbci	r19, 0xFF	; 255
    25c8:	41 e0       	ldi	r20, 0x01	; 1
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	60 e0       	ldi	r22, 0x00	; 0
    25ce:	70 e0       	ldi	r23, 0x00	; 0
    25d0:	80 91 1f 2e 	lds	r24, 0x2E1F	; 0x802e1f <egDisplayTiming>
    25d4:	90 91 20 2e 	lds	r25, 0x2E20	; 0x802e20 <egDisplayTiming+0x1>
    25d8:	0e 94 38 03 	call	0x670	; 0x670 <xEventGroupSetBitsFromISR>
    25dc:	60 e0       	ldi	r22, 0x00	; 0
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	9b e0       	ldi	r25, 0x0B	; 11
    25e2:	0e 94 9c 01 	call	0x338	; 0x338 <TC0_ConfigClockSource>
    25e6:	10 92 06 0b 	sts	0x0B06, r1	; 0x800b06 <__TEXT_REGION_LENGTH__+0x700b06>
    25ea:	0f 90       	pop	r0
    25ec:	df 91       	pop	r29
    25ee:	cf 91       	pop	r28
    25f0:	ff 91       	pop	r31
    25f2:	ef 91       	pop	r30
    25f4:	bf 91       	pop	r27
    25f6:	af 91       	pop	r26
    25f8:	9f 91       	pop	r25
    25fa:	8f 91       	pop	r24
    25fc:	7f 91       	pop	r23
    25fe:	6f 91       	pop	r22
    2600:	5f 91       	pop	r21
    2602:	4f 91       	pop	r20
    2604:	3f 91       	pop	r19
    2606:	2f 91       	pop	r18
    2608:	0f 90       	pop	r0
    260a:	0b be       	out	0x3b, r0	; 59
    260c:	0f 90       	pop	r0
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	0f 90       	pop	r0
    2612:	1f 90       	pop	r1
    2614:	18 95       	reti

00002616 <delayUS>:
    2616:	cf 92       	push	r12
    2618:	df 92       	push	r13
    261a:	ef 92       	push	r14
    261c:	ff 92       	push	r15
    261e:	0f 93       	push	r16
    2620:	6b 01       	movw	r12, r22
    2622:	7c 01       	movw	r14, r24
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x700b06>
    262a:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <__TEXT_REGION_LENGTH__+0x700b20>
    262e:	10 92 21 0b 	sts	0x0B21, r1	; 0x800b21 <__TEXT_REGION_LENGTH__+0x700b21>
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	82 e0       	ldi	r24, 0x02	; 2
    2636:	c8 16       	cp	r12, r24
    2638:	d1 04       	cpc	r13, r1
    263a:	e1 04       	cpc	r14, r1
    263c:	f1 04       	cpc	r15, r1
    263e:	e8 f1       	brcs	.+122    	; 0x26ba <delayUS+0xa4>
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	9b e0       	ldi	r25, 0x0B	; 11
    2644:	0e 94 a8 01 	call	0x350	; 0x350 <TC0_ConfigWGM>
    2648:	8e ef       	ldi	r24, 0xFE	; 254
    264a:	c8 16       	cp	r12, r24
    264c:	8f ef       	ldi	r24, 0xFF	; 255
    264e:	d8 06       	cpc	r13, r24
    2650:	e1 04       	cpc	r14, r1
    2652:	f1 04       	cpc	r15, r1
    2654:	08 f4       	brcc	.+2      	; 0x2658 <delayUS+0x42>
    2656:	41 c0       	rjmp	.+130    	; 0x26da <delayUS+0xc4>
    2658:	80 e4       	ldi	r24, 0x40	; 64
    265a:	c8 16       	cp	r12, r24
    265c:	82 e4       	ldi	r24, 0x42	; 66
    265e:	d8 06       	cpc	r13, r24
    2660:	8f e0       	ldi	r24, 0x0F	; 15
    2662:	e8 06       	cpc	r14, r24
    2664:	f1 04       	cpc	r15, r1
    2666:	c0 f0       	brcs	.+48     	; 0x2698 <delayUS+0x82>
    2668:	84 ef       	ldi	r24, 0xF4	; 244
    266a:	c8 2e       	mov	r12, r24
    266c:	dd 24       	eor	r13, r13
    266e:	d3 94       	inc	r13
    2670:	e1 2c       	mov	r14, r1
    2672:	f1 2c       	mov	r15, r1
    2674:	00 e0       	ldi	r16, 0x00	; 0
    2676:	21 e0       	ldi	r18, 0x01	; 1
    2678:	41 e0       	ldi	r20, 0x01	; 1
    267a:	50 e0       	ldi	r21, 0x00	; 0
    267c:	60 e0       	ldi	r22, 0x00	; 0
    267e:	70 e0       	ldi	r23, 0x00	; 0
    2680:	80 91 1f 2e 	lds	r24, 0x2E1F	; 0x802e1f <egDisplayTiming>
    2684:	90 91 20 2e 	lds	r25, 0x2E20	; 0x802e20 <egDisplayTiming+0x1>
    2688:	0e 94 d6 01 	call	0x3ac	; 0x3ac <xEventGroupWaitBits>
    268c:	0f 91       	pop	r16
    268e:	ff 90       	pop	r15
    2690:	ef 90       	pop	r14
    2692:	df 90       	pop	r13
    2694:	cf 90       	pop	r12
    2696:	08 95       	ret
    2698:	95 e0       	ldi	r25, 0x05	; 5
    269a:	f6 94       	lsr	r15
    269c:	e7 94       	ror	r14
    269e:	d7 94       	ror	r13
    26a0:	c7 94       	ror	r12
    26a2:	9a 95       	dec	r25
    26a4:	d1 f7       	brne	.-12     	; 0x269a <delayUS+0x84>
    26a6:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x700b26>
    26aa:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x700b27>
    26ae:	67 e0       	ldi	r22, 0x07	; 7
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	9b e0       	ldi	r25, 0x0B	; 11
    26b4:	0e 94 9c 01 	call	0x338	; 0x338 <TC0_ConfigClockSource>
    26b8:	d7 cf       	rjmp	.-82     	; 0x2668 <delayUS+0x52>
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	9b e0       	ldi	r25, 0x0B	; 11
    26be:	0e 94 a8 01 	call	0x350	; 0x350 <TC0_ConfigWGM>
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x700b26>
    26ca:	90 93 27 0b 	sts	0x0B27, r25	; 0x800b27 <__TEXT_REGION_LENGTH__+0x700b27>
    26ce:	65 e0       	ldi	r22, 0x05	; 5
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	9b e0       	ldi	r25, 0x0B	; 11
    26d4:	0e 94 9c 01 	call	0x338	; 0x338 <TC0_ConfigClockSource>
    26d8:	c7 cf       	rjmp	.-114    	; 0x2668 <delayUS+0x52>
    26da:	f6 94       	lsr	r15
    26dc:	e7 94       	ror	r14
    26de:	d7 94       	ror	r13
    26e0:	c7 94       	ror	r12
    26e2:	c6 01       	movw	r24, r12
    26e4:	f0 cf       	rjmp	.-32     	; 0x26c6 <delayUS+0xb0>

000026e6 <command>:
    26e6:	ef 92       	push	r14
    26e8:	ff 92       	push	r15
    26ea:	0f 93       	push	r16
    26ec:	1f 93       	push	r17
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	f8 2e       	mov	r15, r24
    26f4:	28 2f       	mov	r18, r24
    26f6:	20 7f       	andi	r18, 0xF0	; 240
    26f8:	c0 e0       	ldi	r28, 0x00	; 0
    26fa:	d6 e0       	ldi	r29, 0x06	; 6
    26fc:	9c 81       	ldd	r25, Y+4	; 0x04
    26fe:	82 2f       	mov	r24, r18
    2700:	8f 60       	ori	r24, 0x0F	; 15
    2702:	98 23       	and	r25, r24
    2704:	9c 83       	std	Y+4, r25	; 0x04
    2706:	8c 81       	ldd	r24, Y+4	; 0x04
    2708:	82 2b       	or	r24, r18
    270a:	8c 83       	std	Y+4, r24	; 0x04
    270c:	00 e6       	ldi	r16, 0x60	; 96
    270e:	16 e0       	ldi	r17, 0x06	; 6
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	f8 01       	movw	r30, r16
    2714:	86 83       	std	Z+6, r24	; 0x06
    2716:	82 e0       	ldi	r24, 0x02	; 2
    2718:	86 83       	std	Z+6, r24	; 0x06
    271a:	84 e0       	ldi	r24, 0x04	; 4
    271c:	e8 2e       	mov	r14, r24
    271e:	e5 82       	std	Z+5, r14	; 0x05
    2720:	61 e0       	ldi	r22, 0x01	; 1
    2722:	70 e0       	ldi	r23, 0x00	; 0
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	0e 94 0b 13 	call	0x2616	; 0x2616 <delayUS>
    272c:	f8 01       	movw	r30, r16
    272e:	e6 82       	std	Z+6, r14	; 0x06
    2730:	8f 2d       	mov	r24, r15
    2732:	82 95       	swap	r24
    2734:	80 7f       	andi	r24, 0xF0	; 240
    2736:	9c 81       	ldd	r25, Y+4	; 0x04
    2738:	28 2f       	mov	r18, r24
    273a:	2f 60       	ori	r18, 0x0F	; 15
    273c:	92 23       	and	r25, r18
    273e:	9c 83       	std	Y+4, r25	; 0x04
    2740:	fc 80       	ldd	r15, Y+4	; 0x04
    2742:	f8 2a       	or	r15, r24
    2744:	fc 82       	std	Y+4, r15	; 0x04
    2746:	e5 82       	std	Z+5, r14	; 0x05
    2748:	61 e0       	ldi	r22, 0x01	; 1
    274a:	70 e0       	ldi	r23, 0x00	; 0
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	0e 94 0b 13 	call	0x2616	; 0x2616 <delayUS>
    2754:	f8 01       	movw	r30, r16
    2756:	e6 82       	std	Z+6, r14	; 0x06
    2758:	df 91       	pop	r29
    275a:	cf 91       	pop	r28
    275c:	1f 91       	pop	r17
    275e:	0f 91       	pop	r16
    2760:	ff 90       	pop	r15
    2762:	ef 90       	pop	r14
    2764:	08 95       	ret

00002766 <write>:
    2766:	ef 92       	push	r14
    2768:	ff 92       	push	r15
    276a:	0f 93       	push	r16
    276c:	1f 93       	push	r17
    276e:	cf 93       	push	r28
    2770:	df 93       	push	r29
    2772:	f8 2e       	mov	r15, r24
    2774:	28 2f       	mov	r18, r24
    2776:	20 7f       	andi	r18, 0xF0	; 240
    2778:	c0 e0       	ldi	r28, 0x00	; 0
    277a:	d6 e0       	ldi	r29, 0x06	; 6
    277c:	9c 81       	ldd	r25, Y+4	; 0x04
    277e:	82 2f       	mov	r24, r18
    2780:	8f 60       	ori	r24, 0x0F	; 15
    2782:	98 23       	and	r25, r24
    2784:	9c 83       	std	Y+4, r25	; 0x04
    2786:	8c 81       	ldd	r24, Y+4	; 0x04
    2788:	82 2b       	or	r24, r18
    278a:	8c 83       	std	Y+4, r24	; 0x04
    278c:	00 e6       	ldi	r16, 0x60	; 96
    278e:	16 e0       	ldi	r17, 0x06	; 6
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	f8 01       	movw	r30, r16
    2794:	85 83       	std	Z+5, r24	; 0x05
    2796:	82 e0       	ldi	r24, 0x02	; 2
    2798:	86 83       	std	Z+6, r24	; 0x06
    279a:	84 e0       	ldi	r24, 0x04	; 4
    279c:	e8 2e       	mov	r14, r24
    279e:	e5 82       	std	Z+5, r14	; 0x05
    27a0:	61 e0       	ldi	r22, 0x01	; 1
    27a2:	70 e0       	ldi	r23, 0x00	; 0
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	0e 94 0b 13 	call	0x2616	; 0x2616 <delayUS>
    27ac:	f8 01       	movw	r30, r16
    27ae:	e6 82       	std	Z+6, r14	; 0x06
    27b0:	8f 2d       	mov	r24, r15
    27b2:	82 95       	swap	r24
    27b4:	80 7f       	andi	r24, 0xF0	; 240
    27b6:	9c 81       	ldd	r25, Y+4	; 0x04
    27b8:	28 2f       	mov	r18, r24
    27ba:	2f 60       	ori	r18, 0x0F	; 15
    27bc:	92 23       	and	r25, r18
    27be:	9c 83       	std	Y+4, r25	; 0x04
    27c0:	fc 80       	ldd	r15, Y+4	; 0x04
    27c2:	f8 2a       	or	r15, r24
    27c4:	fc 82       	std	Y+4, r15	; 0x04
    27c6:	e5 82       	std	Z+5, r14	; 0x05
    27c8:	61 e0       	ldi	r22, 0x01	; 1
    27ca:	70 e0       	ldi	r23, 0x00	; 0
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	0e 94 0b 13 	call	0x2616	; 0x2616 <delayUS>
    27d4:	f8 01       	movw	r30, r16
    27d6:	e6 82       	std	Z+6, r14	; 0x06
    27d8:	df 91       	pop	r29
    27da:	cf 91       	pop	r28
    27dc:	1f 91       	pop	r17
    27de:	0f 91       	pop	r16
    27e0:	ff 90       	pop	r15
    27e2:	ef 90       	pop	r14
    27e4:	08 95       	ret

000027e6 <vInitDisplay>:
    27e6:	ef 92       	push	r14
    27e8:	ff 92       	push	r15
    27ea:	0f 93       	push	r16
    27ec:	e0 e0       	ldi	r30, 0x00	; 0
    27ee:	f6 e0       	ldi	r31, 0x06	; 6
    27f0:	80 e1       	ldi	r24, 0x10	; 16
    27f2:	81 83       	std	Z+1, r24	; 0x01
    27f4:	80 e2       	ldi	r24, 0x20	; 32
    27f6:	81 83       	std	Z+1, r24	; 0x01
    27f8:	80 e4       	ldi	r24, 0x40	; 64
    27fa:	81 83       	std	Z+1, r24	; 0x01
    27fc:	80 e8       	ldi	r24, 0x80	; 128
    27fe:	81 83       	std	Z+1, r24	; 0x01
    2800:	a0 e6       	ldi	r26, 0x60	; 96
    2802:	b6 e0       	ldi	r27, 0x06	; 6
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	11 96       	adiw	r26, 0x01	; 1
    2808:	8c 93       	st	X, r24
    280a:	11 97       	sbiw	r26, 0x01	; 1
    280c:	82 e0       	ldi	r24, 0x02	; 2
    280e:	11 96       	adiw	r26, 0x01	; 1
    2810:	8c 93       	st	X, r24
    2812:	11 97       	sbiw	r26, 0x01	; 1
    2814:	84 e0       	ldi	r24, 0x04	; 4
    2816:	11 96       	adiw	r26, 0x01	; 1
    2818:	8c 93       	st	X, r24
    281a:	11 97       	sbiw	r26, 0x01	; 1
    281c:	84 81       	ldd	r24, Z+4	; 0x04
    281e:	8f 70       	andi	r24, 0x0F	; 15
    2820:	84 83       	std	Z+4, r24	; 0x04
    2822:	14 96       	adiw	r26, 0x04	; 4
    2824:	8c 91       	ld	r24, X
    2826:	14 97       	sbiw	r26, 0x04	; 4
    2828:	88 7f       	andi	r24, 0xF8	; 248
    282a:	14 96       	adiw	r26, 0x04	; 4
    282c:	8c 93       	st	X, r24
    282e:	40 e0       	ldi	r20, 0x00	; 0
    2830:	66 e1       	ldi	r22, 0x16	; 22
    2832:	88 e0       	ldi	r24, 0x08	; 8
    2834:	0e 94 c6 06 	call	0xd8c	; 0xd8c <xQueueGenericCreate>
    2838:	80 93 1d 2e 	sts	0x2E1D, r24	; 0x802e1d <displayLineQueue>
    283c:	90 93 1e 2e 	sts	0x2E1E, r25	; 0x802e1e <displayLineQueue+0x1>
    2840:	0e 94 c1 01 	call	0x382	; 0x382 <xEventGroupCreate>
    2844:	80 93 1f 2e 	sts	0x2E1F, r24	; 0x802e1f <egDisplayTiming>
    2848:	90 93 20 2e 	sts	0x2E20, r25	; 0x802e20 <egDisplayTiming+0x1>
    284c:	e1 2c       	mov	r14, r1
    284e:	f1 2c       	mov	r15, r1
    2850:	01 e0       	ldi	r16, 0x01	; 1
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	4e e5       	ldi	r20, 0x5E	; 94
    2858:	51 e0       	ldi	r21, 0x01	; 1
    285a:	6a e6       	ldi	r22, 0x6A	; 106
    285c:	71 e2       	ldi	r23, 0x21	; 33
    285e:	85 e8       	ldi	r24, 0x85	; 133
    2860:	94 e1       	ldi	r25, 0x14	; 20
    2862:	0e 94 0d 0a 	call	0x141a	; 0x141a <xTaskCreate>
    2866:	0f 91       	pop	r16
    2868:	ff 90       	pop	r15
    286a:	ef 90       	pop	r14
    286c:	08 95       	ret

0000286e <_displaySetPos>:
    286e:	81 30       	cpi	r24, 0x01	; 1
    2870:	91 05       	cpc	r25, r1
    2872:	31 f1       	breq	.+76     	; 0x28c0 <_displaySetPos+0x52>
    2874:	cc f0       	brlt	.+50     	; 0x28a8 <_displaySetPos+0x3a>
    2876:	82 30       	cpi	r24, 0x02	; 2
    2878:	91 05       	cpc	r25, r1
    287a:	61 f0       	breq	.+24     	; 0x2894 <_displaySetPos+0x26>
    287c:	03 97       	sbiw	r24, 0x03	; 3
    287e:	21 f4       	brne	.+8      	; 0x2888 <_displaySetPos+0x1a>
    2880:	84 ed       	ldi	r24, 0xD4	; 212
    2882:	86 0f       	add	r24, r22
    2884:	0e 94 73 13 	call	0x26e6	; 0x26e6 <command>
    2888:	67 e2       	ldi	r22, 0x27	; 39
    288a:	70 e0       	ldi	r23, 0x00	; 0
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <delayUS>
    2894:	84 e9       	ldi	r24, 0x94	; 148
    2896:	86 0f       	add	r24, r22
    2898:	0e 94 73 13 	call	0x26e6	; 0x26e6 <command>
    289c:	67 e2       	ldi	r22, 0x27	; 39
    289e:	70 e0       	ldi	r23, 0x00	; 0
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <delayUS>
    28a8:	89 2b       	or	r24, r25
    28aa:	71 f7       	brne	.-36     	; 0x2888 <_displaySetPos+0x1a>
    28ac:	80 e8       	ldi	r24, 0x80	; 128
    28ae:	86 0f       	add	r24, r22
    28b0:	0e 94 73 13 	call	0x26e6	; 0x26e6 <command>
    28b4:	67 e2       	ldi	r22, 0x27	; 39
    28b6:	70 e0       	ldi	r23, 0x00	; 0
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <delayUS>
    28c0:	80 ec       	ldi	r24, 0xC0	; 192
    28c2:	86 0f       	add	r24, r22
    28c4:	0e 94 73 13 	call	0x26e6	; 0x26e6 <command>
    28c8:	67 e2       	ldi	r22, 0x27	; 39
    28ca:	70 e0       	ldi	r23, 0x00	; 0
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <delayUS>

000028d4 <_displayWriteString>:
    28d4:	0f 93       	push	r16
    28d6:	1f 93       	push	r17
    28d8:	cf 93       	push	r28
    28da:	df 93       	push	r29
    28dc:	ec 01       	movw	r28, r24
    28de:	8c 01       	movw	r16, r24
    28e0:	0c 5e       	subi	r16, 0xEC	; 236
    28e2:	1f 4f       	sbci	r17, 0xFF	; 255
    28e4:	89 91       	ld	r24, Y+
    28e6:	88 23       	and	r24, r24
    28e8:	59 f0       	breq	.+22     	; 0x2900 <_displayWriteString+0x2c>
    28ea:	0e 94 b3 13 	call	0x2766	; 0x2766 <write>
    28ee:	6b e2       	ldi	r22, 0x2B	; 43
    28f0:	70 e0       	ldi	r23, 0x00	; 0
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	0e 94 0b 13 	call	0x2616	; 0x2616 <delayUS>
    28fa:	c0 17       	cp	r28, r16
    28fc:	d1 07       	cpc	r29, r17
    28fe:	91 f7       	brne	.-28     	; 0x28e4 <_displayWriteString+0x10>
    2900:	df 91       	pop	r29
    2902:	cf 91       	pop	r28
    2904:	1f 91       	pop	r17
    2906:	0f 91       	pop	r16
    2908:	08 95       	ret

0000290a <vDisplayUpdateTask>:
    290a:	cf 93       	push	r28
    290c:	df 93       	push	r29
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
    2912:	c6 56       	subi	r28, 0x66	; 102
    2914:	d1 09       	sbc	r29, r1
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	de bf       	out	0x3e, r29	; 62
    291a:	7e 01       	movw	r14, r28
    291c:	41 e5       	ldi	r20, 0x51	; 81
    291e:	e4 0e       	add	r14, r20
    2920:	f1 1c       	adc	r15, r1
    2922:	fe 01       	movw	r30, r28
    2924:	31 96       	adiw	r30, 0x01	; 1
    2926:	80 e2       	ldi	r24, 0x20	; 32
    2928:	9f 01       	movw	r18, r30
    292a:	2c 5e       	subi	r18, 0xEC	; 236
    292c:	3f 4f       	sbci	r19, 0xFF	; 255
    292e:	81 93       	st	Z+, r24
    2930:	e2 17       	cp	r30, r18
    2932:	f3 07       	cpc	r31, r19
    2934:	e1 f7       	brne	.-8      	; 0x292e <vDisplayUpdateTask+0x24>
    2936:	ee 16       	cp	r14, r30
    2938:	ff 06       	cpc	r15, r31
    293a:	b1 f7       	brne	.-20     	; 0x2928 <vDisplayUpdateTask+0x1e>
    293c:	60 e4       	ldi	r22, 0x40	; 64
    293e:	7c e9       	ldi	r23, 0x9C	; 156
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	0e 94 0b 13 	call	0x2616	; 0x2616 <delayUS>
    2948:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    294c:	8f 73       	andi	r24, 0x3F	; 63
    294e:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    2952:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    2956:	80 63       	ori	r24, 0x30	; 48
    2958:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    295c:	68 e8       	ldi	r22, 0x88	; 136
    295e:	73 e1       	ldi	r23, 0x13	; 19
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	0e 94 0b 13 	call	0x2616	; 0x2616 <delayUS>
    2968:	14 e0       	ldi	r17, 0x04	; 4
    296a:	10 93 65 06 	sts	0x0665, r17	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    296e:	61 e0       	ldi	r22, 0x01	; 1
    2970:	70 e0       	ldi	r23, 0x00	; 0
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	0e 94 0b 13 	call	0x2616	; 0x2616 <delayUS>
    297a:	10 93 66 06 	sts	0x0666, r17	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    297e:	60 ea       	ldi	r22, 0xA0	; 160
    2980:	70 e0       	ldi	r23, 0x00	; 0
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	0e 94 0b 13 	call	0x2616	; 0x2616 <delayUS>
    298a:	10 93 65 06 	sts	0x0665, r17	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    298e:	61 e0       	ldi	r22, 0x01	; 1
    2990:	70 e0       	ldi	r23, 0x00	; 0
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	0e 94 0b 13 	call	0x2616	; 0x2616 <delayUS>
    299a:	10 93 66 06 	sts	0x0666, r17	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    299e:	60 ea       	ldi	r22, 0xA0	; 160
    29a0:	70 e0       	ldi	r23, 0x00	; 0
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	0e 94 0b 13 	call	0x2616	; 0x2616 <delayUS>
    29aa:	10 93 65 06 	sts	0x0665, r17	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    29ae:	61 e0       	ldi	r22, 0x01	; 1
    29b0:	70 e0       	ldi	r23, 0x00	; 0
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	0e 94 0b 13 	call	0x2616	; 0x2616 <delayUS>
    29ba:	10 93 66 06 	sts	0x0666, r17	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    29be:	60 ea       	ldi	r22, 0xA0	; 160
    29c0:	70 e0       	ldi	r23, 0x00	; 0
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	0e 94 0b 13 	call	0x2616	; 0x2616 <delayUS>
    29ca:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    29ce:	8f 72       	andi	r24, 0x2F	; 47
    29d0:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    29d4:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    29d8:	80 62       	ori	r24, 0x20	; 32
    29da:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    29de:	10 93 65 06 	sts	0x0665, r17	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    29e2:	61 e0       	ldi	r22, 0x01	; 1
    29e4:	70 e0       	ldi	r23, 0x00	; 0
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	0e 94 0b 13 	call	0x2616	; 0x2616 <delayUS>
    29ee:	10 93 66 06 	sts	0x0666, r17	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    29f2:	88 e2       	ldi	r24, 0x28	; 40
    29f4:	0e 94 73 13 	call	0x26e6	; 0x26e6 <command>
    29f8:	80 e1       	ldi	r24, 0x10	; 16
    29fa:	0e 94 73 13 	call	0x26e6	; 0x26e6 <command>
    29fe:	8c e0       	ldi	r24, 0x0C	; 12
    2a00:	0e 94 73 13 	call	0x26e6	; 0x26e6 <command>
    2a04:	86 e0       	ldi	r24, 0x06	; 6
    2a06:	0e 94 73 13 	call	0x26e6	; 0x26e6 <command>
    2a0a:	10 e2       	ldi	r17, 0x20	; 32
    2a0c:	86 e1       	ldi	r24, 0x16	; 22
    2a0e:	c8 2e       	mov	r12, r24
    2a10:	d1 2c       	mov	r13, r1
    2a12:	68 ec       	ldi	r22, 0xC8	; 200
    2a14:	70 e0       	ldi	r23, 0x00	; 0
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <vTaskDelay>
    2a1e:	40 e0       	ldi	r20, 0x00	; 0
    2a20:	50 e0       	ldi	r21, 0x00	; 0
    2a22:	ba 01       	movw	r22, r20
    2a24:	80 91 1f 2e 	lds	r24, 0x2E1F	; 0x802e1f <egDisplayTiming>
    2a28:	90 91 20 2e 	lds	r25, 0x2E20	; 0x802e20 <egDisplayTiming+0x1>
    2a2c:	0e 94 82 02 	call	0x504	; 0x504 <xEventGroupClearBits>
    2a30:	67 2b       	or	r22, r23
    2a32:	68 2b       	or	r22, r24
    2a34:	69 2b       	or	r22, r25
    2a36:	49 f1       	breq	.+82     	; 0x2a8a <vDisplayUpdateTask+0x180>
    2a38:	42 e0       	ldi	r20, 0x02	; 2
    2a3a:	50 e0       	ldi	r21, 0x00	; 0
    2a3c:	60 e0       	ldi	r22, 0x00	; 0
    2a3e:	70 e0       	ldi	r23, 0x00	; 0
    2a40:	80 91 1f 2e 	lds	r24, 0x2E1F	; 0x802e1f <egDisplayTiming>
    2a44:	90 91 20 2e 	lds	r25, 0x2E20	; 0x802e20 <egDisplayTiming+0x1>
    2a48:	0e 94 82 02 	call	0x504	; 0x504 <xEventGroupClearBits>
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	31 96       	adiw	r30, 0x01	; 1
    2a50:	cf 01       	movw	r24, r30
    2a52:	44 96       	adiw	r24, 0x14	; 20
    2a54:	11 93       	st	Z+, r17
    2a56:	e8 17       	cp	r30, r24
    2a58:	f9 07       	cpc	r31, r25
    2a5a:	e1 f7       	brne	.-8      	; 0x2a54 <vDisplayUpdateTask+0x14a>
    2a5c:	ee 15       	cp	r30, r14
    2a5e:	ff 05       	cpc	r31, r15
    2a60:	b9 f7       	brne	.-18     	; 0x2a50 <vDisplayUpdateTask+0x146>
    2a62:	80 91 1d 2e 	lds	r24, 0x2E1D	; 0x802e1d <displayLineQueue>
    2a66:	90 91 1e 2e 	lds	r25, 0x2E1E	; 0x802e1e <displayLineQueue+0x1>
    2a6a:	0e 94 b7 08 	call	0x116e	; 0x116e <uxQueueMessagesWaiting>
    2a6e:	88 23       	and	r24, r24
    2a70:	a1 f0       	breq	.+40     	; 0x2a9a <vDisplayUpdateTask+0x190>
    2a72:	2f ef       	ldi	r18, 0xFF	; 255
    2a74:	3f ef       	ldi	r19, 0xFF	; 255
    2a76:	a9 01       	movw	r20, r18
    2a78:	b7 01       	movw	r22, r14
    2a7a:	80 91 1d 2e 	lds	r24, 0x2E1D	; 0x802e1d <displayLineQueue>
    2a7e:	90 91 1e 2e 	lds	r25, 0x2E1E	; 0x802e1e <displayLineQueue+0x1>
    2a82:	0e 94 fa 07 	call	0xff4	; 0xff4 <xQueueReceive>
    2a86:	81 11       	cpse	r24, r1
    2a88:	20 c0       	rjmp	.+64     	; 0x2aca <vDisplayUpdateTask+0x1c0>
    2a8a:	80 91 1d 2e 	lds	r24, 0x2E1D	; 0x802e1d <displayLineQueue>
    2a8e:	90 91 1e 2e 	lds	r25, 0x2E1E	; 0x802e1e <displayLineQueue+0x1>
    2a92:	0e 94 b7 08 	call	0x116e	; 0x116e <uxQueueMessagesWaiting>
    2a96:	81 11       	cpse	r24, r1
    2a98:	ec cf       	rjmp	.-40     	; 0x2a72 <vDisplayUpdateTask+0x168>
    2a9a:	ce 01       	movw	r24, r28
    2a9c:	01 96       	adiw	r24, 0x01	; 1
    2a9e:	4c 01       	movw	r8, r24
    2aa0:	a1 2c       	mov	r10, r1
    2aa2:	b1 2c       	mov	r11, r1
    2aa4:	60 e0       	ldi	r22, 0x00	; 0
    2aa6:	70 e0       	ldi	r23, 0x00	; 0
    2aa8:	c5 01       	movw	r24, r10
    2aaa:	0e 94 37 14 	call	0x286e	; 0x286e <_displaySetPos>
    2aae:	c4 01       	movw	r24, r8
    2ab0:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_displayWriteString>
    2ab4:	9f ef       	ldi	r25, 0xFF	; 255
    2ab6:	a9 1a       	sub	r10, r25
    2ab8:	b9 0a       	sbc	r11, r25
    2aba:	e4 e1       	ldi	r30, 0x14	; 20
    2abc:	8e 0e       	add	r8, r30
    2abe:	91 1c       	adc	r9, r1
    2ac0:	f4 e0       	ldi	r31, 0x04	; 4
    2ac2:	af 16       	cp	r10, r31
    2ac4:	b1 04       	cpc	r11, r1
    2ac6:	71 f7       	brne	.-36     	; 0x2aa4 <vDisplayUpdateTask+0x19a>
    2ac8:	a4 cf       	rjmp	.-184    	; 0x2a12 <vDisplayUpdateTask+0x108>
    2aca:	f7 01       	movw	r30, r14
    2acc:	21 81       	ldd	r18, Z+1	; 0x01
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	24 31       	cpi	r18, 0x14	; 20
    2ad2:	31 05       	cpc	r19, r1
    2ad4:	d4 f6       	brge	.-76     	; 0x2a8a <vDisplayUpdateTask+0x180>
    2ad6:	82 81       	ldd	r24, Z+2	; 0x02
    2ad8:	88 23       	and	r24, r24
    2ada:	b9 f2       	breq	.-82     	; 0x2a8a <vDisplayUpdateTask+0x180>
    2adc:	90 81       	ld	r25, Z
    2ade:	d9 01       	movw	r26, r18
    2ae0:	f4 e1       	ldi	r31, 0x14	; 20
    2ae2:	9f 9f       	mul	r25, r31
    2ae4:	a0 0d       	add	r26, r0
    2ae6:	b1 1d       	adc	r27, r1
    2ae8:	11 24       	eor	r1, r1
    2aea:	41 e0       	ldi	r20, 0x01	; 1
    2aec:	50 e0       	ldi	r21, 0x00	; 0
    2aee:	4c 0f       	add	r20, r28
    2af0:	5d 1f       	adc	r21, r29
    2af2:	a4 0f       	add	r26, r20
    2af4:	b5 1f       	adc	r27, r21
    2af6:	f7 01       	movw	r30, r14
    2af8:	33 96       	adiw	r30, 0x03	; 3
    2afa:	a6 01       	movw	r20, r12
    2afc:	42 1b       	sub	r20, r18
    2afe:	53 0b       	sbc	r21, r19
    2b00:	9a 01       	movw	r18, r20
    2b02:	2e 0d       	add	r18, r14
    2b04:	3f 1d       	adc	r19, r15
    2b06:	04 c0       	rjmp	.+8      	; 0x2b10 <vDisplayUpdateTask+0x206>
    2b08:	81 91       	ld	r24, Z+
    2b0a:	88 23       	and	r24, r24
    2b0c:	09 f4       	brne	.+2      	; 0x2b10 <vDisplayUpdateTask+0x206>
    2b0e:	bd cf       	rjmp	.-134    	; 0x2a8a <vDisplayUpdateTask+0x180>
    2b10:	8d 93       	st	X+, r24
    2b12:	e2 17       	cp	r30, r18
    2b14:	f3 07       	cpc	r31, r19
    2b16:	c1 f7       	brne	.-16     	; 0x2b08 <vDisplayUpdateTask+0x1fe>
    2b18:	b8 cf       	rjmp	.-144    	; 0x2a8a <vDisplayUpdateTask+0x180>

00002b1a <vDisplayClear>:
	 }
 }
 

void vDisplayClear() {
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    2b1a:	42 e0       	ldi	r20, 0x02	; 2
    2b1c:	50 e0       	ldi	r21, 0x00	; 0
    2b1e:	60 e0       	ldi	r22, 0x00	; 0
    2b20:	70 e0       	ldi	r23, 0x00	; 0
    2b22:	80 91 1f 2e 	lds	r24, 0x2E1F	; 0x802e1f <egDisplayTiming>
    2b26:	90 91 20 2e 	lds	r25, 0x2E20	; 0x802e20 <egDisplayTiming+0x1>
    2b2a:	0c 94 a3 02 	jmp	0x546	; 0x546 <xEventGroupSetBits>

00002b2e <vDisplayWriteStringAtPos>:
}

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    2b2e:	2f 92       	push	r2
    2b30:	3f 92       	push	r3
    2b32:	4f 92       	push	r4
    2b34:	5f 92       	push	r5
    2b36:	6f 92       	push	r6
    2b38:	7f 92       	push	r7
    2b3a:	8f 92       	push	r8
    2b3c:	9f 92       	push	r9
    2b3e:	af 92       	push	r10
    2b40:	bf 92       	push	r11
    2b42:	cf 92       	push	r12
    2b44:	df 92       	push	r13
    2b46:	ef 92       	push	r14
    2b48:	ff 92       	push	r15
    2b4a:	0f 93       	push	r16
    2b4c:	1f 93       	push	r17
    2b4e:	cf 93       	push	r28
    2b50:	df 93       	push	r29
    2b52:	cd b7       	in	r28, 0x3d	; 61
    2b54:	de b7       	in	r29, 0x3e	; 62
    2b56:	6d 97       	sbiw	r28, 0x1d	; 29
    2b58:	cd bf       	out	0x3d, r28	; 61
    2b5a:	de bf       	out	0x3e, r29	; 62
    2b5c:	2b a9       	ldd	r18, Y+51	; 0x33
    2b5e:	29 8f       	std	Y+25, r18	; 0x19
    2b60:	8f a9       	ldd	r24, Y+55	; 0x37
    2b62:	98 ad       	ldd	r25, Y+56	; 0x38
	va_list arg;	
	va_start(arg, fmt);
    2b64:	de 01       	movw	r26, r28
    2b66:	d9 96       	adiw	r26, 0x39	; 57
    2b68:	2a ef       	ldi	r18, 0xFA	; 250
    2b6a:	3d e2       	ldi	r19, 0x2D	; 45
	display_vprintf(line, pos, fmt, arg);
    2b6c:	56 ee       	ldi	r21, 0xE6	; 230
    2b6e:	a5 2e       	mov	r10, r21
    2b70:	5d e2       	ldi	r21, 0x2D	; 45
    2b72:	b5 2e       	mov	r11, r21
    2b74:	f5 01       	movw	r30, r10
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
    2b76:	11 92       	st	Z+, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    2b78:	2e 17       	cp	r18, r30
    2b7a:	3f 07       	cpc	r19, r31
    2b7c:	e1 f7       	brne	.-8      	; 0x2b76 <vDisplayWriteStringAtPos+0x48>
    2b7e:	42 ed       	ldi	r20, 0xD2	; 210
    2b80:	24 2e       	mov	r2, r20
    2b82:	4d e2       	ldi	r20, 0x2D	; 45
    2b84:	34 2e       	mov	r3, r20
    2b86:	26 ee       	ldi	r18, 0xE6	; 230
    2b88:	3d e2       	ldi	r19, 0x2D	; 45
    2b8a:	f1 01       	movw	r30, r2
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
    2b8c:	11 92       	st	Z+, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    2b8e:	2e 17       	cp	r18, r30
    2b90:	3f 07       	cpc	r19, r31
    2b92:	e1 f7       	brne	.-8      	; 0x2b8c <vDisplayWriteStringAtPos+0x5e>
    2b94:	81 2c       	mov	r8, r1
    2b96:	91 2c       	mov	r9, r1
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    2b98:	fc 01       	movw	r30, r24
    2b9a:	20 81       	ld	r18, Z
    2b9c:	22 23       	and	r18, r18
    2b9e:	91 f0       	breq	.+36     	; 0x2bc4 <vDisplayWriteStringAtPos+0x96>
		if ( '%' == ch ) {
    2ba0:	25 32       	cpi	r18, 0x25	; 37
    2ba2:	09 f4       	brne	.+2      	; 0x2ba6 <vDisplayWriteStringAtPos+0x78>
    2ba4:	5b c0       	rjmp	.+182    	; 0x2c5c <vDisplayWriteStringAtPos+0x12e>
			}
		}
		else {
			str[length] = ch;
			if(str[length] == '\n') {
				str[length] = '\0';				
    2ba6:	f4 01       	movw	r30, r8
    2ba8:	ee 52       	subi	r30, 0x2E	; 46
    2baa:	f2 4d       	sbci	r31, 0xD2	; 210
				break;
			}
		}
		else {
			str[length] = ch;
			if(str[length] == '\n') {
    2bac:	2a 30       	cpi	r18, 0x0A	; 10
    2bae:	09 f4       	brne	.+2      	; 0x2bb2 <vDisplayWriteStringAtPos+0x84>
    2bb0:	70 c0       	rjmp	.+224    	; 0x2c92 <vDisplayWriteStringAtPos+0x164>
				length += strlen(buffer);
				break;
			}
		}
		else {
			str[length] = ch;
    2bb2:	20 83       	st	Z, r18
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    2bb4:	01 96       	adiw	r24, 0x01	; 1
		else {
			str[length] = ch;
			if(str[length] == '\n') {
				str[length] = '\0';				
			}
			length++;
    2bb6:	ff ef       	ldi	r31, 0xFF	; 255
    2bb8:	8f 1a       	sub	r8, r31
    2bba:	9f 0a       	sbc	r9, r31
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	20 81       	ld	r18, Z
    2bc0:	21 11       	cpse	r18, r1
    2bc2:	ee cf       	rjmp	.-36     	; 0x2ba0 <vDisplayWriteStringAtPos+0x72>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    2bc4:	8d a9       	ldd	r24, Y+53	; 0x35
    2bc6:	9e a9       	ldd	r25, Y+54	; 0x36
    2bc8:	88 0d       	add	r24, r8
    2bca:	99 1d       	adc	r25, r9
    2bcc:	44 97       	sbiw	r24, 0x14	; 20
    2bce:	3c f0       	brlt	.+14     	; 0x2bde <vDisplayWriteStringAtPos+0xb0>
		length = 20-pos;
    2bd0:	84 e1       	ldi	r24, 0x14	; 20
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	4c 01       	movw	r8, r24
    2bd6:	2d a9       	ldd	r18, Y+53	; 0x35
    2bd8:	3e a9       	ldd	r19, Y+54	; 0x36
    2bda:	82 1a       	sub	r8, r18
    2bdc:	93 0a       	sbc	r9, r19
    2bde:	fe 01       	movw	r30, r28
    2be0:	33 96       	adiw	r30, 0x03	; 3
    2be2:	ce 01       	movw	r24, r28
    2be4:	47 96       	adiw	r24, 0x17	; 23
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2be6:	df 01       	movw	r26, r30
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
    2be8:	1d 92       	st	X+, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    2bea:	a8 17       	cp	r26, r24
    2bec:	b9 07       	cpc	r27, r25
    2bee:	e1 f7       	brne	.-8      	; 0x2be8 <vDisplayWriteStringAtPos+0xba>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    2bf0:	39 8d       	ldd	r19, Y+25	; 0x19
    2bf2:	39 83       	std	Y+1, r19	; 0x01
	newLine.displayPos = pos;
    2bf4:	8d a9       	ldd	r24, Y+53	; 0x35
    2bf6:	8a 83       	std	Y+2, r24	; 0x02
	for(int i = 0; i < length;i++) {
    2bf8:	18 14       	cp	r1, r8
    2bfa:	19 04       	cpc	r1, r9
    2bfc:	0c f0       	brlt	.+2      	; 0x2c00 <vDisplayWriteStringAtPos+0xd2>
    2bfe:	ae c2       	rjmp	.+1372   	; 0x315c <vDisplayWriteStringAtPos+0x62e>
    2c00:	c4 01       	movw	r24, r8
    2c02:	02 96       	adiw	r24, 0x02	; 2
    2c04:	be 01       	movw	r22, r28
    2c06:	6f 5f       	subi	r22, 0xFF	; 255
    2c08:	7f 4f       	sbci	r23, 0xFF	; 255
    2c0a:	86 0f       	add	r24, r22
    2c0c:	97 1f       	adc	r25, r23
		newLine.displayBuffer[i] = str[i];
    2c0e:	d1 01       	movw	r26, r2
    2c10:	2d 91       	ld	r18, X+
    2c12:	1d 01       	movw	r2, r26
    2c14:	21 93       	st	Z+, r18
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    2c16:	8e 17       	cp	r24, r30
    2c18:	9f 07       	cpc	r25, r31
    2c1a:	c9 f7       	brne	.-14     	; 0x2c0e <vDisplayWriteStringAtPos+0xe0>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    2c1c:	00 e0       	ldi	r16, 0x00	; 0
    2c1e:	2f ef       	ldi	r18, 0xFF	; 255
    2c20:	3f ef       	ldi	r19, 0xFF	; 255
    2c22:	a9 01       	movw	r20, r18
    2c24:	80 91 1d 2e 	lds	r24, 0x2E1D	; 0x802e1d <displayLineQueue>
    2c28:	90 91 1e 2e 	lds	r25, 0x2E1E	; 0x802e1e <displayLineQueue+0x1>
    2c2c:	0e 94 01 07 	call	0xe02	; 0xe02 <xQueueGenericSend>
void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
	va_list arg;	
	va_start(arg, fmt);
	display_vprintf(line, pos, fmt, arg);
	va_end(arg);	
}
    2c30:	6d 96       	adiw	r28, 0x1d	; 29
    2c32:	cd bf       	out	0x3d, r28	; 61
    2c34:	de bf       	out	0x3e, r29	; 62
    2c36:	df 91       	pop	r29
    2c38:	cf 91       	pop	r28
    2c3a:	1f 91       	pop	r17
    2c3c:	0f 91       	pop	r16
    2c3e:	ff 90       	pop	r15
    2c40:	ef 90       	pop	r14
    2c42:	df 90       	pop	r13
    2c44:	cf 90       	pop	r12
    2c46:	bf 90       	pop	r11
    2c48:	af 90       	pop	r10
    2c4a:	9f 90       	pop	r9
    2c4c:	8f 90       	pop	r8
    2c4e:	7f 90       	pop	r7
    2c50:	6f 90       	pop	r6
    2c52:	5f 90       	pop	r5
    2c54:	4f 90       	pop	r4
    2c56:	3f 90       	pop	r3
    2c58:	2f 90       	pop	r2
    2c5a:	08 95       	ret
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	32 96       	adiw	r30, 0x02	; 2
    2c60:	ef 8b       	std	Y+23, r30	; 0x17
    2c62:	f8 8f       	std	Y+24, r31	; 0x18
    2c64:	fc 01       	movw	r30, r24
    2c66:	81 81       	ldd	r24, Z+1	; 0x01
    2c68:	85 36       	cpi	r24, 0x65	; 101
    2c6a:	09 f4       	brne	.+2      	; 0x2c6e <vDisplayWriteStringAtPos+0x140>
    2c6c:	7b c1       	rjmp	.+758    	; 0x2f64 <vDisplayWriteStringAtPos+0x436>
    2c6e:	98 f4       	brcc	.+38     	; 0x2c96 <vDisplayWriteStringAtPos+0x168>
    2c70:	83 36       	cpi	r24, 0x63	; 99
    2c72:	09 f4       	brne	.+2      	; 0x2c76 <vDisplayWriteStringAtPos+0x148>
    2c74:	6b c1       	rjmp	.+726    	; 0x2f4c <vDisplayWriteStringAtPos+0x41e>
    2c76:	08 f0       	brcs	.+2      	; 0x2c7a <vDisplayWriteStringAtPos+0x14c>
    2c78:	42 c1       	rjmp	.+644    	; 0x2efe <vDisplayWriteStringAtPos+0x3d0>
    2c7a:	85 32       	cpi	r24, 0x25	; 37
    2c7c:	a1 f4       	brne	.+40     	; 0x2ca6 <vDisplayWriteStringAtPos+0x178>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    2c7e:	f4 01       	movw	r30, r8
    2c80:	ee 52       	subi	r30, 0x2E	; 46
    2c82:	f2 4d       	sbci	r31, 0xD2	; 210
    2c84:	80 83       	st	Z, r24
				length++;
    2c86:	ff ef       	ldi	r31, 0xFF	; 255
    2c88:	8f 1a       	sub	r8, r31
    2c8a:	9f 0a       	sbc	r9, r31
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2c8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c90:	83 cf       	rjmp	.-250    	; 0x2b98 <vDisplayWriteStringAtPos+0x6a>
			}
		}
		else {
			str[length] = ch;
			if(str[length] == '\n') {
				str[length] = '\0';				
    2c92:	10 82       	st	Z, r1
    2c94:	8f cf       	rjmp	.-226    	; 0x2bb4 <vDisplayWriteStringAtPos+0x86>
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2c96:	83 37       	cpi	r24, 0x73	; 115
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <vDisplayWriteStringAtPos+0x16e>
    2c9a:	e6 c0       	rjmp	.+460    	; 0x2e68 <vDisplayWriteStringAtPos+0x33a>
    2c9c:	88 37       	cpi	r24, 0x78	; 120
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <vDisplayWriteStringAtPos+0x174>
    2ca0:	07 c1       	rjmp	.+526    	; 0x2eb0 <vDisplayWriteStringAtPos+0x382>
    2ca2:	86 36       	cpi	r24, 0x66	; 102
    2ca4:	19 f0       	breq	.+6      	; 0x2cac <vDisplayWriteStringAtPos+0x17e>
    2ca6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ca8:	98 8d       	ldd	r25, Y+24	; 0x18
    2caa:	76 cf       	rjmp	.-276    	; 0x2b98 <vDisplayWriteStringAtPos+0x6a>
				}
				length += strlen(buffer);
				break;

				case 'f':
				double_temp = va_arg(arg, double);
    2cac:	9d 01       	movw	r18, r26
    2cae:	2c 5f       	subi	r18, 0xFC	; 252
    2cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb2:	2a 8f       	std	Y+26, r18	; 0x1a
    2cb4:	3b 8f       	std	Y+27, r19	; 0x1b
    2cb6:	4d 90       	ld	r4, X+
    2cb8:	5d 90       	ld	r5, X+
    2cba:	6d 90       	ld	r6, X+
    2cbc:	7c 90       	ld	r7, X

    int exponent = 0;
    int places = 0;
    static const int width = 4;

    if (value == 0.0) {
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	a9 01       	movw	r20, r18
    2cc4:	c3 01       	movw	r24, r6
    2cc6:	b2 01       	movw	r22, r4
    2cc8:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <__cmpsf2>
    2ccc:	88 23       	and	r24, r24
    2cce:	09 f4       	brne	.+2      	; 0x2cd2 <vDisplayWriteStringAtPos+0x1a4>
    2cd0:	3f c2       	rjmp	.+1150   	; 0x3150 <vDisplayWriteStringAtPos+0x622>
        buffer[0] = '0';
        buffer[1] = '\0';
        return;
    }         

    if (value < 0.0) {
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	a9 01       	movw	r20, r18
    2cd8:	c3 01       	movw	r24, r6
    2cda:	b2 01       	movw	r22, r4
    2cdc:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <__cmpsf2>
    2ce0:	87 fd       	sbrc	r24, 7
    2ce2:	18 c2       	rjmp	.+1072   	; 0x3114 <vDisplayWriteStringAtPos+0x5e6>
    2ce4:	26 ee       	ldi	r18, 0xE6	; 230
    2ce6:	c2 2e       	mov	r12, r18
    2ce8:	2d e2       	ldi	r18, 0x2D	; 45
    2cea:	d2 2e       	mov	r13, r18

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	40 e8       	ldi	r20, 0x80	; 128
    2cf2:	5f e3       	ldi	r21, 0x3F	; 63
    2cf4:	c3 01       	movw	r24, r6
    2cf6:	b2 01       	movw	r22, r4
    2cf8:	0e 94 38 20 	call	0x4070	; 0x4070 <__gesf2>
    2cfc:	87 fd       	sbrc	r24, 7
    2cfe:	39 c2       	rjmp	.+1138   	; 0x3172 <vDisplayWriteStringAtPos+0x644>
    2d00:	e1 2c       	mov	r14, r1
    2d02:	f1 2c       	mov	r15, r1
        value /= 10.0;
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	40 e2       	ldi	r20, 0x20	; 32
    2d0a:	51 e4       	ldi	r21, 0x41	; 65
    2d0c:	c3 01       	movw	r24, r6
    2d0e:	b2 01       	movw	r22, r4
    2d10:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <__divsf3>
    2d14:	2b 01       	movw	r4, r22
    2d16:	3c 01       	movw	r6, r24
        ++exponent;
    2d18:	9f ef       	ldi	r25, 0xFF	; 255
    2d1a:	e9 1a       	sub	r14, r25
    2d1c:	f9 0a       	sbc	r15, r25

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e8       	ldi	r20, 0x80	; 128
    2d24:	5f e3       	ldi	r21, 0x3F	; 63
    2d26:	c3 01       	movw	r24, r6
    2d28:	b2 01       	movw	r22, r4
    2d2a:	0e 94 38 20 	call	0x4070	; 0x4070 <__gesf2>
    2d2e:	87 ff       	sbrs	r24, 7
    2d30:	e9 cf       	rjmp	.-46     	; 0x2d04 <vDisplayWriteStringAtPos+0x1d6>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    2d32:	2d ec       	ldi	r18, 0xCD	; 205
    2d34:	3c ec       	ldi	r19, 0xCC	; 204
    2d36:	4c ec       	ldi	r20, 0xCC	; 204
    2d38:	5d e3       	ldi	r21, 0x3D	; 61
    2d3a:	c3 01       	movw	r24, r6
    2d3c:	b2 01       	movw	r22, r4
    2d3e:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <__cmpsf2>
    2d42:	87 ff       	sbrs	r24, 7
    2d44:	19 c0       	rjmp	.+50     	; 0x2d78 <vDisplayWriteStringAtPos+0x24a>
        value *= 10.0;
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e2       	ldi	r20, 0x20	; 32
    2d4c:	51 e4       	ldi	r21, 0x41	; 65
    2d4e:	c3 01       	movw	r24, r6
    2d50:	b2 01       	movw	r22, r4
    2d52:	0e 94 3d 20 	call	0x407a	; 0x407a <__mulsf3>
    2d56:	2b 01       	movw	r4, r22
    2d58:	3c 01       	movw	r6, r24
        --exponent;
    2d5a:	a1 e0       	ldi	r26, 0x01	; 1
    2d5c:	ea 1a       	sub	r14, r26
    2d5e:	f1 08       	sbc	r15, r1
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    2d60:	2d ec       	ldi	r18, 0xCD	; 205
    2d62:	3c ec       	ldi	r19, 0xCC	; 204
    2d64:	4c ec       	ldi	r20, 0xCC	; 204
    2d66:	5d e3       	ldi	r21, 0x3D	; 61
    2d68:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <__cmpsf2>
    2d6c:	87 fd       	sbrc	r24, 7
    2d6e:	eb cf       	rjmp	.-42     	; 0x2d46 <vDisplayWriteStringAtPos+0x218>
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    2d70:	1e 14       	cp	r1, r14
    2d72:	1f 04       	cpc	r1, r15
    2d74:	0c f0       	brlt	.+2      	; 0x2d78 <vDisplayWriteStringAtPos+0x24a>
    2d76:	0a c2       	rjmp	.+1044   	; 0x318c <vDisplayWriteStringAtPos+0x65e>
    2d78:	86 01       	movw	r16, r12
    2d7a:	0e 0d       	add	r16, r14
    2d7c:	1f 1d       	adc	r17, r15
        int digit = value * 10;
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e2       	ldi	r20, 0x20	; 32
    2d84:	51 e4       	ldi	r21, 0x41	; 65
    2d86:	c3 01       	movw	r24, r6
    2d88:	b2 01       	movw	r22, r4
    2d8a:	0e 94 3d 20 	call	0x407a	; 0x407a <__mulsf3>
    2d8e:	2b 01       	movw	r4, r22
    2d90:	3c 01       	movw	r6, r24
    2d92:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__fixsfsi>
        *buffer++ = digit + '0';
    2d96:	20 e3       	ldi	r18, 0x30	; 48
    2d98:	26 0f       	add	r18, r22
    2d9a:	f6 01       	movw	r30, r12
    2d9c:	21 93       	st	Z+, r18
    2d9e:	6f 01       	movw	r12, r30
        value = value * 10 - digit;
    2da0:	07 2e       	mov	r0, r23
    2da2:	00 0c       	add	r0, r0
    2da4:	88 0b       	sbc	r24, r24
    2da6:	99 0b       	sbc	r25, r25
    2da8:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__floatsisf>
    2dac:	9b 01       	movw	r18, r22
    2dae:	ac 01       	movw	r20, r24
    2db0:	c3 01       	movw	r24, r6
    2db2:	b2 01       	movw	r22, r4
    2db4:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <__subsf3>
    2db8:	2b 01       	movw	r4, r22
    2dba:	3c 01       	movw	r6, r24
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    2dbc:	c0 16       	cp	r12, r16
    2dbe:	d1 06       	cpc	r13, r17
    2dc0:	f1 f6       	brne	.-68     	; 0x2d7e <vDisplayWriteStringAtPos+0x250>
    }

    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';
    2dc2:	86 01       	movw	r16, r12
    2dc4:	0f 5f       	subi	r16, 0xFF	; 255
    2dc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc8:	ee e2       	ldi	r30, 0x2E	; 46
    2dca:	d6 01       	movw	r26, r12
    2dcc:	ec 93       	st	X, r30
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    2dce:	f4 e0       	ldi	r31, 0x04	; 4
    2dd0:	ef 16       	cp	r14, r31
    2dd2:	f1 04       	cpc	r15, r1
    2dd4:	4c f5       	brge	.+82     	; 0x2e28 <vDisplayWriteStringAtPos+0x2fa>
    2dd6:	68 01       	movw	r12, r16
    2dd8:	84 e0       	ldi	r24, 0x04	; 4
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	8e 19       	sub	r24, r14
    2dde:	9f 09       	sbc	r25, r15
    2de0:	08 0f       	add	r16, r24
    2de2:	19 1f       	adc	r17, r25
        int digit = value * 10.0;
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	40 e2       	ldi	r20, 0x20	; 32
    2dea:	51 e4       	ldi	r21, 0x41	; 65
    2dec:	c3 01       	movw	r24, r6
    2dee:	b2 01       	movw	r22, r4
    2df0:	0e 94 3d 20 	call	0x407a	; 0x407a <__mulsf3>
    2df4:	2b 01       	movw	r4, r22
    2df6:	3c 01       	movw	r6, r24
    2df8:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__fixsfsi>
        *buffer++ = digit + '0';
    2dfc:	20 e3       	ldi	r18, 0x30	; 48
    2dfe:	26 0f       	add	r18, r22
    2e00:	d6 01       	movw	r26, r12
    2e02:	2d 93       	st	X+, r18
    2e04:	6d 01       	movw	r12, r26
        value = value * 10.0 - digit;
    2e06:	07 2e       	mov	r0, r23
    2e08:	00 0c       	add	r0, r0
    2e0a:	88 0b       	sbc	r24, r24
    2e0c:	99 0b       	sbc	r25, r25
    2e0e:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__floatsisf>
    2e12:	9b 01       	movw	r18, r22
    2e14:	ac 01       	movw	r20, r24
    2e16:	c3 01       	movw	r24, r6
    2e18:	b2 01       	movw	r22, r4
    2e1a:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <__subsf3>
    2e1e:	2b 01       	movw	r4, r22
    2e20:	3c 01       	movw	r6, r24
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    2e22:	0c 15       	cp	r16, r12
    2e24:	1d 05       	cpc	r17, r13
    2e26:	f1 f6       	brne	.-68     	; 0x2de4 <vDisplayWriteStringAtPos+0x2b6>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    2e28:	f8 01       	movw	r30, r16
    2e2a:	10 82       	st	Z, r1
    2e2c:	94 01       	movw	r18, r8
    2e2e:	2e 52       	subi	r18, 0x2E	; 46
    2e30:	32 4d       	sbci	r19, 0xD2	; 210
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    2e32:	a6 ee       	ldi	r26, 0xE6	; 230
    2e34:	bd e2       	ldi	r27, 0x2D	; 45
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	05 c0       	rjmp	.+10     	; 0x2e46 <vDisplayWriteStringAtPos+0x318>

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
					str[length+i] = buffer[i];
    2e3c:	4d 91       	ld	r20, X+
    2e3e:	f9 01       	movw	r30, r18
    2e40:	41 93       	st	Z+, r20
    2e42:	9f 01       	movw	r18, r30
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    2e44:	01 96       	adiw	r24, 0x01	; 1
    2e46:	f5 01       	movw	r30, r10
    2e48:	01 90       	ld	r0, Z+
    2e4a:	00 20       	and	r0, r0
    2e4c:	e9 f7       	brne	.-6      	; 0x2e48 <vDisplayWriteStringAtPos+0x31a>
    2e4e:	31 97       	sbiw	r30, 0x01	; 1
    2e50:	e6 5e       	subi	r30, 0xE6	; 230
    2e52:	fd 42       	sbci	r31, 0x2D	; 45
    2e54:	8e 17       	cp	r24, r30
    2e56:	9f 07       	cpc	r25, r31
    2e58:	88 f3       	brcs	.-30     	; 0x2e3c <vDisplayWriteStringAtPos+0x30e>
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    2e5a:	8e 0e       	add	r8, r30
    2e5c:	9f 1e       	adc	r9, r31
				}
				length += strlen(buffer);
				break;

				case 'e':
				double_temp = va_arg(arg, double);
    2e5e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2e60:	bb 8d       	ldd	r27, Y+27	; 0x1b
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2e62:	8f 89       	ldd	r24, Y+23	; 0x17
    2e64:	98 8d       	ldd	r25, Y+24	; 0x18
    2e66:	98 ce       	rjmp	.-720    	; 0x2b98 <vDisplayWriteStringAtPos+0x6a>
				length++;
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    2e68:	bd 01       	movw	r22, r26
    2e6a:	6e 5f       	subi	r22, 0xFE	; 254
    2e6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e6e:	0d 90       	ld	r0, X+
    2e70:	bc 91       	ld	r27, X
    2e72:	a0 2d       	mov	r26, r0
    2e74:	ad 01       	movw	r20, r26
    2e76:	94 01       	movw	r18, r8
    2e78:	2e 52       	subi	r18, 0x2E	; 46
    2e7a:	32 4d       	sbci	r19, 0xD2	; 210
				for(int i = 0; i < strlen(string_temp);i++) {
    2e7c:	80 e0       	ldi	r24, 0x00	; 0
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	07 c0       	rjmp	.+14     	; 0x2e90 <vDisplayWriteStringAtPos+0x362>
					str[length+i] = string_temp[i];
    2e82:	fa 01       	movw	r30, r20
    2e84:	11 91       	ld	r17, Z+
    2e86:	af 01       	movw	r20, r30
    2e88:	f9 01       	movw	r30, r18
    2e8a:	11 93       	st	Z+, r17
    2e8c:	9f 01       	movw	r18, r30
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    2e8e:	01 96       	adiw	r24, 0x01	; 1
    2e90:	fd 01       	movw	r30, r26
    2e92:	01 90       	ld	r0, Z+
    2e94:	00 20       	and	r0, r0
    2e96:	e9 f7       	brne	.-6      	; 0x2e92 <vDisplayWriteStringAtPos+0x364>
    2e98:	31 97       	sbiw	r30, 0x01	; 1
    2e9a:	ea 1b       	sub	r30, r26
    2e9c:	fb 0b       	sbc	r31, r27
    2e9e:	8e 17       	cp	r24, r30
    2ea0:	9f 07       	cpc	r25, r31
    2ea2:	78 f3       	brcs	.-34     	; 0x2e82 <vDisplayWriteStringAtPos+0x354>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    2ea4:	8e 0e       	add	r8, r30
    2ea6:	9f 1e       	adc	r9, r31
				length++;
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    2ea8:	db 01       	movw	r26, r22
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2eaa:	8f 89       	ldd	r24, Y+23	; 0x17
    2eac:	98 8d       	ldd	r25, Y+24	; 0x18
    2eae:	74 ce       	rjmp	.-792    	; 0x2b98 <vDisplayWriteStringAtPos+0x6a>
				length += strlen(buffer);
				break;

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    2eb0:	8d 01       	movw	r16, r26
    2eb2:	0e 5f       	subi	r16, 0xFE	; 254
    2eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2eb6:	40 e1       	ldi	r20, 0x10	; 16
    2eb8:	66 ee       	ldi	r22, 0xE6	; 230
    2eba:	7d e2       	ldi	r23, 0x2D	; 45
    2ebc:	8d 91       	ld	r24, X+
    2ebe:	9c 91       	ld	r25, X
    2ec0:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <__itoa_ncheck>
    2ec4:	94 01       	movw	r18, r8
    2ec6:	2e 52       	subi	r18, 0x2E	; 46
    2ec8:	32 4d       	sbci	r19, 0xD2	; 210
    2eca:	a6 ee       	ldi	r26, 0xE6	; 230
    2ecc:	bd e2       	ldi	r27, 0x2D	; 45
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	05 c0       	rjmp	.+10     	; 0x2ede <vDisplayWriteStringAtPos+0x3b0>
					str[length+i] = buffer[i];
    2ed4:	4d 91       	ld	r20, X+
    2ed6:	f9 01       	movw	r30, r18
    2ed8:	41 93       	st	Z+, r20
    2eda:	9f 01       	movw	r18, r30

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    2edc:	01 96       	adiw	r24, 0x01	; 1
    2ede:	f5 01       	movw	r30, r10
    2ee0:	01 90       	ld	r0, Z+
    2ee2:	00 20       	and	r0, r0
    2ee4:	e9 f7       	brne	.-6      	; 0x2ee0 <vDisplayWriteStringAtPos+0x3b2>
    2ee6:	31 97       	sbiw	r30, 0x01	; 1
    2ee8:	e6 5e       	subi	r30, 0xE6	; 230
    2eea:	fd 42       	sbci	r31, 0x2D	; 45
    2eec:	8e 17       	cp	r24, r30
    2eee:	9f 07       	cpc	r25, r31
    2ef0:	88 f3       	brcs	.-30     	; 0x2ed4 <vDisplayWriteStringAtPos+0x3a6>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    2ef2:	8e 0e       	add	r8, r30
    2ef4:	9f 1e       	adc	r9, r31
				length += strlen(buffer);
				break;

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    2ef6:	d8 01       	movw	r26, r16
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2ef8:	8f 89       	ldd	r24, Y+23	; 0x17
    2efa:	98 8d       	ldd	r25, Y+24	; 0x18
    2efc:	4d ce       	rjmp	.-870    	; 0x2b98 <vDisplayWriteStringAtPos+0x6a>
				length += strlen(string_temp);
				break;

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    2efe:	8d 01       	movw	r16, r26
    2f00:	0e 5f       	subi	r16, 0xFE	; 254
    2f02:	1f 4f       	sbci	r17, 0xFF	; 255
    2f04:	4a e0       	ldi	r20, 0x0A	; 10
    2f06:	66 ee       	ldi	r22, 0xE6	; 230
    2f08:	7d e2       	ldi	r23, 0x2D	; 45
    2f0a:	8d 91       	ld	r24, X+
    2f0c:	9c 91       	ld	r25, X
    2f0e:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <__itoa_ncheck>
    2f12:	94 01       	movw	r18, r8
    2f14:	2e 52       	subi	r18, 0x2E	; 46
    2f16:	32 4d       	sbci	r19, 0xD2	; 210
    2f18:	a6 ee       	ldi	r26, 0xE6	; 230
    2f1a:	bd e2       	ldi	r27, 0x2D	; 45
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	05 c0       	rjmp	.+10     	; 0x2f2c <vDisplayWriteStringAtPos+0x3fe>
					str[length+i] = buffer[i];
    2f22:	4d 91       	ld	r20, X+
    2f24:	f9 01       	movw	r30, r18
    2f26:	41 93       	st	Z+, r20
    2f28:	9f 01       	movw	r18, r30

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    2f2a:	01 96       	adiw	r24, 0x01	; 1
    2f2c:	f5 01       	movw	r30, r10
    2f2e:	01 90       	ld	r0, Z+
    2f30:	00 20       	and	r0, r0
    2f32:	e9 f7       	brne	.-6      	; 0x2f2e <vDisplayWriteStringAtPos+0x400>
    2f34:	31 97       	sbiw	r30, 0x01	; 1
    2f36:	e6 5e       	subi	r30, 0xE6	; 230
    2f38:	fd 42       	sbci	r31, 0x2D	; 45
    2f3a:	8e 17       	cp	r24, r30
    2f3c:	9f 07       	cpc	r25, r31
    2f3e:	88 f3       	brcs	.-30     	; 0x2f22 <vDisplayWriteStringAtPos+0x3f4>
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    2f40:	8e 0e       	add	r8, r30
    2f42:	9f 1e       	adc	r9, r31
				length += strlen(buffer);
				break;

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    2f44:	d8 01       	movw	r26, r16
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2f46:	8f 89       	ldd	r24, Y+23	; 0x17
    2f48:	98 8d       	ldd	r25, Y+24	; 0x18
    2f4a:	26 ce       	rjmp	.-948    	; 0x2b98 <vDisplayWriteStringAtPos+0x6a>
				break;

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
				str[length] = char_temp;
    2f4c:	f4 01       	movw	r30, r8
    2f4e:	ee 52       	subi	r30, 0x2E	; 46
    2f50:	f2 4d       	sbci	r31, 0xD2	; 210
    2f52:	8c 91       	ld	r24, X
    2f54:	80 83       	st	Z, r24
				length++;
    2f56:	2f ef       	ldi	r18, 0xFF	; 255
    2f58:	82 1a       	sub	r8, r18
    2f5a:	92 0a       	sbc	r9, r18
				length++;
				break;

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    2f5c:	12 96       	adiw	r26, 0x02	; 2
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2f5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f60:	98 8d       	ldd	r25, Y+24	; 0x18
    2f62:	1a ce       	rjmp	.-972    	; 0x2b98 <vDisplayWriteStringAtPos+0x6a>
				}
				length += strlen(buffer);
				break;

				case 'e':
				double_temp = va_arg(arg, double);
    2f64:	9d 01       	movw	r18, r26
    2f66:	2c 5f       	subi	r18, 0xFC	; 252
    2f68:	3f 4f       	sbci	r19, 0xFF	; 255
    2f6a:	2a 8f       	std	Y+26, r18	; 0x1a
    2f6c:	3b 8f       	std	Y+27, r19	; 0x1b
    2f6e:	4d 90       	ld	r4, X+
    2f70:	5d 90       	ld	r5, X+
    2f72:	6d 90       	ld	r6, X+
    2f74:	7c 90       	ld	r7, X

void ftoa_sci(char *buffer, double value) {
    int exponent = 0;    
    static const int width = 4;

    if (value == 0.0) {
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	a9 01       	movw	r20, r18
    2f7c:	c3 01       	movw	r24, r6
    2f7e:	b2 01       	movw	r22, r4
    2f80:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <__cmpsf2>
    2f84:	88 23       	and	r24, r24
    2f86:	09 f4       	brne	.+2      	; 0x2f8a <vDisplayWriteStringAtPos+0x45c>
    2f88:	dd c0       	rjmp	.+442    	; 0x3144 <vDisplayWriteStringAtPos+0x616>
        buffer[0] = '0';
        buffer[1] = '\0';
        return;
    }

    if (value < 0.0) {
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	a9 01       	movw	r20, r18
    2f90:	c3 01       	movw	r24, r6
    2f92:	b2 01       	movw	r22, r4
    2f94:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <__cmpsf2>
    2f98:	87 fd       	sbrc	r24, 7
    2f9a:	c8 c0       	rjmp	.+400    	; 0x312c <vDisplayWriteStringAtPos+0x5fe>
    2f9c:	86 ee       	ldi	r24, 0xE6	; 230
    2f9e:	c8 2e       	mov	r12, r24
    2fa0:	8d e2       	ldi	r24, 0x2D	; 45
    2fa2:	d8 2e       	mov	r13, r24

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	40 e8       	ldi	r20, 0x80	; 128
    2faa:	5f e3       	ldi	r21, 0x3F	; 63
    2fac:	c3 01       	movw	r24, r6
    2fae:	b2 01       	movw	r22, r4
    2fb0:	0e 94 38 20 	call	0x4070	; 0x4070 <__gesf2>
    2fb4:	87 fd       	sbrc	r24, 7
    2fb6:	d6 c0       	rjmp	.+428    	; 0x3164 <vDisplayWriteStringAtPos+0x636>
    2fb8:	e1 2c       	mov	r14, r1
    2fba:	f1 2c       	mov	r15, r1
    2fbc:	01 c0       	rjmp	.+2      	; 0x2fc0 <vDisplayWriteStringAtPos+0x492>
        value /= 10.0;
        ++exponent;
    2fbe:	78 01       	movw	r14, r16
static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
        value /= 10.0;
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	40 e2       	ldi	r20, 0x20	; 32
    2fc6:	51 e4       	ldi	r21, 0x41	; 65
    2fc8:	c3 01       	movw	r24, r6
    2fca:	b2 01       	movw	r22, r4
    2fcc:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <__divsf3>
    2fd0:	2b 01       	movw	r4, r22
    2fd2:	3c 01       	movw	r6, r24
        ++exponent;
    2fd4:	87 01       	movw	r16, r14
    2fd6:	0f 5f       	subi	r16, 0xFF	; 255
    2fd8:	1f 4f       	sbci	r17, 0xFF	; 255

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	40 e8       	ldi	r20, 0x80	; 128
    2fe0:	5f e3       	ldi	r21, 0x3F	; 63
    2fe2:	0e 94 38 20 	call	0x4070	; 0x4070 <__gesf2>
    2fe6:	87 ff       	sbrs	r24, 7
    2fe8:	ea cf       	rjmp	.-44     	; 0x2fbe <vDisplayWriteStringAtPos+0x490>
    2fea:	ec 8e       	std	Y+28, r14	; 0x1c
    2fec:	fd 8e       	std	Y+29, r15	; 0x1d
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    2fee:	2d ec       	ldi	r18, 0xCD	; 205
    2ff0:	3c ec       	ldi	r19, 0xCC	; 204
    2ff2:	4c ec       	ldi	r20, 0xCC	; 204
    2ff4:	5d e3       	ldi	r21, 0x3D	; 61
    2ff6:	c3 01       	movw	r24, r6
    2ff8:	b2 01       	movw	r22, r4
    2ffa:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <__cmpsf2>
    2ffe:	87 fd       	sbrc	r24, 7
    3000:	02 c0       	rjmp	.+4      	; 0x3006 <vDisplayWriteStringAtPos+0x4d8>
    3002:	1b c0       	rjmp	.+54     	; 0x303a <vDisplayWriteStringAtPos+0x50c>
        value *= 10.0;
        --exponent;
    3004:	87 01       	movw	r16, r14
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
        value *= 10.0;
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	40 e2       	ldi	r20, 0x20	; 32
    300c:	51 e4       	ldi	r21, 0x41	; 65
    300e:	c3 01       	movw	r24, r6
    3010:	b2 01       	movw	r22, r4
    3012:	0e 94 3d 20 	call	0x407a	; 0x407a <__mulsf3>
    3016:	2b 01       	movw	r4, r22
    3018:	3c 01       	movw	r6, r24
        --exponent;
    301a:	78 01       	movw	r14, r16
    301c:	b1 e0       	ldi	r27, 0x01	; 1
    301e:	eb 1a       	sub	r14, r27
    3020:	f1 08       	sbc	r15, r1
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    3022:	2d ec       	ldi	r18, 0xCD	; 205
    3024:	3c ec       	ldi	r19, 0xCC	; 204
    3026:	4c ec       	ldi	r20, 0xCC	; 204
    3028:	5d e3       	ldi	r21, 0x3D	; 61
    302a:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <__cmpsf2>
    302e:	87 fd       	sbrc	r24, 7
    3030:	e9 cf       	rjmp	.-46     	; 0x3004 <vDisplayWriteStringAtPos+0x4d6>
    3032:	f8 01       	movw	r30, r16
    3034:	32 97       	sbiw	r30, 0x02	; 2
    3036:	ec 8f       	std	Y+28, r30	; 0x1c
    3038:	fd 8f       	std	Y+29, r31	; 0x1d
        value = -value;
    }

    exponent = normalize(&value);

    int digit = value * 10.0;
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	40 e2       	ldi	r20, 0x20	; 32
    3040:	51 e4       	ldi	r21, 0x41	; 65
    3042:	c3 01       	movw	r24, r6
    3044:	b2 01       	movw	r22, r4
    3046:	0e 94 3d 20 	call	0x407a	; 0x407a <__mulsf3>
    304a:	2b 01       	movw	r4, r22
    304c:	3c 01       	movw	r6, r24
    304e:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__fixsfsi>
    *buffer++ = digit + '0';
    3052:	20 e3       	ldi	r18, 0x30	; 48
    3054:	26 0f       	add	r18, r22
    3056:	d6 01       	movw	r26, r12
    3058:	2c 93       	st	X, r18
    value = value * 10.0 - digit;
    305a:	07 2e       	mov	r0, r23
    305c:	00 0c       	add	r0, r0
    305e:	88 0b       	sbc	r24, r24
    3060:	99 0b       	sbc	r25, r25
    3062:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__floatsisf>
    3066:	9b 01       	movw	r18, r22
    3068:	ac 01       	movw	r20, r24
    306a:	c3 01       	movw	r24, r6
    306c:	b2 01       	movw	r22, r4
    306e:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <__subsf3>
    --exponent;

    *buffer++ = '.';
    3072:	2e e2       	ldi	r18, 0x2E	; 46
    3074:	f6 01       	movw	r30, r12
    3076:	21 83       	std	Z+1, r18	; 0x01
    3078:	86 01       	movw	r16, r12
    307a:	0e 5f       	subi	r16, 0xFE	; 254
    307c:	1f 4f       	sbci	r17, 0xFF	; 255
    307e:	76 01       	movw	r14, r12
    3080:	36 e0       	ldi	r19, 0x06	; 6
    3082:	e3 0e       	add	r14, r19
    3084:	f1 1c       	adc	r15, r1

    for (int i = 0; i < width; i++) {
        int digit = value * 10.0;
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	40 e2       	ldi	r20, 0x20	; 32
    308c:	51 e4       	ldi	r21, 0x41	; 65
    308e:	0e 94 3d 20 	call	0x407a	; 0x407a <__mulsf3>
    3092:	2b 01       	movw	r4, r22
    3094:	3c 01       	movw	r6, r24
    3096:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__fixsfsi>
        *buffer++ = digit + '0';
    309a:	20 e3       	ldi	r18, 0x30	; 48
    309c:	26 0f       	add	r18, r22
    309e:	d8 01       	movw	r26, r16
    30a0:	2d 93       	st	X+, r18
    30a2:	8d 01       	movw	r16, r26
        value = value * 10.0 - digit;
    30a4:	07 2e       	mov	r0, r23
    30a6:	00 0c       	add	r0, r0
    30a8:	88 0b       	sbc	r24, r24
    30aa:	99 0b       	sbc	r25, r25
    30ac:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__floatsisf>
    30b0:	9b 01       	movw	r18, r22
    30b2:	ac 01       	movw	r20, r24
    30b4:	c3 01       	movw	r24, r6
    30b6:	b2 01       	movw	r22, r4
    30b8:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <__subsf3>
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    30bc:	e0 16       	cp	r14, r16
    30be:	f1 06       	cpc	r15, r17
    30c0:	11 f7       	brne	.-60     	; 0x3086 <vDisplayWriteStringAtPos+0x558>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    30c2:	25 e6       	ldi	r18, 0x65	; 101
    30c4:	f6 01       	movw	r30, r12
    30c6:	26 83       	std	Z+6, r18	; 0x06
    30c8:	b6 01       	movw	r22, r12
    30ca:	69 5f       	subi	r22, 0xF9	; 249
    30cc:	7f 4f       	sbci	r23, 0xFF	; 255
    30ce:	4a e0       	ldi	r20, 0x0A	; 10
    30d0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30d2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    30d4:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <__itoa_ncheck>
    30d8:	94 01       	movw	r18, r8
    30da:	2e 52       	subi	r18, 0x2E	; 46
    30dc:	32 4d       	sbci	r19, 0xD2	; 210
        ++exponent;
    }

    while (value < 0.1) {
        value *= 10.0;
        --exponent;
    30de:	a6 ee       	ldi	r26, 0xE6	; 230
    30e0:	bd e2       	ldi	r27, 0x2D	; 45
    30e2:	80 e0       	ldi	r24, 0x00	; 0
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	05 c0       	rjmp	.+10     	; 0x30f2 <vDisplayWriteStringAtPos+0x5c4>

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
					str[length+i] = buffer[i];
    30e8:	4d 91       	ld	r20, X+
    30ea:	f9 01       	movw	r30, r18
    30ec:	41 93       	st	Z+, r20
    30ee:	9f 01       	movw	r18, r30
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    30f0:	01 96       	adiw	r24, 0x01	; 1
    30f2:	f5 01       	movw	r30, r10
    30f4:	01 90       	ld	r0, Z+
    30f6:	00 20       	and	r0, r0
    30f8:	e9 f7       	brne	.-6      	; 0x30f4 <vDisplayWriteStringAtPos+0x5c6>
    30fa:	31 97       	sbiw	r30, 0x01	; 1
    30fc:	e6 5e       	subi	r30, 0xE6	; 230
    30fe:	fd 42       	sbci	r31, 0x2D	; 45
    3100:	8e 17       	cp	r24, r30
    3102:	9f 07       	cpc	r25, r31
    3104:	88 f3       	brcs	.-30     	; 0x30e8 <vDisplayWriteStringAtPos+0x5ba>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    3106:	8e 0e       	add	r8, r30
    3108:	9f 1e       	adc	r9, r31
				}
				length += strlen(buffer);
				break;

				case 'e':
				double_temp = va_arg(arg, double);
    310a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    310c:	bb 8d       	ldd	r27, Y+27	; 0x1b
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    310e:	8f 89       	ldd	r24, Y+23	; 0x17
    3110:	98 8d       	ldd	r25, Y+24	; 0x18
    3112:	42 cd       	rjmp	.-1404   	; 0x2b98 <vDisplayWriteStringAtPos+0x6a>
        buffer[1] = '\0';
        return;
    }         

    if (value < 0.0) {
        *buffer++ = '-';
    3114:	8d e2       	ldi	r24, 0x2D	; 45
    3116:	80 93 e6 2d 	sts	0x2DE6, r24	; 0x802de6 <buffer.4995>
        value = -value;
    311a:	77 fa       	bst	r7, 7
    311c:	70 94       	com	r7
    311e:	77 f8       	bld	r7, 7
    3120:	70 94       	com	r7
        buffer[1] = '\0';
        return;
    }         

    if (value < 0.0) {
        *buffer++ = '-';
    3122:	37 ee       	ldi	r19, 0xE7	; 231
    3124:	c3 2e       	mov	r12, r19
    3126:	3d e2       	ldi	r19, 0x2D	; 45
    3128:	d3 2e       	mov	r13, r19
    312a:	e0 cd       	rjmp	.-1088   	; 0x2cec <vDisplayWriteStringAtPos+0x1be>
        buffer[1] = '\0';
        return;
    }

    if (value < 0.0) {
        *buffer++ = '-';
    312c:	8d e2       	ldi	r24, 0x2D	; 45
    312e:	80 93 e6 2d 	sts	0x2DE6, r24	; 0x802de6 <buffer.4995>
        value = -value;
    3132:	77 fa       	bst	r7, 7
    3134:	70 94       	com	r7
    3136:	77 f8       	bld	r7, 7
    3138:	70 94       	com	r7
        buffer[1] = '\0';
        return;
    }

    if (value < 0.0) {
        *buffer++ = '-';
    313a:	97 ee       	ldi	r25, 0xE7	; 231
    313c:	c9 2e       	mov	r12, r25
    313e:	9d e2       	ldi	r25, 0x2D	; 45
    3140:	d9 2e       	mov	r13, r25
    3142:	30 cf       	rjmp	.-416    	; 0x2fa4 <vDisplayWriteStringAtPos+0x476>
void ftoa_sci(char *buffer, double value) {
    int exponent = 0;    
    static const int width = 4;

    if (value == 0.0) {
        buffer[0] = '0';
    3144:	30 e3       	ldi	r19, 0x30	; 48
    3146:	30 93 e6 2d 	sts	0x2DE6, r19	; 0x802de6 <buffer.4995>
        buffer[1] = '\0';
    314a:	10 92 e7 2d 	sts	0x2DE7, r1	; 0x802de7 <buffer.4995+0x1>
    314e:	c4 cf       	rjmp	.-120    	; 0x30d8 <vDisplayWriteStringAtPos+0x5aa>
    int exponent = 0;
    int places = 0;
    static const int width = 4;

    if (value == 0.0) {
        buffer[0] = '0';
    3150:	30 e3       	ldi	r19, 0x30	; 48
    3152:	30 93 e6 2d 	sts	0x2DE6, r19	; 0x802de6 <buffer.4995>
        buffer[1] = '\0';
    3156:	10 92 e7 2d 	sts	0x2DE7, r1	; 0x802de7 <buffer.4995+0x1>
    315a:	68 ce       	rjmp	.-816    	; 0x2e2c <vDisplayWriteStringAtPos+0x2fe>
    315c:	be 01       	movw	r22, r28
    315e:	6f 5f       	subi	r22, 0xFF	; 255
    3160:	7f 4f       	sbci	r23, 0xFF	; 255
    3162:	5c cd       	rjmp	.-1352   	; 0x2c1c <vDisplayWriteStringAtPos+0xee>

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    3164:	af ef       	ldi	r26, 0xFF	; 255
    3166:	bf ef       	ldi	r27, 0xFF	; 255
    3168:	ac 8f       	std	Y+28, r26	; 0x1c
    316a:	bd 8f       	std	Y+29, r27	; 0x1d
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    316c:	00 e0       	ldi	r16, 0x00	; 0
    316e:	10 e0       	ldi	r17, 0x00	; 0
    3170:	3e cf       	rjmp	.-388    	; 0x2fee <vDisplayWriteStringAtPos+0x4c0>
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    3172:	2d ec       	ldi	r18, 0xCD	; 205
    3174:	3c ec       	ldi	r19, 0xCC	; 204
    3176:	4c ec       	ldi	r20, 0xCC	; 204
    3178:	5d e3       	ldi	r21, 0x3D	; 61
    317a:	c3 01       	movw	r24, r6
    317c:	b2 01       	movw	r22, r4
    317e:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <__cmpsf2>
    3182:	87 ff       	sbrs	r24, 7
    3184:	1b c0       	rjmp	.+54     	; 0x31bc <vDisplayWriteStringAtPos+0x68e>
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    3186:	e1 2c       	mov	r14, r1
    3188:	f1 2c       	mov	r15, r1
    318a:	dd cd       	rjmp	.-1094   	; 0x2d46 <vDisplayWriteStringAtPos+0x218>
        ++places;
        --exponent;
    }

    if (places == 0)
        *buffer++ = '0';
    318c:	e0 e3       	ldi	r30, 0x30	; 48
    318e:	d6 01       	movw	r26, r12
    3190:	ec 93       	st	X, r30

    *buffer++ = '.';
    3192:	86 01       	movw	r16, r12
    3194:	0e 5f       	subi	r16, 0xFE	; 254
    3196:	1f 4f       	sbci	r17, 0xFF	; 255
    3198:	fe e2       	ldi	r31, 0x2E	; 46
    319a:	11 96       	adiw	r26, 0x01	; 1
    319c:	fc 93       	st	X, r31

    while (exponent < 0 && places < width) {
    319e:	ef 28       	or	r14, r15
    31a0:	a9 f0       	breq	.+42     	; 0x31cc <vDisplayWriteStringAtPos+0x69e>
    31a2:	80 e0       	ldi	r24, 0x00	; 0
    31a4:	90 e0       	ldi	r25, 0x00	; 0
        *buffer++ = '0';
    31a6:	0f 5f       	subi	r16, 0xFF	; 255
    31a8:	1f 4f       	sbci	r17, 0xFF	; 255
    31aa:	f8 01       	movw	r30, r16
    31ac:	31 97       	sbiw	r30, 0x01	; 1
    31ae:	20 e3       	ldi	r18, 0x30	; 48
    31b0:	20 83       	st	Z, r18
        --exponent;
        ++places;
    31b2:	01 96       	adiw	r24, 0x01	; 1
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    31b4:	84 30       	cpi	r24, 0x04	; 4
    31b6:	91 05       	cpc	r25, r1
    31b8:	b1 f7       	brne	.-20     	; 0x31a6 <vDisplayWriteStringAtPos+0x678>
    31ba:	36 ce       	rjmp	.-916    	; 0x2e28 <vDisplayWriteStringAtPos+0x2fa>
        ++places;
        --exponent;
    }

    if (places == 0)
        *buffer++ = '0';
    31bc:	20 e3       	ldi	r18, 0x30	; 48
    31be:	f6 01       	movw	r30, r12
    31c0:	20 83       	st	Z, r18

    *buffer++ = '.';
    31c2:	86 01       	movw	r16, r12
    31c4:	0e 5f       	subi	r16, 0xFE	; 254
    31c6:	1f 4f       	sbci	r17, 0xFF	; 255
    31c8:	3e e2       	ldi	r19, 0x2E	; 46
    31ca:	31 83       	std	Z+1, r19	; 0x01

    while (exponent < 0 && places < width) {
    31cc:	e1 2c       	mov	r14, r1
    31ce:	f1 2c       	mov	r15, r1
    31d0:	02 ce       	rjmp	.-1020   	; 0x2dd6 <vDisplayWriteStringAtPos+0x2a8>

000031d2 <xProtocolDecoder>:

/* This function fills the decoderQueue with the received ADC data. */
void fillDecoderQueue(uint16_t usDataBuffer[DECODERSAMPLECOUNT]) {
	BaseType_t xTaskWokenByReceive = pdFALSE;
	xQueueSendFromISR(decoderQueue, &usDataBuffer[0], &xTaskWokenByReceive);
}
    31d2:	cf 93       	push	r28
    31d4:	df 93       	push	r29
    31d6:	00 d0       	rcall	.+0      	; 0x31d8 <xProtocolDecoder+0x6>
    31d8:	cd b7       	in	r28, 0x3d	; 61
    31da:	de b7       	in	r29, 0x3e	; 62
    31dc:	19 82       	std	Y+1, r1	; 0x01
    31de:	0e 94 c1 01 	call	0x382	; 0x382 <xEventGroupCreate>
    31e2:	80 93 21 2e 	sts	0x2E21, r24	; 0x802e21 <receivedProtocolEventGroup>
    31e6:	90 93 22 2e 	sts	0x2E22, r25	; 0x802e22 <receivedProtocolEventGroup+0x1>
    31ea:	00 e0       	ldi	r16, 0x00	; 0
    31ec:	87 e0       	ldi	r24, 0x07	; 7
    31ee:	f8 2e       	mov	r15, r24
    31f0:	15 c0       	rjmp	.+42     	; 0x321c <xProtocolDecoder+0x4a>
    31f2:	64 e0       	ldi	r22, 0x04	; 4
    31f4:	70 e0       	ldi	r23, 0x00	; 0
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <vTaskDelay>
    31fe:	80 91 63 2e 	lds	r24, 0x2E63	; 0x802e63 <receivedByteQueue>
    3202:	90 91 64 2e 	lds	r25, 0x2E64	; 0x802e64 <receivedByteQueue+0x1>
    3206:	0e 94 b7 08 	call	0x116e	; 0x116e <uxQueueMessagesWaiting>
    320a:	81 11       	cpse	r24, r1
    320c:	40 c0       	rjmp	.+128    	; 0x328e <xProtocolDecoder+0xbc>
    320e:	00 e0       	ldi	r16, 0x00	; 0
    3210:	64 e0       	ldi	r22, 0x04	; 4
    3212:	70 e0       	ldi	r23, 0x00	; 0
    3214:	80 e0       	ldi	r24, 0x00	; 0
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <vTaskDelay>
    321c:	80 91 63 2e 	lds	r24, 0x2E63	; 0x802e63 <receivedByteQueue>
    3220:	90 91 64 2e 	lds	r25, 0x2E64	; 0x802e64 <receivedByteQueue+0x1>
    3224:	0e 94 b7 08 	call	0x116e	; 0x116e <uxQueueMessagesWaiting>
    3228:	88 23       	and	r24, r24
    322a:	91 f3       	breq	.-28     	; 0x3210 <xProtocolDecoder+0x3e>
    322c:	80 91 63 2e 	lds	r24, 0x2E63	; 0x802e63 <receivedByteQueue>
    3230:	90 91 64 2e 	lds	r25, 0x2E64	; 0x802e64 <receivedByteQueue+0x1>
    3234:	21 e0       	ldi	r18, 0x01	; 1
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	40 e0       	ldi	r20, 0x00	; 0
    323a:	50 e0       	ldi	r21, 0x00	; 0
    323c:	be 01       	movw	r22, r28
    323e:	6d 5f       	subi	r22, 0xFD	; 253
    3240:	7f 4f       	sbci	r23, 0xFF	; 255
    3242:	0e 94 fa 07 	call	0xff4	; 0xff4 <xQueueReceive>
    3246:	01 30       	cpi	r16, 0x01	; 1
    3248:	09 f4       	brne	.+2      	; 0x324c <xProtocolDecoder+0x7a>
    324a:	60 c0       	rjmp	.+192    	; 0x330c <xProtocolDecoder+0x13a>
    324c:	68 f1       	brcs	.+90     	; 0x32a8 <xProtocolDecoder+0xd6>
    324e:	02 30       	cpi	r16, 0x02	; 2
    3250:	09 f4       	brne	.+2      	; 0x3254 <xProtocolDecoder+0x82>
    3252:	91 c0       	rjmp	.+290    	; 0x3376 <xProtocolDecoder+0x1a4>
    3254:	03 30       	cpi	r16, 0x03	; 3
    3256:	91 f4       	brne	.+36     	; 0x327c <xProtocolDecoder+0xaa>
    3258:	8b 81       	ldd	r24, Y+3	; 0x03
    325a:	81 17       	cp	r24, r17
    325c:	21 f0       	breq	.+8      	; 0x3266 <xProtocolDecoder+0x94>
    325e:	f0 92 fa 2d 	sts	0x2DFA, r15	; 0x802dfa <ucQAMDataBytes>
    3262:	10 92 fb 2d 	sts	0x2DFB, r1	; 0x802dfb <ucQAMDataBytes+0x1>
    3266:	41 e0       	ldi	r20, 0x01	; 1
    3268:	50 e0       	ldi	r21, 0x00	; 0
    326a:	60 e0       	ldi	r22, 0x00	; 0
    326c:	70 e0       	ldi	r23, 0x00	; 0
    326e:	80 91 21 2e 	lds	r24, 0x2E21	; 0x802e21 <receivedProtocolEventGroup>
    3272:	90 91 22 2e 	lds	r25, 0x2E22	; 0x802e22 <receivedProtocolEventGroup+0x1>
    3276:	0e 94 a3 02 	call	0x546	; 0x546 <xEventGroupSetBits>
    327a:	19 82       	std	Y+1, r1	; 0x01
    327c:	80 91 63 2e 	lds	r24, 0x2E63	; 0x802e63 <receivedByteQueue>
    3280:	90 91 64 2e 	lds	r25, 0x2E64	; 0x802e64 <receivedByteQueue+0x1>
    3284:	0e 94 b7 08 	call	0x116e	; 0x116e <uxQueueMessagesWaiting>
    3288:	88 23       	and	r24, r24
    328a:	09 f4       	brne	.+2      	; 0x328e <xProtocolDecoder+0xbc>
    328c:	b2 cf       	rjmp	.-156    	; 0x31f2 <xProtocolDecoder+0x20>
    328e:	80 91 63 2e 	lds	r24, 0x2E63	; 0x802e63 <receivedByteQueue>
    3292:	90 91 64 2e 	lds	r25, 0x2E64	; 0x802e64 <receivedByteQueue+0x1>
    3296:	21 e0       	ldi	r18, 0x01	; 1
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	40 e0       	ldi	r20, 0x00	; 0
    329c:	50 e0       	ldi	r21, 0x00	; 0
    329e:	be 01       	movw	r22, r28
    32a0:	6d 5f       	subi	r22, 0xFD	; 253
    32a2:	7f 4f       	sbci	r23, 0xFF	; 255
    32a4:	0e 94 fa 07 	call	0xff4	; 0xff4 <xQueueReceive>
    32a8:	8b 81       	ldd	r24, Y+3	; 0x03
    32aa:	8f 3f       	cpi	r24, 0xFF	; 255
    32ac:	39 f7       	brne	.-50     	; 0x327c <xProtocolDecoder+0xaa>
    32ae:	41 e0       	ldi	r20, 0x01	; 1
    32b0:	50 e0       	ldi	r21, 0x00	; 0
    32b2:	60 e0       	ldi	r22, 0x00	; 0
    32b4:	70 e0       	ldi	r23, 0x00	; 0
    32b6:	80 91 21 2e 	lds	r24, 0x2E21	; 0x802e21 <receivedProtocolEventGroup>
    32ba:	90 91 22 2e 	lds	r25, 0x2E22	; 0x802e22 <receivedProtocolEventGroup+0x1>
    32be:	0e 94 82 02 	call	0x504	; 0x504 <xEventGroupClearBits>
    32c2:	80 91 63 2e 	lds	r24, 0x2E63	; 0x802e63 <receivedByteQueue>
    32c6:	90 91 64 2e 	lds	r25, 0x2E64	; 0x802e64 <receivedByteQueue+0x1>
    32ca:	0e 94 b7 08 	call	0x116e	; 0x116e <uxQueueMessagesWaiting>
    32ce:	81 11       	cpse	r24, r1
    32d0:	10 c0       	rjmp	.+32     	; 0x32f2 <xProtocolDecoder+0x120>
    32d2:	64 e0       	ldi	r22, 0x04	; 4
    32d4:	70 e0       	ldi	r23, 0x00	; 0
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <vTaskDelay>
    32de:	80 91 63 2e 	lds	r24, 0x2E63	; 0x802e63 <receivedByteQueue>
    32e2:	90 91 64 2e 	lds	r25, 0x2E64	; 0x802e64 <receivedByteQueue+0x1>
    32e6:	0e 94 b7 08 	call	0x116e	; 0x116e <uxQueueMessagesWaiting>
    32ea:	81 11       	cpse	r24, r1
    32ec:	02 c0       	rjmp	.+4      	; 0x32f2 <xProtocolDecoder+0x120>
    32ee:	01 e0       	ldi	r16, 0x01	; 1
    32f0:	8f cf       	rjmp	.-226    	; 0x3210 <xProtocolDecoder+0x3e>
    32f2:	80 91 63 2e 	lds	r24, 0x2E63	; 0x802e63 <receivedByteQueue>
    32f6:	90 91 64 2e 	lds	r25, 0x2E64	; 0x802e64 <receivedByteQueue+0x1>
    32fa:	21 e0       	ldi	r18, 0x01	; 1
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	40 e0       	ldi	r20, 0x00	; 0
    3300:	50 e0       	ldi	r21, 0x00	; 0
    3302:	be 01       	movw	r22, r28
    3304:	6d 5f       	subi	r22, 0xFD	; 253
    3306:	7f 4f       	sbci	r23, 0xFF	; 255
    3308:	0e 94 fa 07 	call	0xff4	; 0xff4 <xQueueReceive>
    330c:	1b 81       	ldd	r17, Y+3	; 0x03
    330e:	81 2f       	mov	r24, r17
    3310:	82 95       	swap	r24
    3312:	86 95       	lsr	r24
    3314:	87 70       	andi	r24, 0x07	; 7
    3316:	80 93 fa 2d 	sts	0x2DFA, r24	; 0x802dfa <ucQAMDataBytes>
    331a:	81 2f       	mov	r24, r17
    331c:	8f 71       	andi	r24, 0x1F	; 31
    331e:	8a 83       	std	Y+2, r24	; 0x02
    3320:	8a 81       	ldd	r24, Y+2	; 0x02
    3322:	80 93 fb 2d 	sts	0x2DFB, r24	; 0x802dfb <ucQAMDataBytes+0x1>
    3326:	8a 81       	ldd	r24, Y+2	; 0x02
    3328:	88 23       	and	r24, r24
    332a:	91 f1       	breq	.+100    	; 0x3390 <xProtocolDecoder+0x1be>
    332c:	80 91 63 2e 	lds	r24, 0x2E63	; 0x802e63 <receivedByteQueue>
    3330:	90 91 64 2e 	lds	r25, 0x2E64	; 0x802e64 <receivedByteQueue+0x1>
    3334:	0e 94 b7 08 	call	0x116e	; 0x116e <uxQueueMessagesWaiting>
    3338:	81 11       	cpse	r24, r1
    333a:	10 c0       	rjmp	.+32     	; 0x335c <xProtocolDecoder+0x18a>
    333c:	64 e0       	ldi	r22, 0x04	; 4
    333e:	70 e0       	ldi	r23, 0x00	; 0
    3340:	80 e0       	ldi	r24, 0x00	; 0
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <vTaskDelay>
    3348:	80 91 63 2e 	lds	r24, 0x2E63	; 0x802e63 <receivedByteQueue>
    334c:	90 91 64 2e 	lds	r25, 0x2E64	; 0x802e64 <receivedByteQueue+0x1>
    3350:	0e 94 b7 08 	call	0x116e	; 0x116e <uxQueueMessagesWaiting>
    3354:	81 11       	cpse	r24, r1
    3356:	02 c0       	rjmp	.+4      	; 0x335c <xProtocolDecoder+0x18a>
    3358:	02 e0       	ldi	r16, 0x02	; 2
    335a:	5a cf       	rjmp	.-332    	; 0x3210 <xProtocolDecoder+0x3e>
    335c:	80 91 63 2e 	lds	r24, 0x2E63	; 0x802e63 <receivedByteQueue>
    3360:	90 91 64 2e 	lds	r25, 0x2E64	; 0x802e64 <receivedByteQueue+0x1>
    3364:	21 e0       	ldi	r18, 0x01	; 1
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	40 e0       	ldi	r20, 0x00	; 0
    336a:	50 e0       	ldi	r21, 0x00	; 0
    336c:	be 01       	movw	r22, r28
    336e:	6d 5f       	subi	r22, 0xFD	; 253
    3370:	7f 4f       	sbci	r23, 0xFF	; 255
    3372:	0e 94 fa 07 	call	0xff4	; 0xff4 <xQueueReceive>
    3376:	e9 81       	ldd	r30, Y+1	; 0x01
    3378:	8b 81       	ldd	r24, Y+3	; 0x03
    337a:	f0 e0       	ldi	r31, 0x00	; 0
    337c:	e6 50       	subi	r30, 0x06	; 6
    337e:	f2 4d       	sbci	r31, 0xD2	; 210
    3380:	82 83       	std	Z+2, r24	; 0x02
    3382:	18 27       	eor	r17, r24
    3384:	89 81       	ldd	r24, Y+1	; 0x01
    3386:	8f 5f       	subi	r24, 0xFF	; 255
    3388:	89 83       	std	Y+1, r24	; 0x01
    338a:	9a 81       	ldd	r25, Y+2	; 0x02
    338c:	89 17       	cp	r24, r25
    338e:	70 f2       	brcs	.-100    	; 0x332c <xProtocolDecoder+0x15a>
    3390:	80 91 63 2e 	lds	r24, 0x2E63	; 0x802e63 <receivedByteQueue>
    3394:	90 91 64 2e 	lds	r25, 0x2E64	; 0x802e64 <receivedByteQueue+0x1>
    3398:	0e 94 b7 08 	call	0x116e	; 0x116e <uxQueueMessagesWaiting>
    339c:	81 11       	cpse	r24, r1
    339e:	10 c0       	rjmp	.+32     	; 0x33c0 <xProtocolDecoder+0x1ee>
    33a0:	64 e0       	ldi	r22, 0x04	; 4
    33a2:	70 e0       	ldi	r23, 0x00	; 0
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <vTaskDelay>
    33ac:	80 91 63 2e 	lds	r24, 0x2E63	; 0x802e63 <receivedByteQueue>
    33b0:	90 91 64 2e 	lds	r25, 0x2E64	; 0x802e64 <receivedByteQueue+0x1>
    33b4:	0e 94 b7 08 	call	0x116e	; 0x116e <uxQueueMessagesWaiting>
    33b8:	81 11       	cpse	r24, r1
    33ba:	02 c0       	rjmp	.+4      	; 0x33c0 <xProtocolDecoder+0x1ee>
    33bc:	03 e0       	ldi	r16, 0x03	; 3
    33be:	28 cf       	rjmp	.-432    	; 0x3210 <xProtocolDecoder+0x3e>
    33c0:	80 91 63 2e 	lds	r24, 0x2E63	; 0x802e63 <receivedByteQueue>
    33c4:	90 91 64 2e 	lds	r25, 0x2E64	; 0x802e64 <receivedByteQueue+0x1>
    33c8:	21 e0       	ldi	r18, 0x01	; 1
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	40 e0       	ldi	r20, 0x00	; 0
    33ce:	50 e0       	ldi	r21, 0x00	; 0
    33d0:	be 01       	movw	r22, r28
    33d2:	6d 5f       	subi	r22, 0xFD	; 253
    33d4:	7f 4f       	sbci	r23, 0xFF	; 255
    33d6:	0e 94 fa 07 	call	0xff4	; 0xff4 <xQueueReceive>
    33da:	3e cf       	rjmp	.-388    	; 0x3258 <xProtocolDecoder+0x86>

000033dc <initADCTimer>:
    33dc:	61 e0       	ldi	r22, 0x01	; 1
    33de:	80 e4       	ldi	r24, 0x40	; 64
    33e0:	99 e0       	ldi	r25, 0x09	; 9
    33e2:	0e 94 a2 01 	call	0x344	; 0x344 <TC1_ConfigClockSource>
    33e6:	63 e0       	ldi	r22, 0x03	; 3
    33e8:	80 e4       	ldi	r24, 0x40	; 64
    33ea:	99 e0       	ldi	r25, 0x09	; 9
    33ec:	0e 94 ae 01 	call	0x35c	; 0x35c <TC1_ConfigWGM>
    33f0:	88 ee       	ldi	r24, 0xE8	; 232
    33f2:	93 e0       	ldi	r25, 0x03	; 3
    33f4:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <__TEXT_REGION_LENGTH__+0x700966>
    33f8:	90 93 67 09 	sts	0x0967, r25	; 0x800967 <__TEXT_REGION_LENGTH__+0x700967>
    33fc:	88 ed       	ldi	r24, 0xD8	; 216
    33fe:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <__TEXT_REGION_LENGTH__+0x700187>
    3402:	08 95       	ret

00003404 <initDecDMA>:
    3404:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    3408:	80 e4       	ldi	r24, 0x40	; 64
    340a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    340e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    3412:	86 fd       	sbrc	r24, 6
    3414:	fc cf       	rjmp	.-8      	; 0x340e <initDecDMA+0xa>
    3416:	88 e8       	ldi	r24, 0x88	; 136
    3418:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    341c:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3420:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    3424:	81 60       	ori	r24, 0x01	; 1
    3426:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    342a:	75 e2       	ldi	r23, 0x25	; 37
    342c:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    3430:	6d e9       	ldi	r22, 0x9D	; 157
    3432:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    3436:	30 e1       	ldi	r19, 0x10	; 16
    3438:	30 93 33 01 	sts	0x0133, r19	; 0x800133 <__TEXT_REGION_LENGTH__+0x700133>
    343c:	40 e4       	ldi	r20, 0x40	; 64
    343e:	50 e0       	ldi	r21, 0x00	; 0
    3440:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    3444:	50 93 35 01 	sts	0x0135, r21	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    3448:	24 e2       	ldi	r18, 0x24	; 36
    344a:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <__TEXT_REGION_LENGTH__+0x700138>
    344e:	92 e0       	ldi	r25, 0x02	; 2
    3450:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__TEXT_REGION_LENGTH__+0x700139>
    3454:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__TEXT_REGION_LENGTH__+0x70013a>
    3458:	e3 e2       	ldi	r30, 0x23	; 35
    345a:	fe e2       	ldi	r31, 0x2E	; 46
    345c:	e0 93 3c 01 	sts	0x013C, r30	; 0x80013c <__TEXT_REGION_LENGTH__+0x70013c>
    3460:	f0 93 3d 01 	sts	0x013D, r31	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    3464:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    3468:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    346c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    3470:	81 60       	ori	r24, 0x01	; 1
    3472:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    3476:	70 93 40 01 	sts	0x0140, r23	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    347a:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    347e:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    3482:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    3486:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    348a:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    348e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    3492:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    3496:	87 e6       	ldi	r24, 0x67	; 103
    3498:	9e e2       	ldi	r25, 0x2E	; 46
    349a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    349e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    34a2:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    34a6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    34aa:	80 68       	ori	r24, 0x80	; 128
    34ac:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    34b0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    34b4:	80 68       	ori	r24, 0x80	; 128
    34b6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    34ba:	08 95       	ret

000034bc <bGetReceivedData>:
    34bc:	2f 92       	push	r2
    34be:	3f 92       	push	r3
    34c0:	4f 92       	push	r4
    34c2:	5f 92       	push	r5
    34c4:	6f 92       	push	r6
    34c6:	7f 92       	push	r7
    34c8:	8f 92       	push	r8
    34ca:	9f 92       	push	r9
    34cc:	af 92       	push	r10
    34ce:	bf 92       	push	r11
    34d0:	cf 92       	push	r12
    34d2:	df 92       	push	r13
    34d4:	ef 92       	push	r14
    34d6:	ff 92       	push	r15
    34d8:	0f 93       	push	r16
    34da:	1f 93       	push	r17
    34dc:	cf 93       	push	r28
    34de:	df 93       	push	r29
    34e0:	cd b7       	in	r28, 0x3d	; 61
    34e2:	de b7       	in	r29, 0x3e	; 62
    34e4:	a0 97       	sbiw	r28, 0x20	; 32
    34e6:	cd bf       	out	0x3d, r28	; 61
    34e8:	de bf       	out	0x3e, r29	; 62
    34ea:	7c 01       	movw	r14, r24
    34ec:	6b 87       	std	Y+11, r22	; 0x0b
    34ee:	7c 87       	std	Y+12, r23	; 0x0c
    34f0:	4d 87       	std	Y+13, r20	; 0x0d
    34f2:	5e 87       	std	Y+14, r21	; 0x0e
    34f4:	39 01       	movw	r6, r18
    34f6:	0b 8b       	std	Y+19, r16	; 0x13
    34f8:	1c 8b       	std	Y+20, r17	; 0x14
    34fa:	fa 01       	movw	r30, r20
    34fc:	80 81       	ld	r24, Z
    34fe:	86 30       	cpi	r24, 0x06	; 6
    3500:	08 f4       	brcc	.+2      	; 0x3504 <bGetReceivedData+0x48>
    3502:	ca c0       	rjmp	.+404    	; 0x3698 <bGetReceivedData+0x1dc>
    3504:	0b ef       	ldi	r16, 0xFB	; 251
    3506:	30 2e       	mov	r3, r16
    3508:	38 0e       	add	r3, r24
    350a:	40 e0       	ldi	r20, 0x00	; 0
    350c:	50 e0       	ldi	r21, 0x00	; 0
    350e:	a1 2c       	mov	r10, r1
    3510:	b1 2c       	mov	r11, r1
    3512:	83 2c       	mov	r8, r3
    3514:	91 2c       	mov	r9, r1
    3516:	d3 2c       	mov	r13, r3
    3518:	f4 01       	movw	r30, r8
    351a:	31 96       	adiw	r30, 0x01	; 1
    351c:	ee 0f       	add	r30, r30
    351e:	ff 1f       	adc	r31, r31
    3520:	d3 01       	movw	r26, r6
    3522:	0d 90       	ld	r0, X+
    3524:	bc 91       	ld	r27, X
    3526:	a0 2d       	mov	r26, r0
    3528:	a9 87       	std	Y+9, r26	; 0x09
    352a:	ba 87       	std	Y+10, r27	; 0x0a
    352c:	ee 0d       	add	r30, r14
    352e:	ff 1d       	adc	r31, r15
    3530:	80 81       	ld	r24, Z
    3532:	91 81       	ldd	r25, Z+1	; 0x01
    3534:	a8 17       	cp	r26, r24
    3536:	b9 07       	cpc	r27, r25
    3538:	08 f0       	brcs	.+2      	; 0x353c <bGetReceivedData+0x80>
    353a:	83 c0       	rjmp	.+262    	; 0x3642 <bGetReceivedData+0x186>
    353c:	32 97       	sbiw	r30, 0x02	; 2
    353e:	80 81       	ld	r24, Z
    3540:	91 81       	ldd	r25, Z+1	; 0x01
    3542:	a8 17       	cp	r26, r24
    3544:	b9 07       	cpc	r27, r25
    3546:	08 f4       	brcc	.+2      	; 0x354a <bGetReceivedData+0x8e>
    3548:	7c c0       	rjmp	.+248    	; 0x3642 <bGetReceivedData+0x186>
    354a:	b4 01       	movw	r22, r8
    354c:	a0 e0       	ldi	r26, 0x00	; 0
    354e:	00 e0       	ldi	r16, 0x00	; 0
    3550:	10 e0       	ldi	r17, 0x00	; 0
    3552:	41 2c       	mov	r4, r1
    3554:	51 2c       	mov	r5, r1
    3556:	c1 2c       	mov	r12, r1
    3558:	31 2c       	mov	r3, r1
    355a:	23 c0       	rjmp	.+70     	; 0x35a2 <bGetReceivedData+0xe6>
    355c:	a8 0e       	add	r10, r24
    355e:	b9 1e       	adc	r11, r25
    3560:	f4 01       	movw	r30, r8
    3562:	e3 0d       	add	r30, r3
    3564:	f1 1d       	adc	r31, r1
    3566:	ee 0f       	add	r30, r30
    3568:	ff 1f       	adc	r31, r31
    356a:	ee 0d       	add	r30, r14
    356c:	ff 1d       	adc	r31, r15
    356e:	20 81       	ld	r18, Z
    3570:	31 81       	ldd	r19, Z+1	; 0x01
    3572:	28 17       	cp	r18, r24
    3574:	39 07       	cpc	r19, r25
    3576:	10 f4       	brcc	.+4      	; 0x357c <bGetReceivedData+0xc0>
    3578:	2c 01       	movw	r4, r24
    357a:	3a 2e       	mov	r3, r26
    357c:	f4 01       	movw	r30, r8
    357e:	ec 0d       	add	r30, r12
    3580:	f1 1d       	adc	r31, r1
    3582:	ee 0f       	add	r30, r30
    3584:	ff 1f       	adc	r31, r31
    3586:	ee 0d       	add	r30, r14
    3588:	ff 1d       	adc	r31, r15
    358a:	20 81       	ld	r18, Z
    358c:	31 81       	ldd	r19, Z+1	; 0x01
    358e:	82 17       	cp	r24, r18
    3590:	93 07       	cpc	r25, r19
    3592:	10 f4       	brcc	.+4      	; 0x3598 <bGetReceivedData+0xdc>
    3594:	8c 01       	movw	r16, r24
    3596:	ca 2e       	mov	r12, r26
    3598:	af 5f       	subi	r26, 0xFF	; 255
    359a:	6f 5f       	subi	r22, 0xFF	; 255
    359c:	7f 4f       	sbci	r23, 0xFF	; 255
    359e:	a0 32       	cpi	r26, 0x20	; 32
    35a0:	61 f0       	breq	.+24     	; 0x35ba <bGetReceivedData+0xfe>
    35a2:	fb 01       	movw	r30, r22
    35a4:	ee 0f       	add	r30, r30
    35a6:	ff 1f       	adc	r31, r31
    35a8:	ee 0d       	add	r30, r14
    35aa:	ff 1d       	adc	r31, r15
    35ac:	80 81       	ld	r24, Z
    35ae:	91 81       	ldd	r25, Z+1	; 0x01
    35b0:	a0 31       	cpi	r26, 0x10	; 16
    35b2:	a0 f2       	brcs	.-88     	; 0x355c <bGetReceivedData+0xa0>
    35b4:	48 0f       	add	r20, r24
    35b6:	59 1f       	adc	r21, r25
    35b8:	d3 cf       	rjmp	.-90     	; 0x3560 <bGetReceivedData+0xa4>
    35ba:	b2 94       	swap	r11
    35bc:	a2 94       	swap	r10
    35be:	7f e0       	ldi	r23, 0x0F	; 15
    35c0:	a7 22       	and	r10, r23
    35c2:	ab 24       	eor	r10, r11
    35c4:	b7 22       	and	r11, r23
    35c6:	ab 24       	eor	r10, r11
    35c8:	52 95       	swap	r21
    35ca:	42 95       	swap	r20
    35cc:	4f 70       	andi	r20, 0x0F	; 15
    35ce:	45 27       	eor	r20, r21
    35d0:	5f 70       	andi	r21, 0x0F	; 15
    35d2:	45 27       	eor	r20, r21
    35d4:	b5 01       	movw	r22, r10
    35d6:	64 0f       	add	r22, r20
    35d8:	75 1f       	adc	r23, r21
    35da:	76 95       	lsr	r23
    35dc:	67 95       	ror	r22
    35de:	89 85       	ldd	r24, Y+9	; 0x09
    35e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e2:	88 0f       	add	r24, r24
    35e4:	99 1f       	adc	r25, r25
    35e6:	88 0f       	add	r24, r24
    35e8:	99 1f       	adc	r25, r25
    35ea:	a9 85       	ldd	r26, Y+9	; 0x09
    35ec:	ba 85       	ldd	r27, Y+10	; 0x0a
    35ee:	a8 0f       	add	r26, r24
    35f0:	b9 1f       	adc	r27, r25
    35f2:	9b 01       	movw	r18, r22
    35f4:	2a 0f       	add	r18, r26
    35f6:	3b 1f       	adc	r19, r27
    35f8:	ab ea       	ldi	r26, 0xAB	; 171
    35fa:	ba ea       	ldi	r27, 0xAA	; 170
    35fc:	0e 94 b2 20 	call	0x4164	; 0x4164 <__umulhisi3>
    3600:	96 95       	lsr	r25
    3602:	87 95       	ror	r24
    3604:	96 95       	lsr	r25
    3606:	87 95       	ror	r24
    3608:	f3 01       	movw	r30, r6
    360a:	80 83       	st	Z, r24
    360c:	91 83       	std	Z+1, r25	; 0x01
    360e:	3c 14       	cp	r3, r12
    3610:	c0 f4       	brcc	.+48     	; 0x3642 <bGetReceivedData+0x186>
    3612:	23 2d       	mov	r18, r3
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	2c 0d       	add	r18, r12
    3618:	31 1d       	adc	r19, r1
    361a:	35 95       	asr	r19
    361c:	27 95       	ror	r18
    361e:	2c 50       	subi	r18, 0x0C	; 12
    3620:	27 30       	cpi	r18, 0x07	; 7
    3622:	78 f4       	brcc	.+30     	; 0x3642 <bGetReceivedData+0x186>
    3624:	04 0d       	add	r16, r4
    3626:	15 1d       	adc	r17, r5
    3628:	16 95       	lsr	r17
    362a:	07 95       	ror	r16
    362c:	9c 01       	movw	r18, r24
    362e:	20 52       	subi	r18, 0x20	; 32
    3630:	33 40       	sbci	r19, 0x03	; 3
    3632:	02 17       	cp	r16, r18
    3634:	13 07       	cpc	r17, r19
    3636:	28 f0       	brcs	.+10     	; 0x3642 <bGetReceivedData+0x186>
    3638:	20 5c       	subi	r18, 0xC0	; 192
    363a:	39 4f       	sbci	r19, 0xF9	; 249
    363c:	20 17       	cp	r18, r16
    363e:	31 07       	cpc	r19, r17
    3640:	98 f5       	brcc	.+102    	; 0x36a8 <bGetReceivedData+0x1ec>
    3642:	d3 94       	inc	r13
    3644:	eb 85       	ldd	r30, Y+11	; 0x0b
    3646:	fc 85       	ldd	r31, Y+12	; 0x0c
    3648:	80 81       	ld	r24, Z
    364a:	8d 2c       	mov	r8, r13
    364c:	91 2c       	mov	r9, r1
    364e:	28 2f       	mov	r18, r24
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	28 15       	cp	r18, r8
    3654:	39 05       	cpc	r19, r9
    3656:	0c f0       	brlt	.+2      	; 0x365a <bGetReceivedData+0x19e>
    3658:	5f cf       	rjmp	.-322    	; 0x3518 <bGetReceivedData+0x5c>
    365a:	81 34       	cpi	r24, 0x41	; 65
    365c:	f8 f0       	brcs	.+62     	; 0x369c <bGetReceivedData+0x1e0>
    365e:	eb 85       	ldd	r30, Y+11	; 0x0b
    3660:	fc 85       	ldd	r31, Y+12	; 0x0c
    3662:	10 82       	st	Z, r1
    3664:	ed 85       	ldd	r30, Y+13	; 0x0d
    3666:	fe 85       	ldd	r31, Y+14	; 0x0e
    3668:	10 82       	st	Z, r1
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	a0 96       	adiw	r28, 0x20	; 32
    366e:	cd bf       	out	0x3d, r28	; 61
    3670:	de bf       	out	0x3e, r29	; 62
    3672:	df 91       	pop	r29
    3674:	cf 91       	pop	r28
    3676:	1f 91       	pop	r17
    3678:	0f 91       	pop	r16
    367a:	ff 90       	pop	r15
    367c:	ef 90       	pop	r14
    367e:	df 90       	pop	r13
    3680:	cf 90       	pop	r12
    3682:	bf 90       	pop	r11
    3684:	af 90       	pop	r10
    3686:	9f 90       	pop	r9
    3688:	8f 90       	pop	r8
    368a:	7f 90       	pop	r7
    368c:	6f 90       	pop	r6
    368e:	5f 90       	pop	r5
    3690:	4f 90       	pop	r4
    3692:	3f 90       	pop	r3
    3694:	2f 90       	pop	r2
    3696:	08 95       	ret
    3698:	31 2c       	mov	r3, r1
    369a:	37 cf       	rjmp	.-402    	; 0x350a <bGetReceivedData+0x4e>
    369c:	80 5e       	subi	r24, 0xE0	; 224
    369e:	eb 85       	ldd	r30, Y+11	; 0x0b
    36a0:	fc 85       	ldd	r31, Y+12	; 0x0c
    36a2:	80 83       	st	Z, r24
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	e2 cf       	rjmp	.-60     	; 0x366c <bGetReceivedData+0x1b0>
    36a8:	3d 2c       	mov	r3, r13
    36aa:	8d 8b       	std	Y+21, r24	; 0x15
    36ac:	9e 8b       	std	Y+22, r25	; 0x16
    36ae:	6b 8e       	std	Y+27, r6	; 0x1b
    36b0:	7c 8e       	std	Y+28, r7	; 0x1c
    36b2:	60 91 00 21 	lds	r22, 0x2100	; 0x802100 <usAbsoulteMaxValue>
    36b6:	70 91 01 21 	lds	r23, 0x2101	; 0x802101 <usAbsoulteMaxValue+0x1>
    36ba:	80 e0       	ldi	r24, 0x00	; 0
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__floatunsisf>
    36c2:	5b 01       	movw	r10, r22
    36c4:	6c 01       	movw	r12, r24
    36c6:	60 91 02 21 	lds	r22, 0x2102	; 0x802102 <usLongTimeMaxValue>
    36ca:	70 91 03 21 	lds	r23, 0x2103	; 0x802103 <usLongTimeMaxValue+0x1>
    36ce:	80 e0       	ldi	r24, 0x00	; 0
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__floatunsisf>
    36d6:	9b 01       	movw	r18, r22
    36d8:	ac 01       	movw	r20, r24
    36da:	c6 01       	movw	r24, r12
    36dc:	b5 01       	movw	r22, r10
    36de:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <__divsf3>
    36e2:	6f 8b       	std	Y+23, r22	; 0x17
    36e4:	78 8f       	std	Y+24, r23	; 0x18
    36e6:	89 8f       	std	Y+25, r24	; 0x19
    36e8:	9a 8f       	std	Y+26, r25	; 0x1a
    36ea:	19 82       	std	Y+1, r1	; 0x01
    36ec:	1a 82       	std	Y+2, r1	; 0x02
    36ee:	1b 82       	std	Y+3, r1	; 0x03
    36f0:	1c 82       	std	Y+4, r1	; 0x04
    36f2:	1d 82       	std	Y+5, r1	; 0x05
    36f4:	1e 82       	std	Y+6, r1	; 0x06
    36f6:	1f 82       	std	Y+7, r1	; 0x07
    36f8:	18 86       	std	Y+8, r1	; 0x08
    36fa:	54 01       	movw	r10, r8
    36fc:	aa 0c       	add	r10, r10
    36fe:	bb 1c       	adc	r11, r11
    3700:	ae 0c       	add	r10, r14
    3702:	bf 1c       	adc	r11, r15
    3704:	80 ec       	ldi	r24, 0xC0	; 192
    3706:	c8 2e       	mov	r12, r24
    3708:	80 e2       	ldi	r24, 0x20	; 32
    370a:	d8 2e       	mov	r13, r24
    370c:	20 e8       	ldi	r18, 0x80	; 128
    370e:	30 e2       	ldi	r19, 0x20	; 32
    3710:	29 8b       	std	Y+17, r18	; 0x11
    3712:	3a 8b       	std	Y+18, r19	; 0x12
    3714:	40 e4       	ldi	r20, 0x40	; 64
    3716:	50 e2       	ldi	r21, 0x20	; 32
    3718:	4f 87       	std	Y+15, r20	; 0x0f
    371a:	58 8b       	std	Y+16, r21	; 0x10
    371c:	80 e0       	ldi	r24, 0x00	; 0
    371e:	90 e2       	ldi	r25, 0x20	; 32
    3720:	89 87       	std	Y+9, r24	; 0x09
    3722:	9a 87       	std	Y+10, r25	; 0x0a
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	69 2e       	mov	r6, r25
    3728:	91 e2       	ldi	r25, 0x21	; 33
    372a:	79 2e       	mov	r7, r25
    372c:	4d 8e       	std	Y+29, r4	; 0x1d
    372e:	5e 8e       	std	Y+30, r5	; 0x1e
    3730:	ef 8e       	std	Y+31, r14	; 0x1f
    3732:	f8 a2       	std	Y+32, r15	; 0x20
    3734:	f3 2c       	mov	r15, r3
    3736:	2f 88       	ldd	r2, Y+23	; 0x17
    3738:	38 8c       	ldd	r3, Y+24	; 0x18
    373a:	49 8c       	ldd	r4, Y+25	; 0x19
    373c:	5a 8c       	ldd	r5, Y+26	; 0x1a
    373e:	3b c0       	rjmp	.+118    	; 0x37b6 <bGetReceivedData+0x2fa>
    3740:	02 0f       	add	r16, r18
    3742:	13 1f       	adc	r17, r19
    3744:	09 83       	std	Y+1, r16	; 0x01
    3746:	1a 83       	std	Y+2, r17	; 0x02
    3748:	2b 81       	ldd	r18, Y+3	; 0x03
    374a:	3c 81       	ldd	r19, Y+4	; 0x04
    374c:	a9 89       	ldd	r26, Y+17	; 0x11
    374e:	ba 89       	ldd	r27, Y+18	; 0x12
    3750:	4d 91       	ld	r20, X+
    3752:	5d 91       	ld	r21, X+
    3754:	a9 8b       	std	Y+17, r26	; 0x11
    3756:	ba 8b       	std	Y+18, r27	; 0x12
    3758:	fb 01       	movw	r30, r22
    375a:	e4 1b       	sub	r30, r20
    375c:	f5 0b       	sbc	r31, r21
    375e:	af 01       	movw	r20, r30
    3760:	f7 fd       	sbrc	r31, 7
    3762:	55 c0       	rjmp	.+170    	; 0x380e <bGetReceivedData+0x352>
    3764:	24 0f       	add	r18, r20
    3766:	35 1f       	adc	r19, r21
    3768:	2b 83       	std	Y+3, r18	; 0x03
    376a:	3c 83       	std	Y+4, r19	; 0x04
    376c:	2d 81       	ldd	r18, Y+5	; 0x05
    376e:	3e 81       	ldd	r19, Y+6	; 0x06
    3770:	af 85       	ldd	r26, Y+15	; 0x0f
    3772:	b8 89       	ldd	r27, Y+16	; 0x10
    3774:	4d 91       	ld	r20, X+
    3776:	5d 91       	ld	r21, X+
    3778:	af 87       	std	Y+15, r26	; 0x0f
    377a:	b8 8b       	std	Y+16, r27	; 0x10
    377c:	fb 01       	movw	r30, r22
    377e:	e4 1b       	sub	r30, r20
    3780:	f5 0b       	sbc	r31, r21
    3782:	af 01       	movw	r20, r30
    3784:	f7 fd       	sbrc	r31, 7
    3786:	3f c0       	rjmp	.+126    	; 0x3806 <bGetReceivedData+0x34a>
    3788:	24 0f       	add	r18, r20
    378a:	35 1f       	adc	r19, r21
    378c:	2d 83       	std	Y+5, r18	; 0x05
    378e:	3e 83       	std	Y+6, r19	; 0x06
    3790:	2f 81       	ldd	r18, Y+7	; 0x07
    3792:	38 85       	ldd	r19, Y+8	; 0x08
    3794:	a9 85       	ldd	r26, Y+9	; 0x09
    3796:	ba 85       	ldd	r27, Y+10	; 0x0a
    3798:	4d 91       	ld	r20, X+
    379a:	5d 91       	ld	r21, X+
    379c:	a9 87       	std	Y+9, r26	; 0x09
    379e:	ba 87       	std	Y+10, r27	; 0x0a
    37a0:	64 1b       	sub	r22, r20
    37a2:	75 0b       	sbc	r23, r21
    37a4:	77 fd       	sbrc	r23, 7
    37a6:	2b c0       	rjmp	.+86     	; 0x37fe <bGetReceivedData+0x342>
    37a8:	62 0f       	add	r22, r18
    37aa:	73 1f       	adc	r23, r19
    37ac:	6f 83       	std	Y+7, r22	; 0x07
    37ae:	78 87       	std	Y+8, r23	; 0x08
    37b0:	6c 14       	cp	r6, r12
    37b2:	7d 04       	cpc	r7, r13
    37b4:	81 f1       	breq	.+96     	; 0x3816 <bGetReceivedData+0x35a>
    37b6:	d5 01       	movw	r26, r10
    37b8:	6d 91       	ld	r22, X+
    37ba:	7d 91       	ld	r23, X+
    37bc:	5d 01       	movw	r10, r26
    37be:	09 81       	ldd	r16, Y+1	; 0x01
    37c0:	1a 81       	ldd	r17, Y+2	; 0x02
    37c2:	ed 89       	ldd	r30, Y+21	; 0x15
    37c4:	fe 89       	ldd	r31, Y+22	; 0x16
    37c6:	6e 1b       	sub	r22, r30
    37c8:	7f 0b       	sbc	r23, r31
    37ca:	07 2e       	mov	r0, r23
    37cc:	00 0c       	add	r0, r0
    37ce:	88 0b       	sbc	r24, r24
    37d0:	99 0b       	sbc	r25, r25
    37d2:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__floatsisf>
    37d6:	a2 01       	movw	r20, r4
    37d8:	91 01       	movw	r18, r2
    37da:	0e 94 3d 20 	call	0x407a	; 0x407a <__mulsf3>
    37de:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__fixsfsi>
    37e2:	d6 01       	movw	r26, r12
    37e4:	2d 91       	ld	r18, X+
    37e6:	3d 91       	ld	r19, X+
    37e8:	6d 01       	movw	r12, r26
    37ea:	fb 01       	movw	r30, r22
    37ec:	e2 1b       	sub	r30, r18
    37ee:	f3 0b       	sbc	r31, r19
    37f0:	9f 01       	movw	r18, r30
    37f2:	f7 ff       	sbrs	r31, 7
    37f4:	a5 cf       	rjmp	.-182    	; 0x3740 <bGetReceivedData+0x284>
    37f6:	31 95       	neg	r19
    37f8:	21 95       	neg	r18
    37fa:	31 09       	sbc	r19, r1
    37fc:	a1 cf       	rjmp	.-190    	; 0x3740 <bGetReceivedData+0x284>
    37fe:	71 95       	neg	r23
    3800:	61 95       	neg	r22
    3802:	71 09       	sbc	r23, r1
    3804:	d1 cf       	rjmp	.-94     	; 0x37a8 <bGetReceivedData+0x2ec>
    3806:	51 95       	neg	r21
    3808:	41 95       	neg	r20
    380a:	51 09       	sbc	r21, r1
    380c:	bd cf       	rjmp	.-134    	; 0x3788 <bGetReceivedData+0x2cc>
    380e:	51 95       	neg	r21
    3810:	41 95       	neg	r20
    3812:	51 09       	sbc	r21, r1
    3814:	a7 cf       	rjmp	.-178    	; 0x3764 <bGetReceivedData+0x2a8>
    3816:	3f 2c       	mov	r3, r15
    3818:	4d 8c       	ldd	r4, Y+29	; 0x1d
    381a:	5e 8c       	ldd	r5, Y+30	; 0x1e
    381c:	ef 8c       	ldd	r14, Y+31	; 0x1f
    381e:	f8 a0       	ldd	r15, Y+32	; 0x20
    3820:	41 e0       	ldi	r20, 0x01	; 1
    3822:	50 e0       	ldi	r21, 0x00	; 0
    3824:	60 e0       	ldi	r22, 0x00	; 0
    3826:	fa 01       	movw	r30, r20
    3828:	ee 0f       	add	r30, r30
    382a:	ff 1f       	adc	r31, r31
    382c:	21 e0       	ldi	r18, 0x01	; 1
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	2c 0f       	add	r18, r28
    3832:	3d 1f       	adc	r19, r29
    3834:	e2 0f       	add	r30, r18
    3836:	f3 1f       	adc	r31, r19
    3838:	20 81       	ld	r18, Z
    383a:	31 81       	ldd	r19, Z+1	; 0x01
    383c:	e6 2f       	mov	r30, r22
    383e:	f0 e0       	ldi	r31, 0x00	; 0
    3840:	ee 0f       	add	r30, r30
    3842:	ff 1f       	adc	r31, r31
    3844:	81 e0       	ldi	r24, 0x01	; 1
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	8c 0f       	add	r24, r28
    384a:	9d 1f       	adc	r25, r29
    384c:	e8 0f       	add	r30, r24
    384e:	f9 1f       	adc	r31, r25
    3850:	80 81       	ld	r24, Z
    3852:	91 81       	ldd	r25, Z+1	; 0x01
    3854:	37 fd       	sbrc	r19, 7
    3856:	6f c0       	rjmp	.+222    	; 0x3936 <bGetReceivedData+0x47a>
    3858:	97 fd       	sbrc	r25, 7
    385a:	69 c0       	rjmp	.+210    	; 0x392e <bGetReceivedData+0x472>
    385c:	28 17       	cp	r18, r24
    385e:	39 07       	cpc	r19, r25
    3860:	0c f4       	brge	.+2      	; 0x3864 <bGetReceivedData+0x3a8>
    3862:	64 2f       	mov	r22, r20
    3864:	4f 5f       	subi	r20, 0xFF	; 255
    3866:	5f 4f       	sbci	r21, 0xFF	; 255
    3868:	44 30       	cpi	r20, 0x04	; 4
    386a:	51 05       	cpc	r21, r1
    386c:	e1 f6       	brne	.-72     	; 0x3826 <bGetReceivedData+0x36a>
    386e:	ab 89       	ldd	r26, Y+19	; 0x13
    3870:	bc 89       	ldd	r27, Y+20	; 0x14
    3872:	6c 93       	st	X, r22
    3874:	63 30       	cpi	r22, 0x03	; 3
    3876:	f9 f4       	brne	.+62     	; 0x38b6 <bGetReceivedData+0x3fa>
    3878:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <usLongTimeMaxValue>
    387c:	90 91 03 21 	lds	r25, 0x2103	; 0x802103 <usLongTimeMaxValue+0x1>
    3880:	9c 01       	movw	r18, r24
    3882:	22 0f       	add	r18, r18
    3884:	33 1f       	adc	r19, r19
    3886:	22 0f       	add	r18, r18
    3888:	33 1f       	adc	r19, r19
    388a:	28 0f       	add	r18, r24
    388c:	39 1f       	adc	r19, r25
    388e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3890:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3892:	80 81       	ld	r24, Z
    3894:	91 81       	ldd	r25, Z+1	; 0x01
    3896:	28 1b       	sub	r18, r24
    3898:	39 0b       	sbc	r19, r25
    389a:	24 0d       	add	r18, r4
    389c:	35 1d       	adc	r19, r5
    389e:	ab ea       	ldi	r26, 0xAB	; 171
    38a0:	ba ea       	ldi	r27, 0xAA	; 170
    38a2:	0e 94 b2 20 	call	0x4164	; 0x4164 <__umulhisi3>
    38a6:	96 95       	lsr	r25
    38a8:	87 95       	ror	r24
    38aa:	96 95       	lsr	r25
    38ac:	87 95       	ror	r24
    38ae:	80 93 02 21 	sts	0x2102, r24	; 0x802102 <usLongTimeMaxValue>
    38b2:	90 93 03 21 	sts	0x2103, r25	; 0x802103 <usLongTimeMaxValue+0x1>
    38b6:	ab 85       	ldd	r26, Y+11	; 0x0b
    38b8:	bc 85       	ldd	r27, Y+12	; 0x0c
    38ba:	8c 91       	ld	r24, X
    38bc:	81 34       	cpi	r24, 0x41	; 65
    38be:	60 f1       	brcs	.+88     	; 0x3918 <bGetReceivedData+0x45c>
    38c0:	58 2f       	mov	r21, r24
    38c2:	53 19       	sub	r21, r3
    38c4:	25 2f       	mov	r18, r21
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	2d 5f       	subi	r18, 0xFD	; 253
    38ca:	3f 4f       	sbci	r19, 0xFF	; 255
    38cc:	fc e1       	ldi	r31, 0x1C	; 28
    38ce:	8f 0e       	add	r8, r31
    38d0:	91 1c       	adc	r9, r1
    38d2:	40 e0       	ldi	r20, 0x00	; 0
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	fc 01       	movw	r30, r24
    38da:	e8 0d       	add	r30, r8
    38dc:	f9 1d       	adc	r31, r9
    38de:	ee 0f       	add	r30, r30
    38e0:	ff 1f       	adc	r31, r31
    38e2:	ee 0d       	add	r30, r14
    38e4:	ff 1d       	adc	r31, r15
    38e6:	60 81       	ld	r22, Z
    38e8:	71 81       	ldd	r23, Z+1	; 0x01
    38ea:	88 0f       	add	r24, r24
    38ec:	99 1f       	adc	r25, r25
    38ee:	f7 01       	movw	r30, r14
    38f0:	e8 0f       	add	r30, r24
    38f2:	f9 1f       	adc	r31, r25
    38f4:	60 83       	st	Z, r22
    38f6:	71 83       	std	Z+1, r23	; 0x01
    38f8:	4f 5f       	subi	r20, 0xFF	; 255
    38fa:	84 2f       	mov	r24, r20
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	28 17       	cp	r18, r24
    3900:	39 07       	cpc	r19, r25
    3902:	54 f7       	brge	.-44     	; 0x38d8 <bGetReceivedData+0x41c>
    3904:	84 e0       	ldi	r24, 0x04	; 4
    3906:	85 0f       	add	r24, r21
    3908:	ab 85       	ldd	r26, Y+11	; 0x0b
    390a:	bc 85       	ldd	r27, Y+12	; 0x0c
    390c:	8c 93       	st	X, r24
    390e:	ed 85       	ldd	r30, Y+13	; 0x0d
    3910:	fe 85       	ldd	r31, Y+14	; 0x0e
    3912:	10 82       	st	Z, r1
    3914:	81 e0       	ldi	r24, 0x01	; 1
    3916:	aa ce       	rjmp	.-684    	; 0x366c <bGetReceivedData+0x1b0>
    3918:	80 5e       	subi	r24, 0xE0	; 224
    391a:	ab 85       	ldd	r26, Y+11	; 0x0b
    391c:	bc 85       	ldd	r27, Y+12	; 0x0c
    391e:	8c 93       	st	X, r24
    3920:	80 e2       	ldi	r24, 0x20	; 32
    3922:	83 0d       	add	r24, r3
    3924:	ed 85       	ldd	r30, Y+13	; 0x0d
    3926:	fe 85       	ldd	r31, Y+14	; 0x0e
    3928:	80 83       	st	Z, r24
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	9f ce       	rjmp	.-706    	; 0x366c <bGetReceivedData+0x1b0>
    392e:	91 95       	neg	r25
    3930:	81 95       	neg	r24
    3932:	91 09       	sbc	r25, r1
    3934:	93 cf       	rjmp	.-218    	; 0x385c <bGetReceivedData+0x3a0>
    3936:	31 95       	neg	r19
    3938:	21 95       	neg	r18
    393a:	31 09       	sbc	r19, r1
    393c:	8d cf       	rjmp	.-230    	; 0x3858 <bGetReceivedData+0x39c>

0000393e <ucQAMGetData>:
    393e:	ef 92       	push	r14
    3940:	ff 92       	push	r15
    3942:	0f 93       	push	r16
    3944:	1f 93       	push	r17
    3946:	cf 93       	push	r28
    3948:	df 93       	push	r29
    394a:	7c 01       	movw	r14, r24
    394c:	eb 01       	movw	r28, r22
    394e:	8a 01       	movw	r16, r20
    3950:	41 e0       	ldi	r20, 0x01	; 1
    3952:	50 e0       	ldi	r21, 0x00	; 0
    3954:	60 e0       	ldi	r22, 0x00	; 0
    3956:	70 e0       	ldi	r23, 0x00	; 0
    3958:	80 91 21 2e 	lds	r24, 0x2E21	; 0x802e21 <receivedProtocolEventGroup>
    395c:	90 91 22 2e 	lds	r25, 0x2E22	; 0x802e22 <receivedProtocolEventGroup+0x1>
    3960:	0e 94 82 02 	call	0x504	; 0x504 <xEventGroupClearBits>
    3964:	60 ff       	sbrs	r22, 0
    3966:	20 c0       	rjmp	.+64     	; 0x39a8 <ucQAMGetData+0x6a>
    3968:	80 91 fa 2d 	lds	r24, 0x2DFA	; 0x802dfa <ucQAMDataBytes>
    396c:	f7 01       	movw	r30, r14
    396e:	80 83       	st	Z, r24
    3970:	80 91 fb 2d 	lds	r24, 0x2DFB	; 0x802dfb <ucQAMDataBytes+0x1>
    3974:	88 83       	st	Y, r24
    3976:	88 23       	and	r24, r24
    3978:	79 f0       	breq	.+30     	; 0x3998 <ucQAMGetData+0x5a>
    397a:	20 e0       	ldi	r18, 0x00	; 0
    397c:	82 2f       	mov	r24, r18
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	fc 01       	movw	r30, r24
    3982:	e6 50       	subi	r30, 0x06	; 6
    3984:	f2 4d       	sbci	r31, 0xD2	; 210
    3986:	32 81       	ldd	r19, Z+2	; 0x02
    3988:	f8 01       	movw	r30, r16
    398a:	e8 0f       	add	r30, r24
    398c:	f9 1f       	adc	r31, r25
    398e:	30 83       	st	Z, r19
    3990:	2f 5f       	subi	r18, 0xFF	; 255
    3992:	88 81       	ld	r24, Y
    3994:	28 17       	cp	r18, r24
    3996:	90 f3       	brcs	.-28     	; 0x397c <ucQAMGetData+0x3e>
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	df 91       	pop	r29
    399c:	cf 91       	pop	r28
    399e:	1f 91       	pop	r17
    39a0:	0f 91       	pop	r16
    39a2:	ff 90       	pop	r15
    39a4:	ef 90       	pop	r14
    39a6:	08 95       	ret
    39a8:	80 e0       	ldi	r24, 0x00	; 0
    39aa:	df 91       	pop	r29
    39ac:	cf 91       	pop	r28
    39ae:	1f 91       	pop	r17
    39b0:	0f 91       	pop	r16
    39b2:	ff 90       	pop	r15
    39b4:	ef 90       	pop	r14
    39b6:	08 95       	ret

000039b8 <vQAMDec>:
    39b8:	cf 93       	push	r28
    39ba:	df 93       	push	r29
    39bc:	cd b7       	in	r28, 0x3d	; 61
    39be:	de b7       	in	r29, 0x3e	; 62
    39c0:	c6 50       	subi	r28, 0x06	; 6
    39c2:	d1 40       	sbci	r29, 0x01	; 1
    39c4:	cd bf       	out	0x3d, r28	; 61
    39c6:	de bf       	out	0x3e, r29	; 62
    39c8:	9e 01       	movw	r18, r28
    39ca:	2f 5f       	subi	r18, 0xFF	; 255
    39cc:	3f 4f       	sbci	r19, 0xFF	; 255
    39ce:	69 01       	movw	r12, r18
    39d0:	80 e0       	ldi	r24, 0x00	; 0
    39d2:	91 e0       	ldi	r25, 0x01	; 1
    39d4:	f9 01       	movw	r30, r18
    39d6:	9c 01       	movw	r18, r24
    39d8:	11 92       	st	Z+, r1
    39da:	21 50       	subi	r18, 0x01	; 1
    39dc:	30 40       	sbci	r19, 0x00	; 0
    39de:	e1 f7       	brne	.-8      	; 0x39d8 <vQAMDec+0x20>
    39e0:	ca 5f       	subi	r28, 0xFA	; 250
    39e2:	de 4f       	sbci	r29, 0xFE	; 254
    39e4:	18 82       	st	Y, r1
    39e6:	c6 50       	subi	r28, 0x06	; 6
    39e8:	d1 40       	sbci	r29, 0x01	; 1
    39ea:	cb 5f       	subi	r28, 0xFB	; 251
    39ec:	de 4f       	sbci	r29, 0xFE	; 254
    39ee:	18 82       	st	Y, r1
    39f0:	c5 50       	subi	r28, 0x05	; 5
    39f2:	d1 40       	sbci	r29, 0x01	; 1
    39f4:	cd 5f       	subi	r28, 0xFD	; 253
    39f6:	de 4f       	sbci	r29, 0xFE	; 254
    39f8:	18 82       	st	Y, r1
    39fa:	c3 50       	subi	r28, 0x03	; 3
    39fc:	d1 40       	sbci	r29, 0x01	; 1
    39fe:	80 ed       	ldi	r24, 0xD0	; 208
    3a00:	97 e0       	ldi	r25, 0x07	; 7
    3a02:	cf 5f       	subi	r28, 0xFF	; 255
    3a04:	de 4f       	sbci	r29, 0xFE	; 254
    3a06:	88 83       	st	Y, r24
    3a08:	99 83       	std	Y+1, r25	; 0x01
    3a0a:	c1 50       	subi	r28, 0x01	; 1
    3a0c:	d1 40       	sbci	r29, 0x01	; 1
    3a0e:	40 e0       	ldi	r20, 0x00	; 0
    3a10:	60 e4       	ldi	r22, 0x40	; 64
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	0e 94 c6 06 	call	0xd8c	; 0xd8c <xQueueGenericCreate>
    3a18:	80 93 65 2e 	sts	0x2E65, r24	; 0x802e65 <decoderQueue>
    3a1c:	90 93 66 2e 	sts	0x2E66, r25	; 0x802e66 <decoderQueue+0x1>
    3a20:	40 e0       	ldi	r20, 0x00	; 0
    3a22:	61 e0       	ldi	r22, 0x01	; 1
    3a24:	88 e0       	ldi	r24, 0x08	; 8
    3a26:	0e 94 c6 06 	call	0xd8c	; 0xd8c <xQueueGenericCreate>
    3a2a:	80 93 63 2e 	sts	0x2E63, r24	; 0x802e63 <receivedByteQueue>
    3a2e:	90 93 64 2e 	sts	0x2E64, r25	; 0x802e64 <receivedByteQueue+0x1>
    3a32:	0e 94 02 1a 	call	0x3404	; 0x3404 <initDecDMA>
    3a36:	81 e0       	ldi	r24, 0x01	; 1
    3a38:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
    3a3c:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
    3a40:	90 e2       	ldi	r25, 0x20	; 32
    3a42:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
    3a46:	93 e0       	ldi	r25, 0x03	; 3
    3a48:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <__TEXT_REGION_LENGTH__+0x700204>
    3a4c:	99 e3       	ldi	r25, 0x39	; 57
    3a4e:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
    3a52:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
    3a56:	85 e5       	ldi	r24, 0x55	; 85
    3a58:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
    3a5c:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <__TEXT_REGION_LENGTH__+0x700222>
    3a60:	0e 94 ee 19 	call	0x33dc	; 0x33dc <initADCTimer>
    3a64:	e1 2c       	mov	r14, r1
    3a66:	f1 2c       	mov	r15, r1
    3a68:	02 e0       	ldi	r16, 0x02	; 2
    3a6a:	20 e0       	ldi	r18, 0x00	; 0
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	48 ec       	ldi	r20, 0xC8	; 200
    3a70:	50 e0       	ldi	r21, 0x00	; 0
    3a72:	65 e7       	ldi	r22, 0x75	; 117
    3a74:	71 e2       	ldi	r23, 0x21	; 33
    3a76:	89 ee       	ldi	r24, 0xE9	; 233
    3a78:	98 e1       	ldi	r25, 0x18	; 24
    3a7a:	0e 94 0d 0a 	call	0x141a	; 0x141a <xTaskCreate>
    3a7e:	b1 2c       	mov	r11, r1
    3a80:	80 91 65 2e 	lds	r24, 0x2E65	; 0x802e65 <decoderQueue>
    3a84:	90 91 66 2e 	lds	r25, 0x2E66	; 0x802e66 <decoderQueue+0x1>
    3a88:	0e 94 b7 08 	call	0x116e	; 0x116e <uxQueueMessagesWaiting>
    3a8c:	88 23       	and	r24, r24
    3a8e:	09 f4       	brne	.+2      	; 0x3a92 <vQAMDec+0xda>
    3a90:	62 c0       	rjmp	.+196    	; 0x3b56 <vQAMDec+0x19e>
    3a92:	ca 5f       	subi	r28, 0xFA	; 250
    3a94:	de 4f       	sbci	r29, 0xFE	; 254
    3a96:	68 81       	ld	r22, Y
    3a98:	c6 50       	subi	r28, 0x06	; 6
    3a9a:	d1 40       	sbci	r29, 0x01	; 1
    3a9c:	70 e0       	ldi	r23, 0x00	; 0
    3a9e:	66 0f       	add	r22, r22
    3aa0:	77 1f       	adc	r23, r23
    3aa2:	6c 0d       	add	r22, r12
    3aa4:	7d 1d       	adc	r23, r13
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	a9 01       	movw	r20, r18
    3aac:	80 91 65 2e 	lds	r24, 0x2E65	; 0x802e65 <decoderQueue>
    3ab0:	90 91 66 2e 	lds	r25, 0x2E66	; 0x802e66 <decoderQueue+0x1>
    3ab4:	0e 94 fa 07 	call	0xff4	; 0xff4 <xQueueReceive>
    3ab8:	8e 01       	movw	r16, r28
    3aba:	0c 5f       	subi	r16, 0xFC	; 252
    3abc:	1e 4f       	sbci	r17, 0xFE	; 254
    3abe:	9e 01       	movw	r18, r28
    3ac0:	2f 5f       	subi	r18, 0xFF	; 255
    3ac2:	3e 4f       	sbci	r19, 0xFE	; 254
    3ac4:	ae 01       	movw	r20, r28
    3ac6:	4b 5f       	subi	r20, 0xFB	; 251
    3ac8:	5e 4f       	sbci	r21, 0xFE	; 254
    3aca:	be 01       	movw	r22, r28
    3acc:	6a 5f       	subi	r22, 0xFA	; 250
    3ace:	7e 4f       	sbci	r23, 0xFE	; 254
    3ad0:	c6 01       	movw	r24, r12
    3ad2:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <bGetReceivedData>
    3ad6:	81 30       	cpi	r24, 0x01	; 1
    3ad8:	99 f6       	brne	.-90     	; 0x3a80 <vQAMDec+0xc8>
    3ada:	cc 5f       	subi	r28, 0xFC	; 252
    3adc:	de 4f       	sbci	r29, 0xFE	; 254
    3ade:	88 81       	ld	r24, Y
    3ae0:	c4 50       	subi	r28, 0x04	; 4
    3ae2:	d1 40       	sbci	r29, 0x01	; 1
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	cd 5f       	subi	r28, 0xFD	; 253
    3ae8:	de 4f       	sbci	r29, 0xFE	; 254
    3aea:	28 81       	ld	r18, Y
    3aec:	c3 50       	subi	r28, 0x03	; 3
    3aee:	d1 40       	sbci	r29, 0x01	; 1
    3af0:	42 2f       	mov	r20, r18
    3af2:	46 95       	lsr	r20
    3af4:	46 95       	lsr	r20
    3af6:	9c 01       	movw	r18, r24
    3af8:	00 24       	eor	r0, r0
    3afa:	36 95       	lsr	r19
    3afc:	27 95       	ror	r18
    3afe:	07 94       	ror	r0
    3b00:	36 95       	lsr	r19
    3b02:	27 95       	ror	r18
    3b04:	07 94       	ror	r0
    3b06:	32 2f       	mov	r19, r18
    3b08:	20 2d       	mov	r18, r0
    3b0a:	24 2b       	or	r18, r20
    3b0c:	cd 5f       	subi	r28, 0xFD	; 253
    3b0e:	de 4f       	sbci	r29, 0xFE	; 254
    3b10:	28 83       	st	Y, r18
    3b12:	c3 50       	subi	r28, 0x03	; 3
    3b14:	d1 40       	sbci	r29, 0x01	; 1
    3b16:	f6 94       	lsr	r15
    3b18:	e7 94       	ror	r14
    3b1a:	f6 94       	lsr	r15
    3b1c:	e7 94       	ror	r14
    3b1e:	90 e4       	ldi	r25, 0x40	; 64
    3b20:	89 9f       	mul	r24, r25
    3b22:	90 2d       	mov	r25, r0
    3b24:	88 27       	eor	r24, r24
    3b26:	11 24       	eor	r1, r1
    3b28:	e8 2a       	or	r14, r24
    3b2a:	f9 2a       	or	r15, r25
    3b2c:	b3 94       	inc	r11
    3b2e:	33 e0       	ldi	r19, 0x03	; 3
    3b30:	3b 15       	cp	r19, r11
    3b32:	c0 f0       	brcs	.+48     	; 0x3b64 <vQAMDec+0x1ac>
    3b34:	85 e0       	ldi	r24, 0x05	; 5
    3b36:	e8 16       	cp	r14, r24
    3b38:	8f ea       	ldi	r24, 0xAF	; 175
    3b3a:	f8 06       	cpc	r15, r24
    3b3c:	09 f0       	breq	.+2      	; 0x3b40 <vQAMDec+0x188>
    3b3e:	a0 cf       	rjmp	.-192    	; 0x3a80 <vQAMDec+0xc8>
    3b40:	b1 2c       	mov	r11, r1
    3b42:	e1 2c       	mov	r14, r1
    3b44:	f1 2c       	mov	r15, r1
    3b46:	80 91 65 2e 	lds	r24, 0x2E65	; 0x802e65 <decoderQueue>
    3b4a:	90 91 66 2e 	lds	r25, 0x2E66	; 0x802e66 <decoderQueue+0x1>
    3b4e:	0e 94 b7 08 	call	0x116e	; 0x116e <uxQueueMessagesWaiting>
    3b52:	81 11       	cpse	r24, r1
    3b54:	9e cf       	rjmp	.-196    	; 0x3a92 <vQAMDec+0xda>
    3b56:	61 e0       	ldi	r22, 0x01	; 1
    3b58:	70 e0       	ldi	r23, 0x00	; 0
    3b5a:	80 e0       	ldi	r24, 0x00	; 0
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <vTaskDelay>
    3b62:	8e cf       	rjmp	.-228    	; 0x3a80 <vQAMDec+0xc8>
    3b64:	80 91 63 2e 	lds	r24, 0x2E63	; 0x802e63 <receivedByteQueue>
    3b68:	90 91 64 2e 	lds	r25, 0x2E64	; 0x802e64 <receivedByteQueue+0x1>
    3b6c:	00 e0       	ldi	r16, 0x00	; 0
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	a9 01       	movw	r20, r18
    3b74:	be 01       	movw	r22, r28
    3b76:	6d 5f       	subi	r22, 0xFD	; 253
    3b78:	7e 4f       	sbci	r23, 0xFE	; 254
    3b7a:	0e 94 01 07 	call	0xe02	; 0xe02 <xQueueGenericSend>
    3b7e:	cd 5f       	subi	r28, 0xFD	; 253
    3b80:	de 4f       	sbci	r29, 0xFE	; 254
    3b82:	18 82       	st	Y, r1
    3b84:	c3 50       	subi	r28, 0x03	; 3
    3b86:	d1 40       	sbci	r29, 0x01	; 1
    3b88:	b1 2c       	mov	r11, r1
    3b8a:	d4 cf       	rjmp	.-88     	; 0x3b34 <vQAMDec+0x17c>

00003b8c <__vector_8>:

ISR(DMA_CH2_vect)
{
    3b8c:	1f 92       	push	r1
    3b8e:	0f 92       	push	r0
    3b90:	0f b6       	in	r0, 0x3f	; 63
    3b92:	0f 92       	push	r0
    3b94:	11 24       	eor	r1, r1
    3b96:	0b b6       	in	r0, 0x3b	; 59
    3b98:	0f 92       	push	r0
    3b9a:	2f 93       	push	r18
    3b9c:	3f 93       	push	r19
    3b9e:	4f 93       	push	r20
    3ba0:	5f 93       	push	r21
    3ba2:	6f 93       	push	r22
    3ba4:	7f 93       	push	r23
    3ba6:	8f 93       	push	r24
    3ba8:	9f 93       	push	r25
    3baa:	af 93       	push	r26
    3bac:	bf 93       	push	r27
    3bae:	ef 93       	push	r30
    3bb0:	ff 93       	push	r31
    3bb2:	cf 93       	push	r28
    3bb4:	df 93       	push	r29
    3bb6:	1f 92       	push	r1
    3bb8:	cd b7       	in	r28, 0x3d	; 61
    3bba:	de b7       	in	r29, 0x3e	; 62
	DMA.CH2.CTRLB|=0x10;
    3bbc:	e0 e0       	ldi	r30, 0x00	; 0
    3bbe:	f1 e0       	ldi	r31, 0x01	; 1
    3bc0:	81 a9       	ldd	r24, Z+49	; 0x31
    3bc2:	80 61       	ori	r24, 0x10	; 16
    3bc4:	81 ab       	std	Z+49, r24	; 0x31
	}
}

/* This function fills the decoderQueue with the received ADC data. */
void fillDecoderQueue(uint16_t usDataBuffer[DECODERSAMPLECOUNT]) {
	BaseType_t xTaskWokenByReceive = pdFALSE;
    3bc6:	19 82       	std	Y+1, r1	; 0x01
	xQueueSendFromISR(decoderQueue, &usDataBuffer[0], &xTaskWokenByReceive);
    3bc8:	20 e0       	ldi	r18, 0x00	; 0
    3bca:	ae 01       	movw	r20, r28
    3bcc:	4f 5f       	subi	r20, 0xFF	; 255
    3bce:	5f 4f       	sbci	r21, 0xFF	; 255
    3bd0:	63 e2       	ldi	r22, 0x23	; 35
    3bd2:	7e e2       	ldi	r23, 0x2E	; 46
    3bd4:	80 91 65 2e 	lds	r24, 0x2E65	; 0x802e65 <decoderQueue>
    3bd8:	90 91 66 2e 	lds	r25, 0x2E66	; 0x802e66 <decoderQueue+0x1>
    3bdc:	0e 94 bb 07 	call	0xf76	; 0xf76 <xQueueGenericSendFromISR>

ISR(DMA_CH2_vect)
{
	DMA.CH2.CTRLB|=0x10;
	fillDecoderQueue(&usADCBuffer0[0]);
}
    3be0:	0f 90       	pop	r0
    3be2:	df 91       	pop	r29
    3be4:	cf 91       	pop	r28
    3be6:	ff 91       	pop	r31
    3be8:	ef 91       	pop	r30
    3bea:	bf 91       	pop	r27
    3bec:	af 91       	pop	r26
    3bee:	9f 91       	pop	r25
    3bf0:	8f 91       	pop	r24
    3bf2:	7f 91       	pop	r23
    3bf4:	6f 91       	pop	r22
    3bf6:	5f 91       	pop	r21
    3bf8:	4f 91       	pop	r20
    3bfa:	3f 91       	pop	r19
    3bfc:	2f 91       	pop	r18
    3bfe:	0f 90       	pop	r0
    3c00:	0b be       	out	0x3b, r0	; 59
    3c02:	0f 90       	pop	r0
    3c04:	0f be       	out	0x3f, r0	; 63
    3c06:	0f 90       	pop	r0
    3c08:	1f 90       	pop	r1
    3c0a:	18 95       	reti

00003c0c <__vector_9>:

ISR(DMA_CH3_vect)
{
    3c0c:	1f 92       	push	r1
    3c0e:	0f 92       	push	r0
    3c10:	0f b6       	in	r0, 0x3f	; 63
    3c12:	0f 92       	push	r0
    3c14:	11 24       	eor	r1, r1
    3c16:	0b b6       	in	r0, 0x3b	; 59
    3c18:	0f 92       	push	r0
    3c1a:	2f 93       	push	r18
    3c1c:	3f 93       	push	r19
    3c1e:	4f 93       	push	r20
    3c20:	5f 93       	push	r21
    3c22:	6f 93       	push	r22
    3c24:	7f 93       	push	r23
    3c26:	8f 93       	push	r24
    3c28:	9f 93       	push	r25
    3c2a:	af 93       	push	r26
    3c2c:	bf 93       	push	r27
    3c2e:	ef 93       	push	r30
    3c30:	ff 93       	push	r31
    3c32:	cf 93       	push	r28
    3c34:	df 93       	push	r29
    3c36:	1f 92       	push	r1
    3c38:	cd b7       	in	r28, 0x3d	; 61
    3c3a:	de b7       	in	r29, 0x3e	; 62
	DMA.CH3.CTRLB|=0x10;
    3c3c:	e1 e4       	ldi	r30, 0x41	; 65
    3c3e:	f1 e0       	ldi	r31, 0x01	; 1
    3c40:	80 81       	ld	r24, Z
    3c42:	80 61       	ori	r24, 0x10	; 16
    3c44:	80 83       	st	Z, r24
	}
}

/* This function fills the decoderQueue with the received ADC data. */
void fillDecoderQueue(uint16_t usDataBuffer[DECODERSAMPLECOUNT]) {
	BaseType_t xTaskWokenByReceive = pdFALSE;
    3c46:	19 82       	std	Y+1, r1	; 0x01
	xQueueSendFromISR(decoderQueue, &usDataBuffer[0], &xTaskWokenByReceive);
    3c48:	20 e0       	ldi	r18, 0x00	; 0
    3c4a:	ae 01       	movw	r20, r28
    3c4c:	4f 5f       	subi	r20, 0xFF	; 255
    3c4e:	5f 4f       	sbci	r21, 0xFF	; 255
    3c50:	67 e6       	ldi	r22, 0x67	; 103
    3c52:	7e e2       	ldi	r23, 0x2E	; 46
    3c54:	80 91 65 2e 	lds	r24, 0x2E65	; 0x802e65 <decoderQueue>
    3c58:	90 91 66 2e 	lds	r25, 0x2E66	; 0x802e66 <decoderQueue+0x1>
    3c5c:	0e 94 bb 07 	call	0xf76	; 0xf76 <xQueueGenericSendFromISR>

ISR(DMA_CH3_vect)
{
	DMA.CH3.CTRLB|=0x10;
	fillDecoderQueue(&usADCBuffer1[0]);
    3c60:	0f 90       	pop	r0
    3c62:	df 91       	pop	r29
    3c64:	cf 91       	pop	r28
    3c66:	ff 91       	pop	r31
    3c68:	ef 91       	pop	r30
    3c6a:	bf 91       	pop	r27
    3c6c:	af 91       	pop	r26
    3c6e:	9f 91       	pop	r25
    3c70:	8f 91       	pop	r24
    3c72:	7f 91       	pop	r23
    3c74:	6f 91       	pop	r22
    3c76:	5f 91       	pop	r21
    3c78:	4f 91       	pop	r20
    3c7a:	3f 91       	pop	r19
    3c7c:	2f 91       	pop	r18
    3c7e:	0f 90       	pop	r0
    3c80:	0b be       	out	0x3b, r0	; 59
    3c82:	0f 90       	pop	r0
    3c84:	0f be       	out	0x3f, r0	; 63
    3c86:	0f 90       	pop	r0
    3c88:	1f 90       	pop	r1
    3c8a:	18 95       	reti

00003c8c <getResetReason>:
 #include "utils.h"

 resetReason_t getResetReason(void) {
	 resetReason_t returnValue = RESETREASON_POWERONRESET;
	 // software reset ?
	 if( RST.STATUS & RST_SRF_bm )
    3c8c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    3c90:	85 fd       	sbrc	r24, 5
    3c92:	12 c0       	rjmp	.+36     	; 0x3cb8 <getResetReason+0x2c>
		 // reset this bit
		 RST.STATUS = RST_SRF_bm;
		 returnValue = RESETREASON_SOFTWARERESET;
	 }
	 // power on reset ?
	 else if( RST.STATUS & RST_PORF_bm)
    3c94:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    3c98:	80 ff       	sbrs	r24, 0
    3c9a:	05 c0       	rjmp	.+10     	; 0x3ca6 <getResetReason+0x1a>
	 {
		 // reset this bit
		 RST.STATUS = RST_PORF_bm;
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
		 returnValue = RESETREASON_POWERONRESET;
    3ca2:	82 e0       	ldi	r24, 0x02	; 2
    3ca4:	08 95       	ret
	 }
	 // debugger reset ?
	 else if( RST.STATUS & RST_PDIRF_bm)
    3ca6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    3caa:	84 ff       	sbrs	r24, 4
    3cac:	0a c0       	rjmp	.+20     	; 0x3cc2 <getResetReason+0x36>
	 {
		 // reset this bit
		 RST.STATUS = RST_PDIRF_bm;
    3cae:	80 e1       	ldi	r24, 0x10	; 16
    3cb0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
		 returnValue = RESETREASON_DEBUGGERRESET;
    3cb4:	83 e0       	ldi	r24, 0x03	; 3
    3cb6:	08 95       	ret
	 resetReason_t returnValue = RESETREASON_POWERONRESET;
	 // software reset ?
	 if( RST.STATUS & RST_SRF_bm )
	 {
		 // reset this bit
		 RST.STATUS = RST_SRF_bm;
    3cb8:	80 e2       	ldi	r24, 0x20	; 32
    3cba:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
		 returnValue = RESETREASON_SOFTWARERESET;
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
    3cc0:	08 95       	ret
		 // reset this bit
		 RST.STATUS = RST_PDIRF_bm;
		 returnValue = RESETREASON_DEBUGGERRESET;
	 }
	 // external reset ?
	 else if( RST.STATUS & RST_EXTRF_bm)
    3cc2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    3cc6:	81 ff       	sbrs	r24, 1
    3cc8:	05 c0       	rjmp	.+10     	; 0x3cd4 <getResetReason+0x48>
	 {
		 // reset this bit
		 RST.STATUS = RST_EXTRF_bm;
    3cca:	82 e0       	ldi	r24, 0x02	; 2
    3ccc:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
		 returnValue = RESETREASON_EXTERNALRESET;
    3cd0:	84 e0       	ldi	r24, 0x04	; 4
    3cd2:	08 95       	ret
 */ 
 #include "avr_compiler.h"
 #include "utils.h"

 resetReason_t getResetReason(void) {
	 resetReason_t returnValue = RESETREASON_POWERONRESET;
    3cd4:	82 e0       	ldi	r24, 0x02	; 2
		 // reset this bit
		 RST.STATUS = RST_EXTRF_bm;
		 returnValue = RESETREASON_EXTERNALRESET;
	 }
	 return returnValue;
    3cd6:	08 95       	ret

00003cd8 <__subsf3>:
    3cd8:	50 58       	subi	r21, 0x80	; 128

00003cda <__addsf3>:
    3cda:	bb 27       	eor	r27, r27
    3cdc:	aa 27       	eor	r26, r26
    3cde:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__addsf3x>
    3ce2:	0c 94 fe 1f 	jmp	0x3ffc	; 0x3ffc <__fp_round>
    3ce6:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <__fp_pscA>
    3cea:	38 f0       	brcs	.+14     	; 0x3cfa <__addsf3+0x20>
    3cec:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <__fp_pscB>
    3cf0:	20 f0       	brcs	.+8      	; 0x3cfa <__addsf3+0x20>
    3cf2:	39 f4       	brne	.+14     	; 0x3d02 <__addsf3+0x28>
    3cf4:	9f 3f       	cpi	r25, 0xFF	; 255
    3cf6:	19 f4       	brne	.+6      	; 0x3cfe <__addsf3+0x24>
    3cf8:	26 f4       	brtc	.+8      	; 0x3d02 <__addsf3+0x28>
    3cfa:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__fp_nan>
    3cfe:	0e f4       	brtc	.+2      	; 0x3d02 <__addsf3+0x28>
    3d00:	e0 95       	com	r30
    3d02:	e7 fb       	bst	r30, 7
    3d04:	0c 94 e7 1f 	jmp	0x3fce	; 0x3fce <__fp_inf>

00003d08 <__addsf3x>:
    3d08:	e9 2f       	mov	r30, r25
    3d0a:	0e 94 0f 20 	call	0x401e	; 0x401e <__fp_split3>
    3d0e:	58 f3       	brcs	.-42     	; 0x3ce6 <__addsf3+0xc>
    3d10:	ba 17       	cp	r27, r26
    3d12:	62 07       	cpc	r22, r18
    3d14:	73 07       	cpc	r23, r19
    3d16:	84 07       	cpc	r24, r20
    3d18:	95 07       	cpc	r25, r21
    3d1a:	20 f0       	brcs	.+8      	; 0x3d24 <__addsf3x+0x1c>
    3d1c:	79 f4       	brne	.+30     	; 0x3d3c <__addsf3x+0x34>
    3d1e:	a6 f5       	brtc	.+104    	; 0x3d88 <__addsf3x+0x80>
    3d20:	0c 94 31 20 	jmp	0x4062	; 0x4062 <__fp_zero>
    3d24:	0e f4       	brtc	.+2      	; 0x3d28 <__addsf3x+0x20>
    3d26:	e0 95       	com	r30
    3d28:	0b 2e       	mov	r0, r27
    3d2a:	ba 2f       	mov	r27, r26
    3d2c:	a0 2d       	mov	r26, r0
    3d2e:	0b 01       	movw	r0, r22
    3d30:	b9 01       	movw	r22, r18
    3d32:	90 01       	movw	r18, r0
    3d34:	0c 01       	movw	r0, r24
    3d36:	ca 01       	movw	r24, r20
    3d38:	a0 01       	movw	r20, r0
    3d3a:	11 24       	eor	r1, r1
    3d3c:	ff 27       	eor	r31, r31
    3d3e:	59 1b       	sub	r21, r25
    3d40:	99 f0       	breq	.+38     	; 0x3d68 <__addsf3x+0x60>
    3d42:	59 3f       	cpi	r21, 0xF9	; 249
    3d44:	50 f4       	brcc	.+20     	; 0x3d5a <__addsf3x+0x52>
    3d46:	50 3e       	cpi	r21, 0xE0	; 224
    3d48:	68 f1       	brcs	.+90     	; 0x3da4 <__addsf3x+0x9c>
    3d4a:	1a 16       	cp	r1, r26
    3d4c:	f0 40       	sbci	r31, 0x00	; 0
    3d4e:	a2 2f       	mov	r26, r18
    3d50:	23 2f       	mov	r18, r19
    3d52:	34 2f       	mov	r19, r20
    3d54:	44 27       	eor	r20, r20
    3d56:	58 5f       	subi	r21, 0xF8	; 248
    3d58:	f3 cf       	rjmp	.-26     	; 0x3d40 <__addsf3x+0x38>
    3d5a:	46 95       	lsr	r20
    3d5c:	37 95       	ror	r19
    3d5e:	27 95       	ror	r18
    3d60:	a7 95       	ror	r26
    3d62:	f0 40       	sbci	r31, 0x00	; 0
    3d64:	53 95       	inc	r21
    3d66:	c9 f7       	brne	.-14     	; 0x3d5a <__addsf3x+0x52>
    3d68:	7e f4       	brtc	.+30     	; 0x3d88 <__addsf3x+0x80>
    3d6a:	1f 16       	cp	r1, r31
    3d6c:	ba 0b       	sbc	r27, r26
    3d6e:	62 0b       	sbc	r22, r18
    3d70:	73 0b       	sbc	r23, r19
    3d72:	84 0b       	sbc	r24, r20
    3d74:	ba f0       	brmi	.+46     	; 0x3da4 <__addsf3x+0x9c>
    3d76:	91 50       	subi	r25, 0x01	; 1
    3d78:	a1 f0       	breq	.+40     	; 0x3da2 <__addsf3x+0x9a>
    3d7a:	ff 0f       	add	r31, r31
    3d7c:	bb 1f       	adc	r27, r27
    3d7e:	66 1f       	adc	r22, r22
    3d80:	77 1f       	adc	r23, r23
    3d82:	88 1f       	adc	r24, r24
    3d84:	c2 f7       	brpl	.-16     	; 0x3d76 <__addsf3x+0x6e>
    3d86:	0e c0       	rjmp	.+28     	; 0x3da4 <__addsf3x+0x9c>
    3d88:	ba 0f       	add	r27, r26
    3d8a:	62 1f       	adc	r22, r18
    3d8c:	73 1f       	adc	r23, r19
    3d8e:	84 1f       	adc	r24, r20
    3d90:	48 f4       	brcc	.+18     	; 0x3da4 <__addsf3x+0x9c>
    3d92:	87 95       	ror	r24
    3d94:	77 95       	ror	r23
    3d96:	67 95       	ror	r22
    3d98:	b7 95       	ror	r27
    3d9a:	f7 95       	ror	r31
    3d9c:	9e 3f       	cpi	r25, 0xFE	; 254
    3d9e:	08 f0       	brcs	.+2      	; 0x3da2 <__addsf3x+0x9a>
    3da0:	b0 cf       	rjmp	.-160    	; 0x3d02 <__addsf3+0x28>
    3da2:	93 95       	inc	r25
    3da4:	88 0f       	add	r24, r24
    3da6:	08 f0       	brcs	.+2      	; 0x3daa <__addsf3x+0xa2>
    3da8:	99 27       	eor	r25, r25
    3daa:	ee 0f       	add	r30, r30
    3dac:	97 95       	ror	r25
    3dae:	87 95       	ror	r24
    3db0:	08 95       	ret

00003db2 <__cmpsf2>:
    3db2:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <__fp_cmp>
    3db6:	08 f4       	brcc	.+2      	; 0x3dba <__cmpsf2+0x8>
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	08 95       	ret

00003dbc <__divsf3>:
    3dbc:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <__divsf3x>
    3dc0:	0c 94 fe 1f 	jmp	0x3ffc	; 0x3ffc <__fp_round>
    3dc4:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <__fp_pscB>
    3dc8:	58 f0       	brcs	.+22     	; 0x3de0 <__divsf3+0x24>
    3dca:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <__fp_pscA>
    3dce:	40 f0       	brcs	.+16     	; 0x3de0 <__divsf3+0x24>
    3dd0:	29 f4       	brne	.+10     	; 0x3ddc <__divsf3+0x20>
    3dd2:	5f 3f       	cpi	r21, 0xFF	; 255
    3dd4:	29 f0       	breq	.+10     	; 0x3de0 <__divsf3+0x24>
    3dd6:	0c 94 e7 1f 	jmp	0x3fce	; 0x3fce <__fp_inf>
    3dda:	51 11       	cpse	r21, r1
    3ddc:	0c 94 32 20 	jmp	0x4064	; 0x4064 <__fp_szero>
    3de0:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__fp_nan>

00003de4 <__divsf3x>:
    3de4:	0e 94 0f 20 	call	0x401e	; 0x401e <__fp_split3>
    3de8:	68 f3       	brcs	.-38     	; 0x3dc4 <__divsf3+0x8>

00003dea <__divsf3_pse>:
    3dea:	99 23       	and	r25, r25
    3dec:	b1 f3       	breq	.-20     	; 0x3dda <__divsf3+0x1e>
    3dee:	55 23       	and	r21, r21
    3df0:	91 f3       	breq	.-28     	; 0x3dd6 <__divsf3+0x1a>
    3df2:	95 1b       	sub	r25, r21
    3df4:	55 0b       	sbc	r21, r21
    3df6:	bb 27       	eor	r27, r27
    3df8:	aa 27       	eor	r26, r26
    3dfa:	62 17       	cp	r22, r18
    3dfc:	73 07       	cpc	r23, r19
    3dfe:	84 07       	cpc	r24, r20
    3e00:	38 f0       	brcs	.+14     	; 0x3e10 <__divsf3_pse+0x26>
    3e02:	9f 5f       	subi	r25, 0xFF	; 255
    3e04:	5f 4f       	sbci	r21, 0xFF	; 255
    3e06:	22 0f       	add	r18, r18
    3e08:	33 1f       	adc	r19, r19
    3e0a:	44 1f       	adc	r20, r20
    3e0c:	aa 1f       	adc	r26, r26
    3e0e:	a9 f3       	breq	.-22     	; 0x3dfa <__divsf3_pse+0x10>
    3e10:	35 d0       	rcall	.+106    	; 0x3e7c <__divsf3_pse+0x92>
    3e12:	0e 2e       	mov	r0, r30
    3e14:	3a f0       	brmi	.+14     	; 0x3e24 <__divsf3_pse+0x3a>
    3e16:	e0 e8       	ldi	r30, 0x80	; 128
    3e18:	32 d0       	rcall	.+100    	; 0x3e7e <__divsf3_pse+0x94>
    3e1a:	91 50       	subi	r25, 0x01	; 1
    3e1c:	50 40       	sbci	r21, 0x00	; 0
    3e1e:	e6 95       	lsr	r30
    3e20:	00 1c       	adc	r0, r0
    3e22:	ca f7       	brpl	.-14     	; 0x3e16 <__divsf3_pse+0x2c>
    3e24:	2b d0       	rcall	.+86     	; 0x3e7c <__divsf3_pse+0x92>
    3e26:	fe 2f       	mov	r31, r30
    3e28:	29 d0       	rcall	.+82     	; 0x3e7c <__divsf3_pse+0x92>
    3e2a:	66 0f       	add	r22, r22
    3e2c:	77 1f       	adc	r23, r23
    3e2e:	88 1f       	adc	r24, r24
    3e30:	bb 1f       	adc	r27, r27
    3e32:	26 17       	cp	r18, r22
    3e34:	37 07       	cpc	r19, r23
    3e36:	48 07       	cpc	r20, r24
    3e38:	ab 07       	cpc	r26, r27
    3e3a:	b0 e8       	ldi	r27, 0x80	; 128
    3e3c:	09 f0       	breq	.+2      	; 0x3e40 <__divsf3_pse+0x56>
    3e3e:	bb 0b       	sbc	r27, r27
    3e40:	80 2d       	mov	r24, r0
    3e42:	bf 01       	movw	r22, r30
    3e44:	ff 27       	eor	r31, r31
    3e46:	93 58       	subi	r25, 0x83	; 131
    3e48:	5f 4f       	sbci	r21, 0xFF	; 255
    3e4a:	3a f0       	brmi	.+14     	; 0x3e5a <__divsf3_pse+0x70>
    3e4c:	9e 3f       	cpi	r25, 0xFE	; 254
    3e4e:	51 05       	cpc	r21, r1
    3e50:	78 f0       	brcs	.+30     	; 0x3e70 <__divsf3_pse+0x86>
    3e52:	0c 94 e7 1f 	jmp	0x3fce	; 0x3fce <__fp_inf>
    3e56:	0c 94 32 20 	jmp	0x4064	; 0x4064 <__fp_szero>
    3e5a:	5f 3f       	cpi	r21, 0xFF	; 255
    3e5c:	e4 f3       	brlt	.-8      	; 0x3e56 <__divsf3_pse+0x6c>
    3e5e:	98 3e       	cpi	r25, 0xE8	; 232
    3e60:	d4 f3       	brlt	.-12     	; 0x3e56 <__divsf3_pse+0x6c>
    3e62:	86 95       	lsr	r24
    3e64:	77 95       	ror	r23
    3e66:	67 95       	ror	r22
    3e68:	b7 95       	ror	r27
    3e6a:	f7 95       	ror	r31
    3e6c:	9f 5f       	subi	r25, 0xFF	; 255
    3e6e:	c9 f7       	brne	.-14     	; 0x3e62 <__divsf3_pse+0x78>
    3e70:	88 0f       	add	r24, r24
    3e72:	91 1d       	adc	r25, r1
    3e74:	96 95       	lsr	r25
    3e76:	87 95       	ror	r24
    3e78:	97 f9       	bld	r25, 7
    3e7a:	08 95       	ret
    3e7c:	e1 e0       	ldi	r30, 0x01	; 1
    3e7e:	66 0f       	add	r22, r22
    3e80:	77 1f       	adc	r23, r23
    3e82:	88 1f       	adc	r24, r24
    3e84:	bb 1f       	adc	r27, r27
    3e86:	62 17       	cp	r22, r18
    3e88:	73 07       	cpc	r23, r19
    3e8a:	84 07       	cpc	r24, r20
    3e8c:	ba 07       	cpc	r27, r26
    3e8e:	20 f0       	brcs	.+8      	; 0x3e98 <__divsf3_pse+0xae>
    3e90:	62 1b       	sub	r22, r18
    3e92:	73 0b       	sbc	r23, r19
    3e94:	84 0b       	sbc	r24, r20
    3e96:	ba 0b       	sbc	r27, r26
    3e98:	ee 1f       	adc	r30, r30
    3e9a:	88 f7       	brcc	.-30     	; 0x3e7e <__divsf3_pse+0x94>
    3e9c:	e0 95       	com	r30
    3e9e:	08 95       	ret

00003ea0 <__fixsfsi>:
    3ea0:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__fixunssfsi>
    3ea4:	68 94       	set
    3ea6:	b1 11       	cpse	r27, r1
    3ea8:	0c 94 32 20 	jmp	0x4064	; 0x4064 <__fp_szero>
    3eac:	08 95       	ret

00003eae <__fixunssfsi>:
    3eae:	0e 94 17 20 	call	0x402e	; 0x402e <__fp_splitA>
    3eb2:	88 f0       	brcs	.+34     	; 0x3ed6 <__fixunssfsi+0x28>
    3eb4:	9f 57       	subi	r25, 0x7F	; 127
    3eb6:	98 f0       	brcs	.+38     	; 0x3ede <__fixunssfsi+0x30>
    3eb8:	b9 2f       	mov	r27, r25
    3eba:	99 27       	eor	r25, r25
    3ebc:	b7 51       	subi	r27, 0x17	; 23
    3ebe:	b0 f0       	brcs	.+44     	; 0x3eec <__fixunssfsi+0x3e>
    3ec0:	e1 f0       	breq	.+56     	; 0x3efa <__fixunssfsi+0x4c>
    3ec2:	66 0f       	add	r22, r22
    3ec4:	77 1f       	adc	r23, r23
    3ec6:	88 1f       	adc	r24, r24
    3ec8:	99 1f       	adc	r25, r25
    3eca:	1a f0       	brmi	.+6      	; 0x3ed2 <__fixunssfsi+0x24>
    3ecc:	ba 95       	dec	r27
    3ece:	c9 f7       	brne	.-14     	; 0x3ec2 <__fixunssfsi+0x14>
    3ed0:	14 c0       	rjmp	.+40     	; 0x3efa <__fixunssfsi+0x4c>
    3ed2:	b1 30       	cpi	r27, 0x01	; 1
    3ed4:	91 f0       	breq	.+36     	; 0x3efa <__fixunssfsi+0x4c>
    3ed6:	0e 94 31 20 	call	0x4062	; 0x4062 <__fp_zero>
    3eda:	b1 e0       	ldi	r27, 0x01	; 1
    3edc:	08 95       	ret
    3ede:	0c 94 31 20 	jmp	0x4062	; 0x4062 <__fp_zero>
    3ee2:	67 2f       	mov	r22, r23
    3ee4:	78 2f       	mov	r23, r24
    3ee6:	88 27       	eor	r24, r24
    3ee8:	b8 5f       	subi	r27, 0xF8	; 248
    3eea:	39 f0       	breq	.+14     	; 0x3efa <__fixunssfsi+0x4c>
    3eec:	b9 3f       	cpi	r27, 0xF9	; 249
    3eee:	cc f3       	brlt	.-14     	; 0x3ee2 <__fixunssfsi+0x34>
    3ef0:	86 95       	lsr	r24
    3ef2:	77 95       	ror	r23
    3ef4:	67 95       	ror	r22
    3ef6:	b3 95       	inc	r27
    3ef8:	d9 f7       	brne	.-10     	; 0x3ef0 <__fixunssfsi+0x42>
    3efa:	3e f4       	brtc	.+14     	; 0x3f0a <__fixunssfsi+0x5c>
    3efc:	90 95       	com	r25
    3efe:	80 95       	com	r24
    3f00:	70 95       	com	r23
    3f02:	61 95       	neg	r22
    3f04:	7f 4f       	sbci	r23, 0xFF	; 255
    3f06:	8f 4f       	sbci	r24, 0xFF	; 255
    3f08:	9f 4f       	sbci	r25, 0xFF	; 255
    3f0a:	08 95       	ret

00003f0c <__floatunsisf>:
    3f0c:	e8 94       	clt
    3f0e:	09 c0       	rjmp	.+18     	; 0x3f22 <__floatsisf+0x12>

00003f10 <__floatsisf>:
    3f10:	97 fb       	bst	r25, 7
    3f12:	3e f4       	brtc	.+14     	; 0x3f22 <__floatsisf+0x12>
    3f14:	90 95       	com	r25
    3f16:	80 95       	com	r24
    3f18:	70 95       	com	r23
    3f1a:	61 95       	neg	r22
    3f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f1e:	8f 4f       	sbci	r24, 0xFF	; 255
    3f20:	9f 4f       	sbci	r25, 0xFF	; 255
    3f22:	99 23       	and	r25, r25
    3f24:	a9 f0       	breq	.+42     	; 0x3f50 <__floatsisf+0x40>
    3f26:	f9 2f       	mov	r31, r25
    3f28:	96 e9       	ldi	r25, 0x96	; 150
    3f2a:	bb 27       	eor	r27, r27
    3f2c:	93 95       	inc	r25
    3f2e:	f6 95       	lsr	r31
    3f30:	87 95       	ror	r24
    3f32:	77 95       	ror	r23
    3f34:	67 95       	ror	r22
    3f36:	b7 95       	ror	r27
    3f38:	f1 11       	cpse	r31, r1
    3f3a:	f8 cf       	rjmp	.-16     	; 0x3f2c <__floatsisf+0x1c>
    3f3c:	fa f4       	brpl	.+62     	; 0x3f7c <__floatsisf+0x6c>
    3f3e:	bb 0f       	add	r27, r27
    3f40:	11 f4       	brne	.+4      	; 0x3f46 <__floatsisf+0x36>
    3f42:	60 ff       	sbrs	r22, 0
    3f44:	1b c0       	rjmp	.+54     	; 0x3f7c <__floatsisf+0x6c>
    3f46:	6f 5f       	subi	r22, 0xFF	; 255
    3f48:	7f 4f       	sbci	r23, 0xFF	; 255
    3f4a:	8f 4f       	sbci	r24, 0xFF	; 255
    3f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f4e:	16 c0       	rjmp	.+44     	; 0x3f7c <__floatsisf+0x6c>
    3f50:	88 23       	and	r24, r24
    3f52:	11 f0       	breq	.+4      	; 0x3f58 <__floatsisf+0x48>
    3f54:	96 e9       	ldi	r25, 0x96	; 150
    3f56:	11 c0       	rjmp	.+34     	; 0x3f7a <__floatsisf+0x6a>
    3f58:	77 23       	and	r23, r23
    3f5a:	21 f0       	breq	.+8      	; 0x3f64 <__floatsisf+0x54>
    3f5c:	9e e8       	ldi	r25, 0x8E	; 142
    3f5e:	87 2f       	mov	r24, r23
    3f60:	76 2f       	mov	r23, r22
    3f62:	05 c0       	rjmp	.+10     	; 0x3f6e <__floatsisf+0x5e>
    3f64:	66 23       	and	r22, r22
    3f66:	71 f0       	breq	.+28     	; 0x3f84 <__floatsisf+0x74>
    3f68:	96 e8       	ldi	r25, 0x86	; 134
    3f6a:	86 2f       	mov	r24, r22
    3f6c:	70 e0       	ldi	r23, 0x00	; 0
    3f6e:	60 e0       	ldi	r22, 0x00	; 0
    3f70:	2a f0       	brmi	.+10     	; 0x3f7c <__floatsisf+0x6c>
    3f72:	9a 95       	dec	r25
    3f74:	66 0f       	add	r22, r22
    3f76:	77 1f       	adc	r23, r23
    3f78:	88 1f       	adc	r24, r24
    3f7a:	da f7       	brpl	.-10     	; 0x3f72 <__floatsisf+0x62>
    3f7c:	88 0f       	add	r24, r24
    3f7e:	96 95       	lsr	r25
    3f80:	87 95       	ror	r24
    3f82:	97 f9       	bld	r25, 7
    3f84:	08 95       	ret

00003f86 <__fp_cmp>:
    3f86:	99 0f       	add	r25, r25
    3f88:	00 08       	sbc	r0, r0
    3f8a:	55 0f       	add	r21, r21
    3f8c:	aa 0b       	sbc	r26, r26
    3f8e:	e0 e8       	ldi	r30, 0x80	; 128
    3f90:	fe ef       	ldi	r31, 0xFE	; 254
    3f92:	16 16       	cp	r1, r22
    3f94:	17 06       	cpc	r1, r23
    3f96:	e8 07       	cpc	r30, r24
    3f98:	f9 07       	cpc	r31, r25
    3f9a:	c0 f0       	brcs	.+48     	; 0x3fcc <__fp_cmp+0x46>
    3f9c:	12 16       	cp	r1, r18
    3f9e:	13 06       	cpc	r1, r19
    3fa0:	e4 07       	cpc	r30, r20
    3fa2:	f5 07       	cpc	r31, r21
    3fa4:	98 f0       	brcs	.+38     	; 0x3fcc <__fp_cmp+0x46>
    3fa6:	62 1b       	sub	r22, r18
    3fa8:	73 0b       	sbc	r23, r19
    3faa:	84 0b       	sbc	r24, r20
    3fac:	95 0b       	sbc	r25, r21
    3fae:	39 f4       	brne	.+14     	; 0x3fbe <__fp_cmp+0x38>
    3fb0:	0a 26       	eor	r0, r26
    3fb2:	61 f0       	breq	.+24     	; 0x3fcc <__fp_cmp+0x46>
    3fb4:	23 2b       	or	r18, r19
    3fb6:	24 2b       	or	r18, r20
    3fb8:	25 2b       	or	r18, r21
    3fba:	21 f4       	brne	.+8      	; 0x3fc4 <__fp_cmp+0x3e>
    3fbc:	08 95       	ret
    3fbe:	0a 26       	eor	r0, r26
    3fc0:	09 f4       	brne	.+2      	; 0x3fc4 <__fp_cmp+0x3e>
    3fc2:	a1 40       	sbci	r26, 0x01	; 1
    3fc4:	a6 95       	lsr	r26
    3fc6:	8f ef       	ldi	r24, 0xFF	; 255
    3fc8:	81 1d       	adc	r24, r1
    3fca:	81 1d       	adc	r24, r1
    3fcc:	08 95       	ret

00003fce <__fp_inf>:
    3fce:	97 f9       	bld	r25, 7
    3fd0:	9f 67       	ori	r25, 0x7F	; 127
    3fd2:	80 e8       	ldi	r24, 0x80	; 128
    3fd4:	70 e0       	ldi	r23, 0x00	; 0
    3fd6:	60 e0       	ldi	r22, 0x00	; 0
    3fd8:	08 95       	ret

00003fda <__fp_nan>:
    3fda:	9f ef       	ldi	r25, 0xFF	; 255
    3fdc:	80 ec       	ldi	r24, 0xC0	; 192
    3fde:	08 95       	ret

00003fe0 <__fp_pscA>:
    3fe0:	00 24       	eor	r0, r0
    3fe2:	0a 94       	dec	r0
    3fe4:	16 16       	cp	r1, r22
    3fe6:	17 06       	cpc	r1, r23
    3fe8:	18 06       	cpc	r1, r24
    3fea:	09 06       	cpc	r0, r25
    3fec:	08 95       	ret

00003fee <__fp_pscB>:
    3fee:	00 24       	eor	r0, r0
    3ff0:	0a 94       	dec	r0
    3ff2:	12 16       	cp	r1, r18
    3ff4:	13 06       	cpc	r1, r19
    3ff6:	14 06       	cpc	r1, r20
    3ff8:	05 06       	cpc	r0, r21
    3ffa:	08 95       	ret

00003ffc <__fp_round>:
    3ffc:	09 2e       	mov	r0, r25
    3ffe:	03 94       	inc	r0
    4000:	00 0c       	add	r0, r0
    4002:	11 f4       	brne	.+4      	; 0x4008 <__stack+0x9>
    4004:	88 23       	and	r24, r24
    4006:	52 f0       	brmi	.+20     	; 0x401c <__stack+0x1d>
    4008:	bb 0f       	add	r27, r27
    400a:	40 f4       	brcc	.+16     	; 0x401c <__stack+0x1d>
    400c:	bf 2b       	or	r27, r31
    400e:	11 f4       	brne	.+4      	; 0x4014 <__stack+0x15>
    4010:	60 ff       	sbrs	r22, 0
    4012:	04 c0       	rjmp	.+8      	; 0x401c <__stack+0x1d>
    4014:	6f 5f       	subi	r22, 0xFF	; 255
    4016:	7f 4f       	sbci	r23, 0xFF	; 255
    4018:	8f 4f       	sbci	r24, 0xFF	; 255
    401a:	9f 4f       	sbci	r25, 0xFF	; 255
    401c:	08 95       	ret

0000401e <__fp_split3>:
    401e:	57 fd       	sbrc	r21, 7
    4020:	90 58       	subi	r25, 0x80	; 128
    4022:	44 0f       	add	r20, r20
    4024:	55 1f       	adc	r21, r21
    4026:	59 f0       	breq	.+22     	; 0x403e <__fp_splitA+0x10>
    4028:	5f 3f       	cpi	r21, 0xFF	; 255
    402a:	71 f0       	breq	.+28     	; 0x4048 <__fp_splitA+0x1a>
    402c:	47 95       	ror	r20

0000402e <__fp_splitA>:
    402e:	88 0f       	add	r24, r24
    4030:	97 fb       	bst	r25, 7
    4032:	99 1f       	adc	r25, r25
    4034:	61 f0       	breq	.+24     	; 0x404e <__fp_splitA+0x20>
    4036:	9f 3f       	cpi	r25, 0xFF	; 255
    4038:	79 f0       	breq	.+30     	; 0x4058 <__fp_splitA+0x2a>
    403a:	87 95       	ror	r24
    403c:	08 95       	ret
    403e:	12 16       	cp	r1, r18
    4040:	13 06       	cpc	r1, r19
    4042:	14 06       	cpc	r1, r20
    4044:	55 1f       	adc	r21, r21
    4046:	f2 cf       	rjmp	.-28     	; 0x402c <__fp_split3+0xe>
    4048:	46 95       	lsr	r20
    404a:	f1 df       	rcall	.-30     	; 0x402e <__fp_splitA>
    404c:	08 c0       	rjmp	.+16     	; 0x405e <__fp_splitA+0x30>
    404e:	16 16       	cp	r1, r22
    4050:	17 06       	cpc	r1, r23
    4052:	18 06       	cpc	r1, r24
    4054:	99 1f       	adc	r25, r25
    4056:	f1 cf       	rjmp	.-30     	; 0x403a <__fp_splitA+0xc>
    4058:	86 95       	lsr	r24
    405a:	71 05       	cpc	r23, r1
    405c:	61 05       	cpc	r22, r1
    405e:	08 94       	sec
    4060:	08 95       	ret

00004062 <__fp_zero>:
    4062:	e8 94       	clt

00004064 <__fp_szero>:
    4064:	bb 27       	eor	r27, r27
    4066:	66 27       	eor	r22, r22
    4068:	77 27       	eor	r23, r23
    406a:	cb 01       	movw	r24, r22
    406c:	97 f9       	bld	r25, 7
    406e:	08 95       	ret

00004070 <__gesf2>:
    4070:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <__fp_cmp>
    4074:	08 f4       	brcc	.+2      	; 0x4078 <__gesf2+0x8>
    4076:	8f ef       	ldi	r24, 0xFF	; 255
    4078:	08 95       	ret

0000407a <__mulsf3>:
    407a:	0e 94 50 20 	call	0x40a0	; 0x40a0 <__mulsf3x>
    407e:	0c 94 fe 1f 	jmp	0x3ffc	; 0x3ffc <__fp_round>
    4082:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <__fp_pscA>
    4086:	38 f0       	brcs	.+14     	; 0x4096 <__mulsf3+0x1c>
    4088:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <__fp_pscB>
    408c:	20 f0       	brcs	.+8      	; 0x4096 <__mulsf3+0x1c>
    408e:	95 23       	and	r25, r21
    4090:	11 f0       	breq	.+4      	; 0x4096 <__mulsf3+0x1c>
    4092:	0c 94 e7 1f 	jmp	0x3fce	; 0x3fce <__fp_inf>
    4096:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__fp_nan>
    409a:	11 24       	eor	r1, r1
    409c:	0c 94 32 20 	jmp	0x4064	; 0x4064 <__fp_szero>

000040a0 <__mulsf3x>:
    40a0:	0e 94 0f 20 	call	0x401e	; 0x401e <__fp_split3>
    40a4:	70 f3       	brcs	.-36     	; 0x4082 <__mulsf3+0x8>

000040a6 <__mulsf3_pse>:
    40a6:	95 9f       	mul	r25, r21
    40a8:	c1 f3       	breq	.-16     	; 0x409a <__mulsf3+0x20>
    40aa:	95 0f       	add	r25, r21
    40ac:	50 e0       	ldi	r21, 0x00	; 0
    40ae:	55 1f       	adc	r21, r21
    40b0:	62 9f       	mul	r22, r18
    40b2:	f0 01       	movw	r30, r0
    40b4:	72 9f       	mul	r23, r18
    40b6:	bb 27       	eor	r27, r27
    40b8:	f0 0d       	add	r31, r0
    40ba:	b1 1d       	adc	r27, r1
    40bc:	63 9f       	mul	r22, r19
    40be:	aa 27       	eor	r26, r26
    40c0:	f0 0d       	add	r31, r0
    40c2:	b1 1d       	adc	r27, r1
    40c4:	aa 1f       	adc	r26, r26
    40c6:	64 9f       	mul	r22, r20
    40c8:	66 27       	eor	r22, r22
    40ca:	b0 0d       	add	r27, r0
    40cc:	a1 1d       	adc	r26, r1
    40ce:	66 1f       	adc	r22, r22
    40d0:	82 9f       	mul	r24, r18
    40d2:	22 27       	eor	r18, r18
    40d4:	b0 0d       	add	r27, r0
    40d6:	a1 1d       	adc	r26, r1
    40d8:	62 1f       	adc	r22, r18
    40da:	73 9f       	mul	r23, r19
    40dc:	b0 0d       	add	r27, r0
    40de:	a1 1d       	adc	r26, r1
    40e0:	62 1f       	adc	r22, r18
    40e2:	83 9f       	mul	r24, r19
    40e4:	a0 0d       	add	r26, r0
    40e6:	61 1d       	adc	r22, r1
    40e8:	22 1f       	adc	r18, r18
    40ea:	74 9f       	mul	r23, r20
    40ec:	33 27       	eor	r19, r19
    40ee:	a0 0d       	add	r26, r0
    40f0:	61 1d       	adc	r22, r1
    40f2:	23 1f       	adc	r18, r19
    40f4:	84 9f       	mul	r24, r20
    40f6:	60 0d       	add	r22, r0
    40f8:	21 1d       	adc	r18, r1
    40fa:	82 2f       	mov	r24, r18
    40fc:	76 2f       	mov	r23, r22
    40fe:	6a 2f       	mov	r22, r26
    4100:	11 24       	eor	r1, r1
    4102:	9f 57       	subi	r25, 0x7F	; 127
    4104:	50 40       	sbci	r21, 0x00	; 0
    4106:	9a f0       	brmi	.+38     	; 0x412e <__mulsf3_pse+0x88>
    4108:	f1 f0       	breq	.+60     	; 0x4146 <__mulsf3_pse+0xa0>
    410a:	88 23       	and	r24, r24
    410c:	4a f0       	brmi	.+18     	; 0x4120 <__mulsf3_pse+0x7a>
    410e:	ee 0f       	add	r30, r30
    4110:	ff 1f       	adc	r31, r31
    4112:	bb 1f       	adc	r27, r27
    4114:	66 1f       	adc	r22, r22
    4116:	77 1f       	adc	r23, r23
    4118:	88 1f       	adc	r24, r24
    411a:	91 50       	subi	r25, 0x01	; 1
    411c:	50 40       	sbci	r21, 0x00	; 0
    411e:	a9 f7       	brne	.-22     	; 0x410a <__mulsf3_pse+0x64>
    4120:	9e 3f       	cpi	r25, 0xFE	; 254
    4122:	51 05       	cpc	r21, r1
    4124:	80 f0       	brcs	.+32     	; 0x4146 <__mulsf3_pse+0xa0>
    4126:	0c 94 e7 1f 	jmp	0x3fce	; 0x3fce <__fp_inf>
    412a:	0c 94 32 20 	jmp	0x4064	; 0x4064 <__fp_szero>
    412e:	5f 3f       	cpi	r21, 0xFF	; 255
    4130:	e4 f3       	brlt	.-8      	; 0x412a <__mulsf3_pse+0x84>
    4132:	98 3e       	cpi	r25, 0xE8	; 232
    4134:	d4 f3       	brlt	.-12     	; 0x412a <__mulsf3_pse+0x84>
    4136:	86 95       	lsr	r24
    4138:	77 95       	ror	r23
    413a:	67 95       	ror	r22
    413c:	b7 95       	ror	r27
    413e:	f7 95       	ror	r31
    4140:	e7 95       	ror	r30
    4142:	9f 5f       	subi	r25, 0xFF	; 255
    4144:	c1 f7       	brne	.-16     	; 0x4136 <__mulsf3_pse+0x90>
    4146:	fe 2b       	or	r31, r30
    4148:	88 0f       	add	r24, r24
    414a:	91 1d       	adc	r25, r1
    414c:	96 95       	lsr	r25
    414e:	87 95       	ror	r24
    4150:	97 f9       	bld	r25, 7
    4152:	08 95       	ret

00004154 <__tablejump2__>:
    4154:	ee 0f       	add	r30, r30
    4156:	ff 1f       	adc	r31, r31
    4158:	88 1f       	adc	r24, r24
    415a:	8b bf       	out	0x3b, r24	; 59
    415c:	07 90       	elpm	r0, Z+
    415e:	f6 91       	elpm	r31, Z
    4160:	e0 2d       	mov	r30, r0
    4162:	19 94       	eijmp

00004164 <__umulhisi3>:
    4164:	a2 9f       	mul	r26, r18
    4166:	b0 01       	movw	r22, r0
    4168:	b3 9f       	mul	r27, r19
    416a:	c0 01       	movw	r24, r0
    416c:	a3 9f       	mul	r26, r19
    416e:	70 0d       	add	r23, r0
    4170:	81 1d       	adc	r24, r1
    4172:	11 24       	eor	r1, r1
    4174:	91 1d       	adc	r25, r1
    4176:	b2 9f       	mul	r27, r18
    4178:	70 0d       	add	r23, r0
    417a:	81 1d       	adc	r24, r1
    417c:	11 24       	eor	r1, r1
    417e:	91 1d       	adc	r25, r1
    4180:	08 95       	ret

00004182 <memcpy>:
    4182:	fb 01       	movw	r30, r22
    4184:	dc 01       	movw	r26, r24
    4186:	02 c0       	rjmp	.+4      	; 0x418c <memcpy+0xa>
    4188:	01 90       	ld	r0, Z+
    418a:	0d 92       	st	X+, r0
    418c:	41 50       	subi	r20, 0x01	; 1
    418e:	50 40       	sbci	r21, 0x00	; 0
    4190:	d8 f7       	brcc	.-10     	; 0x4188 <memcpy+0x6>
    4192:	08 95       	ret

00004194 <memset>:
    4194:	dc 01       	movw	r26, r24
    4196:	01 c0       	rjmp	.+2      	; 0x419a <memset+0x6>
    4198:	6d 93       	st	X+, r22
    419a:	41 50       	subi	r20, 0x01	; 1
    419c:	50 40       	sbci	r21, 0x00	; 0
    419e:	e0 f7       	brcc	.-8      	; 0x4198 <memset+0x4>
    41a0:	08 95       	ret

000041a2 <strncpy>:
    41a2:	fb 01       	movw	r30, r22
    41a4:	dc 01       	movw	r26, r24
    41a6:	41 50       	subi	r20, 0x01	; 1
    41a8:	50 40       	sbci	r21, 0x00	; 0
    41aa:	48 f0       	brcs	.+18     	; 0x41be <strncpy+0x1c>
    41ac:	01 90       	ld	r0, Z+
    41ae:	0d 92       	st	X+, r0
    41b0:	00 20       	and	r0, r0
    41b2:	c9 f7       	brne	.-14     	; 0x41a6 <strncpy+0x4>
    41b4:	01 c0       	rjmp	.+2      	; 0x41b8 <strncpy+0x16>
    41b6:	1d 92       	st	X+, r1
    41b8:	41 50       	subi	r20, 0x01	; 1
    41ba:	50 40       	sbci	r21, 0x00	; 0
    41bc:	e0 f7       	brcc	.-8      	; 0x41b6 <strncpy+0x14>
    41be:	08 95       	ret

000041c0 <__itoa_ncheck>:
    41c0:	bb 27       	eor	r27, r27
    41c2:	4a 30       	cpi	r20, 0x0A	; 10
    41c4:	31 f4       	brne	.+12     	; 0x41d2 <__itoa_ncheck+0x12>
    41c6:	99 23       	and	r25, r25
    41c8:	22 f4       	brpl	.+8      	; 0x41d2 <__itoa_ncheck+0x12>
    41ca:	bd e2       	ldi	r27, 0x2D	; 45
    41cc:	90 95       	com	r25
    41ce:	81 95       	neg	r24
    41d0:	9f 4f       	sbci	r25, 0xFF	; 255
    41d2:	0c 94 ec 20 	jmp	0x41d8	; 0x41d8 <__utoa_common>

000041d6 <__utoa_ncheck>:
    41d6:	bb 27       	eor	r27, r27

000041d8 <__utoa_common>:
    41d8:	fb 01       	movw	r30, r22
    41da:	55 27       	eor	r21, r21
    41dc:	aa 27       	eor	r26, r26
    41de:	88 0f       	add	r24, r24
    41e0:	99 1f       	adc	r25, r25
    41e2:	aa 1f       	adc	r26, r26
    41e4:	a4 17       	cp	r26, r20
    41e6:	10 f0       	brcs	.+4      	; 0x41ec <__utoa_common+0x14>
    41e8:	a4 1b       	sub	r26, r20
    41ea:	83 95       	inc	r24
    41ec:	50 51       	subi	r21, 0x10	; 16
    41ee:	b9 f7       	brne	.-18     	; 0x41de <__utoa_common+0x6>
    41f0:	a0 5d       	subi	r26, 0xD0	; 208
    41f2:	aa 33       	cpi	r26, 0x3A	; 58
    41f4:	08 f0       	brcs	.+2      	; 0x41f8 <__utoa_common+0x20>
    41f6:	a9 5d       	subi	r26, 0xD9	; 217
    41f8:	a1 93       	st	Z+, r26
    41fa:	00 97       	sbiw	r24, 0x00	; 0
    41fc:	79 f7       	brne	.-34     	; 0x41dc <__utoa_common+0x4>
    41fe:	b1 11       	cpse	r27, r1
    4200:	b1 93       	st	Z+, r27
    4202:	11 92       	st	Z+, r1
    4204:	cb 01       	movw	r24, r22
    4206:	0c 94 05 21 	jmp	0x420a	; 0x420a <strrev>

0000420a <strrev>:
    420a:	dc 01       	movw	r26, r24
    420c:	fc 01       	movw	r30, r24
    420e:	67 2f       	mov	r22, r23
    4210:	71 91       	ld	r23, Z+
    4212:	77 23       	and	r23, r23
    4214:	e1 f7       	brne	.-8      	; 0x420e <strrev+0x4>
    4216:	32 97       	sbiw	r30, 0x02	; 2
    4218:	04 c0       	rjmp	.+8      	; 0x4222 <strrev+0x18>
    421a:	7c 91       	ld	r23, X
    421c:	6d 93       	st	X+, r22
    421e:	70 83       	st	Z, r23
    4220:	62 91       	ld	r22, -Z
    4222:	ae 17       	cp	r26, r30
    4224:	bf 07       	cpc	r27, r31
    4226:	c8 f3       	brcs	.-14     	; 0x421a <strrev+0x10>
    4228:	08 95       	ret

0000422a <_exit>:
    422a:	f8 94       	cli

0000422c <__stop_program>:
    422c:	ff cf       	rjmp	.-2      	; 0x422c <__stop_program>
