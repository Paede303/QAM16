
QAMGen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006a22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00802000  00006a22  00006ab6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000d91  00802142  00802142  00006bf8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006bf8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006c28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000878  00000000  00000000  00006c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cafb  00000000  00000000  000074e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000048ce  00000000  00000000  00013fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005f72  00000000  00000000  000188a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002178  00000000  00000000  0001e81c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007135  00000000  00000000  00020994  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000470b  00000000  00000000  00027ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000780  00000000  00000000  0002c1d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 20 01 	jmp	0x240	; 0x240 <__ctors_end>
       4:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
       8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
       c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      10:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      14:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      18:	0c 94 a9 2f 	jmp	0x5f52	; 0x5f52 <__vector_6>
      1c:	0c 94 e7 2f 	jmp	0x5fce	; 0x5fce <__vector_7>
      20:	0c 94 25 30 	jmp	0x604a	; 0x604a <__vector_8>
      24:	0c 94 63 30 	jmp	0x60c6	; 0x60c6 <__vector_9>
      28:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      2c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      30:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      34:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      38:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__vector_14>
      3c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      40:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      44:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      48:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      4c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      50:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      54:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      58:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      5c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      60:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      64:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      68:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      6c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      70:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      74:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      78:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      7c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      80:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      84:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      88:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      8c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      90:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      94:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      98:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      9c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      a0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      a4:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      a8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      ac:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      b0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      b4:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      b8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      bc:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      c0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      c4:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      c8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      cc:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      d0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      d4:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      d8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      dc:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      e0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      e4:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      e8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      ec:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      f0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      f4:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      f8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      fc:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     100:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     104:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     108:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     10c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     110:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     114:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     118:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     11c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     120:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     124:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     128:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     12c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     130:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     134:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     138:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     13c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     140:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     144:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     148:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     14c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     150:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     154:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     158:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     15c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     160:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     164:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     168:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     16c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     170:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     174:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     178:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     17c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     180:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     184:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     188:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     18c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     190:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     194:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     198:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     19c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1a0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1a4:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1a8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1ac:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1b0:	0c 94 9a 23 	jmp	0x4734	; 0x4734 <__vector_108>
     1b4:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1b8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1bc:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1c0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1c4:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1c8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1cc:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1d0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1d4:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1d8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1dc:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1e0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1e4:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1e8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1ec:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1f0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1f4:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1f8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
     1fc:	1f 1f       	adc	r17, r31
     1fe:	1f 1f       	adc	r17, r31
     200:	1f 1f       	adc	r17, r31
     202:	a6 1f       	adc	r26, r22
     204:	72 1f       	adc	r23, r18
     206:	a0 1f       	adc	r26, r16
     208:	1f 1f       	adc	r17, r31
     20a:	1f 1f       	adc	r17, r31
     20c:	a6 1f       	adc	r26, r22
     20e:	72 1f       	adc	r23, r18

00000210 <__trampolines_start>:
     210:	0c 94 c8 30 	jmp	0x6190	; 0x6190 <vsendFrame>
     214:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <prvProcessReceivedCommands+0x1d0>
     218:	0c 94 b4 21 	jmp	0x4368	; 0x4368 <vSteuertask>
     21c:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <prvIdleTask>
     220:	0c 94 a0 2e 	jmp	0x5d40	; 0x5d40 <vQuamGen>
     224:	0c 94 a6 1f 	jmp	0x3f4c	; 0x3f4c <prvProcessReceivedCommands+0x1dc>
     228:	0c 94 01 1d 	jmp	0x3a02	; 0x3a02 <prvTimerTask>
     22c:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <vEventGroupSetBitsCallback>
     230:	0c 94 72 1f 	jmp	0x3ee4	; 0x3ee4 <prvProcessReceivedCommands+0x174>
     234:	0c 94 3d 23 	jmp	0x467a	; 0x467a <vButtonTask>
     238:	0c 94 2d 26 	jmp	0x4c5a	; 0x4c5a <vDisplayUpdateTask>
     23c:	0c 94 1f 1f 	jmp	0x3e3e	; 0x3e3e <prvProcessReceivedCommands+0xce>

00000240 <__ctors_end>:
     240:	11 24       	eor	r1, r1
     242:	1f be       	out	0x3f, r1	; 63
     244:	cf ef       	ldi	r28, 0xFF	; 255
     246:	cd bf       	out	0x3d, r28	; 61
     248:	df e3       	ldi	r29, 0x3F	; 63
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	00 e0       	ldi	r16, 0x00	; 0
     24e:	0c bf       	out	0x3c, r16	; 60

00000250 <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     250:	e3 ed       	ldi	r30, 0xD3	; 211
     252:	fe e2       	ldi	r31, 0x2E	; 46
     254:	8a ea       	ldi	r24, 0xAA	; 170
     256:	90 e4       	ldi	r25, 0x40	; 64
     258:	81 93       	st	Z+, r24
     25a:	e0 30       	cpi	r30, 0x00	; 0
     25c:	f9 07       	cpc	r31, r25
     25e:	e0 f3       	brcs	.-8      	; 0x258 <init_mem+0x8>
	...

00000262 <__do_copy_data>:
     262:	11 e2       	ldi	r17, 0x21	; 33
     264:	a0 e0       	ldi	r26, 0x00	; 0
     266:	b0 e2       	ldi	r27, 0x20	; 32
     268:	e2 e2       	ldi	r30, 0x22	; 34
     26a:	fa e6       	ldi	r31, 0x6A	; 106
     26c:	00 e0       	ldi	r16, 0x00	; 0
     26e:	0b bf       	out	0x3b, r16	; 59
     270:	02 c0       	rjmp	.+4      	; 0x276 <__do_copy_data+0x14>
     272:	07 90       	elpm	r0, Z+
     274:	0d 92       	st	X+, r0
     276:	a2 34       	cpi	r26, 0x42	; 66
     278:	b1 07       	cpc	r27, r17
     27a:	d9 f7       	brne	.-10     	; 0x272 <__do_copy_data+0x10>

0000027c <__do_clear_bss>:
     27c:	2e e2       	ldi	r18, 0x2E	; 46
     27e:	a2 e4       	ldi	r26, 0x42	; 66
     280:	b1 e2       	ldi	r27, 0x21	; 33
     282:	01 c0       	rjmp	.+2      	; 0x286 <.do_clear_bss_start>

00000284 <.do_clear_bss_loop>:
     284:	1d 92       	st	X+, r1

00000286 <.do_clear_bss_start>:
     286:	a3 3d       	cpi	r26, 0xD3	; 211
     288:	b2 07       	cpc	r27, r18
     28a:	e1 f7       	brne	.-8      	; 0x284 <.do_clear_bss_loop>
     28c:	0e 94 51 21 	call	0x42a2	; 0x42a2 <main>
     290:	0c 94 0f 35 	jmp	0x6a1e	; 0x6a1e <_exit>

00000294 <__bad_interrupt>:
     294:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000298 <initButtons>:
 #define BUTTON_PRESS_SHORT			100
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRCLR = PIN4_bm; //SW1
     2a0:	80 ea       	ldi	r24, 0xA0	; 160
     2a2:	96 e0       	ldi	r25, 0x06	; 6
     2a4:	20 e1       	ldi	r18, 0x10	; 16
     2a6:	fc 01       	movw	r30, r24
     2a8:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     2aa:	80 ea       	ldi	r24, 0xA0	; 160
     2ac:	96 e0       	ldi	r25, 0x06	; 6
     2ae:	20 e2       	ldi	r18, 0x20	; 32
     2b0:	fc 01       	movw	r30, r24
     2b2:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     2b4:	80 ea       	ldi	r24, 0xA0	; 160
     2b6:	96 e0       	ldi	r25, 0x06	; 6
     2b8:	20 e4       	ldi	r18, 0x40	; 64
     2ba:	fc 01       	movw	r30, r24
     2bc:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     2be:	80 ea       	ldi	r24, 0xA0	; 160
     2c0:	96 e0       	ldi	r25, 0x06	; 6
     2c2:	20 e8       	ldi	r18, 0x80	; 128
     2c4:	fc 01       	movw	r30, r24
     2c6:	22 83       	std	Z+2, r18	; 0x02
 }
     2c8:	00 00       	nop
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	08 95       	ret

000002d0 <updateButtons>:
 button_press_t b1Status;
 button_press_t b2Status;
 button_press_t b3Status;
 button_press_t b4Status;

 void updateButtons(void) {
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     2d8:	80 ea       	ldi	r24, 0xA0	; 160
     2da:	96 e0       	ldi	r25, 0x06	; 6
     2dc:	fc 01       	movw	r30, r24
     2de:	80 85       	ldd	r24, Z+8	; 0x08
     2e0:	88 2f       	mov	r24, r24
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	80 71       	andi	r24, 0x10	; 16
     2e6:	99 27       	eor	r25, r25
     2e8:	95 95       	asr	r25
     2ea:	87 95       	ror	r24
     2ec:	95 95       	asr	r25
     2ee:	87 95       	ror	r24
     2f0:	95 95       	asr	r25
     2f2:	87 95       	ror	r24
     2f4:	95 95       	asr	r25
     2f6:	87 95       	ror	r24
     2f8:	89 2b       	or	r24, r25
     2fa:	89 f4       	brne	.+34     	; 0x31e <updateButtons+0x4e>
		if(b1Count < 60000) {
     2fc:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <__data_end>
     300:	90 91 43 21 	lds	r25, 0x2143	; 0x802143 <__data_end+0x1>
     304:	80 36       	cpi	r24, 0x60	; 96
     306:	9a 4e       	sbci	r25, 0xEA	; 234
     308:	20 f5       	brcc	.+72     	; 0x352 <updateButtons+0x82>
			b1Count++;
     30a:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <__data_end>
     30e:	90 91 43 21 	lds	r25, 0x2143	; 0x802143 <__data_end+0x1>
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	80 93 42 21 	sts	0x2142, r24	; 0x802142 <__data_end>
     318:	90 93 43 21 	sts	0x2143, r25	; 0x802143 <__data_end+0x1>
     31c:	1a c0       	rjmp	.+52     	; 0x352 <updateButtons+0x82>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     31e:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <__data_end>
     322:	90 91 43 21 	lds	r25, 0x2143	; 0x802143 <__data_end+0x1>
     326:	0b 97       	sbiw	r24, 0x0b	; 11
     328:	68 f0       	brcs	.+26     	; 0x344 <updateButtons+0x74>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     32a:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <__data_end>
     32e:	90 91 43 21 	lds	r25, 0x2143	; 0x802143 <__data_end+0x1>
     332:	c3 97       	sbiw	r24, 0x33	; 51
     334:	18 f0       	brcs	.+6      	; 0x33c <updateButtons+0x6c>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     336:	10 92 be 2e 	sts	0x2EBE, r1	; 0x802ebe <b1Status>
     33a:	07 c0       	rjmp	.+14     	; 0x34a <updateButtons+0x7a>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	80 93 be 2e 	sts	0x2EBE, r24	; 0x802ebe <b1Status>
     342:	03 c0       	rjmp	.+6      	; 0x34a <updateButtons+0x7a>
			}
		} else {
			b1Status = NOT_PRESSED;
     344:	82 e0       	ldi	r24, 0x02	; 2
     346:	80 93 be 2e 	sts	0x2EBE, r24	; 0x802ebe <b1Status>
		}
		b1Count = 0;
     34a:	10 92 42 21 	sts	0x2142, r1	; 0x802142 <__data_end>
     34e:	10 92 43 21 	sts	0x2143, r1	; 0x802143 <__data_end+0x1>
	}
	if(Button2_Value == 0) {
     352:	80 ea       	ldi	r24, 0xA0	; 160
     354:	96 e0       	ldi	r25, 0x06	; 6
     356:	fc 01       	movw	r30, r24
     358:	80 85       	ldd	r24, Z+8	; 0x08
     35a:	88 2f       	mov	r24, r24
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	80 72       	andi	r24, 0x20	; 32
     360:	99 27       	eor	r25, r25
     362:	95 95       	asr	r25
     364:	87 95       	ror	r24
     366:	95 95       	asr	r25
     368:	87 95       	ror	r24
     36a:	95 95       	asr	r25
     36c:	87 95       	ror	r24
     36e:	95 95       	asr	r25
     370:	87 95       	ror	r24
     372:	95 95       	asr	r25
     374:	87 95       	ror	r24
     376:	89 2b       	or	r24, r25
     378:	89 f4       	brne	.+34     	; 0x39c <updateButtons+0xcc>
		if(b2Count < 60000) {
     37a:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <b2Count.3830>
     37e:	90 91 45 21 	lds	r25, 0x2145	; 0x802145 <b2Count.3830+0x1>
     382:	80 36       	cpi	r24, 0x60	; 96
     384:	9a 4e       	sbci	r25, 0xEA	; 234
     386:	20 f5       	brcc	.+72     	; 0x3d0 <updateButtons+0x100>
			b2Count++;
     388:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <b2Count.3830>
     38c:	90 91 45 21 	lds	r25, 0x2145	; 0x802145 <b2Count.3830+0x1>
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	80 93 44 21 	sts	0x2144, r24	; 0x802144 <b2Count.3830>
     396:	90 93 45 21 	sts	0x2145, r25	; 0x802145 <b2Count.3830+0x1>
     39a:	1a c0       	rjmp	.+52     	; 0x3d0 <updateButtons+0x100>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     39c:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <b2Count.3830>
     3a0:	90 91 45 21 	lds	r25, 0x2145	; 0x802145 <b2Count.3830+0x1>
     3a4:	0b 97       	sbiw	r24, 0x0b	; 11
     3a6:	68 f0       	brcs	.+26     	; 0x3c2 <updateButtons+0xf2>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3a8:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <b2Count.3830>
     3ac:	90 91 45 21 	lds	r25, 0x2145	; 0x802145 <b2Count.3830+0x1>
     3b0:	c3 97       	sbiw	r24, 0x33	; 51
     3b2:	18 f0       	brcs	.+6      	; 0x3ba <updateButtons+0xea>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     3b4:	10 92 bf 2e 	sts	0x2EBF, r1	; 0x802ebf <b2Status>
     3b8:	07 c0       	rjmp	.+14     	; 0x3c8 <updateButtons+0xf8>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	80 93 bf 2e 	sts	0x2EBF, r24	; 0x802ebf <b2Status>
     3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <updateButtons+0xf8>
			}
		} else {
			b2Status = NOT_PRESSED;			
     3c2:	82 e0       	ldi	r24, 0x02	; 2
     3c4:	80 93 bf 2e 	sts	0x2EBF, r24	; 0x802ebf <b2Status>
		}
		b2Count = 0;
     3c8:	10 92 44 21 	sts	0x2144, r1	; 0x802144 <b2Count.3830>
     3cc:	10 92 45 21 	sts	0x2145, r1	; 0x802145 <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     3d0:	80 ea       	ldi	r24, 0xA0	; 160
     3d2:	96 e0       	ldi	r25, 0x06	; 6
     3d4:	fc 01       	movw	r30, r24
     3d6:	80 85       	ldd	r24, Z+8	; 0x08
     3d8:	88 2f       	mov	r24, r24
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	80 74       	andi	r24, 0x40	; 64
     3de:	99 27       	eor	r25, r25
     3e0:	08 2e       	mov	r0, r24
     3e2:	89 2f       	mov	r24, r25
     3e4:	00 0c       	add	r0, r0
     3e6:	88 1f       	adc	r24, r24
     3e8:	99 0b       	sbc	r25, r25
     3ea:	00 0c       	add	r0, r0
     3ec:	88 1f       	adc	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	89 2b       	or	r24, r25
     3f2:	89 f4       	brne	.+34     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		if(b3Count < 60000) {
     3f4:	80 91 46 21 	lds	r24, 0x2146	; 0x802146 <b3Count.3831>
     3f8:	90 91 47 21 	lds	r25, 0x2147	; 0x802147 <b3Count.3831+0x1>
     3fc:	80 36       	cpi	r24, 0x60	; 96
     3fe:	9a 4e       	sbci	r25, 0xEA	; 234
     400:	20 f5       	brcc	.+72     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			b3Count++;
     402:	80 91 46 21 	lds	r24, 0x2146	; 0x802146 <b3Count.3831>
     406:	90 91 47 21 	lds	r25, 0x2147	; 0x802147 <b3Count.3831+0x1>
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	80 93 46 21 	sts	0x2146, r24	; 0x802146 <b3Count.3831>
     410:	90 93 47 21 	sts	0x2147, r25	; 0x802147 <b3Count.3831+0x1>
     414:	1a c0       	rjmp	.+52     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     416:	80 91 46 21 	lds	r24, 0x2146	; 0x802146 <b3Count.3831>
     41a:	90 91 47 21 	lds	r25, 0x2147	; 0x802147 <b3Count.3831+0x1>
     41e:	0b 97       	sbiw	r24, 0x0b	; 11
     420:	68 f0       	brcs	.+26     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     422:	80 91 46 21 	lds	r24, 0x2146	; 0x802146 <b3Count.3831>
     426:	90 91 47 21 	lds	r25, 0x2147	; 0x802147 <b3Count.3831+0x1>
     42a:	c3 97       	sbiw	r24, 0x33	; 51
     42c:	18 f0       	brcs	.+6      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     42e:	10 92 c0 2e 	sts	0x2EC0, r1	; 0x802ec0 <b3Status>
     432:	07 c0       	rjmp	.+14     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	80 93 c0 2e 	sts	0x2EC0, r24	; 0x802ec0 <b3Status>
     43a:	03 c0       	rjmp	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			}
		} else {
			b3Status = NOT_PRESSED;
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	80 93 c0 2e 	sts	0x2EC0, r24	; 0x802ec0 <b3Status>
		}
		b3Count = 0;
     442:	10 92 46 21 	sts	0x2146, r1	; 0x802146 <b3Count.3831>
     446:	10 92 47 21 	sts	0x2147, r1	; 0x802147 <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     44a:	80 ea       	ldi	r24, 0xA0	; 160
     44c:	96 e0       	ldi	r25, 0x06	; 6
     44e:	fc 01       	movw	r30, r24
     450:	80 85       	ldd	r24, Z+8	; 0x08
     452:	88 23       	and	r24, r24
     454:	8c f0       	brlt	.+34     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
		if(b4Count < 60000) {
     456:	80 91 48 21 	lds	r24, 0x2148	; 0x802148 <b4Count.3832>
     45a:	90 91 49 21 	lds	r25, 0x2149	; 0x802149 <b4Count.3832+0x1>
     45e:	80 36       	cpi	r24, 0x60	; 96
     460:	9a 4e       	sbci	r25, 0xEA	; 234
     462:	20 f5       	brcc	.+72     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
			b4Count++;
     464:	80 91 48 21 	lds	r24, 0x2148	; 0x802148 <b4Count.3832>
     468:	90 91 49 21 	lds	r25, 0x2149	; 0x802149 <b4Count.3832+0x1>
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	80 93 48 21 	sts	0x2148, r24	; 0x802148 <b4Count.3832>
     472:	90 93 49 21 	sts	0x2149, r25	; 0x802149 <b4Count.3832+0x1>
		} else {
			b4Status = NOT_PRESSED;
		}
		b4Count = 0;
	}
 }
     476:	1a c0       	rjmp	.+52     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
	if(Button4_Value == 0) {
		if(b4Count < 60000) {
			b4Count++;
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     478:	80 91 48 21 	lds	r24, 0x2148	; 0x802148 <b4Count.3832>
     47c:	90 91 49 21 	lds	r25, 0x2149	; 0x802149 <b4Count.3832+0x1>
     480:	0b 97       	sbiw	r24, 0x0b	; 11
     482:	68 f0       	brcs	.+26     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     484:	80 91 48 21 	lds	r24, 0x2148	; 0x802148 <b4Count.3832>
     488:	90 91 49 21 	lds	r25, 0x2149	; 0x802149 <b4Count.3832+0x1>
     48c:	c3 97       	sbiw	r24, 0x33	; 51
     48e:	18 f0       	brcs	.+6      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     490:	10 92 c1 2e 	sts	0x2EC1, r1	; 0x802ec1 <b4Status>
     494:	07 c0       	rjmp	.+14     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	80 93 c1 2e 	sts	0x2EC1, r24	; 0x802ec1 <b4Status>
     49c:	03 c0       	rjmp	.+6      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
			}
		} else {
			b4Status = NOT_PRESSED;
     49e:	82 e0       	ldi	r24, 0x02	; 2
     4a0:	80 93 c1 2e 	sts	0x2EC1, r24	; 0x802ec1 <b4Status>
		}
		b4Count = 0;
     4a4:	10 92 48 21 	sts	0x2148, r1	; 0x802148 <b4Count.3832>
     4a8:	10 92 49 21 	sts	0x2149, r1	; 0x802149 <b4Count.3832+0x1>
	}
 }
     4ac:	00 00       	nop
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	08 95       	ret

000004b4 <getButtonPress>:

 button_press_t getButtonPress(button_t button) {
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	1f 92       	push	r1
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
     4be:	89 83       	std	Y+1, r24	; 0x01
	switch(button) {
     4c0:	89 81       	ldd	r24, Y+1	; 0x01
     4c2:	88 2f       	mov	r24, r24
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	81 30       	cpi	r24, 0x01	; 1
     4c8:	91 05       	cpc	r25, r1
     4ca:	79 f0       	breq	.+30     	; 0x4ea <getButtonPress+0x36>
     4cc:	82 30       	cpi	r24, 0x02	; 2
     4ce:	91 05       	cpc	r25, r1
     4d0:	1c f4       	brge	.+6      	; 0x4d8 <getButtonPress+0x24>
     4d2:	89 2b       	or	r24, r25
     4d4:	39 f0       	breq	.+14     	; 0x4e4 <getButtonPress+0x30>
     4d6:	12 c0       	rjmp	.+36     	; 0x4fc <getButtonPress+0x48>
     4d8:	82 30       	cpi	r24, 0x02	; 2
     4da:	91 05       	cpc	r25, r1
     4dc:	49 f0       	breq	.+18     	; 0x4f0 <getButtonPress+0x3c>
     4de:	03 97       	sbiw	r24, 0x03	; 3
     4e0:	51 f0       	breq	.+20     	; 0x4f6 <getButtonPress+0x42>
     4e2:	0c c0       	rjmp	.+24     	; 0x4fc <getButtonPress+0x48>
		case BUTTON1:
			return b1Status;
     4e4:	80 91 be 2e 	lds	r24, 0x2EBE	; 0x802ebe <b1Status>
     4e8:	0a c0       	rjmp	.+20     	; 0x4fe <getButtonPress+0x4a>
		break;
		case BUTTON2:
			return b2Status;
     4ea:	80 91 bf 2e 	lds	r24, 0x2EBF	; 0x802ebf <b2Status>
     4ee:	07 c0       	rjmp	.+14     	; 0x4fe <getButtonPress+0x4a>
		break;
		case BUTTON3:
			return b3Status;
     4f0:	80 91 c0 2e 	lds	r24, 0x2EC0	; 0x802ec0 <b3Status>
     4f4:	04 c0       	rjmp	.+8      	; 0x4fe <getButtonPress+0x4a>
		break;
		case BUTTON4:
			return b4Status;
     4f6:	80 91 c1 2e 	lds	r24, 0x2EC1	; 0x802ec1 <b4Status>
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <getButtonPress+0x4a>
		break;
	}
	return NOT_PRESSED;
     4fc:	82 e0       	ldi	r24, 0x02	; 2
     4fe:	0f 90       	pop	r0
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	08 95       	ret

00000506 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     506:	0f 93       	push	r16
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	00 d0       	rcall	.+0      	; 0x50e <CCPWrite+0x8>
     50e:	00 d0       	rcall	.+0      	; 0x510 <CCPWrite+0xa>
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
     514:	8c 83       	std	Y+4, r24	; 0x04
     516:	9d 83       	std	Y+5, r25	; 0x05
     518:	6e 83       	std	Y+6, r22	; 0x06

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     51a:	8f e3       	ldi	r24, 0x3F	; 63
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	fc 01       	movw	r30, r24
     520:	80 81       	ld	r24, Z
     522:	8b 83       	std	Y+3, r24	; 0x03
     524:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
     526:	8c 81       	ldd	r24, Y+4	; 0x04
     528:	9d 81       	ldd	r25, Y+5	; 0x05
     52a:	89 83       	std	Y+1, r24	; 0x01
     52c:	9a 83       	std	Y+2, r25	; 0x02
#ifdef RAMPZ
	RAMPZ = 0;
     52e:	8b e3       	ldi	r24, 0x3B	; 59
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	fc 01       	movw	r30, r24
     534:	10 82       	st	Z, r1
#endif
	asm volatile(
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	9a 81       	ldd	r25, Y+2	; 0x02
     53a:	2e 81       	ldd	r18, Y+6	; 0x06
     53c:	fc 01       	movw	r30, r24
     53e:	08 ed       	ldi	r16, 0xD8	; 216
     540:	04 bf       	out	0x34, r16	; 52
     542:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     544:	8f e3       	ldi	r24, 0x3F	; 63
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	2b 81       	ldd	r18, Y+3	; 0x03
     54a:	fc 01       	movw	r30, r24
     54c:	20 83       	st	Z, r18
#endif
}
     54e:	00 00       	nop
     550:	26 96       	adiw	r28, 0x06	; 6
     552:	cd bf       	out	0x3d, r28	; 61
     554:	de bf       	out	0x3e, r29	; 62
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	0f 91       	pop	r16
     55c:	08 95       	ret

0000055e <CLKSYS_XOSC_Config>:
 *                             external clock) and startup times.
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	00 d0       	rcall	.+0      	; 0x564 <CLKSYS_XOSC_Config+0x6>
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	89 83       	std	Y+1, r24	; 0x01
     56a:	6a 83       	std	Y+2, r22	; 0x02
     56c:	4b 83       	std	Y+3, r20	; 0x03
	OSC.XOSCCTRL = (uint8_t) freqRange |
     56e:	80 e5       	ldi	r24, 0x50	; 80
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	2a 81       	ldd	r18, Y+2	; 0x02
     574:	22 23       	and	r18, r18
     576:	11 f0       	breq	.+4      	; 0x57c <CLKSYS_XOSC_Config+0x1e>
     578:	20 e2       	ldi	r18, 0x20	; 32
     57a:	01 c0       	rjmp	.+2      	; 0x57e <CLKSYS_XOSC_Config+0x20>
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	39 81       	ldd	r19, Y+1	; 0x01
     580:	32 2b       	or	r19, r18
     582:	2b 81       	ldd	r18, Y+3	; 0x03
     584:	23 2b       	or	r18, r19
     586:	fc 01       	movw	r30, r24
     588:	22 83       	std	Z+2, r18	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
     58a:	00 00       	nop
     58c:	23 96       	adiw	r28, 0x03	; 3
     58e:	cd bf       	out	0x3d, r28	; 61
     590:	de bf       	out	0x3e, r29	; 62
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	08 95       	ret

00000598 <CLKSYS_PLL_Config>:
 *                      must be above 0.4MHz.
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	1f 92       	push	r1
     59e:	1f 92       	push	r1
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
     5a4:	89 83       	std	Y+1, r24	; 0x01
     5a6:	6a 83       	std	Y+2, r22	; 0x02
	factor &= OSC_PLLFAC_gm;
     5a8:	8a 81       	ldd	r24, Y+2	; 0x02
     5aa:	8f 71       	andi	r24, 0x1F	; 31
     5ac:	8a 83       	std	Y+2, r24	; 0x02
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     5ae:	80 e5       	ldi	r24, 0x50	; 80
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	39 81       	ldd	r19, Y+1	; 0x01
     5b4:	2a 81       	ldd	r18, Y+2	; 0x02
     5b6:	23 2b       	or	r18, r19
     5b8:	fc 01       	movw	r30, r24
     5ba:	25 83       	std	Z+5, r18	; 0x05
}
     5bc:	00 00       	nop
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	08 95       	ret

000005c8 <CLKSYS_Disable>:
 *                 OSC_XOSCEN_bm, OSC_PLLEN_bm.
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	1f 92       	push	r1
     5ce:	1f 92       	push	r1
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
     5d4:	8a 83       	std	Y+2, r24	; 0x02
	OSC.CTRL &= ~oscSel;
     5d6:	80 e5       	ldi	r24, 0x50	; 80
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	20 e5       	ldi	r18, 0x50	; 80
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	f9 01       	movw	r30, r18
     5e0:	20 81       	ld	r18, Z
     5e2:	32 2f       	mov	r19, r18
     5e4:	2a 81       	ldd	r18, Y+2	; 0x02
     5e6:	20 95       	com	r18
     5e8:	23 23       	and	r18, r19
     5ea:	fc 01       	movw	r30, r24
     5ec:	20 83       	st	Z, r18
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     5ee:	80 e5       	ldi	r24, 0x50	; 80
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	fc 01       	movw	r30, r24
     5f4:	90 81       	ld	r25, Z
     5f6:	8a 81       	ldd	r24, Y+2	; 0x02
     5f8:	89 23       	and	r24, r25
     5fa:	89 83       	std	Y+1, r24	; 0x01
	return clkEnabled;
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
}
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	08 95       	ret

00000608 <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	00 d0       	rcall	.+0      	; 0x60e <CLKSYS_Prescalers_Config+0x6>
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
     612:	8a 83       	std	Y+2, r24	; 0x02
     614:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     616:	9a 81       	ldd	r25, Y+2	; 0x02
     618:	8b 81       	ldd	r24, Y+3	; 0x03
     61a:	89 2b       	or	r24, r25
     61c:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.PSCTRL, PSconfig );
     61e:	69 81       	ldd	r22, Y+1	; 0x01
     620:	81 e4       	ldi	r24, 0x41	; 65
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 83 02 	call	0x506	; 0x506 <CCPWrite>
}
     628:	00 00       	nop
     62a:	23 96       	adiw	r28, 0x03	; 3
     62c:	cd bf       	out	0x3d, r28	; 61
     62e:	de bf       	out	0x3e, r29	; 62
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	08 95       	ret

00000636 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	1f 92       	push	r1
     63c:	1f 92       	push	r1
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
     642:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     644:	80 e4       	ldi	r24, 0x40	; 64
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	fc 01       	movw	r30, r24
     64a:	80 81       	ld	r24, Z
     64c:	98 2f       	mov	r25, r24
     64e:	98 7f       	andi	r25, 0xF8	; 248
     650:	8a 81       	ldd	r24, Y+2	; 0x02
     652:	89 2b       	or	r24, r25
     654:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.CTRL, clkCtrl );
     656:	69 81       	ldd	r22, Y+1	; 0x01
     658:	80 e4       	ldi	r24, 0x40	; 64
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 83 02 	call	0x506	; 0x506 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     660:	80 e4       	ldi	r24, 0x40	; 64
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	fc 01       	movw	r30, r24
     666:	90 81       	ld	r25, Z
     668:	8a 81       	ldd	r24, Y+2	; 0x02
     66a:	89 23       	and	r24, r25
     66c:	89 83       	std	Y+1, r24	; 0x01
	return clkCtrl;
     66e:	89 81       	ldd	r24, Y+1	; 0x01
}
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	08 95       	ret

0000067a <TC0_ConfigClockSource>:
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
}
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	00 d0       	rcall	.+0      	; 0x680 <TC0_ConfigClockSource+0x6>
     680:	cd b7       	in	r28, 0x3d	; 61
     682:	de b7       	in	r29, 0x3e	; 62
     684:	89 83       	std	Y+1, r24	; 0x01
     686:	9a 83       	std	Y+2, r25	; 0x02
     688:	6b 83       	std	Y+3, r22	; 0x03
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	9a 81       	ldd	r25, Y+2	; 0x02
     68e:	fc 01       	movw	r30, r24
     690:	80 81       	ld	r24, Z
     692:	98 2f       	mov	r25, r24
     694:	90 7f       	andi	r25, 0xF0	; 240
     696:	8b 81       	ldd	r24, Y+3	; 0x03
     698:	89 2b       	or	r24, r25
     69a:	28 2f       	mov	r18, r24
     69c:	89 81       	ldd	r24, Y+1	; 0x01
     69e:	9a 81       	ldd	r25, Y+2	; 0x02
     6a0:	fc 01       	movw	r30, r24
     6a2:	20 83       	st	Z, r18
     6a4:	00 00       	nop
     6a6:	23 96       	adiw	r28, 0x03	; 3
     6a8:	cd bf       	out	0x3d, r28	; 61
     6aa:	de bf       	out	0x3e, r29	; 62
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <TC0_ConfigWGM>:
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	00 d0       	rcall	.+0      	; 0x6b8 <TC0_ConfigWGM+0x6>
     6b8:	cd b7       	in	r28, 0x3d	; 61
     6ba:	de b7       	in	r29, 0x3e	; 62
     6bc:	89 83       	std	Y+1, r24	; 0x01
     6be:	9a 83       	std	Y+2, r25	; 0x02
     6c0:	6b 83       	std	Y+3, r22	; 0x03
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	9a 81       	ldd	r25, Y+2	; 0x02
     6c6:	fc 01       	movw	r30, r24
     6c8:	81 81       	ldd	r24, Z+1	; 0x01
     6ca:	98 2f       	mov	r25, r24
     6cc:	98 7f       	andi	r25, 0xF8	; 248
     6ce:	8b 81       	ldd	r24, Y+3	; 0x03
     6d0:	89 2b       	or	r24, r25
     6d2:	28 2f       	mov	r18, r24
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	9a 81       	ldd	r25, Y+2	; 0x02
     6d8:	fc 01       	movw	r30, r24
     6da:	21 83       	std	Z+1, r18	; 0x01
     6dc:	00 00       	nop
     6de:	23 96       	adiw	r28, 0x03	; 3
     6e0:	cd bf       	out	0x3d, r28	; 61
     6e2:	de bf       	out	0x3e, r29	; 62
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	00 d0       	rcall	.+0      	; 0x6f0 <TC0_SetOverflowIntLevel+0x6>
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
     6f4:	89 83       	std	Y+1, r24	; 0x01
     6f6:	9a 83       	std	Y+2, r25	; 0x02
     6f8:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	9a 81       	ldd	r25, Y+2	; 0x02
     6fe:	fc 01       	movw	r30, r24
     700:	86 81       	ldd	r24, Z+6	; 0x06
     702:	98 2f       	mov	r25, r24
     704:	9c 7f       	andi	r25, 0xFC	; 252
     706:	8b 81       	ldd	r24, Y+3	; 0x03
     708:	89 2b       	or	r24, r25
     70a:	28 2f       	mov	r18, r24
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	9a 81       	ldd	r25, Y+2	; 0x02
     710:	fc 01       	movw	r30, r24
     712:	26 83       	std	Z+6, r18	; 0x06
}
     714:	00 00       	nop
     716:	23 96       	adiw	r28, 0x03	; 3
     718:	cd bf       	out	0x3d, r28	; 61
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <vApplicationStackOverflowHook>:
 {
	 (void)errCode;

	 uint8_t a=42; (void)a;

 }
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	00 d0       	rcall	.+0      	; 0x728 <vApplicationStackOverflowHook+0x6>
     728:	1f 92       	push	r1
     72a:	cd b7       	in	r28, 0x3d	; 61
     72c:	de b7       	in	r29, 0x3e	; 62
     72e:	89 83       	std	Y+1, r24	; 0x01
     730:	9a 83       	std	Y+2, r25	; 0x02
     732:	6b 83       	std	Y+3, r22	; 0x03
     734:	7c 83       	std	Y+4, r23	; 0x04
     736:	8b e2       	ldi	r24, 0x2B	; 43
     738:	0e 94 a5 03 	call	0x74a	; 0x74a <error>
     73c:	00 00       	nop
     73e:	24 96       	adiw	r28, 0x04	; 4
     740:	cd bf       	out	0x3d, r28	; 61
     742:	de bf       	out	0x3e, r29	; 62
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	08 95       	ret

0000074a <error>:

 //----------------------------------------------
 //
 void error(uint8_t errCode)
 {
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	1f 92       	push	r1
     750:	1f 92       	push	r1
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
     756:	8a 83       	std	Y+2, r24	; 0x02
	 uint8_t a;

	 if(errCode==ERR_STACK_OVERFLOW)
     758:	8a 81       	ldd	r24, Y+2	; 0x02
     75a:	8b 32       	cpi	r24, 0x2B	; 43
     75c:	19 f4       	brne	.+6      	; 0x764 <error+0x1a>
	 a = 1;
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	89 83       	std	Y+1, r24	; 0x01
     762:	0e c0       	rjmp	.+28     	; 0x780 <error+0x36>
	 else if(errCode==ERR_QUEUE_SEND_FAILED)
     764:	8a 81       	ldd	r24, Y+2	; 0x02
     766:	8c 32       	cpi	r24, 0x2C	; 44
     768:	19 f4       	brne	.+6      	; 0x770 <error+0x26>
	 a = 2;
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	89 83       	std	Y+1, r24	; 0x01
     76e:	08 c0       	rjmp	.+16     	; 0x780 <error+0x36>
	 else if(errCode==ERR_BYTES_SHOULD_BE_AVAILABLE)
     770:	8a 81       	ldd	r24, Y+2	; 0x02
     772:	8f 32       	cpi	r24, 0x2F	; 47
     774:	19 f4       	brne	.+6      	; 0x77c <error+0x32>
	 a = 3;
     776:	83 e0       	ldi	r24, 0x03	; 3
     778:	89 83       	std	Y+1, r24	; 0x01
     77a:	02 c0       	rjmp	.+4      	; 0x780 <error+0x36>
	 else
	 a = 4;
     77c:	84 e0       	ldi	r24, 0x04	; 4
     77e:	89 83       	std	Y+1, r24	; 0x01
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     780:	0e 94 c8 03 	call	0x790	; 0x790 <software_reset>
 }
     784:	00 00       	nop
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	08 95       	ret

00000790 <software_reset>:

 //----------------------------------------------
 //
 void software_reset(void)
 {	 
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
	 asm("nop");
     798:	00 00       	nop
	 CPU_CCP  = CCP_IOREG_gc;
     79a:	84 e3       	ldi	r24, 0x34	; 52
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	28 ed       	ldi	r18, 0xD8	; 216
     7a0:	fc 01       	movw	r30, r24
     7a2:	20 83       	st	Z, r18
	 RST.CTRL = RST_SWRST_bm ;	 
     7a4:	88 e7       	ldi	r24, 0x78	; 120
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	21 e0       	ldi	r18, 0x01	; 1
     7aa:	fc 01       	movw	r30, r24
     7ac:	21 83       	std	Z+1, r18	; 0x01
     7ae:	00 00       	nop
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <xEventGroupCreate>:
/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	1f 92       	push	r1
     7bc:	1f 92       	push	r1
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
     7c2:	80 e1       	ldi	r24, 0x10	; 16
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 44 07 	call	0xe88	; 0xe88 <pvPortMalloc>
     7ca:	89 83       	std	Y+1, r24	; 0x01
     7cc:	9a 83       	std	Y+2, r25	; 0x02
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	9a 81       	ldd	r25, Y+2	; 0x02
     7d2:	89 2b       	or	r24, r25
     7d4:	61 f0       	breq	.+24     	; 0x7ee <xEventGroupCreate+0x38>
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
     7d8:	9a 81       	ldd	r25, Y+2	; 0x02
     7da:	fc 01       	movw	r30, r24
     7dc:	10 82       	st	Z, r1
     7de:	11 82       	std	Z+1, r1	; 0x01
     7e0:	12 82       	std	Z+2, r1	; 0x02
     7e2:	13 82       	std	Z+3, r1	; 0x03
     7e4:	89 81       	ldd	r24, Y+1	; 0x01
     7e6:	9a 81       	ldd	r25, Y+2	; 0x02
     7e8:	04 96       	adiw	r24, 0x04	; 4
     7ea:	0e 94 96 07 	call	0xf2c	; 0xf2c <vListInitialise>
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	9a 81       	ldd	r25, Y+2	; 0x02
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <xEventGroupWaitBits>:
     7fc:	cf 92       	push	r12
     7fe:	df 92       	push	r13
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62
     810:	6d 97       	sbiw	r28, 0x1d	; 29
     812:	cd bf       	out	0x3d, r28	; 61
     814:	de bf       	out	0x3e, r29	; 62
     816:	8a 8b       	std	Y+18, r24	; 0x12
     818:	9b 8b       	std	Y+19, r25	; 0x13
     81a:	4c 8b       	std	Y+20, r20	; 0x14
     81c:	5d 8b       	std	Y+21, r21	; 0x15
     81e:	6e 8b       	std	Y+22, r22	; 0x16
     820:	7f 8b       	std	Y+23, r23	; 0x17
     822:	28 8f       	std	Y+24, r18	; 0x18
     824:	09 8f       	std	Y+25, r16	; 0x19
     826:	ca 8e       	std	Y+26, r12	; 0x1a
     828:	db 8e       	std	Y+27, r13	; 0x1b
     82a:	ec 8e       	std	Y+28, r14	; 0x1c
     82c:	fd 8e       	std	Y+29, r15	; 0x1d
     82e:	8a 89       	ldd	r24, Y+18	; 0x12
     830:	9b 89       	ldd	r25, Y+19	; 0x13
     832:	89 87       	std	Y+9, r24	; 0x09
     834:	9a 87       	std	Y+10, r25	; 0x0a
     836:	1d 82       	std	Y+5, r1	; 0x05
     838:	1e 82       	std	Y+6, r1	; 0x06
     83a:	1f 82       	std	Y+7, r1	; 0x07
     83c:	18 86       	std	Y+8, r1	; 0x08
     83e:	1b 86       	std	Y+11, r1	; 0x0b
     840:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <vTaskSuspendAll>
     844:	89 85       	ldd	r24, Y+9	; 0x09
     846:	9a 85       	ldd	r25, Y+10	; 0x0a
     848:	fc 01       	movw	r30, r24
     84a:	80 81       	ld	r24, Z
     84c:	91 81       	ldd	r25, Z+1	; 0x01
     84e:	a2 81       	ldd	r26, Z+2	; 0x02
     850:	b3 81       	ldd	r27, Z+3	; 0x03
     852:	8c 87       	std	Y+12, r24	; 0x0c
     854:	9d 87       	std	Y+13, r25	; 0x0d
     856:	ae 87       	std	Y+14, r26	; 0x0e
     858:	bf 87       	std	Y+15, r27	; 0x0f
     85a:	2c 89       	ldd	r18, Y+20	; 0x14
     85c:	3d 89       	ldd	r19, Y+21	; 0x15
     85e:	4e 89       	ldd	r20, Y+22	; 0x16
     860:	5f 89       	ldd	r21, Y+23	; 0x17
     862:	8c 85       	ldd	r24, Y+12	; 0x0c
     864:	9d 85       	ldd	r25, Y+13	; 0x0d
     866:	ae 85       	ldd	r26, Y+14	; 0x0e
     868:	bf 85       	ldd	r27, Y+15	; 0x0f
     86a:	09 8d       	ldd	r16, Y+25	; 0x19
     86c:	bc 01       	movw	r22, r24
     86e:	cd 01       	movw	r24, r26
     870:	0e 94 d3 06 	call	0xda6	; 0xda6 <prvTestWaitCondition>
     874:	88 8b       	std	Y+16, r24	; 0x10
     876:	88 89       	ldd	r24, Y+16	; 0x10
     878:	88 23       	and	r24, r24
     87a:	59 f1       	breq	.+86     	; 0x8d2 <xEventGroupWaitBits+0xd6>
     87c:	8c 85       	ldd	r24, Y+12	; 0x0c
     87e:	9d 85       	ldd	r25, Y+13	; 0x0d
     880:	ae 85       	ldd	r26, Y+14	; 0x0e
     882:	bf 85       	ldd	r27, Y+15	; 0x0f
     884:	89 83       	std	Y+1, r24	; 0x01
     886:	9a 83       	std	Y+2, r25	; 0x02
     888:	ab 83       	std	Y+3, r26	; 0x03
     88a:	bc 83       	std	Y+4, r27	; 0x04
     88c:	1a 8e       	std	Y+26, r1	; 0x1a
     88e:	1b 8e       	std	Y+27, r1	; 0x1b
     890:	1c 8e       	std	Y+28, r1	; 0x1c
     892:	1d 8e       	std	Y+29, r1	; 0x1d
     894:	88 8d       	ldd	r24, Y+24	; 0x18
     896:	88 23       	and	r24, r24
     898:	09 f4       	brne	.+2      	; 0x89c <xEventGroupWaitBits+0xa0>
     89a:	65 c0       	rjmp	.+202    	; 0x966 <xEventGroupWaitBits+0x16a>
     89c:	89 85       	ldd	r24, Y+9	; 0x09
     89e:	9a 85       	ldd	r25, Y+10	; 0x0a
     8a0:	fc 01       	movw	r30, r24
     8a2:	20 81       	ld	r18, Z
     8a4:	31 81       	ldd	r19, Z+1	; 0x01
     8a6:	42 81       	ldd	r20, Z+2	; 0x02
     8a8:	53 81       	ldd	r21, Z+3	; 0x03
     8aa:	8c 89       	ldd	r24, Y+20	; 0x14
     8ac:	9d 89       	ldd	r25, Y+21	; 0x15
     8ae:	ae 89       	ldd	r26, Y+22	; 0x16
     8b0:	bf 89       	ldd	r27, Y+23	; 0x17
     8b2:	80 95       	com	r24
     8b4:	90 95       	com	r25
     8b6:	a0 95       	com	r26
     8b8:	b0 95       	com	r27
     8ba:	82 23       	and	r24, r18
     8bc:	93 23       	and	r25, r19
     8be:	a4 23       	and	r26, r20
     8c0:	b5 23       	and	r27, r21
     8c2:	29 85       	ldd	r18, Y+9	; 0x09
     8c4:	3a 85       	ldd	r19, Y+10	; 0x0a
     8c6:	f9 01       	movw	r30, r18
     8c8:	80 83       	st	Z, r24
     8ca:	91 83       	std	Z+1, r25	; 0x01
     8cc:	a2 83       	std	Z+2, r26	; 0x02
     8ce:	b3 83       	std	Z+3, r27	; 0x03
     8d0:	4a c0       	rjmp	.+148    	; 0x966 <xEventGroupWaitBits+0x16a>
     8d2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8d4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8d6:	ac 8d       	ldd	r26, Y+28	; 0x1c
     8d8:	bd 8d       	ldd	r27, Y+29	; 0x1d
     8da:	89 2b       	or	r24, r25
     8dc:	8a 2b       	or	r24, r26
     8de:	8b 2b       	or	r24, r27
     8e0:	59 f4       	brne	.+22     	; 0x8f8 <xEventGroupWaitBits+0xfc>
     8e2:	8c 85       	ldd	r24, Y+12	; 0x0c
     8e4:	9d 85       	ldd	r25, Y+13	; 0x0d
     8e6:	ae 85       	ldd	r26, Y+14	; 0x0e
     8e8:	bf 85       	ldd	r27, Y+15	; 0x0f
     8ea:	89 83       	std	Y+1, r24	; 0x01
     8ec:	9a 83       	std	Y+2, r25	; 0x02
     8ee:	ab 83       	std	Y+3, r26	; 0x03
     8f0:	bc 83       	std	Y+4, r27	; 0x04
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	8b 87       	std	Y+11, r24	; 0x0b
     8f6:	37 c0       	rjmp	.+110    	; 0x966 <xEventGroupWaitBits+0x16a>
     8f8:	88 8d       	ldd	r24, Y+24	; 0x18
     8fa:	88 23       	and	r24, r24
     8fc:	49 f0       	breq	.+18     	; 0x910 <xEventGroupWaitBits+0x114>
     8fe:	8d 81       	ldd	r24, Y+5	; 0x05
     900:	9e 81       	ldd	r25, Y+6	; 0x06
     902:	af 81       	ldd	r26, Y+7	; 0x07
     904:	b8 85       	ldd	r27, Y+8	; 0x08
     906:	b1 60       	ori	r27, 0x01	; 1
     908:	8d 83       	std	Y+5, r24	; 0x05
     90a:	9e 83       	std	Y+6, r25	; 0x06
     90c:	af 83       	std	Y+7, r26	; 0x07
     90e:	b8 87       	std	Y+8, r27	; 0x08
     910:	89 8d       	ldd	r24, Y+25	; 0x19
     912:	88 23       	and	r24, r24
     914:	49 f0       	breq	.+18     	; 0x928 <xEventGroupWaitBits+0x12c>
     916:	8d 81       	ldd	r24, Y+5	; 0x05
     918:	9e 81       	ldd	r25, Y+6	; 0x06
     91a:	af 81       	ldd	r26, Y+7	; 0x07
     91c:	b8 85       	ldd	r27, Y+8	; 0x08
     91e:	b4 60       	ori	r27, 0x04	; 4
     920:	8d 83       	std	Y+5, r24	; 0x05
     922:	9e 83       	std	Y+6, r25	; 0x06
     924:	af 83       	std	Y+7, r26	; 0x07
     926:	b8 87       	std	Y+8, r27	; 0x08
     928:	2c 89       	ldd	r18, Y+20	; 0x14
     92a:	3d 89       	ldd	r19, Y+21	; 0x15
     92c:	4e 89       	ldd	r20, Y+22	; 0x16
     92e:	5f 89       	ldd	r21, Y+23	; 0x17
     930:	8d 81       	ldd	r24, Y+5	; 0x05
     932:	9e 81       	ldd	r25, Y+6	; 0x06
     934:	af 81       	ldd	r26, Y+7	; 0x07
     936:	b8 85       	ldd	r27, Y+8	; 0x08
     938:	82 2b       	or	r24, r18
     93a:	93 2b       	or	r25, r19
     93c:	a4 2b       	or	r26, r20
     93e:	b5 2b       	or	r27, r21
     940:	29 85       	ldd	r18, Y+9	; 0x09
     942:	3a 85       	ldd	r19, Y+10	; 0x0a
     944:	f9 01       	movw	r30, r18
     946:	34 96       	adiw	r30, 0x04	; 4
     948:	2a 8d       	ldd	r18, Y+26	; 0x1a
     94a:	3b 8d       	ldd	r19, Y+27	; 0x1b
     94c:	4c 8d       	ldd	r20, Y+28	; 0x1c
     94e:	5d 8d       	ldd	r21, Y+29	; 0x1d
     950:	89 01       	movw	r16, r18
     952:	9a 01       	movw	r18, r20
     954:	ac 01       	movw	r20, r24
     956:	bd 01       	movw	r22, r26
     958:	cf 01       	movw	r24, r30
     95a:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <vTaskPlaceOnUnorderedEventList>
     95e:	19 82       	std	Y+1, r1	; 0x01
     960:	1a 82       	std	Y+2, r1	; 0x02
     962:	1b 82       	std	Y+3, r1	; 0x03
     964:	1c 82       	std	Y+4, r1	; 0x04
     966:	0e 94 ee 13 	call	0x27dc	; 0x27dc <xTaskResumeAll>
     96a:	89 8b       	std	Y+17, r24	; 0x11
     96c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     96e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     970:	ac 8d       	ldd	r26, Y+28	; 0x1c
     972:	bd 8d       	ldd	r27, Y+29	; 0x1d
     974:	89 2b       	or	r24, r25
     976:	8a 2b       	or	r24, r26
     978:	8b 2b       	or	r24, r27
     97a:	09 f4       	brne	.+2      	; 0x97e <xEventGroupWaitBits+0x182>
     97c:	65 c0       	rjmp	.+202    	; 0xa48 <xEventGroupWaitBits+0x24c>
     97e:	89 89       	ldd	r24, Y+17	; 0x11
     980:	88 23       	and	r24, r24
     982:	11 f4       	brne	.+4      	; 0x988 <xEventGroupWaitBits+0x18c>
     984:	0e 94 2d 0b 	call	0x165a	; 0x165a <vPortYield>
     988:	0e 94 72 19 	call	0x32e4	; 0x32e4 <uxTaskResetEventItemValue>
     98c:	dc 01       	movw	r26, r24
     98e:	cb 01       	movw	r24, r22
     990:	89 83       	std	Y+1, r24	; 0x01
     992:	9a 83       	std	Y+2, r25	; 0x02
     994:	ab 83       	std	Y+3, r26	; 0x03
     996:	bc 83       	std	Y+4, r27	; 0x04
     998:	89 81       	ldd	r24, Y+1	; 0x01
     99a:	9a 81       	ldd	r25, Y+2	; 0x02
     99c:	ab 81       	ldd	r26, Y+3	; 0x03
     99e:	bc 81       	ldd	r27, Y+4	; 0x04
     9a0:	88 27       	eor	r24, r24
     9a2:	99 27       	eor	r25, r25
     9a4:	aa 27       	eor	r26, r26
     9a6:	b2 70       	andi	r27, 0x02	; 2
     9a8:	89 2b       	or	r24, r25
     9aa:	8a 2b       	or	r24, r26
     9ac:	8b 2b       	or	r24, r27
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <xEventGroupWaitBits+0x1b6>
     9b0:	42 c0       	rjmp	.+132    	; 0xa36 <xEventGroupWaitBits+0x23a>
     9b2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     9b6:	ff 93       	push	r31
     9b8:	f8 7f       	andi	r31, 0xF8	; 248
     9ba:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     9be:	89 85       	ldd	r24, Y+9	; 0x09
     9c0:	9a 85       	ldd	r25, Y+10	; 0x0a
     9c2:	fc 01       	movw	r30, r24
     9c4:	80 81       	ld	r24, Z
     9c6:	91 81       	ldd	r25, Z+1	; 0x01
     9c8:	a2 81       	ldd	r26, Z+2	; 0x02
     9ca:	b3 81       	ldd	r27, Z+3	; 0x03
     9cc:	89 83       	std	Y+1, r24	; 0x01
     9ce:	9a 83       	std	Y+2, r25	; 0x02
     9d0:	ab 83       	std	Y+3, r26	; 0x03
     9d2:	bc 83       	std	Y+4, r27	; 0x04
     9d4:	2c 89       	ldd	r18, Y+20	; 0x14
     9d6:	3d 89       	ldd	r19, Y+21	; 0x15
     9d8:	4e 89       	ldd	r20, Y+22	; 0x16
     9da:	5f 89       	ldd	r21, Y+23	; 0x17
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	9a 81       	ldd	r25, Y+2	; 0x02
     9e0:	ab 81       	ldd	r26, Y+3	; 0x03
     9e2:	bc 81       	ldd	r27, Y+4	; 0x04
     9e4:	09 8d       	ldd	r16, Y+25	; 0x19
     9e6:	bc 01       	movw	r22, r24
     9e8:	cd 01       	movw	r24, r26
     9ea:	0e 94 d3 06 	call	0xda6	; 0xda6 <prvTestWaitCondition>
     9ee:	88 23       	and	r24, r24
     9f0:	e9 f0       	breq	.+58     	; 0xa2c <xEventGroupWaitBits+0x230>
     9f2:	88 8d       	ldd	r24, Y+24	; 0x18
     9f4:	88 23       	and	r24, r24
     9f6:	d1 f0       	breq	.+52     	; 0xa2c <xEventGroupWaitBits+0x230>
     9f8:	89 85       	ldd	r24, Y+9	; 0x09
     9fa:	9a 85       	ldd	r25, Y+10	; 0x0a
     9fc:	fc 01       	movw	r30, r24
     9fe:	20 81       	ld	r18, Z
     a00:	31 81       	ldd	r19, Z+1	; 0x01
     a02:	42 81       	ldd	r20, Z+2	; 0x02
     a04:	53 81       	ldd	r21, Z+3	; 0x03
     a06:	8c 89       	ldd	r24, Y+20	; 0x14
     a08:	9d 89       	ldd	r25, Y+21	; 0x15
     a0a:	ae 89       	ldd	r26, Y+22	; 0x16
     a0c:	bf 89       	ldd	r27, Y+23	; 0x17
     a0e:	80 95       	com	r24
     a10:	90 95       	com	r25
     a12:	a0 95       	com	r26
     a14:	b0 95       	com	r27
     a16:	82 23       	and	r24, r18
     a18:	93 23       	and	r25, r19
     a1a:	a4 23       	and	r26, r20
     a1c:	b5 23       	and	r27, r21
     a1e:	29 85       	ldd	r18, Y+9	; 0x09
     a20:	3a 85       	ldd	r19, Y+10	; 0x0a
     a22:	f9 01       	movw	r30, r18
     a24:	80 83       	st	Z, r24
     a26:	91 83       	std	Z+1, r25	; 0x01
     a28:	a2 83       	std	Z+2, r26	; 0x02
     a2a:	b3 83       	std	Z+3, r27	; 0x03
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	8b 87       	std	Y+11, r24	; 0x0b
     a30:	ff 91       	pop	r31
     a32:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	9a 81       	ldd	r25, Y+2	; 0x02
     a3a:	ab 81       	ldd	r26, Y+3	; 0x03
     a3c:	bc 81       	ldd	r27, Y+4	; 0x04
     a3e:	bb 27       	eor	r27, r27
     a40:	89 83       	std	Y+1, r24	; 0x01
     a42:	9a 83       	std	Y+2, r25	; 0x02
     a44:	ab 83       	std	Y+3, r26	; 0x03
     a46:	bc 83       	std	Y+4, r27	; 0x04
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	9a 81       	ldd	r25, Y+2	; 0x02
     a4c:	ab 81       	ldd	r26, Y+3	; 0x03
     a4e:	bc 81       	ldd	r27, Y+4	; 0x04
     a50:	bc 01       	movw	r22, r24
     a52:	cd 01       	movw	r24, r26
     a54:	6d 96       	adiw	r28, 0x1d	; 29
     a56:	cd bf       	out	0x3d, r28	; 61
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	ff 90       	pop	r15
     a64:	ef 90       	pop	r14
     a66:	df 90       	pop	r13
     a68:	cf 90       	pop	r12
     a6a:	08 95       	ret

00000a6c <xEventGroupClearBits>:
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	cd b7       	in	r28, 0x3d	; 61
     a72:	de b7       	in	r29, 0x3e	; 62
     a74:	2c 97       	sbiw	r28, 0x0c	; 12
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	de bf       	out	0x3e, r29	; 62
     a7a:	8f 83       	std	Y+7, r24	; 0x07
     a7c:	98 87       	std	Y+8, r25	; 0x08
     a7e:	49 87       	std	Y+9, r20	; 0x09
     a80:	5a 87       	std	Y+10, r21	; 0x0a
     a82:	6b 87       	std	Y+11, r22	; 0x0b
     a84:	7c 87       	std	Y+12, r23	; 0x0c
     a86:	8f 81       	ldd	r24, Y+7	; 0x07
     a88:	98 85       	ldd	r25, Y+8	; 0x08
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	9a 83       	std	Y+2, r25	; 0x02
     a8e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     a92:	ff 93       	push	r31
     a94:	f8 7f       	andi	r31, 0xF8	; 248
     a96:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     a9a:	89 81       	ldd	r24, Y+1	; 0x01
     a9c:	9a 81       	ldd	r25, Y+2	; 0x02
     a9e:	fc 01       	movw	r30, r24
     aa0:	80 81       	ld	r24, Z
     aa2:	91 81       	ldd	r25, Z+1	; 0x01
     aa4:	a2 81       	ldd	r26, Z+2	; 0x02
     aa6:	b3 81       	ldd	r27, Z+3	; 0x03
     aa8:	8b 83       	std	Y+3, r24	; 0x03
     aaa:	9c 83       	std	Y+4, r25	; 0x04
     aac:	ad 83       	std	Y+5, r26	; 0x05
     aae:	be 83       	std	Y+6, r27	; 0x06
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	9a 81       	ldd	r25, Y+2	; 0x02
     ab4:	fc 01       	movw	r30, r24
     ab6:	20 81       	ld	r18, Z
     ab8:	31 81       	ldd	r19, Z+1	; 0x01
     aba:	42 81       	ldd	r20, Z+2	; 0x02
     abc:	53 81       	ldd	r21, Z+3	; 0x03
     abe:	89 85       	ldd	r24, Y+9	; 0x09
     ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ac2:	ab 85       	ldd	r26, Y+11	; 0x0b
     ac4:	bc 85       	ldd	r27, Y+12	; 0x0c
     ac6:	80 95       	com	r24
     ac8:	90 95       	com	r25
     aca:	a0 95       	com	r26
     acc:	b0 95       	com	r27
     ace:	82 23       	and	r24, r18
     ad0:	93 23       	and	r25, r19
     ad2:	a4 23       	and	r26, r20
     ad4:	b5 23       	and	r27, r21
     ad6:	29 81       	ldd	r18, Y+1	; 0x01
     ad8:	3a 81       	ldd	r19, Y+2	; 0x02
     ada:	f9 01       	movw	r30, r18
     adc:	80 83       	st	Z, r24
     ade:	91 83       	std	Z+1, r25	; 0x01
     ae0:	a2 83       	std	Z+2, r26	; 0x02
     ae2:	b3 83       	std	Z+3, r27	; 0x03
     ae4:	ff 91       	pop	r31
     ae6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     aea:	8b 81       	ldd	r24, Y+3	; 0x03
     aec:	9c 81       	ldd	r25, Y+4	; 0x04
     aee:	ad 81       	ldd	r26, Y+5	; 0x05
     af0:	be 81       	ldd	r27, Y+6	; 0x06
     af2:	bc 01       	movw	r22, r24
     af4:	cd 01       	movw	r24, r26
     af6:	2c 96       	adiw	r28, 0x0c	; 12
     af8:	cd bf       	out	0x3d, r28	; 61
     afa:	de bf       	out	0x3e, r29	; 62
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	08 95       	ret

00000b02 <xEventGroupGetBitsFromISR>:
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	cd b7       	in	r28, 0x3d	; 61
     b08:	de b7       	in	r29, 0x3e	; 62
     b0a:	29 97       	sbiw	r28, 0x09	; 9
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	88 87       	std	Y+8, r24	; 0x08
     b12:	99 87       	std	Y+9, r25	; 0x09
     b14:	88 85       	ldd	r24, Y+8	; 0x08
     b16:	99 85       	ldd	r25, Y+9	; 0x09
     b18:	89 83       	std	Y+1, r24	; 0x01
     b1a:	9a 83       	std	Y+2, r25	; 0x02
     b1c:	0e 94 05 09 	call	0x120a	; 0x120a <_portSetInterruptMaskFromIsr>
     b20:	8b 83       	std	Y+3, r24	; 0x03
     b22:	89 81       	ldd	r24, Y+1	; 0x01
     b24:	9a 81       	ldd	r25, Y+2	; 0x02
     b26:	fc 01       	movw	r30, r24
     b28:	80 81       	ld	r24, Z
     b2a:	91 81       	ldd	r25, Z+1	; 0x01
     b2c:	a2 81       	ldd	r26, Z+2	; 0x02
     b2e:	b3 81       	ldd	r27, Z+3	; 0x03
     b30:	8c 83       	std	Y+4, r24	; 0x04
     b32:	9d 83       	std	Y+5, r25	; 0x05
     b34:	ae 83       	std	Y+6, r26	; 0x06
     b36:	bf 83       	std	Y+7, r27	; 0x07
     b38:	80 ea       	ldi	r24, 0xA0	; 160
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	2b 81       	ldd	r18, Y+3	; 0x03
     b3e:	fc 01       	movw	r30, r24
     b40:	22 83       	std	Z+2, r18	; 0x02
     b42:	8c 81       	ldd	r24, Y+4	; 0x04
     b44:	9d 81       	ldd	r25, Y+5	; 0x05
     b46:	ae 81       	ldd	r26, Y+6	; 0x06
     b48:	bf 81       	ldd	r27, Y+7	; 0x07
     b4a:	bc 01       	movw	r22, r24
     b4c:	cd 01       	movw	r24, r26
     b4e:	29 96       	adiw	r28, 0x09	; 9
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	08 95       	ret

00000b5a <xEventGroupSetBits>:
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
     b62:	6d 97       	sbiw	r28, 0x1d	; 29
     b64:	cd bf       	out	0x3d, r28	; 61
     b66:	de bf       	out	0x3e, r29	; 62
     b68:	88 8f       	std	Y+24, r24	; 0x18
     b6a:	99 8f       	std	Y+25, r25	; 0x19
     b6c:	4a 8f       	std	Y+26, r20	; 0x1a
     b6e:	5b 8f       	std	Y+27, r21	; 0x1b
     b70:	6c 8f       	std	Y+28, r22	; 0x1c
     b72:	7d 8f       	std	Y+29, r23	; 0x1d
     b74:	1b 82       	std	Y+3, r1	; 0x03
     b76:	1c 82       	std	Y+4, r1	; 0x04
     b78:	1d 82       	std	Y+5, r1	; 0x05
     b7a:	1e 82       	std	Y+6, r1	; 0x06
     b7c:	88 8d       	ldd	r24, Y+24	; 0x18
     b7e:	99 8d       	ldd	r25, Y+25	; 0x19
     b80:	88 87       	std	Y+8, r24	; 0x08
     b82:	99 87       	std	Y+9, r25	; 0x09
     b84:	1f 82       	std	Y+7, r1	; 0x07
     b86:	88 85       	ldd	r24, Y+8	; 0x08
     b88:	99 85       	ldd	r25, Y+9	; 0x09
     b8a:	04 96       	adiw	r24, 0x04	; 4
     b8c:	8a 87       	std	Y+10, r24	; 0x0a
     b8e:	9b 87       	std	Y+11, r25	; 0x0b
     b90:	8a 85       	ldd	r24, Y+10	; 0x0a
     b92:	9b 85       	ldd	r25, Y+11	; 0x0b
     b94:	03 96       	adiw	r24, 0x03	; 3
     b96:	8c 87       	std	Y+12, r24	; 0x0c
     b98:	9d 87       	std	Y+13, r25	; 0x0d
     b9a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <vTaskSuspendAll>
     b9e:	8a 85       	ldd	r24, Y+10	; 0x0a
     ba0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ba2:	fc 01       	movw	r30, r24
     ba4:	87 81       	ldd	r24, Z+7	; 0x07
     ba6:	90 85       	ldd	r25, Z+8	; 0x08
     ba8:	89 83       	std	Y+1, r24	; 0x01
     baa:	9a 83       	std	Y+2, r25	; 0x02
     bac:	88 85       	ldd	r24, Y+8	; 0x08
     bae:	99 85       	ldd	r25, Y+9	; 0x09
     bb0:	fc 01       	movw	r30, r24
     bb2:	20 81       	ld	r18, Z
     bb4:	31 81       	ldd	r19, Z+1	; 0x01
     bb6:	42 81       	ldd	r20, Z+2	; 0x02
     bb8:	53 81       	ldd	r21, Z+3	; 0x03
     bba:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bbc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bbe:	ac 8d       	ldd	r26, Y+28	; 0x1c
     bc0:	bd 8d       	ldd	r27, Y+29	; 0x1d
     bc2:	82 2b       	or	r24, r18
     bc4:	93 2b       	or	r25, r19
     bc6:	a4 2b       	or	r26, r20
     bc8:	b5 2b       	or	r27, r21
     bca:	28 85       	ldd	r18, Y+8	; 0x08
     bcc:	39 85       	ldd	r19, Y+9	; 0x09
     bce:	f9 01       	movw	r30, r18
     bd0:	80 83       	st	Z, r24
     bd2:	91 83       	std	Z+1, r25	; 0x01
     bd4:	a2 83       	std	Z+2, r26	; 0x02
     bd6:	b3 83       	std	Z+3, r27	; 0x03
     bd8:	95 c0       	rjmp	.+298    	; 0xd04 <xEventGroupSetBits+0x1aa>
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	9a 81       	ldd	r25, Y+2	; 0x02
     bde:	fc 01       	movw	r30, r24
     be0:	84 81       	ldd	r24, Z+4	; 0x04
     be2:	95 81       	ldd	r25, Z+5	; 0x05
     be4:	8e 87       	std	Y+14, r24	; 0x0e
     be6:	9f 87       	std	Y+15, r25	; 0x0f
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	9a 81       	ldd	r25, Y+2	; 0x02
     bec:	fc 01       	movw	r30, r24
     bee:	80 81       	ld	r24, Z
     bf0:	91 81       	ldd	r25, Z+1	; 0x01
     bf2:	a2 81       	ldd	r26, Z+2	; 0x02
     bf4:	b3 81       	ldd	r27, Z+3	; 0x03
     bf6:	88 8b       	std	Y+16, r24	; 0x10
     bf8:	99 8b       	std	Y+17, r25	; 0x11
     bfa:	aa 8b       	std	Y+18, r26	; 0x12
     bfc:	bb 8b       	std	Y+19, r27	; 0x13
     bfe:	1f 82       	std	Y+7, r1	; 0x07
     c00:	88 89       	ldd	r24, Y+16	; 0x10
     c02:	99 89       	ldd	r25, Y+17	; 0x11
     c04:	aa 89       	ldd	r26, Y+18	; 0x12
     c06:	bb 89       	ldd	r27, Y+19	; 0x13
     c08:	88 27       	eor	r24, r24
     c0a:	99 27       	eor	r25, r25
     c0c:	aa 27       	eor	r26, r26
     c0e:	8c 8b       	std	Y+20, r24	; 0x14
     c10:	9d 8b       	std	Y+21, r25	; 0x15
     c12:	ae 8b       	std	Y+22, r26	; 0x16
     c14:	bf 8b       	std	Y+23, r27	; 0x17
     c16:	88 89       	ldd	r24, Y+16	; 0x10
     c18:	99 89       	ldd	r25, Y+17	; 0x11
     c1a:	aa 89       	ldd	r26, Y+18	; 0x12
     c1c:	bb 89       	ldd	r27, Y+19	; 0x13
     c1e:	bb 27       	eor	r27, r27
     c20:	88 8b       	std	Y+16, r24	; 0x10
     c22:	99 8b       	std	Y+17, r25	; 0x11
     c24:	aa 8b       	std	Y+18, r26	; 0x12
     c26:	bb 8b       	std	Y+19, r27	; 0x13
     c28:	8c 89       	ldd	r24, Y+20	; 0x14
     c2a:	9d 89       	ldd	r25, Y+21	; 0x15
     c2c:	ae 89       	ldd	r26, Y+22	; 0x16
     c2e:	bf 89       	ldd	r27, Y+23	; 0x17
     c30:	88 27       	eor	r24, r24
     c32:	99 27       	eor	r25, r25
     c34:	aa 27       	eor	r26, r26
     c36:	b4 70       	andi	r27, 0x04	; 4
     c38:	89 2b       	or	r24, r25
     c3a:	8a 2b       	or	r24, r26
     c3c:	8b 2b       	or	r24, r27
     c3e:	b1 f4       	brne	.+44     	; 0xc6c <xEventGroupSetBits+0x112>
     c40:	88 85       	ldd	r24, Y+8	; 0x08
     c42:	99 85       	ldd	r25, Y+9	; 0x09
     c44:	fc 01       	movw	r30, r24
     c46:	20 81       	ld	r18, Z
     c48:	31 81       	ldd	r19, Z+1	; 0x01
     c4a:	42 81       	ldd	r20, Z+2	; 0x02
     c4c:	53 81       	ldd	r21, Z+3	; 0x03
     c4e:	88 89       	ldd	r24, Y+16	; 0x10
     c50:	99 89       	ldd	r25, Y+17	; 0x11
     c52:	aa 89       	ldd	r26, Y+18	; 0x12
     c54:	bb 89       	ldd	r27, Y+19	; 0x13
     c56:	82 23       	and	r24, r18
     c58:	93 23       	and	r25, r19
     c5a:	a4 23       	and	r26, r20
     c5c:	b5 23       	and	r27, r21
     c5e:	89 2b       	or	r24, r25
     c60:	8a 2b       	or	r24, r26
     c62:	8b 2b       	or	r24, r27
     c64:	e9 f0       	breq	.+58     	; 0xca0 <xEventGroupSetBits+0x146>
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	8f 83       	std	Y+7, r24	; 0x07
     c6a:	1a c0       	rjmp	.+52     	; 0xca0 <xEventGroupSetBits+0x146>
     c6c:	88 85       	ldd	r24, Y+8	; 0x08
     c6e:	99 85       	ldd	r25, Y+9	; 0x09
     c70:	fc 01       	movw	r30, r24
     c72:	20 81       	ld	r18, Z
     c74:	31 81       	ldd	r19, Z+1	; 0x01
     c76:	42 81       	ldd	r20, Z+2	; 0x02
     c78:	53 81       	ldd	r21, Z+3	; 0x03
     c7a:	88 89       	ldd	r24, Y+16	; 0x10
     c7c:	99 89       	ldd	r25, Y+17	; 0x11
     c7e:	aa 89       	ldd	r26, Y+18	; 0x12
     c80:	bb 89       	ldd	r27, Y+19	; 0x13
     c82:	28 23       	and	r18, r24
     c84:	39 23       	and	r19, r25
     c86:	4a 23       	and	r20, r26
     c88:	5b 23       	and	r21, r27
     c8a:	88 89       	ldd	r24, Y+16	; 0x10
     c8c:	99 89       	ldd	r25, Y+17	; 0x11
     c8e:	aa 89       	ldd	r26, Y+18	; 0x12
     c90:	bb 89       	ldd	r27, Y+19	; 0x13
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	11 f4       	brne	.+4      	; 0xca0 <xEventGroupSetBits+0x146>
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	8f 83       	std	Y+7, r24	; 0x07
     ca0:	8f 81       	ldd	r24, Y+7	; 0x07
     ca2:	88 23       	and	r24, r24
     ca4:	59 f1       	breq	.+86     	; 0xcfc <xEventGroupSetBits+0x1a2>
     ca6:	8c 89       	ldd	r24, Y+20	; 0x14
     ca8:	9d 89       	ldd	r25, Y+21	; 0x15
     caa:	ae 89       	ldd	r26, Y+22	; 0x16
     cac:	bf 89       	ldd	r27, Y+23	; 0x17
     cae:	88 27       	eor	r24, r24
     cb0:	99 27       	eor	r25, r25
     cb2:	aa 27       	eor	r26, r26
     cb4:	b1 70       	andi	r27, 0x01	; 1
     cb6:	89 2b       	or	r24, r25
     cb8:	8a 2b       	or	r24, r26
     cba:	8b 2b       	or	r24, r27
     cbc:	81 f0       	breq	.+32     	; 0xcde <xEventGroupSetBits+0x184>
     cbe:	2b 81       	ldd	r18, Y+3	; 0x03
     cc0:	3c 81       	ldd	r19, Y+4	; 0x04
     cc2:	4d 81       	ldd	r20, Y+5	; 0x05
     cc4:	5e 81       	ldd	r21, Y+6	; 0x06
     cc6:	88 89       	ldd	r24, Y+16	; 0x10
     cc8:	99 89       	ldd	r25, Y+17	; 0x11
     cca:	aa 89       	ldd	r26, Y+18	; 0x12
     ccc:	bb 89       	ldd	r27, Y+19	; 0x13
     cce:	82 2b       	or	r24, r18
     cd0:	93 2b       	or	r25, r19
     cd2:	a4 2b       	or	r26, r20
     cd4:	b5 2b       	or	r27, r21
     cd6:	8b 83       	std	Y+3, r24	; 0x03
     cd8:	9c 83       	std	Y+4, r25	; 0x04
     cda:	ad 83       	std	Y+5, r26	; 0x05
     cdc:	be 83       	std	Y+6, r27	; 0x06
     cde:	88 85       	ldd	r24, Y+8	; 0x08
     ce0:	99 85       	ldd	r25, Y+9	; 0x09
     ce2:	fc 01       	movw	r30, r24
     ce4:	80 81       	ld	r24, Z
     ce6:	91 81       	ldd	r25, Z+1	; 0x01
     ce8:	a2 81       	ldd	r26, Z+2	; 0x02
     cea:	b3 81       	ldd	r27, Z+3	; 0x03
     cec:	b2 60       	ori	r27, 0x02	; 2
     cee:	29 81       	ldd	r18, Y+1	; 0x01
     cf0:	3a 81       	ldd	r19, Y+2	; 0x02
     cf2:	ac 01       	movw	r20, r24
     cf4:	bd 01       	movw	r22, r26
     cf6:	c9 01       	movw	r24, r18
     cf8:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <vTaskRemoveFromUnorderedEventList>
     cfc:	8e 85       	ldd	r24, Y+14	; 0x0e
     cfe:	9f 85       	ldd	r25, Y+15	; 0x0f
     d00:	89 83       	std	Y+1, r24	; 0x01
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	29 81       	ldd	r18, Y+1	; 0x01
     d06:	3a 81       	ldd	r19, Y+2	; 0x02
     d08:	8c 85       	ldd	r24, Y+12	; 0x0c
     d0a:	9d 85       	ldd	r25, Y+13	; 0x0d
     d0c:	28 17       	cp	r18, r24
     d0e:	39 07       	cpc	r19, r25
     d10:	09 f0       	breq	.+2      	; 0xd14 <xEventGroupSetBits+0x1ba>
     d12:	63 cf       	rjmp	.-314    	; 0xbda <xEventGroupSetBits+0x80>
     d14:	88 85       	ldd	r24, Y+8	; 0x08
     d16:	99 85       	ldd	r25, Y+9	; 0x09
     d18:	fc 01       	movw	r30, r24
     d1a:	20 81       	ld	r18, Z
     d1c:	31 81       	ldd	r19, Z+1	; 0x01
     d1e:	42 81       	ldd	r20, Z+2	; 0x02
     d20:	53 81       	ldd	r21, Z+3	; 0x03
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	9c 81       	ldd	r25, Y+4	; 0x04
     d26:	ad 81       	ldd	r26, Y+5	; 0x05
     d28:	be 81       	ldd	r27, Y+6	; 0x06
     d2a:	80 95       	com	r24
     d2c:	90 95       	com	r25
     d2e:	a0 95       	com	r26
     d30:	b0 95       	com	r27
     d32:	82 23       	and	r24, r18
     d34:	93 23       	and	r25, r19
     d36:	a4 23       	and	r26, r20
     d38:	b5 23       	and	r27, r21
     d3a:	28 85       	ldd	r18, Y+8	; 0x08
     d3c:	39 85       	ldd	r19, Y+9	; 0x09
     d3e:	f9 01       	movw	r30, r18
     d40:	80 83       	st	Z, r24
     d42:	91 83       	std	Z+1, r25	; 0x01
     d44:	a2 83       	std	Z+2, r26	; 0x02
     d46:	b3 83       	std	Z+3, r27	; 0x03
     d48:	0e 94 ee 13 	call	0x27dc	; 0x27dc <xTaskResumeAll>
     d4c:	88 85       	ldd	r24, Y+8	; 0x08
     d4e:	99 85       	ldd	r25, Y+9	; 0x09
     d50:	fc 01       	movw	r30, r24
     d52:	80 81       	ld	r24, Z
     d54:	91 81       	ldd	r25, Z+1	; 0x01
     d56:	a2 81       	ldd	r26, Z+2	; 0x02
     d58:	b3 81       	ldd	r27, Z+3	; 0x03
     d5a:	bc 01       	movw	r22, r24
     d5c:	cd 01       	movw	r24, r26
     d5e:	6d 96       	adiw	r28, 0x1d	; 29
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <vEventGroupSetBitsCallback>:
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <vEventGroupSetBitsCallback+0x6>
     d70:	00 d0       	rcall	.+0      	; 0xd72 <vEventGroupSetBitsCallback+0x8>
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	89 83       	std	Y+1, r24	; 0x01
     d78:	9a 83       	std	Y+2, r25	; 0x02
     d7a:	4b 83       	std	Y+3, r20	; 0x03
     d7c:	5c 83       	std	Y+4, r21	; 0x04
     d7e:	6d 83       	std	Y+5, r22	; 0x05
     d80:	7e 83       	std	Y+6, r23	; 0x06
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	9c 81       	ldd	r25, Y+4	; 0x04
     d86:	ad 81       	ldd	r26, Y+5	; 0x05
     d88:	be 81       	ldd	r27, Y+6	; 0x06
     d8a:	29 81       	ldd	r18, Y+1	; 0x01
     d8c:	3a 81       	ldd	r19, Y+2	; 0x02
     d8e:	ac 01       	movw	r20, r24
     d90:	bd 01       	movw	r22, r26
     d92:	c9 01       	movw	r24, r18
     d94:	0e 94 ad 05 	call	0xb5a	; 0xb5a <xEventGroupSetBits>
     d98:	00 00       	nop
     d9a:	26 96       	adiw	r28, 0x06	; 6
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	de bf       	out	0x3e, r29	; 62
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     da6:	0f 93       	push	r16
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	2a 97       	sbiw	r28, 0x0a	; 10
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	6a 83       	std	Y+2, r22	; 0x02
     db8:	7b 83       	std	Y+3, r23	; 0x03
     dba:	8c 83       	std	Y+4, r24	; 0x04
     dbc:	9d 83       	std	Y+5, r25	; 0x05
     dbe:	2e 83       	std	Y+6, r18	; 0x06
     dc0:	3f 83       	std	Y+7, r19	; 0x07
     dc2:	48 87       	std	Y+8, r20	; 0x08
     dc4:	59 87       	std	Y+9, r21	; 0x09
     dc6:	0a 87       	std	Y+10, r16	; 0x0a
BaseType_t xWaitConditionMet = pdFALSE;
     dc8:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
     dca:	8a 85       	ldd	r24, Y+10	; 0x0a
     dcc:	88 23       	and	r24, r24
     dce:	99 f4       	brne	.+38     	; 0xdf6 <prvTestWaitCondition+0x50>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     dd0:	2a 81       	ldd	r18, Y+2	; 0x02
     dd2:	3b 81       	ldd	r19, Y+3	; 0x03
     dd4:	4c 81       	ldd	r20, Y+4	; 0x04
     dd6:	5d 81       	ldd	r21, Y+5	; 0x05
     dd8:	8e 81       	ldd	r24, Y+6	; 0x06
     dda:	9f 81       	ldd	r25, Y+7	; 0x07
     ddc:	a8 85       	ldd	r26, Y+8	; 0x08
     dde:	b9 85       	ldd	r27, Y+9	; 0x09
     de0:	82 23       	and	r24, r18
     de2:	93 23       	and	r25, r19
     de4:	a4 23       	and	r26, r20
     de6:	b5 23       	and	r27, r21
     de8:	89 2b       	or	r24, r25
     dea:	8a 2b       	or	r24, r26
     dec:	8b 2b       	or	r24, r27
     dee:	d1 f0       	breq	.+52     	; 0xe24 <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	89 83       	std	Y+1, r24	; 0x01
     df4:	17 c0       	rjmp	.+46     	; 0xe24 <prvTestWaitCondition+0x7e>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     df6:	2a 81       	ldd	r18, Y+2	; 0x02
     df8:	3b 81       	ldd	r19, Y+3	; 0x03
     dfa:	4c 81       	ldd	r20, Y+4	; 0x04
     dfc:	5d 81       	ldd	r21, Y+5	; 0x05
     dfe:	8e 81       	ldd	r24, Y+6	; 0x06
     e00:	9f 81       	ldd	r25, Y+7	; 0x07
     e02:	a8 85       	ldd	r26, Y+8	; 0x08
     e04:	b9 85       	ldd	r27, Y+9	; 0x09
     e06:	28 23       	and	r18, r24
     e08:	39 23       	and	r19, r25
     e0a:	4a 23       	and	r20, r26
     e0c:	5b 23       	and	r21, r27
     e0e:	8e 81       	ldd	r24, Y+6	; 0x06
     e10:	9f 81       	ldd	r25, Y+7	; 0x07
     e12:	a8 85       	ldd	r26, Y+8	; 0x08
     e14:	b9 85       	ldd	r27, Y+9	; 0x09
     e16:	28 17       	cp	r18, r24
     e18:	39 07       	cpc	r19, r25
     e1a:	4a 07       	cpc	r20, r26
     e1c:	5b 07       	cpc	r21, r27
     e1e:	11 f4       	brne	.+4      	; 0xe24 <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     e24:	89 81       	ldd	r24, Y+1	; 0x01
}
     e26:	2a 96       	adiw	r28, 0x0a	; 10
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	0f 91       	pop	r16
     e32:	08 95       	ret

00000e34 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     e34:	0f 93       	push	r16
     e36:	1f 93       	push	r17
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	29 97       	sbiw	r28, 0x09	; 9
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	8a 83       	std	Y+2, r24	; 0x02
     e48:	9b 83       	std	Y+3, r25	; 0x03
     e4a:	4c 83       	std	Y+4, r20	; 0x04
     e4c:	5d 83       	std	Y+5, r21	; 0x05
     e4e:	6e 83       	std	Y+6, r22	; 0x06
     e50:	7f 83       	std	Y+7, r23	; 0x07
     e52:	28 87       	std	Y+8, r18	; 0x08
     e54:	39 87       	std	Y+9, r19	; 0x09
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     e56:	28 85       	ldd	r18, Y+8	; 0x08
     e58:	39 85       	ldd	r19, Y+9	; 0x09
     e5a:	8c 81       	ldd	r24, Y+4	; 0x04
     e5c:	9d 81       	ldd	r25, Y+5	; 0x05
     e5e:	ae 81       	ldd	r26, Y+6	; 0x06
     e60:	bf 81       	ldd	r27, Y+7	; 0x07
     e62:	6a 81       	ldd	r22, Y+2	; 0x02
     e64:	7b 81       	ldd	r23, Y+3	; 0x03
     e66:	89 01       	movw	r16, r18
     e68:	9c 01       	movw	r18, r24
     e6a:	ad 01       	movw	r20, r26
     e6c:	85 eb       	ldi	r24, 0xB5	; 181
     e6e:	96 e0       	ldi	r25, 0x06	; 6
     e70:	0e 94 b0 20 	call	0x4160	; 0x4160 <xTimerPendFunctionCallFromISR>
     e74:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
     e76:	89 81       	ldd	r24, Y+1	; 0x01
	}
     e78:	29 96       	adiw	r28, 0x09	; 9
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	08 95       	ret

00000e88 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <pvPortMalloc+0x6>
     e8e:	1f 92       	push	r1
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	8b 83       	std	Y+3, r24	; 0x03
     e96:	9c 83       	std	Y+4, r25	; 0x04
void *pvReturn = NULL; 
     e98:	19 82       	std	Y+1, r1	; 0x01
     e9a:	1a 82       	std	Y+2, r1	; 0x02
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     e9c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     ea0:	20 91 02 2d 	lds	r18, 0x2D02	; 0x802d02 <xNextFreeByte>
     ea4:	30 91 03 2d 	lds	r19, 0x2D03	; 0x802d03 <xNextFreeByte+0x1>
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	9c 81       	ldd	r25, Y+4	; 0x04
     eac:	82 0f       	add	r24, r18
     eae:	93 1f       	adc	r25, r19
     eb0:	88 3b       	cpi	r24, 0xB8	; 184
     eb2:	9b 40       	sbci	r25, 0x0B	; 11
     eb4:	18 f5       	brcc	.+70     	; 0xefc <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     eb6:	20 91 02 2d 	lds	r18, 0x2D02	; 0x802d02 <xNextFreeByte>
     eba:	30 91 03 2d 	lds	r19, 0x2D03	; 0x802d03 <xNextFreeByte+0x1>
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	9c 81       	ldd	r25, Y+4	; 0x04
     ec2:	28 0f       	add	r18, r24
     ec4:	39 1f       	adc	r19, r25
     ec6:	80 91 02 2d 	lds	r24, 0x2D02	; 0x802d02 <xNextFreeByte>
     eca:	90 91 03 2d 	lds	r25, 0x2D03	; 0x802d03 <xNextFreeByte+0x1>
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     ece:	82 17       	cp	r24, r18
     ed0:	93 07       	cpc	r25, r19
     ed2:	a0 f4       	brcc	.+40     	; 0xefc <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     ed4:	80 91 02 2d 	lds	r24, 0x2D02	; 0x802d02 <xNextFreeByte>
     ed8:	90 91 03 2d 	lds	r25, 0x2D03	; 0x802d03 <xNextFreeByte+0x1>
     edc:	86 5b       	subi	r24, 0xB6	; 182
     ede:	9e 4d       	sbci	r25, 0xDE	; 222
     ee0:	89 83       	std	Y+1, r24	; 0x01
     ee2:	9a 83       	std	Y+2, r25	; 0x02
			xNextFreeByte += xWantedSize;			
     ee4:	20 91 02 2d 	lds	r18, 0x2D02	; 0x802d02 <xNextFreeByte>
     ee8:	30 91 03 2d 	lds	r19, 0x2D03	; 0x802d03 <xNextFreeByte+0x1>
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	9c 81       	ldd	r25, Y+4	; 0x04
     ef0:	82 0f       	add	r24, r18
     ef2:	93 1f       	adc	r25, r19
     ef4:	80 93 02 2d 	sts	0x2D02, r24	; 0x802d02 <xNextFreeByte>
     ef8:	90 93 03 2d 	sts	0x2D03, r25	; 0x802d03 <xNextFreeByte+0x1>
		}	
	}
	xTaskResumeAll();
     efc:	0e 94 ee 13 	call	0x27dc	; 0x27dc <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f04:	24 96       	adiw	r28, 0x04	; 4
     f06:	cd bf       	out	0x3d, r28	; 61
     f08:	de bf       	out	0x3e, r29	; 62
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	08 95       	ret

00000f10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	1f 92       	push	r1
     f16:	1f 92       	push	r1
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	89 83       	std	Y+1, r24	; 0x01
     f1e:	9a 83       	std	Y+2, r25	; 0x02
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
	
	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     f20:	00 00       	nop
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	08 95       	ret

00000f2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	1f 92       	push	r1
     f32:	1f 92       	push	r1
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	89 83       	std	Y+1, r24	; 0x01
     f3a:	9a 83       	std	Y+2, r25	; 0x02
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	9c 01       	movw	r18, r24
     f42:	2d 5f       	subi	r18, 0xFD	; 253
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	9a 81       	ldd	r25, Y+2	; 0x02
     f4a:	fc 01       	movw	r30, r24
     f4c:	21 83       	std	Z+1, r18	; 0x01
     f4e:	32 83       	std	Z+2, r19	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     f50:	29 81       	ldd	r18, Y+1	; 0x01
     f52:	3a 81       	ldd	r19, Y+2	; 0x02
     f54:	8f ef       	ldi	r24, 0xFF	; 255
     f56:	9f ef       	ldi	r25, 0xFF	; 255
     f58:	dc 01       	movw	r26, r24
     f5a:	f9 01       	movw	r30, r18
     f5c:	83 83       	std	Z+3, r24	; 0x03
     f5e:	94 83       	std	Z+4, r25	; 0x04
     f60:	a5 83       	std	Z+5, r26	; 0x05
     f62:	b6 83       	std	Z+6, r27	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	9c 01       	movw	r18, r24
     f6a:	2d 5f       	subi	r18, 0xFD	; 253
     f6c:	3f 4f       	sbci	r19, 0xFF	; 255
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	9a 81       	ldd	r25, Y+2	; 0x02
     f72:	fc 01       	movw	r30, r24
     f74:	27 83       	std	Z+7, r18	; 0x07
     f76:	30 87       	std	Z+8, r19	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	9a 81       	ldd	r25, Y+2	; 0x02
     f7c:	9c 01       	movw	r18, r24
     f7e:	2d 5f       	subi	r18, 0xFD	; 253
     f80:	3f 4f       	sbci	r19, 0xFF	; 255
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	9a 81       	ldd	r25, Y+2	; 0x02
     f86:	fc 01       	movw	r30, r24
     f88:	21 87       	std	Z+9, r18	; 0x09
     f8a:	32 87       	std	Z+10, r19	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	fc 01       	movw	r30, r24
     f92:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     f94:	00 00       	nop
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	08 95       	ret

00000fa0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	1f 92       	push	r1
     fa6:	1f 92       	push	r1
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	89 83       	std	Y+1, r24	; 0x01
     fae:	9a 83       	std	Y+2, r25	; 0x02
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	9a 81       	ldd	r25, Y+2	; 0x02
     fb4:	fc 01       	movw	r30, r24
     fb6:	12 86       	std	Z+10, r1	; 0x0a
     fb8:	13 86       	std	Z+11, r1	; 0x0b

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     fba:	00 00       	nop
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	08 95       	ret

00000fc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	00 d0       	rcall	.+0      	; 0xfcc <vListInsertEnd+0x6>
     fcc:	00 d0       	rcall	.+0      	; 0xfce <vListInsertEnd+0x8>
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	8b 83       	std	Y+3, r24	; 0x03
     fd4:	9c 83       	std	Y+4, r25	; 0x04
     fd6:	6d 83       	std	Y+5, r22	; 0x05
     fd8:	7e 83       	std	Y+6, r23	; 0x06
ListItem_t * const pxIndex = pxList->pxIndex;
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	9c 81       	ldd	r25, Y+4	; 0x04
     fde:	fc 01       	movw	r30, r24
     fe0:	81 81       	ldd	r24, Z+1	; 0x01
     fe2:	92 81       	ldd	r25, Z+2	; 0x02
     fe4:	89 83       	std	Y+1, r24	; 0x01
     fe6:	9a 83       	std	Y+2, r25	; 0x02
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     fe8:	8d 81       	ldd	r24, Y+5	; 0x05
     fea:	9e 81       	ldd	r25, Y+6	; 0x06
     fec:	29 81       	ldd	r18, Y+1	; 0x01
     fee:	3a 81       	ldd	r19, Y+2	; 0x02
     ff0:	fc 01       	movw	r30, r24
     ff2:	24 83       	std	Z+4, r18	; 0x04
     ff4:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	9a 81       	ldd	r25, Y+2	; 0x02
     ffa:	fc 01       	movw	r30, r24
     ffc:	26 81       	ldd	r18, Z+6	; 0x06
     ffe:	37 81       	ldd	r19, Z+7	; 0x07
    1000:	8d 81       	ldd	r24, Y+5	; 0x05
    1002:	9e 81       	ldd	r25, Y+6	; 0x06
    1004:	fc 01       	movw	r30, r24
    1006:	26 83       	std	Z+6, r18	; 0x06
    1008:	37 83       	std	Z+7, r19	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	9a 81       	ldd	r25, Y+2	; 0x02
    100e:	fc 01       	movw	r30, r24
    1010:	86 81       	ldd	r24, Z+6	; 0x06
    1012:	97 81       	ldd	r25, Z+7	; 0x07
    1014:	2d 81       	ldd	r18, Y+5	; 0x05
    1016:	3e 81       	ldd	r19, Y+6	; 0x06
    1018:	fc 01       	movw	r30, r24
    101a:	24 83       	std	Z+4, r18	; 0x04
    101c:	35 83       	std	Z+5, r19	; 0x05
	pxIndex->pxPrevious = pxNewListItem;
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	9a 81       	ldd	r25, Y+2	; 0x02
    1022:	2d 81       	ldd	r18, Y+5	; 0x05
    1024:	3e 81       	ldd	r19, Y+6	; 0x06
    1026:	fc 01       	movw	r30, r24
    1028:	26 83       	std	Z+6, r18	; 0x06
    102a:	37 83       	std	Z+7, r19	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    102c:	8d 81       	ldd	r24, Y+5	; 0x05
    102e:	9e 81       	ldd	r25, Y+6	; 0x06
    1030:	2b 81       	ldd	r18, Y+3	; 0x03
    1032:	3c 81       	ldd	r19, Y+4	; 0x04
    1034:	fc 01       	movw	r30, r24
    1036:	22 87       	std	Z+10, r18	; 0x0a
    1038:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	fc 01       	movw	r30, r24
    1040:	80 81       	ld	r24, Z
    1042:	21 e0       	ldi	r18, 0x01	; 1
    1044:	28 0f       	add	r18, r24
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	fc 01       	movw	r30, r24
    104c:	20 83       	st	Z, r18
}
    104e:	00 00       	nop
    1050:	26 96       	adiw	r28, 0x06	; 6
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	08 95       	ret

0000105c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	2a 97       	sbiw	r28, 0x0a	; 10
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	de bf       	out	0x3e, r29	; 62
    106a:	8f 83       	std	Y+7, r24	; 0x07
    106c:	98 87       	std	Y+8, r25	; 0x08
    106e:	69 87       	std	Y+9, r22	; 0x09
    1070:	7a 87       	std	Y+10, r23	; 0x0a
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1072:	89 85       	ldd	r24, Y+9	; 0x09
    1074:	9a 85       	ldd	r25, Y+10	; 0x0a
    1076:	fc 01       	movw	r30, r24
    1078:	80 81       	ld	r24, Z
    107a:	91 81       	ldd	r25, Z+1	; 0x01
    107c:	a2 81       	ldd	r26, Z+2	; 0x02
    107e:	b3 81       	ldd	r27, Z+3	; 0x03
    1080:	8b 83       	std	Y+3, r24	; 0x03
    1082:	9c 83       	std	Y+4, r25	; 0x04
    1084:	ad 83       	std	Y+5, r26	; 0x05
    1086:	be 83       	std	Y+6, r27	; 0x06
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	9c 81       	ldd	r25, Y+4	; 0x04
    108c:	ad 81       	ldd	r26, Y+5	; 0x05
    108e:	be 81       	ldd	r27, Y+6	; 0x06
    1090:	8f 3f       	cpi	r24, 0xFF	; 255
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	af 4f       	sbci	r26, 0xFF	; 255
    1096:	bf 4f       	sbci	r27, 0xFF	; 255
    1098:	41 f4       	brne	.+16     	; 0x10aa <vListInsert+0x4e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    109a:	8f 81       	ldd	r24, Y+7	; 0x07
    109c:	98 85       	ldd	r25, Y+8	; 0x08
    109e:	fc 01       	movw	r30, r24
    10a0:	81 85       	ldd	r24, Z+9	; 0x09
    10a2:	92 85       	ldd	r25, Z+10	; 0x0a
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	9a 83       	std	Y+2, r25	; 0x02
    10a8:	20 c0       	rjmp	.+64     	; 0x10ea <vListInsert+0x8e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    10aa:	8f 81       	ldd	r24, Y+7	; 0x07
    10ac:	98 85       	ldd	r25, Y+8	; 0x08
    10ae:	03 96       	adiw	r24, 0x03	; 3
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	9a 83       	std	Y+2, r25	; 0x02
    10b4:	07 c0       	rjmp	.+14     	; 0x10c4 <vListInsert+0x68>
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ba:	fc 01       	movw	r30, r24
    10bc:	84 81       	ldd	r24, Z+4	; 0x04
    10be:	95 81       	ldd	r25, Z+5	; 0x05
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	9a 83       	std	Y+2, r25	; 0x02
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	fc 01       	movw	r30, r24
    10ca:	84 81       	ldd	r24, Z+4	; 0x04
    10cc:	95 81       	ldd	r25, Z+5	; 0x05
    10ce:	fc 01       	movw	r30, r24
    10d0:	20 81       	ld	r18, Z
    10d2:	31 81       	ldd	r19, Z+1	; 0x01
    10d4:	42 81       	ldd	r20, Z+2	; 0x02
    10d6:	53 81       	ldd	r21, Z+3	; 0x03
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	ad 81       	ldd	r26, Y+5	; 0x05
    10de:	be 81       	ldd	r27, Y+6	; 0x06
    10e0:	82 17       	cp	r24, r18
    10e2:	93 07       	cpc	r25, r19
    10e4:	a4 07       	cpc	r26, r20
    10e6:	b5 07       	cpc	r27, r21
    10e8:	30 f7       	brcc	.-52     	; 0x10b6 <vListInsert+0x5a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	9a 81       	ldd	r25, Y+2	; 0x02
    10ee:	fc 01       	movw	r30, r24
    10f0:	24 81       	ldd	r18, Z+4	; 0x04
    10f2:	35 81       	ldd	r19, Z+5	; 0x05
    10f4:	89 85       	ldd	r24, Y+9	; 0x09
    10f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f8:	fc 01       	movw	r30, r24
    10fa:	24 83       	std	Z+4, r18	; 0x04
    10fc:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    10fe:	89 85       	ldd	r24, Y+9	; 0x09
    1100:	9a 85       	ldd	r25, Y+10	; 0x0a
    1102:	fc 01       	movw	r30, r24
    1104:	84 81       	ldd	r24, Z+4	; 0x04
    1106:	95 81       	ldd	r25, Z+5	; 0x05
    1108:	29 85       	ldd	r18, Y+9	; 0x09
    110a:	3a 85       	ldd	r19, Y+10	; 0x0a
    110c:	fc 01       	movw	r30, r24
    110e:	26 83       	std	Z+6, r18	; 0x06
    1110:	37 83       	std	Z+7, r19	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
    1112:	89 85       	ldd	r24, Y+9	; 0x09
    1114:	9a 85       	ldd	r25, Y+10	; 0x0a
    1116:	29 81       	ldd	r18, Y+1	; 0x01
    1118:	3a 81       	ldd	r19, Y+2	; 0x02
    111a:	fc 01       	movw	r30, r24
    111c:	26 83       	std	Z+6, r18	; 0x06
    111e:	37 83       	std	Z+7, r19	; 0x07
	pxIterator->pxNext = pxNewListItem;
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	9a 81       	ldd	r25, Y+2	; 0x02
    1124:	29 85       	ldd	r18, Y+9	; 0x09
    1126:	3a 85       	ldd	r19, Y+10	; 0x0a
    1128:	fc 01       	movw	r30, r24
    112a:	24 83       	std	Z+4, r18	; 0x04
    112c:	35 83       	std	Z+5, r19	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    112e:	89 85       	ldd	r24, Y+9	; 0x09
    1130:	9a 85       	ldd	r25, Y+10	; 0x0a
    1132:	2f 81       	ldd	r18, Y+7	; 0x07
    1134:	38 85       	ldd	r19, Y+8	; 0x08
    1136:	fc 01       	movw	r30, r24
    1138:	22 87       	std	Z+10, r18	; 0x0a
    113a:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    113c:	8f 81       	ldd	r24, Y+7	; 0x07
    113e:	98 85       	ldd	r25, Y+8	; 0x08
    1140:	fc 01       	movw	r30, r24
    1142:	80 81       	ld	r24, Z
    1144:	21 e0       	ldi	r18, 0x01	; 1
    1146:	28 0f       	add	r18, r24
    1148:	8f 81       	ldd	r24, Y+7	; 0x07
    114a:	98 85       	ldd	r25, Y+8	; 0x08
    114c:	fc 01       	movw	r30, r24
    114e:	20 83       	st	Z, r18
}
    1150:	00 00       	nop
    1152:	2a 96       	adiw	r28, 0x0a	; 10
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	08 95       	ret

0000115e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	00 d0       	rcall	.+0      	; 0x1164 <uxListRemove+0x6>
    1164:	1f 92       	push	r1
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	8b 83       	std	Y+3, r24	; 0x03
    116c:	9c 83       	std	Y+4, r25	; 0x04
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	fc 01       	movw	r30, r24
    1174:	82 85       	ldd	r24, Z+10	; 0x0a
    1176:	93 85       	ldd	r25, Z+11	; 0x0b
    1178:	89 83       	std	Y+1, r24	; 0x01
    117a:	9a 83       	std	Y+2, r25	; 0x02

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	fc 01       	movw	r30, r24
    1182:	84 81       	ldd	r24, Z+4	; 0x04
    1184:	95 81       	ldd	r25, Z+5	; 0x05
    1186:	2b 81       	ldd	r18, Y+3	; 0x03
    1188:	3c 81       	ldd	r19, Y+4	; 0x04
    118a:	f9 01       	movw	r30, r18
    118c:	26 81       	ldd	r18, Z+6	; 0x06
    118e:	37 81       	ldd	r19, Z+7	; 0x07
    1190:	fc 01       	movw	r30, r24
    1192:	26 83       	std	Z+6, r18	; 0x06
    1194:	37 83       	std	Z+7, r19	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	fc 01       	movw	r30, r24
    119c:	86 81       	ldd	r24, Z+6	; 0x06
    119e:	97 81       	ldd	r25, Z+7	; 0x07
    11a0:	2b 81       	ldd	r18, Y+3	; 0x03
    11a2:	3c 81       	ldd	r19, Y+4	; 0x04
    11a4:	f9 01       	movw	r30, r18
    11a6:	24 81       	ldd	r18, Z+4	; 0x04
    11a8:	35 81       	ldd	r19, Z+5	; 0x05
    11aa:	fc 01       	movw	r30, r24
    11ac:	24 83       	std	Z+4, r18	; 0x04
    11ae:	35 83       	std	Z+5, r19	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	9a 81       	ldd	r25, Y+2	; 0x02
    11b4:	fc 01       	movw	r30, r24
    11b6:	21 81       	ldd	r18, Z+1	; 0x01
    11b8:	32 81       	ldd	r19, Z+2	; 0x02
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	9c 81       	ldd	r25, Y+4	; 0x04
    11be:	28 17       	cp	r18, r24
    11c0:	39 07       	cpc	r19, r25
    11c2:	51 f4       	brne	.+20     	; 0x11d8 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	fc 01       	movw	r30, r24
    11ca:	26 81       	ldd	r18, Z+6	; 0x06
    11cc:	37 81       	ldd	r19, Z+7	; 0x07
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	9a 81       	ldd	r25, Y+2	; 0x02
    11d2:	fc 01       	movw	r30, r24
    11d4:	21 83       	std	Z+1, r18	; 0x01
    11d6:	32 83       	std	Z+2, r19	; 0x02
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	fc 01       	movw	r30, r24
    11de:	12 86       	std	Z+10, r1	; 0x0a
    11e0:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	9a 81       	ldd	r25, Y+2	; 0x02
    11e6:	fc 01       	movw	r30, r24
    11e8:	80 81       	ld	r24, Z
    11ea:	2f ef       	ldi	r18, 0xFF	; 255
    11ec:	28 0f       	add	r18, r24
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	9a 81       	ldd	r25, Y+2	; 0x02
    11f2:	fc 01       	movw	r30, r24
    11f4:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	9a 81       	ldd	r25, Y+2	; 0x02
    11fa:	fc 01       	movw	r30, r24
    11fc:	80 81       	ld	r24, Z
}
    11fe:	24 96       	adiw	r28, 0x04	; 4
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	08 95       	ret

0000120a <_portSetInterruptMaskFromIsr>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	80 ea       	ldi	r24, 0xA0	; 160
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	fc 01       	movw	r30, r24
    121a:	12 81       	ldd	r17, Z+2	; 0x02
    121c:	80 ea       	ldi	r24, 0xA0	; 160
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	20 ea       	ldi	r18, 0xA0	; 160
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	f9 01       	movw	r30, r18
    1226:	22 81       	ldd	r18, Z+2	; 0x02
    1228:	28 7f       	andi	r18, 0xF8	; 248
    122a:	fc 01       	movw	r30, r24
    122c:	22 83       	std	Z+2, r18	; 0x02
    122e:	81 2f       	mov	r24, r17
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	1f 91       	pop	r17
    1236:	08 95       	ret

00001238 <pxPortInitialiseStack>:
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	2a 97       	sbiw	r28, 0x0a	; 10
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	8d 83       	std	Y+5, r24	; 0x05
    1248:	9e 83       	std	Y+6, r25	; 0x06
    124a:	6f 83       	std	Y+7, r22	; 0x07
    124c:	78 87       	std	Y+8, r23	; 0x08
    124e:	49 87       	std	Y+9, r20	; 0x09
    1250:	5a 87       	std	Y+10, r21	; 0x0a
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
    1254:	9e 81       	ldd	r25, Y+6	; 0x06
    1256:	21 e1       	ldi	r18, 0x11	; 17
    1258:	fc 01       	movw	r30, r24
    125a:	20 83       	st	Z, r18
    125c:	8d 81       	ldd	r24, Y+5	; 0x05
    125e:	9e 81       	ldd	r25, Y+6	; 0x06
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	8d 83       	std	Y+5, r24	; 0x05
    1264:	9e 83       	std	Y+6, r25	; 0x06
    1266:	8d 81       	ldd	r24, Y+5	; 0x05
    1268:	9e 81       	ldd	r25, Y+6	; 0x06
    126a:	22 e2       	ldi	r18, 0x22	; 34
    126c:	fc 01       	movw	r30, r24
    126e:	20 83       	st	Z, r18
    1270:	8d 81       	ldd	r24, Y+5	; 0x05
    1272:	9e 81       	ldd	r25, Y+6	; 0x06
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	8d 83       	std	Y+5, r24	; 0x05
    1278:	9e 83       	std	Y+6, r25	; 0x06
    127a:	8d 81       	ldd	r24, Y+5	; 0x05
    127c:	9e 81       	ldd	r25, Y+6	; 0x06
    127e:	23 e3       	ldi	r18, 0x33	; 51
    1280:	fc 01       	movw	r30, r24
    1282:	20 83       	st	Z, r18
    1284:	8d 81       	ldd	r24, Y+5	; 0x05
    1286:	9e 81       	ldd	r25, Y+6	; 0x06
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	8d 83       	std	Y+5, r24	; 0x05
    128c:	9e 83       	std	Y+6, r25	; 0x06
    128e:	8f 81       	ldd	r24, Y+7	; 0x07
    1290:	98 85       	ldd	r25, Y+8	; 0x08
    1292:	cc 01       	movw	r24, r24
    1294:	a0 e0       	ldi	r26, 0x00	; 0
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	9a 83       	std	Y+2, r25	; 0x02
    129c:	ab 83       	std	Y+3, r26	; 0x03
    129e:	bc 83       	std	Y+4, r27	; 0x04
    12a0:	29 81       	ldd	r18, Y+1	; 0x01
    12a2:	8d 81       	ldd	r24, Y+5	; 0x05
    12a4:	9e 81       	ldd	r25, Y+6	; 0x06
    12a6:	fc 01       	movw	r30, r24
    12a8:	20 83       	st	Z, r18
    12aa:	8d 81       	ldd	r24, Y+5	; 0x05
    12ac:	9e 81       	ldd	r25, Y+6	; 0x06
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	8d 83       	std	Y+5, r24	; 0x05
    12b2:	9e 83       	std	Y+6, r25	; 0x06
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	9a 81       	ldd	r25, Y+2	; 0x02
    12b8:	ab 81       	ldd	r26, Y+3	; 0x03
    12ba:	bc 81       	ldd	r27, Y+4	; 0x04
    12bc:	89 2f       	mov	r24, r25
    12be:	9a 2f       	mov	r25, r26
    12c0:	ab 2f       	mov	r26, r27
    12c2:	bb 27       	eor	r27, r27
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	9a 83       	std	Y+2, r25	; 0x02
    12c8:	ab 83       	std	Y+3, r26	; 0x03
    12ca:	bc 83       	std	Y+4, r27	; 0x04
    12cc:	29 81       	ldd	r18, Y+1	; 0x01
    12ce:	8d 81       	ldd	r24, Y+5	; 0x05
    12d0:	9e 81       	ldd	r25, Y+6	; 0x06
    12d2:	fc 01       	movw	r30, r24
    12d4:	20 83       	st	Z, r18
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	8d 83       	std	Y+5, r24	; 0x05
    12de:	9e 83       	std	Y+6, r25	; 0x06
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	9a 81       	ldd	r25, Y+2	; 0x02
    12e4:	ab 81       	ldd	r26, Y+3	; 0x03
    12e6:	bc 81       	ldd	r27, Y+4	; 0x04
    12e8:	89 2f       	mov	r24, r25
    12ea:	9a 2f       	mov	r25, r26
    12ec:	ab 2f       	mov	r26, r27
    12ee:	bb 27       	eor	r27, r27
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	9a 83       	std	Y+2, r25	; 0x02
    12f4:	ab 83       	std	Y+3, r26	; 0x03
    12f6:	bc 83       	std	Y+4, r27	; 0x04
    12f8:	29 81       	ldd	r18, Y+1	; 0x01
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	fc 01       	movw	r30, r24
    1300:	20 83       	st	Z, r18
    1302:	8d 81       	ldd	r24, Y+5	; 0x05
    1304:	9e 81       	ldd	r25, Y+6	; 0x06
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	8d 83       	std	Y+5, r24	; 0x05
    130a:	9e 83       	std	Y+6, r25	; 0x06
    130c:	8d 81       	ldd	r24, Y+5	; 0x05
    130e:	9e 81       	ldd	r25, Y+6	; 0x06
    1310:	21 e3       	ldi	r18, 0x31	; 49
    1312:	fc 01       	movw	r30, r24
    1314:	20 83       	st	Z, r18
    1316:	8d 81       	ldd	r24, Y+5	; 0x05
    1318:	9e 81       	ldd	r25, Y+6	; 0x06
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	8d 83       	std	Y+5, r24	; 0x05
    131e:	9e 83       	std	Y+6, r25	; 0x06
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	20 e8       	ldi	r18, 0x80	; 128
    1326:	fc 01       	movw	r30, r24
    1328:	20 83       	st	Z, r18
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	8d 83       	std	Y+5, r24	; 0x05
    1332:	9e 83       	std	Y+6, r25	; 0x06
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	27 e8       	ldi	r18, 0x87	; 135
    133a:	fc 01       	movw	r30, r24
    133c:	20 83       	st	Z, r18
    133e:	8d 81       	ldd	r24, Y+5	; 0x05
    1340:	9e 81       	ldd	r25, Y+6	; 0x06
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	8d 83       	std	Y+5, r24	; 0x05
    1346:	9e 83       	std	Y+6, r25	; 0x06
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	fc 01       	movw	r30, r24
    134e:	10 82       	st	Z, r1
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	8d 83       	std	Y+5, r24	; 0x05
    1358:	9e 83       	std	Y+6, r25	; 0x06
    135a:	8d 81       	ldd	r24, Y+5	; 0x05
    135c:	9e 81       	ldd	r25, Y+6	; 0x06
    135e:	fc 01       	movw	r30, r24
    1360:	10 82       	st	Z, r1
    1362:	8d 81       	ldd	r24, Y+5	; 0x05
    1364:	9e 81       	ldd	r25, Y+6	; 0x06
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	8d 83       	std	Y+5, r24	; 0x05
    136a:	9e 83       	std	Y+6, r25	; 0x06
    136c:	8d 81       	ldd	r24, Y+5	; 0x05
    136e:	9e 81       	ldd	r25, Y+6	; 0x06
    1370:	22 e0       	ldi	r18, 0x02	; 2
    1372:	fc 01       	movw	r30, r24
    1374:	20 83       	st	Z, r18
    1376:	8d 81       	ldd	r24, Y+5	; 0x05
    1378:	9e 81       	ldd	r25, Y+6	; 0x06
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	8d 83       	std	Y+5, r24	; 0x05
    137e:	9e 83       	std	Y+6, r25	; 0x06
    1380:	8d 81       	ldd	r24, Y+5	; 0x05
    1382:	9e 81       	ldd	r25, Y+6	; 0x06
    1384:	23 e0       	ldi	r18, 0x03	; 3
    1386:	fc 01       	movw	r30, r24
    1388:	20 83       	st	Z, r18
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	9e 81       	ldd	r25, Y+6	; 0x06
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	8d 83       	std	Y+5, r24	; 0x05
    1392:	9e 83       	std	Y+6, r25	; 0x06
    1394:	8d 81       	ldd	r24, Y+5	; 0x05
    1396:	9e 81       	ldd	r25, Y+6	; 0x06
    1398:	24 e0       	ldi	r18, 0x04	; 4
    139a:	fc 01       	movw	r30, r24
    139c:	20 83       	st	Z, r18
    139e:	8d 81       	ldd	r24, Y+5	; 0x05
    13a0:	9e 81       	ldd	r25, Y+6	; 0x06
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	8d 83       	std	Y+5, r24	; 0x05
    13a6:	9e 83       	std	Y+6, r25	; 0x06
    13a8:	8d 81       	ldd	r24, Y+5	; 0x05
    13aa:	9e 81       	ldd	r25, Y+6	; 0x06
    13ac:	25 e0       	ldi	r18, 0x05	; 5
    13ae:	fc 01       	movw	r30, r24
    13b0:	20 83       	st	Z, r18
    13b2:	8d 81       	ldd	r24, Y+5	; 0x05
    13b4:	9e 81       	ldd	r25, Y+6	; 0x06
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	8d 83       	std	Y+5, r24	; 0x05
    13ba:	9e 83       	std	Y+6, r25	; 0x06
    13bc:	8d 81       	ldd	r24, Y+5	; 0x05
    13be:	9e 81       	ldd	r25, Y+6	; 0x06
    13c0:	26 e0       	ldi	r18, 0x06	; 6
    13c2:	fc 01       	movw	r30, r24
    13c4:	20 83       	st	Z, r18
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	8d 83       	std	Y+5, r24	; 0x05
    13ce:	9e 83       	std	Y+6, r25	; 0x06
    13d0:	8d 81       	ldd	r24, Y+5	; 0x05
    13d2:	9e 81       	ldd	r25, Y+6	; 0x06
    13d4:	27 e0       	ldi	r18, 0x07	; 7
    13d6:	fc 01       	movw	r30, r24
    13d8:	20 83       	st	Z, r18
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	9e 81       	ldd	r25, Y+6	; 0x06
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	8d 83       	std	Y+5, r24	; 0x05
    13e2:	9e 83       	std	Y+6, r25	; 0x06
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	9e 81       	ldd	r25, Y+6	; 0x06
    13e8:	28 e0       	ldi	r18, 0x08	; 8
    13ea:	fc 01       	movw	r30, r24
    13ec:	20 83       	st	Z, r18
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	9e 81       	ldd	r25, Y+6	; 0x06
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	8d 83       	std	Y+5, r24	; 0x05
    13f6:	9e 83       	std	Y+6, r25	; 0x06
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	9e 81       	ldd	r25, Y+6	; 0x06
    13fc:	29 e0       	ldi	r18, 0x09	; 9
    13fe:	fc 01       	movw	r30, r24
    1400:	20 83       	st	Z, r18
    1402:	8d 81       	ldd	r24, Y+5	; 0x05
    1404:	9e 81       	ldd	r25, Y+6	; 0x06
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	8d 83       	std	Y+5, r24	; 0x05
    140a:	9e 83       	std	Y+6, r25	; 0x06
    140c:	8d 81       	ldd	r24, Y+5	; 0x05
    140e:	9e 81       	ldd	r25, Y+6	; 0x06
    1410:	20 e1       	ldi	r18, 0x10	; 16
    1412:	fc 01       	movw	r30, r24
    1414:	20 83       	st	Z, r18
    1416:	8d 81       	ldd	r24, Y+5	; 0x05
    1418:	9e 81       	ldd	r25, Y+6	; 0x06
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	8d 83       	std	Y+5, r24	; 0x05
    141e:	9e 83       	std	Y+6, r25	; 0x06
    1420:	8d 81       	ldd	r24, Y+5	; 0x05
    1422:	9e 81       	ldd	r25, Y+6	; 0x06
    1424:	21 e1       	ldi	r18, 0x11	; 17
    1426:	fc 01       	movw	r30, r24
    1428:	20 83       	st	Z, r18
    142a:	8d 81       	ldd	r24, Y+5	; 0x05
    142c:	9e 81       	ldd	r25, Y+6	; 0x06
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	8d 83       	std	Y+5, r24	; 0x05
    1432:	9e 83       	std	Y+6, r25	; 0x06
    1434:	8d 81       	ldd	r24, Y+5	; 0x05
    1436:	9e 81       	ldd	r25, Y+6	; 0x06
    1438:	22 e1       	ldi	r18, 0x12	; 18
    143a:	fc 01       	movw	r30, r24
    143c:	20 83       	st	Z, r18
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	9e 81       	ldd	r25, Y+6	; 0x06
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	8d 83       	std	Y+5, r24	; 0x05
    1446:	9e 83       	std	Y+6, r25	; 0x06
    1448:	8d 81       	ldd	r24, Y+5	; 0x05
    144a:	9e 81       	ldd	r25, Y+6	; 0x06
    144c:	23 e1       	ldi	r18, 0x13	; 19
    144e:	fc 01       	movw	r30, r24
    1450:	20 83       	st	Z, r18
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	8d 83       	std	Y+5, r24	; 0x05
    145a:	9e 83       	std	Y+6, r25	; 0x06
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	24 e1       	ldi	r18, 0x14	; 20
    1462:	fc 01       	movw	r30, r24
    1464:	20 83       	st	Z, r18
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	01 97       	sbiw	r24, 0x01	; 1
    146c:	8d 83       	std	Y+5, r24	; 0x05
    146e:	9e 83       	std	Y+6, r25	; 0x06
    1470:	8d 81       	ldd	r24, Y+5	; 0x05
    1472:	9e 81       	ldd	r25, Y+6	; 0x06
    1474:	25 e1       	ldi	r18, 0x15	; 21
    1476:	fc 01       	movw	r30, r24
    1478:	20 83       	st	Z, r18
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	8d 83       	std	Y+5, r24	; 0x05
    1482:	9e 83       	std	Y+6, r25	; 0x06
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	26 e1       	ldi	r18, 0x16	; 22
    148a:	fc 01       	movw	r30, r24
    148c:	20 83       	st	Z, r18
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	8d 83       	std	Y+5, r24	; 0x05
    1496:	9e 83       	std	Y+6, r25	; 0x06
    1498:	8d 81       	ldd	r24, Y+5	; 0x05
    149a:	9e 81       	ldd	r25, Y+6	; 0x06
    149c:	27 e1       	ldi	r18, 0x17	; 23
    149e:	fc 01       	movw	r30, r24
    14a0:	20 83       	st	Z, r18
    14a2:	8d 81       	ldd	r24, Y+5	; 0x05
    14a4:	9e 81       	ldd	r25, Y+6	; 0x06
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	8d 83       	std	Y+5, r24	; 0x05
    14aa:	9e 83       	std	Y+6, r25	; 0x06
    14ac:	8d 81       	ldd	r24, Y+5	; 0x05
    14ae:	9e 81       	ldd	r25, Y+6	; 0x06
    14b0:	28 e1       	ldi	r18, 0x18	; 24
    14b2:	fc 01       	movw	r30, r24
    14b4:	20 83       	st	Z, r18
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	8d 83       	std	Y+5, r24	; 0x05
    14be:	9e 83       	std	Y+6, r25	; 0x06
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	9e 81       	ldd	r25, Y+6	; 0x06
    14c4:	29 e1       	ldi	r18, 0x19	; 25
    14c6:	fc 01       	movw	r30, r24
    14c8:	20 83       	st	Z, r18
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	8d 83       	std	Y+5, r24	; 0x05
    14d2:	9e 83       	std	Y+6, r25	; 0x06
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	9e 81       	ldd	r25, Y+6	; 0x06
    14d8:	20 e2       	ldi	r18, 0x20	; 32
    14da:	fc 01       	movw	r30, r24
    14dc:	20 83       	st	Z, r18
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	9e 81       	ldd	r25, Y+6	; 0x06
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	8d 83       	std	Y+5, r24	; 0x05
    14e6:	9e 83       	std	Y+6, r25	; 0x06
    14e8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ea:	9e 81       	ldd	r25, Y+6	; 0x06
    14ec:	21 e2       	ldi	r18, 0x21	; 33
    14ee:	fc 01       	movw	r30, r24
    14f0:	20 83       	st	Z, r18
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	9e 81       	ldd	r25, Y+6	; 0x06
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	8d 83       	std	Y+5, r24	; 0x05
    14fa:	9e 83       	std	Y+6, r25	; 0x06
    14fc:	8d 81       	ldd	r24, Y+5	; 0x05
    14fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1500:	22 e2       	ldi	r18, 0x22	; 34
    1502:	fc 01       	movw	r30, r24
    1504:	20 83       	st	Z, r18
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	9e 81       	ldd	r25, Y+6	; 0x06
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	8d 83       	std	Y+5, r24	; 0x05
    150e:	9e 83       	std	Y+6, r25	; 0x06
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	23 e2       	ldi	r18, 0x23	; 35
    1516:	fc 01       	movw	r30, r24
    1518:	20 83       	st	Z, r18
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	8d 83       	std	Y+5, r24	; 0x05
    1522:	9e 83       	std	Y+6, r25	; 0x06
    1524:	89 85       	ldd	r24, Y+9	; 0x09
    1526:	9a 85       	ldd	r25, Y+10	; 0x0a
    1528:	cc 01       	movw	r24, r24
    152a:	a0 e0       	ldi	r26, 0x00	; 0
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	9a 83       	std	Y+2, r25	; 0x02
    1532:	ab 83       	std	Y+3, r26	; 0x03
    1534:	bc 83       	std	Y+4, r27	; 0x04
    1536:	29 81       	ldd	r18, Y+1	; 0x01
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	9e 81       	ldd	r25, Y+6	; 0x06
    153c:	fc 01       	movw	r30, r24
    153e:	20 83       	st	Z, r18
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	9e 81       	ldd	r25, Y+6	; 0x06
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	8d 83       	std	Y+5, r24	; 0x05
    1548:	9e 83       	std	Y+6, r25	; 0x06
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	ab 81       	ldd	r26, Y+3	; 0x03
    1550:	bc 81       	ldd	r27, Y+4	; 0x04
    1552:	89 2f       	mov	r24, r25
    1554:	9a 2f       	mov	r25, r26
    1556:	ab 2f       	mov	r26, r27
    1558:	bb 27       	eor	r27, r27
    155a:	89 83       	std	Y+1, r24	; 0x01
    155c:	9a 83       	std	Y+2, r25	; 0x02
    155e:	ab 83       	std	Y+3, r26	; 0x03
    1560:	bc 83       	std	Y+4, r27	; 0x04
    1562:	29 81       	ldd	r18, Y+1	; 0x01
    1564:	8d 81       	ldd	r24, Y+5	; 0x05
    1566:	9e 81       	ldd	r25, Y+6	; 0x06
    1568:	fc 01       	movw	r30, r24
    156a:	20 83       	st	Z, r18
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	8d 83       	std	Y+5, r24	; 0x05
    1574:	9e 83       	std	Y+6, r25	; 0x06
    1576:	8d 81       	ldd	r24, Y+5	; 0x05
    1578:	9e 81       	ldd	r25, Y+6	; 0x06
    157a:	26 e2       	ldi	r18, 0x26	; 38
    157c:	fc 01       	movw	r30, r24
    157e:	20 83       	st	Z, r18
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
    1582:	9e 81       	ldd	r25, Y+6	; 0x06
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	8d 83       	std	Y+5, r24	; 0x05
    1588:	9e 83       	std	Y+6, r25	; 0x06
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	27 e2       	ldi	r18, 0x27	; 39
    1590:	fc 01       	movw	r30, r24
    1592:	20 83       	st	Z, r18
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	9e 81       	ldd	r25, Y+6	; 0x06
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	8d 83       	std	Y+5, r24	; 0x05
    159c:	9e 83       	std	Y+6, r25	; 0x06
    159e:	8d 81       	ldd	r24, Y+5	; 0x05
    15a0:	9e 81       	ldd	r25, Y+6	; 0x06
    15a2:	28 e2       	ldi	r18, 0x28	; 40
    15a4:	fc 01       	movw	r30, r24
    15a6:	20 83       	st	Z, r18
    15a8:	8d 81       	ldd	r24, Y+5	; 0x05
    15aa:	9e 81       	ldd	r25, Y+6	; 0x06
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	8d 83       	std	Y+5, r24	; 0x05
    15b0:	9e 83       	std	Y+6, r25	; 0x06
    15b2:	8d 81       	ldd	r24, Y+5	; 0x05
    15b4:	9e 81       	ldd	r25, Y+6	; 0x06
    15b6:	29 e2       	ldi	r18, 0x29	; 41
    15b8:	fc 01       	movw	r30, r24
    15ba:	20 83       	st	Z, r18
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	9e 81       	ldd	r25, Y+6	; 0x06
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	8d 83       	std	Y+5, r24	; 0x05
    15c4:	9e 83       	std	Y+6, r25	; 0x06
    15c6:	8d 81       	ldd	r24, Y+5	; 0x05
    15c8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ca:	20 e3       	ldi	r18, 0x30	; 48
    15cc:	fc 01       	movw	r30, r24
    15ce:	20 83       	st	Z, r18
    15d0:	8d 81       	ldd	r24, Y+5	; 0x05
    15d2:	9e 81       	ldd	r25, Y+6	; 0x06
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	8d 83       	std	Y+5, r24	; 0x05
    15d8:	9e 83       	std	Y+6, r25	; 0x06
    15da:	8d 81       	ldd	r24, Y+5	; 0x05
    15dc:	9e 81       	ldd	r25, Y+6	; 0x06
    15de:	2a 96       	adiw	r28, 0x0a	; 10
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	de bf       	out	0x3e, r29	; 62
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	08 95       	ret

000015ea <xPortStartScheduler>:
    15ea:	cf 93       	push	r28
    15ec:	df 93       	push	r29
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	0e 94 3c 0c 	call	0x1878	; 0x1878 <prvSetupTimerInterrupt>
    15f6:	a0 91 04 2d 	lds	r26, 0x2D04	; 0x802d04 <pxCurrentTCB>
    15fa:	b0 91 05 2d 	lds	r27, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    15fe:	0d 90       	ld	r0, X+
    1600:	0d be       	out	0x3d, r0	; 61
    1602:	0d 90       	ld	r0, X+
    1604:	0e be       	out	0x3e, r0	; 62
    1606:	ef 91       	pop	r30
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	bf 91       	pop	r27
    160e:	af 91       	pop	r26
    1610:	9f 91       	pop	r25
    1612:	8f 91       	pop	r24
    1614:	7f 91       	pop	r23
    1616:	6f 91       	pop	r22
    1618:	5f 91       	pop	r21
    161a:	4f 91       	pop	r20
    161c:	3f 91       	pop	r19
    161e:	2f 91       	pop	r18
    1620:	1f 91       	pop	r17
    1622:	0f 91       	pop	r16
    1624:	ff 90       	pop	r15
    1626:	ef 90       	pop	r14
    1628:	df 90       	pop	r13
    162a:	cf 90       	pop	r12
    162c:	bf 90       	pop	r11
    162e:	af 90       	pop	r10
    1630:	9f 90       	pop	r9
    1632:	8f 90       	pop	r8
    1634:	7f 90       	pop	r7
    1636:	6f 90       	pop	r6
    1638:	5f 90       	pop	r5
    163a:	4f 90       	pop	r4
    163c:	3f 90       	pop	r3
    163e:	2f 90       	pop	r2
    1640:	1f 90       	pop	r1
    1642:	0f 90       	pop	r0
    1644:	ff 91       	pop	r31
    1646:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    164a:	ff 91       	pop	r31
    164c:	ff bf       	out	0x3f, r31	; 63
    164e:	ff 91       	pop	r31
    1650:	08 95       	ret
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	08 95       	ret

0000165a <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    165a:	ff 93       	push	r31
    165c:	ff b7       	in	r31, 0x3f	; 63
    165e:	ff 93       	push	r31
    1660:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1664:	ff 93       	push	r31
    1666:	f8 7f       	andi	r31, 0xF8	; 248
    1668:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    166c:	0f 92       	push	r0
    166e:	1f 92       	push	r1
    1670:	11 24       	eor	r1, r1
    1672:	2f 92       	push	r2
    1674:	3f 92       	push	r3
    1676:	4f 92       	push	r4
    1678:	5f 92       	push	r5
    167a:	6f 92       	push	r6
    167c:	7f 92       	push	r7
    167e:	8f 92       	push	r8
    1680:	9f 92       	push	r9
    1682:	af 92       	push	r10
    1684:	bf 92       	push	r11
    1686:	cf 92       	push	r12
    1688:	df 92       	push	r13
    168a:	ef 92       	push	r14
    168c:	ff 92       	push	r15
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	2f 93       	push	r18
    1694:	3f 93       	push	r19
    1696:	4f 93       	push	r20
    1698:	5f 93       	push	r21
    169a:	6f 93       	push	r22
    169c:	7f 93       	push	r23
    169e:	8f 93       	push	r24
    16a0:	9f 93       	push	r25
    16a2:	af 93       	push	r26
    16a4:	bf 93       	push	r27
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	ef 93       	push	r30
    16ac:	a0 91 04 2d 	lds	r26, 0x2D04	; 0x802d04 <pxCurrentTCB>
    16b0:	b0 91 05 2d 	lds	r27, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    16b4:	0d b6       	in	r0, 0x3d	; 61
    16b6:	0d 92       	st	X+, r0
    16b8:	0e b6       	in	r0, 0x3e	; 62
    16ba:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    16bc:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    16c0:	a0 91 04 2d 	lds	r26, 0x2D04	; 0x802d04 <pxCurrentTCB>
    16c4:	b0 91 05 2d 	lds	r27, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    16c8:	0d 90       	ld	r0, X+
    16ca:	0d be       	out	0x3d, r0	; 61
    16cc:	0d 90       	ld	r0, X+
    16ce:	0e be       	out	0x3e, r0	; 62
    16d0:	ef 91       	pop	r30
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	bf 91       	pop	r27
    16d8:	af 91       	pop	r26
    16da:	9f 91       	pop	r25
    16dc:	8f 91       	pop	r24
    16de:	7f 91       	pop	r23
    16e0:	6f 91       	pop	r22
    16e2:	5f 91       	pop	r21
    16e4:	4f 91       	pop	r20
    16e6:	3f 91       	pop	r19
    16e8:	2f 91       	pop	r18
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	ff 90       	pop	r15
    16f0:	ef 90       	pop	r14
    16f2:	df 90       	pop	r13
    16f4:	cf 90       	pop	r12
    16f6:	bf 90       	pop	r11
    16f8:	af 90       	pop	r10
    16fa:	9f 90       	pop	r9
    16fc:	8f 90       	pop	r8
    16fe:	7f 90       	pop	r7
    1700:	6f 90       	pop	r6
    1702:	5f 90       	pop	r5
    1704:	4f 90       	pop	r4
    1706:	3f 90       	pop	r3
    1708:	2f 90       	pop	r2
    170a:	1f 90       	pop	r1
    170c:	0f 90       	pop	r0
    170e:	ff 91       	pop	r31
    1710:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1714:	ff 91       	pop	r31
    1716:	ff bf       	out	0x3f, r31	; 63
    1718:	ff 91       	pop	r31
	asm volatile ( "ret" );
    171a:	08 95       	ret
	...

0000171e <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	1f 92       	push	r1
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	89 83       	std	Y+1, r24	; 0x01
		intTaskSwitchPending |= xSwitchRequired;					
    172c:	80 91 c2 2e 	lds	r24, 0x2EC2	; 0x802ec2 <intTaskSwitchPending>
    1730:	98 2f       	mov	r25, r24
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	89 2b       	or	r24, r25
    1736:	80 93 c2 2e 	sts	0x2EC2, r24	; 0x802ec2 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
    173a:	80 ea       	ldi	r24, 0xA0	; 160
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	fc 01       	movw	r30, r24
    1740:	80 81       	ld	r24, Z
    1742:	81 30       	cpi	r24, 0x01	; 1
    1744:	61 f0       	breq	.+24     	; 0x175e <portTaskSwitchContext+0x40>
    1746:	80 ea       	ldi	r24, 0xA0	; 160
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	fc 01       	movw	r30, r24
    174c:	80 81       	ld	r24, Z
    174e:	82 30       	cpi	r24, 0x02	; 2
    1750:	31 f0       	breq	.+12     	; 0x175e <portTaskSwitchContext+0x40>
    1752:	80 ea       	ldi	r24, 0xA0	; 160
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	fc 01       	movw	r30, r24
    1758:	80 81       	ld	r24, Z
    175a:	84 30       	cpi	r24, 0x04	; 4
    175c:	79 f4       	brne	.+30     	; 0x177c <portTaskSwitchContext+0x5e>
    175e:	80 91 c2 2e 	lds	r24, 0x2EC2	; 0x802ec2 <intTaskSwitchPending>
    1762:	88 23       	and	r24, r24
    1764:	59 f0       	breq	.+22     	; 0x177c <portTaskSwitchContext+0x5e>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
    1766:	0e 94 05 09 	call	0x120a	; 0x120a <_portSetInterruptMaskFromIsr>
    176a:	18 2f       	mov	r17, r24
			intTaskSwitchPending = 0;								
    176c:	10 92 c2 2e 	sts	0x2EC2, r1	; 0x802ec2 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
    1770:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
    1774:	80 ea       	ldi	r24, 0xA0	; 160
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	fc 01       	movw	r30, r24
    177a:	12 83       	std	Z+2, r17	; 0x02
		}                                          					
	}
    177c:	00 00       	nop
    177e:	0f 90       	pop	r0
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	1f 91       	pop	r17
    1786:	08 95       	ret

00001788 <portTaskIncrementTick>:
	// This routine is only an indirect call to vTaskIncrementTick because
	// a local variable is necessary. Local variables cannot be used directly
	// in a naked isr because of the lack of the frame pointer.
	//
	static void portTaskIncrementTick( void )
	{
    1788:	1f 93       	push	r17
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
    1792:	0e 94 05 09 	call	0x120a	; 0x120a <_portSetInterruptMaskFromIsr>
    1796:	18 2f       	mov	r17, r24
		xTaskIncrementTick();
    1798:	0e 94 ac 14 	call	0x2958	; 0x2958 <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
    179c:	80 ea       	ldi	r24, 0xA0	; 160
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	fc 01       	movw	r30, r24
    17a2:	12 83       	std	Z+2, r17	; 0x02
	}
    17a4:	00 00       	nop
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	1f 91       	pop	r17
    17ac:	08 95       	ret

000017ae <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
    17ae:	ff 93       	push	r31
    17b0:	ff b7       	in	r31, 0x3f	; 63
    17b2:	ff 93       	push	r31
    17b4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    17b8:	ff 93       	push	r31
    17ba:	f8 7f       	andi	r31, 0xF8	; 248
    17bc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    17c0:	0f 92       	push	r0
    17c2:	1f 92       	push	r1
    17c4:	11 24       	eor	r1, r1
    17c6:	2f 92       	push	r2
    17c8:	3f 92       	push	r3
    17ca:	4f 92       	push	r4
    17cc:	5f 92       	push	r5
    17ce:	6f 92       	push	r6
    17d0:	7f 92       	push	r7
    17d2:	8f 92       	push	r8
    17d4:	9f 92       	push	r9
    17d6:	af 92       	push	r10
    17d8:	bf 92       	push	r11
    17da:	cf 92       	push	r12
    17dc:	df 92       	push	r13
    17de:	ef 92       	push	r14
    17e0:	ff 92       	push	r15
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	2f 93       	push	r18
    17e8:	3f 93       	push	r19
    17ea:	4f 93       	push	r20
    17ec:	5f 93       	push	r21
    17ee:	6f 93       	push	r22
    17f0:	7f 93       	push	r23
    17f2:	8f 93       	push	r24
    17f4:	9f 93       	push	r25
    17f6:	af 93       	push	r26
    17f8:	bf 93       	push	r27
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	ef 93       	push	r30
    1800:	a0 91 04 2d 	lds	r26, 0x2D04	; 0x802d04 <pxCurrentTCB>
    1804:	b0 91 05 2d 	lds	r27, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    1808:	0d b6       	in	r0, 0x3d	; 61
    180a:	0d 92       	st	X+, r0
    180c:	0e b6       	in	r0, 0x3e	; 62
    180e:	0d 92       	st	X+, r0
		portTaskIncrementTick();
    1810:	0e 94 c4 0b 	call	0x1788	; 0x1788 <portTaskIncrementTick>
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	0e 94 8f 0b 	call	0x171e	; 0x171e <portTaskSwitchContext>
    181a:	a0 91 04 2d 	lds	r26, 0x2D04	; 0x802d04 <pxCurrentTCB>
    181e:	b0 91 05 2d 	lds	r27, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    1822:	0d 90       	ld	r0, X+
    1824:	0d be       	out	0x3d, r0	; 61
    1826:	0d 90       	ld	r0, X+
    1828:	0e be       	out	0x3e, r0	; 62
    182a:	ef 91       	pop	r30
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	bf 91       	pop	r27
    1832:	af 91       	pop	r26
    1834:	9f 91       	pop	r25
    1836:	8f 91       	pop	r24
    1838:	7f 91       	pop	r23
    183a:	6f 91       	pop	r22
    183c:	5f 91       	pop	r21
    183e:	4f 91       	pop	r20
    1840:	3f 91       	pop	r19
    1842:	2f 91       	pop	r18
    1844:	1f 91       	pop	r17
    1846:	0f 91       	pop	r16
    1848:	ff 90       	pop	r15
    184a:	ef 90       	pop	r14
    184c:	df 90       	pop	r13
    184e:	cf 90       	pop	r12
    1850:	bf 90       	pop	r11
    1852:	af 90       	pop	r10
    1854:	9f 90       	pop	r9
    1856:	8f 90       	pop	r8
    1858:	7f 90       	pop	r7
    185a:	6f 90       	pop	r6
    185c:	5f 90       	pop	r5
    185e:	4f 90       	pop	r4
    1860:	3f 90       	pop	r3
    1862:	2f 90       	pop	r2
    1864:	1f 90       	pop	r1
    1866:	0f 90       	pop	r0
    1868:	ff 91       	pop	r31
    186a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    186e:	ff 91       	pop	r31
    1870:	ff bf       	out	0x3f, r31	; 63
    1872:	ff 91       	pop	r31
    1874:	18 95       	reti
	...

00001878 <prvSetupTimerInterrupt>:
//-----------------------------------------------------------
//
// Setup of 16bit timer C0 to generate a tick interrupt in case of overflow.
//
static void prvSetupTimerInterrupt( void )
{
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
    187c:	00 d0       	rcall	.+0      	; 0x187e <prvSetupTimerInterrupt+0x6>
    187e:	1f 92       	push	r1
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62

	unsigned portLONG ulOvfMatch;

	ulOvfMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	9d e7       	ldi	r25, 0x7D	; 125
    1888:	a0 e0       	ldi	r26, 0x00	; 0
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	9a 83       	std	Y+2, r25	; 0x02
    1890:	ab 83       	std	Y+3, r26	; 0x03
    1892:	bc 83       	std	Y+4, r27	; 0x04

	// We only have 16bits so have to scale to get our required tick rate.
	ulOvfMatch /= portCLOCK_PRESCALER_TIMER0;
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	9a 81       	ldd	r25, Y+2	; 0x02
    1898:	ab 81       	ldd	r26, Y+3	; 0x03
    189a:	bc 81       	ldd	r27, Y+4	; 0x04
    189c:	68 94       	set
    189e:	15 f8       	bld	r1, 5
    18a0:	b6 95       	lsr	r27
    18a2:	a7 95       	ror	r26
    18a4:	97 95       	ror	r25
    18a6:	87 95       	ror	r24
    18a8:	16 94       	lsr	r1
    18aa:	d1 f7       	brne	.-12     	; 0x18a0 <prvSetupTimerInterrupt+0x28>
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	9a 83       	std	Y+2, r25	; 0x02
    18b0:	ab 83       	std	Y+3, r26	; 0x03
    18b2:	bc 83       	std	Y+4, r27	; 0x04

	// Adjust for correct value. (because overflow clear if CNT > PER)
	ulOvfMatch -= ( unsigned portLONG ) 1;
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	9a 81       	ldd	r25, Y+2	; 0x02
    18b8:	ab 81       	ldd	r26, Y+3	; 0x03
    18ba:	bc 81       	ldd	r27, Y+4	; 0x04
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	a1 09       	sbc	r26, r1
    18c0:	b1 09       	sbc	r27, r1
    18c2:	89 83       	std	Y+1, r24	; 0x01
    18c4:	9a 83       	std	Y+2, r25	; 0x02
    18c6:	ab 83       	std	Y+3, r26	; 0x03
    18c8:	bc 83       	std	Y+4, r27	; 0x04

	// Setup overflow value
	TC_SetPeriod( &TCC0, ulOvfMatch);
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	98 e0       	ldi	r25, 0x08	; 8
    18ce:	29 81       	ldd	r18, Y+1	; 0x01
    18d0:	3a 81       	ldd	r19, Y+2	; 0x02
    18d2:	fc 01       	movw	r30, r24
    18d4:	26 a3       	std	Z+38, r18	; 0x26
    18d6:	37 a3       	std	Z+39, r19	; 0x27
		
	// Setup clock source and compare match behaviour.
	TC0_ConfigClockSource( &TCC0, TC_CLKSEL_DIV64_gc);
    18d8:	65 e0       	ldi	r22, 0x05	; 5
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	98 e0       	ldi	r25, 0x08	; 8
    18de:	0e 94 3d 03 	call	0x67a	; 0x67a <TC0_ConfigClockSource>

	// Enable the interrupt - this is okay as interrupts are currently globally disabled.
	// The tick interrupt may run in one of the three levels.
#if   configKERNEL_INTERRUPT_PRIORITY == 0
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_LO_gc);	//low interrupt priority
    18e2:	61 e0       	ldi	r22, 0x01	; 1
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	98 e0       	ldi	r25, 0x08	; 8
    18e8:	0e 94 75 03 	call	0x6ea	; 0x6ea <TC0_SetOverflowIntLevel>
#elif configKERNEL_INTERRUPT_PRIORITY == 1
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_MED_gc);	//medium interrupt priority
#elif configKERNEL_INTERRUPT_PRIORITY == 2
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_HI_gc);	//high interrupt priority
#endif
}
    18ec:	00 00       	nop
    18ee:	24 96       	adiw	r28, 0x04	; 4
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	08 95       	ret

000018fa <xQueueGenericReset>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	25 97       	sbiw	r28, 0x05	; 5
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	8b 83       	std	Y+3, r24	; 0x03
    190a:	9c 83       	std	Y+4, r25	; 0x04
    190c:	6d 83       	std	Y+5, r22	; 0x05
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	9c 81       	ldd	r25, Y+4	; 0x04
    1912:	89 83       	std	Y+1, r24	; 0x01
    1914:	9a 83       	std	Y+2, r25	; 0x02
    1916:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    191a:	ff 93       	push	r31
    191c:	f8 7f       	andi	r31, 0xF8	; 248
    191e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	9a 81       	ldd	r25, Y+2	; 0x02
    1926:	fc 01       	movw	r30, r24
    1928:	80 81       	ld	r24, Z
    192a:	91 81       	ldd	r25, Z+1	; 0x01
    192c:	29 81       	ldd	r18, Y+1	; 0x01
    192e:	3a 81       	ldd	r19, Y+2	; 0x02
    1930:	f9 01       	movw	r30, r18
    1932:	27 8d       	ldd	r18, Z+31	; 0x1f
    1934:	42 2f       	mov	r20, r18
    1936:	50 e0       	ldi	r21, 0x00	; 0
    1938:	29 81       	ldd	r18, Y+1	; 0x01
    193a:	3a 81       	ldd	r19, Y+2	; 0x02
    193c:	f9 01       	movw	r30, r18
    193e:	20 a1       	ldd	r18, Z+32	; 0x20
    1940:	22 2f       	mov	r18, r18
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	42 9f       	mul	r20, r18
    1946:	b0 01       	movw	r22, r0
    1948:	43 9f       	mul	r20, r19
    194a:	70 0d       	add	r23, r0
    194c:	52 9f       	mul	r21, r18
    194e:	70 0d       	add	r23, r0
    1950:	11 24       	eor	r1, r1
    1952:	9b 01       	movw	r18, r22
    1954:	28 0f       	add	r18, r24
    1956:	39 1f       	adc	r19, r25
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	9a 81       	ldd	r25, Y+2	; 0x02
    195c:	fc 01       	movw	r30, r24
    195e:	22 83       	std	Z+2, r18	; 0x02
    1960:	33 83       	std	Z+3, r19	; 0x03
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	9a 81       	ldd	r25, Y+2	; 0x02
    1966:	fc 01       	movw	r30, r24
    1968:	16 8e       	std	Z+30, r1	; 0x1e
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	fc 01       	movw	r30, r24
    1970:	20 81       	ld	r18, Z
    1972:	31 81       	ldd	r19, Z+1	; 0x01
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	9a 81       	ldd	r25, Y+2	; 0x02
    1978:	fc 01       	movw	r30, r24
    197a:	24 83       	std	Z+4, r18	; 0x04
    197c:	35 83       	std	Z+5, r19	; 0x05
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	fc 01       	movw	r30, r24
    1984:	80 81       	ld	r24, Z
    1986:	91 81       	ldd	r25, Z+1	; 0x01
    1988:	29 81       	ldd	r18, Y+1	; 0x01
    198a:	3a 81       	ldd	r19, Y+2	; 0x02
    198c:	f9 01       	movw	r30, r18
    198e:	27 8d       	ldd	r18, Z+31	; 0x1f
    1990:	22 2f       	mov	r18, r18
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	a9 01       	movw	r20, r18
    1996:	41 50       	subi	r20, 0x01	; 1
    1998:	51 09       	sbc	r21, r1
    199a:	29 81       	ldd	r18, Y+1	; 0x01
    199c:	3a 81       	ldd	r19, Y+2	; 0x02
    199e:	f9 01       	movw	r30, r18
    19a0:	20 a1       	ldd	r18, Z+32	; 0x20
    19a2:	22 2f       	mov	r18, r18
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	42 9f       	mul	r20, r18
    19a8:	b0 01       	movw	r22, r0
    19aa:	43 9f       	mul	r20, r19
    19ac:	70 0d       	add	r23, r0
    19ae:	52 9f       	mul	r21, r18
    19b0:	70 0d       	add	r23, r0
    19b2:	11 24       	eor	r1, r1
    19b4:	9b 01       	movw	r18, r22
    19b6:	28 0f       	add	r18, r24
    19b8:	39 1f       	adc	r19, r25
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	9a 81       	ldd	r25, Y+2	; 0x02
    19be:	fc 01       	movw	r30, r24
    19c0:	26 83       	std	Z+6, r18	; 0x06
    19c2:	37 83       	std	Z+7, r19	; 0x07
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	9a 81       	ldd	r25, Y+2	; 0x02
    19c8:	2f ef       	ldi	r18, 0xFF	; 255
    19ca:	fc 01       	movw	r30, r24
    19cc:	21 a3       	std	Z+33, r18	; 0x21
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	9a 81       	ldd	r25, Y+2	; 0x02
    19d2:	2f ef       	ldi	r18, 0xFF	; 255
    19d4:	fc 01       	movw	r30, r24
    19d6:	22 a3       	std	Z+34, r18	; 0x22
    19d8:	8d 81       	ldd	r24, Y+5	; 0x05
    19da:	88 23       	and	r24, r24
    19dc:	81 f4       	brne	.+32     	; 0x19fe <xQueueGenericReset+0x104>
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	9a 81       	ldd	r25, Y+2	; 0x02
    19e2:	fc 01       	movw	r30, r24
    19e4:	80 85       	ldd	r24, Z+8	; 0x08
    19e6:	88 23       	and	r24, r24
    19e8:	a1 f0       	breq	.+40     	; 0x1a12 <xQueueGenericReset+0x118>
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	9a 81       	ldd	r25, Y+2	; 0x02
    19ee:	08 96       	adiw	r24, 0x08	; 8
    19f0:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <xTaskRemoveFromEventList>
    19f4:	88 23       	and	r24, r24
    19f6:	69 f0       	breq	.+26     	; 0x1a12 <xQueueGenericReset+0x118>
    19f8:	0e 94 2d 0b 	call	0x165a	; 0x165a <vPortYield>
    19fc:	0a c0       	rjmp	.+20     	; 0x1a12 <xQueueGenericReset+0x118>
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	08 96       	adiw	r24, 0x08	; 8
    1a04:	0e 94 96 07 	call	0xf2c	; 0xf2c <vListInitialise>
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0c:	43 96       	adiw	r24, 0x13	; 19
    1a0e:	0e 94 96 07 	call	0xf2c	; 0xf2c <vListInitialise>
    1a12:	ff 91       	pop	r31
    1a14:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	25 96       	adiw	r28, 0x05	; 5
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <xQueueGenericCreate>:
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	29 97       	sbiw	r28, 0x09	; 9
    1a34:	cd bf       	out	0x3d, r28	; 61
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	8f 83       	std	Y+7, r24	; 0x07
    1a3a:	68 87       	std	Y+8, r22	; 0x08
    1a3c:	49 87       	std	Y+9, r20	; 0x09
    1a3e:	88 85       	ldd	r24, Y+8	; 0x08
    1a40:	88 23       	and	r24, r24
    1a42:	19 f4       	brne	.+6      	; 0x1a4a <xQueueGenericCreate+0x24>
    1a44:	19 82       	std	Y+1, r1	; 0x01
    1a46:	1a 82       	std	Y+2, r1	; 0x02
    1a48:	0f c0       	rjmp	.+30     	; 0x1a68 <xQueueGenericCreate+0x42>
    1a4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a4c:	48 2f       	mov	r20, r24
    1a4e:	50 e0       	ldi	r21, 0x00	; 0
    1a50:	88 85       	ldd	r24, Y+8	; 0x08
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	42 9f       	mul	r20, r18
    1a58:	c0 01       	movw	r24, r0
    1a5a:	43 9f       	mul	r20, r19
    1a5c:	90 0d       	add	r25, r0
    1a5e:	52 9f       	mul	r21, r18
    1a60:	90 0d       	add	r25, r0
    1a62:	11 24       	eor	r1, r1
    1a64:	89 83       	std	Y+1, r24	; 0x01
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6c:	85 96       	adiw	r24, 0x25	; 37
    1a6e:	0e 94 44 07 	call	0xe88	; 0xe88 <pvPortMalloc>
    1a72:	8b 83       	std	Y+3, r24	; 0x03
    1a74:	9c 83       	std	Y+4, r25	; 0x04
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7a:	89 2b       	or	r24, r25
    1a7c:	81 f0       	breq	.+32     	; 0x1a9e <xQueueGenericCreate+0x78>
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	9c 81       	ldd	r25, Y+4	; 0x04
    1a82:	85 96       	adiw	r24, 0x25	; 37
    1a84:	8d 83       	std	Y+5, r24	; 0x05
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a90:	89 01       	movw	r16, r18
    1a92:	29 85       	ldd	r18, Y+9	; 0x09
    1a94:	ac 01       	movw	r20, r24
    1a96:	68 85       	ldd	r22, Y+8	; 0x08
    1a98:	8f 81       	ldd	r24, Y+7	; 0x07
    1a9a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <prvInitialiseNewQueue>
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	29 96       	adiw	r28, 0x09	; 9
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	1f 91       	pop	r17
    1aae:	0f 91       	pop	r16
    1ab0:	08 95       	ret

00001ab2 <prvInitialiseNewQueue>:
    1ab2:	0f 93       	push	r16
    1ab4:	1f 93       	push	r17
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	27 97       	sbiw	r28, 0x07	; 7
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	89 83       	std	Y+1, r24	; 0x01
    1ac6:	6a 83       	std	Y+2, r22	; 0x02
    1ac8:	4b 83       	std	Y+3, r20	; 0x03
    1aca:	5c 83       	std	Y+4, r21	; 0x04
    1acc:	2d 83       	std	Y+5, r18	; 0x05
    1ace:	0e 83       	std	Y+6, r16	; 0x06
    1ad0:	1f 83       	std	Y+7, r17	; 0x07
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	88 23       	and	r24, r24
    1ad6:	41 f4       	brne	.+16     	; 0x1ae8 <prvInitialiseNewQueue+0x36>
    1ad8:	8e 81       	ldd	r24, Y+6	; 0x06
    1ada:	9f 81       	ldd	r25, Y+7	; 0x07
    1adc:	2e 81       	ldd	r18, Y+6	; 0x06
    1ade:	3f 81       	ldd	r19, Y+7	; 0x07
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	20 83       	st	Z, r18
    1ae4:	31 83       	std	Z+1, r19	; 0x01
    1ae6:	07 c0       	rjmp	.+14     	; 0x1af6 <prvInitialiseNewQueue+0x44>
    1ae8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aea:	9f 81       	ldd	r25, Y+7	; 0x07
    1aec:	2b 81       	ldd	r18, Y+3	; 0x03
    1aee:	3c 81       	ldd	r19, Y+4	; 0x04
    1af0:	fc 01       	movw	r30, r24
    1af2:	20 83       	st	Z, r18
    1af4:	31 83       	std	Z+1, r19	; 0x01
    1af6:	8e 81       	ldd	r24, Y+6	; 0x06
    1af8:	9f 81       	ldd	r25, Y+7	; 0x07
    1afa:	29 81       	ldd	r18, Y+1	; 0x01
    1afc:	fc 01       	movw	r30, r24
    1afe:	27 8f       	std	Z+31, r18	; 0x1f
    1b00:	8e 81       	ldd	r24, Y+6	; 0x06
    1b02:	9f 81       	ldd	r25, Y+7	; 0x07
    1b04:	2a 81       	ldd	r18, Y+2	; 0x02
    1b06:	fc 01       	movw	r30, r24
    1b08:	20 a3       	std	Z+32, r18	; 0x20
    1b0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b0e:	61 e0       	ldi	r22, 0x01	; 1
    1b10:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <xQueueGenericReset>
    1b14:	8e 81       	ldd	r24, Y+6	; 0x06
    1b16:	9f 81       	ldd	r25, Y+7	; 0x07
    1b18:	2d 81       	ldd	r18, Y+5	; 0x05
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	24 a3       	std	Z+36, r18	; 0x24
    1b1e:	00 00       	nop
    1b20:	27 96       	adiw	r28, 0x07	; 7
    1b22:	cd bf       	out	0x3d, r28	; 61
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	1f 91       	pop	r17
    1b2c:	0f 91       	pop	r16
    1b2e:	08 95       	ret

00001b30 <xQueueGenericSend>:
    1b30:	0f 93       	push	r16
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	62 97       	sbiw	r28, 0x12	; 18
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	8a 87       	std	Y+10, r24	; 0x0a
    1b42:	9b 87       	std	Y+11, r25	; 0x0b
    1b44:	6c 87       	std	Y+12, r22	; 0x0c
    1b46:	7d 87       	std	Y+13, r23	; 0x0d
    1b48:	2e 87       	std	Y+14, r18	; 0x0e
    1b4a:	3f 87       	std	Y+15, r19	; 0x0f
    1b4c:	48 8b       	std	Y+16, r20	; 0x10
    1b4e:	59 8b       	std	Y+17, r21	; 0x11
    1b50:	0a 8b       	std	Y+18, r16	; 0x12
    1b52:	19 82       	std	Y+1, r1	; 0x01
    1b54:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b56:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b58:	8a 83       	std	Y+2, r24	; 0x02
    1b5a:	9b 83       	std	Y+3, r25	; 0x03
    1b5c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1b60:	ff 93       	push	r31
    1b62:	f8 7f       	andi	r31, 0xF8	; 248
    1b64:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	26 8d       	ldd	r18, Z+30	; 0x1e
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	9b 81       	ldd	r25, Y+3	; 0x03
    1b74:	fc 01       	movw	r30, r24
    1b76:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b78:	28 17       	cp	r18, r24
    1b7a:	18 f0       	brcs	.+6      	; 0x1b82 <xQueueGenericSend+0x52>
    1b7c:	8a 89       	ldd	r24, Y+18	; 0x12
    1b7e:	82 30       	cpi	r24, 0x02	; 2
    1b80:	19 f5       	brne	.+70     	; 0x1bc8 <xQueueGenericSend+0x98>
    1b82:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b84:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8a:	4a 89       	ldd	r20, Y+18	; 0x12
    1b8c:	b9 01       	movw	r22, r18
    1b8e:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <prvCopyDataToQueue>
    1b92:	8c 83       	std	Y+4, r24	; 0x04
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	9b 81       	ldd	r25, Y+3	; 0x03
    1b98:	fc 01       	movw	r30, r24
    1b9a:	83 89       	ldd	r24, Z+19	; 0x13
    1b9c:	88 23       	and	r24, r24
    1b9e:	51 f0       	breq	.+20     	; 0x1bb4 <xQueueGenericSend+0x84>
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba4:	43 96       	adiw	r24, 0x13	; 19
    1ba6:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <xTaskRemoveFromEventList>
    1baa:	88 23       	and	r24, r24
    1bac:	41 f0       	breq	.+16     	; 0x1bbe <xQueueGenericSend+0x8e>
    1bae:	0e 94 2d 0b 	call	0x165a	; 0x165a <vPortYield>
    1bb2:	05 c0       	rjmp	.+10     	; 0x1bbe <xQueueGenericSend+0x8e>
    1bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb6:	88 23       	and	r24, r24
    1bb8:	11 f0       	breq	.+4      	; 0x1bbe <xQueueGenericSend+0x8e>
    1bba:	0e 94 2d 0b 	call	0x165a	; 0x165a <vPortYield>
    1bbe:	ff 91       	pop	r31
    1bc0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	6f c0       	rjmp	.+222    	; 0x1ca6 <xQueueGenericSend+0x176>
    1bc8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bca:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bcc:	a8 89       	ldd	r26, Y+16	; 0x10
    1bce:	b9 89       	ldd	r27, Y+17	; 0x11
    1bd0:	89 2b       	or	r24, r25
    1bd2:	8a 2b       	or	r24, r26
    1bd4:	8b 2b       	or	r24, r27
    1bd6:	29 f4       	brne	.+10     	; 0x1be2 <xQueueGenericSend+0xb2>
    1bd8:	ff 91       	pop	r31
    1bda:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	62 c0       	rjmp	.+196    	; 0x1ca6 <xQueueGenericSend+0x176>
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	88 23       	and	r24, r24
    1be6:	31 f4       	brne	.+12     	; 0x1bf4 <xQueueGenericSend+0xc4>
    1be8:	ce 01       	movw	r24, r28
    1bea:	05 96       	adiw	r24, 0x05	; 5
    1bec:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <vTaskInternalSetTimeOutState>
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	ff 91       	pop	r31
    1bf6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1bfa:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <vTaskSuspendAll>
    1bfe:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c02:	ff 93       	push	r31
    1c04:	f8 7f       	andi	r31, 0xF8	; 248
    1c06:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0e:	fc 01       	movw	r30, r24
    1c10:	81 a1       	ldd	r24, Z+33	; 0x21
    1c12:	8f 3f       	cpi	r24, 0xFF	; 255
    1c14:	21 f4       	brne	.+8      	; 0x1c1e <xQueueGenericSend+0xee>
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	11 a2       	std	Z+33, r1	; 0x21
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	9b 81       	ldd	r25, Y+3	; 0x03
    1c22:	fc 01       	movw	r30, r24
    1c24:	82 a1       	ldd	r24, Z+34	; 0x22
    1c26:	8f 3f       	cpi	r24, 0xFF	; 255
    1c28:	21 f4       	brne	.+8      	; 0x1c32 <xQueueGenericSend+0x102>
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2e:	fc 01       	movw	r30, r24
    1c30:	12 a2       	std	Z+34, r1	; 0x22
    1c32:	ff 91       	pop	r31
    1c34:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c38:	9e 01       	movw	r18, r28
    1c3a:	22 5f       	subi	r18, 0xF2	; 242
    1c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3e:	ce 01       	movw	r24, r28
    1c40:	05 96       	adiw	r24, 0x05	; 5
    1c42:	b9 01       	movw	r22, r18
    1c44:	0e 94 15 18 	call	0x302a	; 0x302a <xTaskCheckForTimeOut>
    1c48:	88 23       	and	r24, r24
    1c4a:	31 f5       	brne	.+76     	; 0x1c98 <xQueueGenericSend+0x168>
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c50:	0e 94 21 11 	call	0x2242	; 0x2242 <prvIsQueueFull>
    1c54:	88 23       	and	r24, r24
    1c56:	c9 f0       	breq	.+50     	; 0x1c8a <xQueueGenericSend+0x15a>
    1c58:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c5a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c5c:	a8 89       	ldd	r26, Y+16	; 0x10
    1c5e:	b9 89       	ldd	r27, Y+17	; 0x11
    1c60:	2a 81       	ldd	r18, Y+2	; 0x02
    1c62:	3b 81       	ldd	r19, Y+3	; 0x03
    1c64:	28 5f       	subi	r18, 0xF8	; 248
    1c66:	3f 4f       	sbci	r19, 0xFF	; 255
    1c68:	ac 01       	movw	r20, r24
    1c6a:	bd 01       	movw	r22, r26
    1c6c:	c9 01       	movw	r24, r18
    1c6e:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <vTaskPlaceOnEventList>
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	9b 81       	ldd	r25, Y+3	; 0x03
    1c76:	0e 94 9b 10 	call	0x2136	; 0x2136 <prvUnlockQueue>
    1c7a:	0e 94 ee 13 	call	0x27dc	; 0x27dc <xTaskResumeAll>
    1c7e:	88 23       	and	r24, r24
    1c80:	09 f0       	breq	.+2      	; 0x1c84 <xQueueGenericSend+0x154>
    1c82:	6c cf       	rjmp	.-296    	; 0x1b5c <xQueueGenericSend+0x2c>
    1c84:	0e 94 2d 0b 	call	0x165a	; 0x165a <vPortYield>
    1c88:	69 cf       	rjmp	.-302    	; 0x1b5c <xQueueGenericSend+0x2c>
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8e:	0e 94 9b 10 	call	0x2136	; 0x2136 <prvUnlockQueue>
    1c92:	0e 94 ee 13 	call	0x27dc	; 0x27dc <xTaskResumeAll>
    1c96:	62 cf       	rjmp	.-316    	; 0x1b5c <xQueueGenericSend+0x2c>
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c9c:	0e 94 9b 10 	call	0x2136	; 0x2136 <prvUnlockQueue>
    1ca0:	0e 94 ee 13 	call	0x27dc	; 0x27dc <xTaskResumeAll>
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	62 96       	adiw	r28, 0x12	; 18
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	0f 91       	pop	r16
    1cb2:	08 95       	ret

00001cb4 <xQueueGenericSendFromISR>:
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	2c 97       	sbiw	r28, 0x0c	; 12
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	8e 83       	std	Y+6, r24	; 0x06
    1cc4:	9f 83       	std	Y+7, r25	; 0x07
    1cc6:	68 87       	std	Y+8, r22	; 0x08
    1cc8:	79 87       	std	Y+9, r23	; 0x09
    1cca:	4a 87       	std	Y+10, r20	; 0x0a
    1ccc:	5b 87       	std	Y+11, r21	; 0x0b
    1cce:	2c 87       	std	Y+12, r18	; 0x0c
    1cd0:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd2:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd4:	8a 83       	std	Y+2, r24	; 0x02
    1cd6:	9b 83       	std	Y+3, r25	; 0x03
    1cd8:	0e 94 05 09 	call	0x120a	; 0x120a <_portSetInterruptMaskFromIsr>
    1cdc:	8c 83       	std	Y+4, r24	; 0x04
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	26 8d       	ldd	r18, Z+30	; 0x1e
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cea:	fc 01       	movw	r30, r24
    1cec:	87 8d       	ldd	r24, Z+31	; 0x1f
    1cee:	28 17       	cp	r18, r24
    1cf0:	18 f0       	brcs	.+6      	; 0x1cf8 <xQueueGenericSendFromISR+0x44>
    1cf2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cf4:	82 30       	cpi	r24, 0x02	; 2
    1cf6:	89 f5       	brne	.+98     	; 0x1d5a <xQueueGenericSendFromISR+0xa6>
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	82 a1       	ldd	r24, Z+34	; 0x22
    1d00:	8d 83       	std	Y+5, r24	; 0x05
    1d02:	28 85       	ldd	r18, Y+8	; 0x08
    1d04:	39 85       	ldd	r19, Y+9	; 0x09
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0a:	4c 85       	ldd	r20, Y+12	; 0x0c
    1d0c:	b9 01       	movw	r22, r18
    1d0e:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <prvCopyDataToQueue>
    1d12:	8d 81       	ldd	r24, Y+5	; 0x05
    1d14:	8f 3f       	cpi	r24, 0xFF	; 255
    1d16:	b9 f4       	brne	.+46     	; 0x1d46 <xQueueGenericSendFromISR+0x92>
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	83 89       	ldd	r24, Z+19	; 0x13
    1d20:	88 23       	and	r24, r24
    1d22:	c1 f0       	breq	.+48     	; 0x1d54 <xQueueGenericSendFromISR+0xa0>
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	9b 81       	ldd	r25, Y+3	; 0x03
    1d28:	43 96       	adiw	r24, 0x13	; 19
    1d2a:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <xTaskRemoveFromEventList>
    1d2e:	88 23       	and	r24, r24
    1d30:	89 f0       	breq	.+34     	; 0x1d54 <xQueueGenericSendFromISR+0xa0>
    1d32:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d34:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d36:	89 2b       	or	r24, r25
    1d38:	69 f0       	breq	.+26     	; 0x1d54 <xQueueGenericSendFromISR+0xa0>
    1d3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d3e:	21 e0       	ldi	r18, 0x01	; 1
    1d40:	fc 01       	movw	r30, r24
    1d42:	20 83       	st	Z, r18
    1d44:	07 c0       	rjmp	.+14     	; 0x1d54 <xQueueGenericSendFromISR+0xa0>
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	8f 5f       	subi	r24, 0xFF	; 255
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d50:	fc 01       	movw	r30, r24
    1d52:	22 a3       	std	Z+34, r18	; 0x22
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	89 83       	std	Y+1, r24	; 0x01
    1d58:	01 c0       	rjmp	.+2      	; 0x1d5c <xQueueGenericSendFromISR+0xa8>
    1d5a:	19 82       	std	Y+1, r1	; 0x01
    1d5c:	80 ea       	ldi	r24, 0xA0	; 160
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	2c 81       	ldd	r18, Y+4	; 0x04
    1d62:	fc 01       	movw	r30, r24
    1d64:	22 83       	std	Z+2, r18	; 0x02
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	2c 96       	adiw	r28, 0x0c	; 12
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	08 95       	ret

00001d74 <xQueueReceive>:
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	61 97       	sbiw	r28, 0x11	; 17
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	8a 87       	std	Y+10, r24	; 0x0a
    1d84:	9b 87       	std	Y+11, r25	; 0x0b
    1d86:	6c 87       	std	Y+12, r22	; 0x0c
    1d88:	7d 87       	std	Y+13, r23	; 0x0d
    1d8a:	2e 87       	std	Y+14, r18	; 0x0e
    1d8c:	3f 87       	std	Y+15, r19	; 0x0f
    1d8e:	48 8b       	std	Y+16, r20	; 0x10
    1d90:	59 8b       	std	Y+17, r21	; 0x11
    1d92:	19 82       	std	Y+1, r1	; 0x01
    1d94:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d96:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d98:	8a 83       	std	Y+2, r24	; 0x02
    1d9a:	9b 83       	std	Y+3, r25	; 0x03
    1d9c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1da0:	ff 93       	push	r31
    1da2:	f8 7f       	andi	r31, 0xF8	; 248
    1da4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	9b 81       	ldd	r25, Y+3	; 0x03
    1dac:	fc 01       	movw	r30, r24
    1dae:	86 8d       	ldd	r24, Z+30	; 0x1e
    1db0:	8c 83       	std	Y+4, r24	; 0x04
    1db2:	8c 81       	ldd	r24, Y+4	; 0x04
    1db4:	88 23       	and	r24, r24
    1db6:	11 f1       	breq	.+68     	; 0x1dfc <xQueueReceive+0x88>
    1db8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1dba:	3d 85       	ldd	r19, Y+13	; 0x0d
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc0:	b9 01       	movw	r22, r18
    1dc2:	0e 94 4b 10 	call	0x2096	; 0x2096 <prvCopyDataFromQueue>
    1dc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc8:	2f ef       	ldi	r18, 0xFF	; 255
    1dca:	28 0f       	add	r18, r24
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	26 8f       	std	Z+30, r18	; 0x1e
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd8:	fc 01       	movw	r30, r24
    1dda:	80 85       	ldd	r24, Z+8	; 0x08
    1ddc:	88 23       	and	r24, r24
    1dde:	49 f0       	breq	.+18     	; 0x1df2 <xQueueReceive+0x7e>
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	9b 81       	ldd	r25, Y+3	; 0x03
    1de4:	08 96       	adiw	r24, 0x08	; 8
    1de6:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <xTaskRemoveFromEventList>
    1dea:	88 23       	and	r24, r24
    1dec:	11 f0       	breq	.+4      	; 0x1df2 <xQueueReceive+0x7e>
    1dee:	0e 94 2d 0b 	call	0x165a	; 0x165a <vPortYield>
    1df2:	ff 91       	pop	r31
    1df4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	76 c0       	rjmp	.+236    	; 0x1ee8 <xQueueReceive+0x174>
    1dfc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dfe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e00:	a8 89       	ldd	r26, Y+16	; 0x10
    1e02:	b9 89       	ldd	r27, Y+17	; 0x11
    1e04:	89 2b       	or	r24, r25
    1e06:	8a 2b       	or	r24, r26
    1e08:	8b 2b       	or	r24, r27
    1e0a:	29 f4       	brne	.+10     	; 0x1e16 <xQueueReceive+0xa2>
    1e0c:	ff 91       	pop	r31
    1e0e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	69 c0       	rjmp	.+210    	; 0x1ee8 <xQueueReceive+0x174>
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	88 23       	and	r24, r24
    1e1a:	31 f4       	brne	.+12     	; 0x1e28 <xQueueReceive+0xb4>
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	05 96       	adiw	r24, 0x05	; 5
    1e20:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <vTaskInternalSetTimeOutState>
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	ff 91       	pop	r31
    1e2a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e2e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <vTaskSuspendAll>
    1e32:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e36:	ff 93       	push	r31
    1e38:	f8 7f       	andi	r31, 0xF8	; 248
    1e3a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	9b 81       	ldd	r25, Y+3	; 0x03
    1e42:	fc 01       	movw	r30, r24
    1e44:	81 a1       	ldd	r24, Z+33	; 0x21
    1e46:	8f 3f       	cpi	r24, 0xFF	; 255
    1e48:	21 f4       	brne	.+8      	; 0x1e52 <xQueueReceive+0xde>
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4e:	fc 01       	movw	r30, r24
    1e50:	11 a2       	std	Z+33, r1	; 0x21
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	9b 81       	ldd	r25, Y+3	; 0x03
    1e56:	fc 01       	movw	r30, r24
    1e58:	82 a1       	ldd	r24, Z+34	; 0x22
    1e5a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e5c:	21 f4       	brne	.+8      	; 0x1e66 <xQueueReceive+0xf2>
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	9b 81       	ldd	r25, Y+3	; 0x03
    1e62:	fc 01       	movw	r30, r24
    1e64:	12 a2       	std	Z+34, r1	; 0x22
    1e66:	ff 91       	pop	r31
    1e68:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e6c:	9e 01       	movw	r18, r28
    1e6e:	22 5f       	subi	r18, 0xF2	; 242
    1e70:	3f 4f       	sbci	r19, 0xFF	; 255
    1e72:	ce 01       	movw	r24, r28
    1e74:	05 96       	adiw	r24, 0x05	; 5
    1e76:	b9 01       	movw	r22, r18
    1e78:	0e 94 15 18 	call	0x302a	; 0x302a <xTaskCheckForTimeOut>
    1e7c:	88 23       	and	r24, r24
    1e7e:	31 f5       	brne	.+76     	; 0x1ecc <xQueueReceive+0x158>
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	9b 81       	ldd	r25, Y+3	; 0x03
    1e84:	0e 94 00 11 	call	0x2200	; 0x2200 <prvIsQueueEmpty>
    1e88:	88 23       	and	r24, r24
    1e8a:	c9 f0       	breq	.+50     	; 0x1ebe <xQueueReceive+0x14a>
    1e8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e8e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e90:	a8 89       	ldd	r26, Y+16	; 0x10
    1e92:	b9 89       	ldd	r27, Y+17	; 0x11
    1e94:	2a 81       	ldd	r18, Y+2	; 0x02
    1e96:	3b 81       	ldd	r19, Y+3	; 0x03
    1e98:	2d 5e       	subi	r18, 0xED	; 237
    1e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9c:	ac 01       	movw	r20, r24
    1e9e:	bd 01       	movw	r22, r26
    1ea0:	c9 01       	movw	r24, r18
    1ea2:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <vTaskPlaceOnEventList>
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eaa:	0e 94 9b 10 	call	0x2136	; 0x2136 <prvUnlockQueue>
    1eae:	0e 94 ee 13 	call	0x27dc	; 0x27dc <xTaskResumeAll>
    1eb2:	88 23       	and	r24, r24
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <xQueueReceive+0x144>
    1eb6:	72 cf       	rjmp	.-284    	; 0x1d9c <xQueueReceive+0x28>
    1eb8:	0e 94 2d 0b 	call	0x165a	; 0x165a <vPortYield>
    1ebc:	6f cf       	rjmp	.-290    	; 0x1d9c <xQueueReceive+0x28>
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec2:	0e 94 9b 10 	call	0x2136	; 0x2136 <prvUnlockQueue>
    1ec6:	0e 94 ee 13 	call	0x27dc	; 0x27dc <xTaskResumeAll>
    1eca:	68 cf       	rjmp	.-304    	; 0x1d9c <xQueueReceive+0x28>
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed0:	0e 94 9b 10 	call	0x2136	; 0x2136 <prvUnlockQueue>
    1ed4:	0e 94 ee 13 	call	0x27dc	; 0x27dc <xTaskResumeAll>
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	9b 81       	ldd	r25, Y+3	; 0x03
    1edc:	0e 94 00 11 	call	0x2200	; 0x2200 <prvIsQueueEmpty>
    1ee0:	88 23       	and	r24, r24
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <xQueueReceive+0x172>
    1ee4:	5b cf       	rjmp	.-330    	; 0x1d9c <xQueueReceive+0x28>
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	61 96       	adiw	r28, 0x11	; 17
    1eea:	cd bf       	out	0x3d, r28	; 61
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	08 95       	ret

00001ef4 <uxQueueMessagesWaiting>:
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <uxQueueMessagesWaiting+0x6>
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	8a 83       	std	Y+2, r24	; 0x02
    1f00:	9b 83       	std	Y+3, r25	; 0x03
    1f02:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f06:	ff 93       	push	r31
    1f08:	f8 7f       	andi	r31, 0xF8	; 248
    1f0a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	9b 81       	ldd	r25, Y+3	; 0x03
    1f12:	fc 01       	movw	r30, r24
    1f14:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f16:	89 83       	std	Y+1, r24	; 0x01
    1f18:	ff 91       	pop	r31
    1f1a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	23 96       	adiw	r28, 0x03	; 3
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	df 91       	pop	r29
    1f28:	cf 91       	pop	r28
    1f2a:	08 95       	ret

00001f2c <prvCopyDataToQueue>:
    1f2c:	cf 93       	push	r28
    1f2e:	df 93       	push	r29
    1f30:	cd b7       	in	r28, 0x3d	; 61
    1f32:	de b7       	in	r29, 0x3e	; 62
    1f34:	27 97       	sbiw	r28, 0x07	; 7
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	de bf       	out	0x3e, r29	; 62
    1f3a:	8b 83       	std	Y+3, r24	; 0x03
    1f3c:	9c 83       	std	Y+4, r25	; 0x04
    1f3e:	6d 83       	std	Y+5, r22	; 0x05
    1f40:	7e 83       	std	Y+6, r23	; 0x06
    1f42:	4f 83       	std	Y+7, r20	; 0x07
    1f44:	1a 82       	std	Y+2, r1	; 0x02
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f4e:	89 83       	std	Y+1, r24	; 0x01
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	9c 81       	ldd	r25, Y+4	; 0x04
    1f54:	fc 01       	movw	r30, r24
    1f56:	80 a1       	ldd	r24, Z+32	; 0x20
    1f58:	88 23       	and	r24, r24
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <prvCopyDataToQueue+0x32>
    1f5c:	8e c0       	rjmp	.+284    	; 0x207a <prvCopyDataToQueue+0x14e>
    1f5e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f60:	88 23       	and	r24, r24
    1f62:	d9 f5       	brne	.+118    	; 0x1fda <prvCopyDataToQueue+0xae>
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	9c 81       	ldd	r25, Y+4	; 0x04
    1f68:	fc 01       	movw	r30, r24
    1f6a:	80 a1       	ldd	r24, Z+32	; 0x20
    1f6c:	48 2f       	mov	r20, r24
    1f6e:	50 e0       	ldi	r21, 0x00	; 0
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	9c 81       	ldd	r25, Y+4	; 0x04
    1f74:	fc 01       	movw	r30, r24
    1f76:	84 81       	ldd	r24, Z+4	; 0x04
    1f78:	95 81       	ldd	r25, Z+5	; 0x05
    1f7a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f7c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f7e:	b9 01       	movw	r22, r18
    1f80:	0e 94 b6 34 	call	0x696c	; 0x696c <memcpy>
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	9c 81       	ldd	r25, Y+4	; 0x04
    1f88:	fc 01       	movw	r30, r24
    1f8a:	24 81       	ldd	r18, Z+4	; 0x04
    1f8c:	35 81       	ldd	r19, Z+5	; 0x05
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	9c 81       	ldd	r25, Y+4	; 0x04
    1f92:	fc 01       	movw	r30, r24
    1f94:	80 a1       	ldd	r24, Z+32	; 0x20
    1f96:	88 2f       	mov	r24, r24
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	28 0f       	add	r18, r24
    1f9c:	39 1f       	adc	r19, r25
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	24 83       	std	Z+4, r18	; 0x04
    1fa6:	35 83       	std	Z+5, r19	; 0x05
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	9c 81       	ldd	r25, Y+4	; 0x04
    1fac:	fc 01       	movw	r30, r24
    1fae:	24 81       	ldd	r18, Z+4	; 0x04
    1fb0:	35 81       	ldd	r19, Z+5	; 0x05
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	82 81       	ldd	r24, Z+2	; 0x02
    1fba:	93 81       	ldd	r25, Z+3	; 0x03
    1fbc:	28 17       	cp	r18, r24
    1fbe:	39 07       	cpc	r19, r25
    1fc0:	08 f4       	brcc	.+2      	; 0x1fc4 <prvCopyDataToQueue+0x98>
    1fc2:	5b c0       	rjmp	.+182    	; 0x207a <prvCopyDataToQueue+0x14e>
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc8:	fc 01       	movw	r30, r24
    1fca:	20 81       	ld	r18, Z
    1fcc:	31 81       	ldd	r19, Z+1	; 0x01
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	24 83       	std	Z+4, r18	; 0x04
    1fd6:	35 83       	std	Z+5, r19	; 0x05
    1fd8:	50 c0       	rjmp	.+160    	; 0x207a <prvCopyDataToQueue+0x14e>
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	fc 01       	movw	r30, r24
    1fe0:	80 a1       	ldd	r24, Z+32	; 0x20
    1fe2:	48 2f       	mov	r20, r24
    1fe4:	50 e0       	ldi	r21, 0x00	; 0
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fea:	fc 01       	movw	r30, r24
    1fec:	86 81       	ldd	r24, Z+6	; 0x06
    1fee:	97 81       	ldd	r25, Z+7	; 0x07
    1ff0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ff2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ff4:	b9 01       	movw	r22, r18
    1ff6:	0e 94 b6 34 	call	0x696c	; 0x696c <memcpy>
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffe:	fc 01       	movw	r30, r24
    2000:	26 81       	ldd	r18, Z+6	; 0x06
    2002:	37 81       	ldd	r19, Z+7	; 0x07
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	9c 81       	ldd	r25, Y+4	; 0x04
    2008:	fc 01       	movw	r30, r24
    200a:	80 a1       	ldd	r24, Z+32	; 0x20
    200c:	88 2f       	mov	r24, r24
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	91 95       	neg	r25
    2012:	81 95       	neg	r24
    2014:	91 09       	sbc	r25, r1
    2016:	28 0f       	add	r18, r24
    2018:	39 1f       	adc	r19, r25
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	9c 81       	ldd	r25, Y+4	; 0x04
    201e:	fc 01       	movw	r30, r24
    2020:	26 83       	std	Z+6, r18	; 0x06
    2022:	37 83       	std	Z+7, r19	; 0x07
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	9c 81       	ldd	r25, Y+4	; 0x04
    2028:	fc 01       	movw	r30, r24
    202a:	26 81       	ldd	r18, Z+6	; 0x06
    202c:	37 81       	ldd	r19, Z+7	; 0x07
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	9c 81       	ldd	r25, Y+4	; 0x04
    2032:	fc 01       	movw	r30, r24
    2034:	80 81       	ld	r24, Z
    2036:	91 81       	ldd	r25, Z+1	; 0x01
    2038:	28 17       	cp	r18, r24
    203a:	39 07       	cpc	r19, r25
    203c:	a8 f4       	brcc	.+42     	; 0x2068 <prvCopyDataToQueue+0x13c>
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	9c 81       	ldd	r25, Y+4	; 0x04
    2042:	fc 01       	movw	r30, r24
    2044:	22 81       	ldd	r18, Z+2	; 0x02
    2046:	33 81       	ldd	r19, Z+3	; 0x03
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	fc 01       	movw	r30, r24
    204e:	80 a1       	ldd	r24, Z+32	; 0x20
    2050:	88 2f       	mov	r24, r24
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	91 95       	neg	r25
    2056:	81 95       	neg	r24
    2058:	91 09       	sbc	r25, r1
    205a:	28 0f       	add	r18, r24
    205c:	39 1f       	adc	r19, r25
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	fc 01       	movw	r30, r24
    2064:	26 83       	std	Z+6, r18	; 0x06
    2066:	37 83       	std	Z+7, r19	; 0x07
    2068:	8f 81       	ldd	r24, Y+7	; 0x07
    206a:	82 30       	cpi	r24, 0x02	; 2
    206c:	31 f4       	brne	.+12     	; 0x207a <prvCopyDataToQueue+0x14e>
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	88 23       	and	r24, r24
    2072:	19 f0       	breq	.+6      	; 0x207a <prvCopyDataToQueue+0x14e>
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	81 50       	subi	r24, 0x01	; 1
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	21 e0       	ldi	r18, 0x01	; 1
    207e:	28 0f       	add	r18, r24
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	fc 01       	movw	r30, r24
    2086:	26 8f       	std	Z+30, r18	; 0x1e
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	27 96       	adiw	r28, 0x07	; 7
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	08 95       	ret

00002096 <prvCopyDataFromQueue>:
    2096:	cf 93       	push	r28
    2098:	df 93       	push	r29
    209a:	00 d0       	rcall	.+0      	; 0x209c <prvCopyDataFromQueue+0x6>
    209c:	1f 92       	push	r1
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	9a 83       	std	Y+2, r25	; 0x02
    20a6:	6b 83       	std	Y+3, r22	; 0x03
    20a8:	7c 83       	std	Y+4, r23	; 0x04
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	9a 81       	ldd	r25, Y+2	; 0x02
    20ae:	fc 01       	movw	r30, r24
    20b0:	80 a1       	ldd	r24, Z+32	; 0x20
    20b2:	88 23       	and	r24, r24
    20b4:	c9 f1       	breq	.+114    	; 0x2128 <prvCopyDataFromQueue+0x92>
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ba:	fc 01       	movw	r30, r24
    20bc:	26 81       	ldd	r18, Z+6	; 0x06
    20be:	37 81       	ldd	r19, Z+7	; 0x07
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	9a 81       	ldd	r25, Y+2	; 0x02
    20c4:	fc 01       	movw	r30, r24
    20c6:	80 a1       	ldd	r24, Z+32	; 0x20
    20c8:	88 2f       	mov	r24, r24
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	28 0f       	add	r18, r24
    20ce:	39 1f       	adc	r19, r25
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	9a 81       	ldd	r25, Y+2	; 0x02
    20d4:	fc 01       	movw	r30, r24
    20d6:	26 83       	std	Z+6, r18	; 0x06
    20d8:	37 83       	std	Z+7, r19	; 0x07
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	9a 81       	ldd	r25, Y+2	; 0x02
    20de:	fc 01       	movw	r30, r24
    20e0:	26 81       	ldd	r18, Z+6	; 0x06
    20e2:	37 81       	ldd	r19, Z+7	; 0x07
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	9a 81       	ldd	r25, Y+2	; 0x02
    20e8:	fc 01       	movw	r30, r24
    20ea:	82 81       	ldd	r24, Z+2	; 0x02
    20ec:	93 81       	ldd	r25, Z+3	; 0x03
    20ee:	28 17       	cp	r18, r24
    20f0:	39 07       	cpc	r19, r25
    20f2:	50 f0       	brcs	.+20     	; 0x2108 <prvCopyDataFromQueue+0x72>
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
    20f6:	9a 81       	ldd	r25, Y+2	; 0x02
    20f8:	fc 01       	movw	r30, r24
    20fa:	20 81       	ld	r18, Z
    20fc:	31 81       	ldd	r19, Z+1	; 0x01
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	9a 81       	ldd	r25, Y+2	; 0x02
    2102:	fc 01       	movw	r30, r24
    2104:	26 83       	std	Z+6, r18	; 0x06
    2106:	37 83       	std	Z+7, r19	; 0x07
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	9a 81       	ldd	r25, Y+2	; 0x02
    210c:	fc 01       	movw	r30, r24
    210e:	80 a1       	ldd	r24, Z+32	; 0x20
    2110:	48 2f       	mov	r20, r24
    2112:	50 e0       	ldi	r21, 0x00	; 0
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	9a 81       	ldd	r25, Y+2	; 0x02
    2118:	fc 01       	movw	r30, r24
    211a:	26 81       	ldd	r18, Z+6	; 0x06
    211c:	37 81       	ldd	r19, Z+7	; 0x07
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	b9 01       	movw	r22, r18
    2124:	0e 94 b6 34 	call	0x696c	; 0x696c <memcpy>
    2128:	00 00       	nop
    212a:	24 96       	adiw	r28, 0x04	; 4
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	df 91       	pop	r29
    2132:	cf 91       	pop	r28
    2134:	08 95       	ret

00002136 <prvUnlockQueue>:
    2136:	cf 93       	push	r28
    2138:	df 93       	push	r29
    213a:	00 d0       	rcall	.+0      	; 0x213c <prvUnlockQueue+0x6>
    213c:	1f 92       	push	r1
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	8b 83       	std	Y+3, r24	; 0x03
    2144:	9c 83       	std	Y+4, r25	; 0x04
    2146:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    214a:	ff 93       	push	r31
    214c:	f8 7f       	andi	r31, 0xF8	; 248
    214e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	9c 81       	ldd	r25, Y+4	; 0x04
    2156:	fc 01       	movw	r30, r24
    2158:	82 a1       	ldd	r24, Z+34	; 0x22
    215a:	89 83       	std	Y+1, r24	; 0x01
    215c:	12 c0       	rjmp	.+36     	; 0x2182 <prvUnlockQueue+0x4c>
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	9c 81       	ldd	r25, Y+4	; 0x04
    2162:	fc 01       	movw	r30, r24
    2164:	83 89       	ldd	r24, Z+19	; 0x13
    2166:	88 23       	and	r24, r24
    2168:	81 f0       	breq	.+32     	; 0x218a <prvUnlockQueue+0x54>
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	9c 81       	ldd	r25, Y+4	; 0x04
    216e:	43 96       	adiw	r24, 0x13	; 19
    2170:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <xTaskRemoveFromEventList>
    2174:	88 23       	and	r24, r24
    2176:	11 f0       	breq	.+4      	; 0x217c <prvUnlockQueue+0x46>
    2178:	0e 94 bd 18 	call	0x317a	; 0x317a <vTaskMissedYield>
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	81 50       	subi	r24, 0x01	; 1
    2180:	89 83       	std	Y+1, r24	; 0x01
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	18 16       	cp	r1, r24
    2186:	5c f3       	brlt	.-42     	; 0x215e <prvUnlockQueue+0x28>
    2188:	01 c0       	rjmp	.+2      	; 0x218c <prvUnlockQueue+0x56>
    218a:	00 00       	nop
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	9c 81       	ldd	r25, Y+4	; 0x04
    2190:	2f ef       	ldi	r18, 0xFF	; 255
    2192:	fc 01       	movw	r30, r24
    2194:	22 a3       	std	Z+34, r18	; 0x22
    2196:	ff 91       	pop	r31
    2198:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    219c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    21a0:	ff 93       	push	r31
    21a2:	f8 7f       	andi	r31, 0xF8	; 248
    21a4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	9c 81       	ldd	r25, Y+4	; 0x04
    21ac:	fc 01       	movw	r30, r24
    21ae:	81 a1       	ldd	r24, Z+33	; 0x21
    21b0:	8a 83       	std	Y+2, r24	; 0x02
    21b2:	12 c0       	rjmp	.+36     	; 0x21d8 <prvUnlockQueue+0xa2>
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	9c 81       	ldd	r25, Y+4	; 0x04
    21b8:	fc 01       	movw	r30, r24
    21ba:	80 85       	ldd	r24, Z+8	; 0x08
    21bc:	88 23       	and	r24, r24
    21be:	81 f0       	breq	.+32     	; 0x21e0 <prvUnlockQueue+0xaa>
    21c0:	8b 81       	ldd	r24, Y+3	; 0x03
    21c2:	9c 81       	ldd	r25, Y+4	; 0x04
    21c4:	08 96       	adiw	r24, 0x08	; 8
    21c6:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <xTaskRemoveFromEventList>
    21ca:	88 23       	and	r24, r24
    21cc:	11 f0       	breq	.+4      	; 0x21d2 <prvUnlockQueue+0x9c>
    21ce:	0e 94 bd 18 	call	0x317a	; 0x317a <vTaskMissedYield>
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	81 50       	subi	r24, 0x01	; 1
    21d6:	8a 83       	std	Y+2, r24	; 0x02
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	18 16       	cp	r1, r24
    21dc:	5c f3       	brlt	.-42     	; 0x21b4 <prvUnlockQueue+0x7e>
    21de:	01 c0       	rjmp	.+2      	; 0x21e2 <prvUnlockQueue+0xac>
    21e0:	00 00       	nop
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	9c 81       	ldd	r25, Y+4	; 0x04
    21e6:	2f ef       	ldi	r18, 0xFF	; 255
    21e8:	fc 01       	movw	r30, r24
    21ea:	21 a3       	std	Z+33, r18	; 0x21
    21ec:	ff 91       	pop	r31
    21ee:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    21f2:	00 00       	nop
    21f4:	24 96       	adiw	r28, 0x04	; 4
    21f6:	cd bf       	out	0x3d, r28	; 61
    21f8:	de bf       	out	0x3e, r29	; 62
    21fa:	df 91       	pop	r29
    21fc:	cf 91       	pop	r28
    21fe:	08 95       	ret

00002200 <prvIsQueueEmpty>:
    2200:	cf 93       	push	r28
    2202:	df 93       	push	r29
    2204:	00 d0       	rcall	.+0      	; 0x2206 <prvIsQueueEmpty+0x6>
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	8a 83       	std	Y+2, r24	; 0x02
    220c:	9b 83       	std	Y+3, r25	; 0x03
    220e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2212:	ff 93       	push	r31
    2214:	f8 7f       	andi	r31, 0xF8	; 248
    2216:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	9b 81       	ldd	r25, Y+3	; 0x03
    221e:	fc 01       	movw	r30, r24
    2220:	86 8d       	ldd	r24, Z+30	; 0x1e
    2222:	88 23       	and	r24, r24
    2224:	19 f4       	brne	.+6      	; 0x222c <prvIsQueueEmpty+0x2c>
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	89 83       	std	Y+1, r24	; 0x01
    222a:	01 c0       	rjmp	.+2      	; 0x222e <prvIsQueueEmpty+0x2e>
    222c:	19 82       	std	Y+1, r1	; 0x01
    222e:	ff 91       	pop	r31
    2230:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	23 96       	adiw	r28, 0x03	; 3
    2238:	cd bf       	out	0x3d, r28	; 61
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	08 95       	ret

00002242 <prvIsQueueFull>:
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	00 d0       	rcall	.+0      	; 0x2248 <prvIsQueueFull+0x6>
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	8a 83       	std	Y+2, r24	; 0x02
    224e:	9b 83       	std	Y+3, r25	; 0x03
    2250:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2254:	ff 93       	push	r31
    2256:	f8 7f       	andi	r31, 0xF8	; 248
    2258:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	9b 81       	ldd	r25, Y+3	; 0x03
    2260:	fc 01       	movw	r30, r24
    2262:	26 8d       	ldd	r18, Z+30	; 0x1e
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	9b 81       	ldd	r25, Y+3	; 0x03
    2268:	fc 01       	movw	r30, r24
    226a:	87 8d       	ldd	r24, Z+31	; 0x1f
    226c:	28 17       	cp	r18, r24
    226e:	19 f4       	brne	.+6      	; 0x2276 <prvIsQueueFull+0x34>
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	01 c0       	rjmp	.+2      	; 0x2278 <prvIsQueueFull+0x36>
    2276:	19 82       	std	Y+1, r1	; 0x01
    2278:	ff 91       	pop	r31
    227a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	23 96       	adiw	r28, 0x03	; 3
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	de bf       	out	0x3e, r29	; 62
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	08 95       	ret

0000228c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	29 97       	sbiw	r28, 0x09	; 9
    2296:	cd bf       	out	0x3d, r28	; 61
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	8b 83       	std	Y+3, r24	; 0x03
    229c:	9c 83       	std	Y+4, r25	; 0x04
    229e:	4d 83       	std	Y+5, r20	; 0x05
    22a0:	5e 83       	std	Y+6, r21	; 0x06
    22a2:	6f 83       	std	Y+7, r22	; 0x07
    22a4:	78 87       	std	Y+8, r23	; 0x08
    22a6:	29 87       	std	Y+9, r18	; 0x09
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	9c 81       	ldd	r25, Y+4	; 0x04
    22ac:	89 83       	std	Y+1, r24	; 0x01
    22ae:	9a 83       	std	Y+2, r25	; 0x02
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    22b0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    22b4:	ff 93       	push	r31
    22b6:	f8 7f       	andi	r31, 0xF8	; 248
    22b8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	9a 81       	ldd	r25, Y+2	; 0x02
    22c0:	fc 01       	movw	r30, r24
    22c2:	81 a1       	ldd	r24, Z+33	; 0x21
    22c4:	8f 3f       	cpi	r24, 0xFF	; 255
    22c6:	21 f4       	brne	.+8      	; 0x22d0 <vQueueWaitForMessageRestricted+0x44>
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	9a 81       	ldd	r25, Y+2	; 0x02
    22cc:	fc 01       	movw	r30, r24
    22ce:	11 a2       	std	Z+33, r1	; 0x21
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	9a 81       	ldd	r25, Y+2	; 0x02
    22d4:	fc 01       	movw	r30, r24
    22d6:	82 a1       	ldd	r24, Z+34	; 0x22
    22d8:	8f 3f       	cpi	r24, 0xFF	; 255
    22da:	21 f4       	brne	.+8      	; 0x22e4 <vQueueWaitForMessageRestricted+0x58>
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	9a 81       	ldd	r25, Y+2	; 0x02
    22e0:	fc 01       	movw	r30, r24
    22e2:	12 a2       	std	Z+34, r1	; 0x22
    22e4:	ff 91       	pop	r31
    22e6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	9a 81       	ldd	r25, Y+2	; 0x02
    22ee:	fc 01       	movw	r30, r24
    22f0:	86 8d       	ldd	r24, Z+30	; 0x1e
    22f2:	88 23       	and	r24, r24
    22f4:	71 f4       	brne	.+28     	; 0x2312 <vQueueWaitForMessageRestricted+0x86>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	9a 81       	ldd	r25, Y+2	; 0x02
    22fa:	fc 01       	movw	r30, r24
    22fc:	73 96       	adiw	r30, 0x13	; 19
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	9e 81       	ldd	r25, Y+6	; 0x06
    2302:	af 81       	ldd	r26, Y+7	; 0x07
    2304:	b8 85       	ldd	r27, Y+8	; 0x08
    2306:	29 85       	ldd	r18, Y+9	; 0x09
    2308:	ac 01       	movw	r20, r24
    230a:	bd 01       	movw	r22, r26
    230c:	cf 01       	movw	r24, r30
    230e:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	9a 81       	ldd	r25, Y+2	; 0x02
    2316:	0e 94 9b 10 	call	0x2136	; 0x2136 <prvUnlockQueue>
	}
    231a:	00 00       	nop
    231c:	29 96       	adiw	r28, 0x09	; 9
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	de bf       	out	0x3e, r29	; 62
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	08 95       	ret

00002328 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    2328:	8f 92       	push	r8
    232a:	9f 92       	push	r9
    232c:	af 92       	push	r10
    232e:	bf 92       	push	r11
    2330:	cf 92       	push	r12
    2332:	df 92       	push	r13
    2334:	ef 92       	push	r14
    2336:	ff 92       	push	r15
    2338:	0f 93       	push	r16
    233a:	1f 93       	push	r17
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	60 97       	sbiw	r28, 0x10	; 16
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	8e 83       	std	Y+6, r24	; 0x06
    234c:	9f 83       	std	Y+7, r25	; 0x07
    234e:	68 87       	std	Y+8, r22	; 0x08
    2350:	79 87       	std	Y+9, r23	; 0x09
    2352:	4a 87       	std	Y+10, r20	; 0x0a
    2354:	5b 87       	std	Y+11, r21	; 0x0b
    2356:	2c 87       	std	Y+12, r18	; 0x0c
    2358:	3d 87       	std	Y+13, r19	; 0x0d
    235a:	0e 87       	std	Y+14, r16	; 0x0e
    235c:	ef 86       	std	Y+15, r14	; 0x0f
    235e:	f8 8a       	std	Y+16, r15	; 0x10
    2360:	8a 85       	ldd	r24, Y+10	; 0x0a
    2362:	9b 85       	ldd	r25, Y+11	; 0x0b
    2364:	0e 94 44 07 	call	0xe88	; 0xe88 <pvPortMalloc>
    2368:	8c 83       	std	Y+4, r24	; 0x04
    236a:	9d 83       	std	Y+5, r25	; 0x05
    236c:	8c 81       	ldd	r24, Y+4	; 0x04
    236e:	9d 81       	ldd	r25, Y+5	; 0x05
    2370:	89 2b       	or	r24, r25
    2372:	b9 f0       	breq	.+46     	; 0x23a2 <xTaskCreate+0x7a>
    2374:	8c e2       	ldi	r24, 0x2C	; 44
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	0e 94 44 07 	call	0xe88	; 0xe88 <pvPortMalloc>
    237c:	89 83       	std	Y+1, r24	; 0x01
    237e:	9a 83       	std	Y+2, r25	; 0x02
    2380:	89 81       	ldd	r24, Y+1	; 0x01
    2382:	9a 81       	ldd	r25, Y+2	; 0x02
    2384:	89 2b       	or	r24, r25
    2386:	41 f0       	breq	.+16     	; 0x2398 <xTaskCreate+0x70>
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	9a 81       	ldd	r25, Y+2	; 0x02
    238c:	2c 81       	ldd	r18, Y+4	; 0x04
    238e:	3d 81       	ldd	r19, Y+5	; 0x05
    2390:	fc 01       	movw	r30, r24
    2392:	23 8f       	std	Z+27, r18	; 0x1b
    2394:	34 8f       	std	Z+28, r19	; 0x1c
    2396:	07 c0       	rjmp	.+14     	; 0x23a6 <xTaskCreate+0x7e>
    2398:	8c 81       	ldd	r24, Y+4	; 0x04
    239a:	9d 81       	ldd	r25, Y+5	; 0x05
    239c:	0e 94 88 07 	call	0xf10	; 0xf10 <vPortFree>
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <xTaskCreate+0x7e>
    23a2:	19 82       	std	Y+1, r1	; 0x01
    23a4:	1a 82       	std	Y+2, r1	; 0x02
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	9a 81       	ldd	r25, Y+2	; 0x02
    23aa:	89 2b       	or	r24, r25
    23ac:	09 f1       	breq	.+66     	; 0x23f0 <xTaskCreate+0xc8>
    23ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    23b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    23b2:	cc 01       	movw	r24, r24
    23b4:	a0 e0       	ldi	r26, 0x00	; 0
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	09 81       	ldd	r16, Y+1	; 0x01
    23ba:	1a 81       	ldd	r17, Y+2	; 0x02
    23bc:	4f 85       	ldd	r20, Y+15	; 0x0f
    23be:	58 89       	ldd	r21, Y+16	; 0x10
    23c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    23c2:	3d 85       	ldd	r19, Y+13	; 0x0d
    23c4:	68 85       	ldd	r22, Y+8	; 0x08
    23c6:	79 85       	ldd	r23, Y+9	; 0x09
    23c8:	ee 81       	ldd	r30, Y+6	; 0x06
    23ca:	ff 81       	ldd	r31, Y+7	; 0x07
    23cc:	81 2c       	mov	r8, r1
    23ce:	91 2c       	mov	r9, r1
    23d0:	58 01       	movw	r10, r16
    23d2:	6a 01       	movw	r12, r20
    23d4:	ee 84       	ldd	r14, Y+14	; 0x0e
    23d6:	89 01       	movw	r16, r18
    23d8:	9c 01       	movw	r18, r24
    23da:	ad 01       	movw	r20, r26
    23dc:	cf 01       	movw	r24, r30
    23de:	0e 94 0b 12 	call	0x2416	; 0x2416 <prvInitialiseNewTask>
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	9a 81       	ldd	r25, Y+2	; 0x02
    23e6:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <prvAddNewTaskToReadyList>
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	8b 83       	std	Y+3, r24	; 0x03
    23ee:	02 c0       	rjmp	.+4      	; 0x23f4 <xTaskCreate+0xcc>
    23f0:	8f ef       	ldi	r24, 0xFF	; 255
    23f2:	8b 83       	std	Y+3, r24	; 0x03
    23f4:	8b 81       	ldd	r24, Y+3	; 0x03
    23f6:	60 96       	adiw	r28, 0x10	; 16
    23f8:	cd bf       	out	0x3d, r28	; 61
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	1f 91       	pop	r17
    2402:	0f 91       	pop	r16
    2404:	ff 90       	pop	r15
    2406:	ef 90       	pop	r14
    2408:	df 90       	pop	r13
    240a:	cf 90       	pop	r12
    240c:	bf 90       	pop	r11
    240e:	af 90       	pop	r10
    2410:	9f 90       	pop	r9
    2412:	8f 90       	pop	r8
    2414:	08 95       	ret

00002416 <prvInitialiseNewTask>:
    2416:	8f 92       	push	r8
    2418:	9f 92       	push	r9
    241a:	af 92       	push	r10
    241c:	bf 92       	push	r11
    241e:	cf 92       	push	r12
    2420:	df 92       	push	r13
    2422:	ef 92       	push	r14
    2424:	ff 92       	push	r15
    2426:	0f 93       	push	r16
    2428:	1f 93       	push	r17
    242a:	cf 93       	push	r28
    242c:	df 93       	push	r29
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    2432:	64 97       	sbiw	r28, 0x14	; 20
    2434:	cd bf       	out	0x3d, r28	; 61
    2436:	de bf       	out	0x3e, r29	; 62
    2438:	8c 83       	std	Y+4, r24	; 0x04
    243a:	9d 83       	std	Y+5, r25	; 0x05
    243c:	6e 83       	std	Y+6, r22	; 0x06
    243e:	7f 83       	std	Y+7, r23	; 0x07
    2440:	28 87       	std	Y+8, r18	; 0x08
    2442:	39 87       	std	Y+9, r19	; 0x09
    2444:	4a 87       	std	Y+10, r20	; 0x0a
    2446:	5b 87       	std	Y+11, r21	; 0x0b
    2448:	0c 87       	std	Y+12, r16	; 0x0c
    244a:	1d 87       	std	Y+13, r17	; 0x0d
    244c:	ee 86       	std	Y+14, r14	; 0x0e
    244e:	cf 86       	std	Y+15, r12	; 0x0f
    2450:	d8 8a       	std	Y+16, r13	; 0x10
    2452:	a9 8a       	std	Y+17, r10	; 0x11
    2454:	ba 8a       	std	Y+18, r11	; 0x12
    2456:	8b 8a       	std	Y+19, r8	; 0x13
    2458:	9c 8a       	std	Y+20, r9	; 0x14
    245a:	28 85       	ldd	r18, Y+8	; 0x08
    245c:	39 85       	ldd	r19, Y+9	; 0x09
    245e:	89 89       	ldd	r24, Y+17	; 0x11
    2460:	9a 89       	ldd	r25, Y+18	; 0x12
    2462:	fc 01       	movw	r30, r24
    2464:	83 8d       	ldd	r24, Z+27	; 0x1b
    2466:	94 8d       	ldd	r25, Z+28	; 0x1c
    2468:	a9 01       	movw	r20, r18
    246a:	65 ea       	ldi	r22, 0xA5	; 165
    246c:	70 e0       	ldi	r23, 0x00	; 0
    246e:	0e 94 bf 34 	call	0x697e	; 0x697e <memset>
    2472:	89 89       	ldd	r24, Y+17	; 0x11
    2474:	9a 89       	ldd	r25, Y+18	; 0x12
    2476:	fc 01       	movw	r30, r24
    2478:	23 8d       	ldd	r18, Z+27	; 0x1b
    247a:	34 8d       	ldd	r19, Z+28	; 0x1c
    247c:	88 85       	ldd	r24, Y+8	; 0x08
    247e:	99 85       	ldd	r25, Y+9	; 0x09
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	82 0f       	add	r24, r18
    2484:	93 1f       	adc	r25, r19
    2486:	8a 83       	std	Y+2, r24	; 0x02
    2488:	9b 83       	std	Y+3, r25	; 0x03
    248a:	19 82       	std	Y+1, r1	; 0x01
    248c:	21 c0       	rjmp	.+66     	; 0x24d0 <prvInitialiseNewTask+0xba>
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	88 2f       	mov	r24, r24
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	29 81       	ldd	r18, Y+1	; 0x01
    2496:	22 2f       	mov	r18, r18
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	4e 81       	ldd	r20, Y+6	; 0x06
    249c:	5f 81       	ldd	r21, Y+7	; 0x07
    249e:	24 0f       	add	r18, r20
    24a0:	35 1f       	adc	r19, r21
    24a2:	f9 01       	movw	r30, r18
    24a4:	40 81       	ld	r20, Z
    24a6:	29 89       	ldd	r18, Y+17	; 0x11
    24a8:	3a 89       	ldd	r19, Y+18	; 0x12
    24aa:	82 0f       	add	r24, r18
    24ac:	93 1f       	adc	r25, r19
    24ae:	4d 96       	adiw	r24, 0x1d	; 29
    24b0:	fc 01       	movw	r30, r24
    24b2:	40 83       	st	Z, r20
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	88 2f       	mov	r24, r24
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	2e 81       	ldd	r18, Y+6	; 0x06
    24bc:	3f 81       	ldd	r19, Y+7	; 0x07
    24be:	82 0f       	add	r24, r18
    24c0:	93 1f       	adc	r25, r19
    24c2:	fc 01       	movw	r30, r24
    24c4:	80 81       	ld	r24, Z
    24c6:	88 23       	and	r24, r24
    24c8:	39 f0       	breq	.+14     	; 0x24d8 <prvInitialiseNewTask+0xc2>
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	8f 5f       	subi	r24, 0xFF	; 255
    24ce:	89 83       	std	Y+1, r24	; 0x01
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	88 30       	cpi	r24, 0x08	; 8
    24d4:	e0 f2       	brcs	.-72     	; 0x248e <prvInitialiseNewTask+0x78>
    24d6:	01 c0       	rjmp	.+2      	; 0x24da <prvInitialiseNewTask+0xc4>
    24d8:	00 00       	nop
    24da:	89 89       	ldd	r24, Y+17	; 0x11
    24dc:	9a 89       	ldd	r25, Y+18	; 0x12
    24de:	fc 01       	movw	r30, r24
    24e0:	14 a2       	std	Z+36, r1	; 0x24
    24e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    24e4:	84 30       	cpi	r24, 0x04	; 4
    24e6:	10 f0       	brcs	.+4      	; 0x24ec <prvInitialiseNewTask+0xd6>
    24e8:	83 e0       	ldi	r24, 0x03	; 3
    24ea:	8e 87       	std	Y+14, r24	; 0x0e
    24ec:	89 89       	ldd	r24, Y+17	; 0x11
    24ee:	9a 89       	ldd	r25, Y+18	; 0x12
    24f0:	2e 85       	ldd	r18, Y+14	; 0x0e
    24f2:	fc 01       	movw	r30, r24
    24f4:	22 8f       	std	Z+26, r18	; 0x1a
    24f6:	89 89       	ldd	r24, Y+17	; 0x11
    24f8:	9a 89       	ldd	r25, Y+18	; 0x12
    24fa:	02 96       	adiw	r24, 0x02	; 2
    24fc:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <vListInitialiseItem>
    2500:	89 89       	ldd	r24, Y+17	; 0x11
    2502:	9a 89       	ldd	r25, Y+18	; 0x12
    2504:	0e 96       	adiw	r24, 0x0e	; 14
    2506:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <vListInitialiseItem>
    250a:	89 89       	ldd	r24, Y+17	; 0x11
    250c:	9a 89       	ldd	r25, Y+18	; 0x12
    250e:	29 89       	ldd	r18, Y+17	; 0x11
    2510:	3a 89       	ldd	r19, Y+18	; 0x12
    2512:	fc 01       	movw	r30, r24
    2514:	22 87       	std	Z+10, r18	; 0x0a
    2516:	33 87       	std	Z+11, r19	; 0x0b
    2518:	8e 85       	ldd	r24, Y+14	; 0x0e
    251a:	88 2f       	mov	r24, r24
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	a0 e0       	ldi	r26, 0x00	; 0
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	24 e0       	ldi	r18, 0x04	; 4
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e0       	ldi	r20, 0x00	; 0
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	79 01       	movw	r14, r18
    252c:	8a 01       	movw	r16, r20
    252e:	e8 1a       	sub	r14, r24
    2530:	f9 0a       	sbc	r15, r25
    2532:	0a 0b       	sbc	r16, r26
    2534:	1b 0b       	sbc	r17, r27
    2536:	d8 01       	movw	r26, r16
    2538:	c7 01       	movw	r24, r14
    253a:	29 89       	ldd	r18, Y+17	; 0x11
    253c:	3a 89       	ldd	r19, Y+18	; 0x12
    253e:	f9 01       	movw	r30, r18
    2540:	86 87       	std	Z+14, r24	; 0x0e
    2542:	97 87       	std	Z+15, r25	; 0x0f
    2544:	a0 8b       	std	Z+16, r26	; 0x10
    2546:	b1 8b       	std	Z+17, r27	; 0x11
    2548:	89 89       	ldd	r24, Y+17	; 0x11
    254a:	9a 89       	ldd	r25, Y+18	; 0x12
    254c:	29 89       	ldd	r18, Y+17	; 0x11
    254e:	3a 89       	ldd	r19, Y+18	; 0x12
    2550:	fc 01       	movw	r30, r24
    2552:	26 8b       	std	Z+22, r18	; 0x16
    2554:	37 8b       	std	Z+23, r19	; 0x17
    2556:	89 89       	ldd	r24, Y+17	; 0x11
    2558:	9a 89       	ldd	r25, Y+18	; 0x12
    255a:	fc 01       	movw	r30, r24
    255c:	17 a2       	std	Z+39, r1	; 0x27
    255e:	10 a6       	std	Z+40, r1	; 0x28
    2560:	11 a6       	std	Z+41, r1	; 0x29
    2562:	12 a6       	std	Z+42, r1	; 0x2a
    2564:	89 89       	ldd	r24, Y+17	; 0x11
    2566:	9a 89       	ldd	r25, Y+18	; 0x12
    2568:	fc 01       	movw	r30, r24
    256a:	13 a6       	std	Z+43, r1	; 0x2b
    256c:	4c 85       	ldd	r20, Y+12	; 0x0c
    256e:	5d 85       	ldd	r21, Y+13	; 0x0d
    2570:	2c 81       	ldd	r18, Y+4	; 0x04
    2572:	3d 81       	ldd	r19, Y+5	; 0x05
    2574:	8a 81       	ldd	r24, Y+2	; 0x02
    2576:	9b 81       	ldd	r25, Y+3	; 0x03
    2578:	b9 01       	movw	r22, r18
    257a:	0e 94 1c 09 	call	0x1238	; 0x1238 <pxPortInitialiseStack>
    257e:	9c 01       	movw	r18, r24
    2580:	89 89       	ldd	r24, Y+17	; 0x11
    2582:	9a 89       	ldd	r25, Y+18	; 0x12
    2584:	fc 01       	movw	r30, r24
    2586:	20 83       	st	Z, r18
    2588:	31 83       	std	Z+1, r19	; 0x01
    258a:	8f 85       	ldd	r24, Y+15	; 0x0f
    258c:	98 89       	ldd	r25, Y+16	; 0x10
    258e:	89 2b       	or	r24, r25
    2590:	39 f0       	breq	.+14     	; 0x25a0 <prvInitialiseNewTask+0x18a>
    2592:	8f 85       	ldd	r24, Y+15	; 0x0f
    2594:	98 89       	ldd	r25, Y+16	; 0x10
    2596:	29 89       	ldd	r18, Y+17	; 0x11
    2598:	3a 89       	ldd	r19, Y+18	; 0x12
    259a:	fc 01       	movw	r30, r24
    259c:	20 83       	st	Z, r18
    259e:	31 83       	std	Z+1, r19	; 0x01
    25a0:	00 00       	nop
    25a2:	64 96       	adiw	r28, 0x14	; 20
    25a4:	cd bf       	out	0x3d, r28	; 61
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	df 91       	pop	r29
    25aa:	cf 91       	pop	r28
    25ac:	1f 91       	pop	r17
    25ae:	0f 91       	pop	r16
    25b0:	ff 90       	pop	r15
    25b2:	ef 90       	pop	r14
    25b4:	df 90       	pop	r13
    25b6:	cf 90       	pop	r12
    25b8:	bf 90       	pop	r11
    25ba:	af 90       	pop	r10
    25bc:	9f 90       	pop	r9
    25be:	8f 90       	pop	r8
    25c0:	08 95       	ret

000025c2 <prvAddNewTaskToReadyList>:
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29
    25c6:	1f 92       	push	r1
    25c8:	1f 92       	push	r1
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
    25ce:	89 83       	std	Y+1, r24	; 0x01
    25d0:	9a 83       	std	Y+2, r25	; 0x02
    25d2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    25d6:	ff 93       	push	r31
    25d8:	f8 7f       	andi	r31, 0xF8	; 248
    25da:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    25de:	80 91 62 2d 	lds	r24, 0x2D62	; 0x802d62 <uxCurrentNumberOfTasks>
    25e2:	8f 5f       	subi	r24, 0xFF	; 255
    25e4:	80 93 62 2d 	sts	0x2D62, r24	; 0x802d62 <uxCurrentNumberOfTasks>
    25e8:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    25ec:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    25f0:	89 2b       	or	r24, r25
    25f2:	69 f4       	brne	.+26     	; 0x260e <prvAddNewTaskToReadyList+0x4c>
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	9a 81       	ldd	r25, Y+2	; 0x02
    25f8:	80 93 04 2d 	sts	0x2D04, r24	; 0x802d04 <pxCurrentTCB>
    25fc:	90 93 05 2d 	sts	0x2D05, r25	; 0x802d05 <pxCurrentTCB+0x1>
    2600:	80 91 62 2d 	lds	r24, 0x2D62	; 0x802d62 <uxCurrentNumberOfTasks>
    2604:	81 30       	cpi	r24, 0x01	; 1
    2606:	c9 f4       	brne	.+50     	; 0x263a <prvAddNewTaskToReadyList+0x78>
    2608:	0e 94 db 18 	call	0x31b6	; 0x31b6 <prvInitialiseTaskLists>
    260c:	16 c0       	rjmp	.+44     	; 0x263a <prvAddNewTaskToReadyList+0x78>
    260e:	80 91 68 2d 	lds	r24, 0x2D68	; 0x802d68 <xSchedulerRunning>
    2612:	88 23       	and	r24, r24
    2614:	91 f4       	brne	.+36     	; 0x263a <prvAddNewTaskToReadyList+0x78>
    2616:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    261a:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    261e:	fc 01       	movw	r30, r24
    2620:	22 8d       	ldd	r18, Z+26	; 0x1a
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	9a 81       	ldd	r25, Y+2	; 0x02
    2626:	fc 01       	movw	r30, r24
    2628:	82 8d       	ldd	r24, Z+26	; 0x1a
    262a:	82 17       	cp	r24, r18
    262c:	30 f0       	brcs	.+12     	; 0x263a <prvAddNewTaskToReadyList+0x78>
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	9a 81       	ldd	r25, Y+2	; 0x02
    2632:	80 93 04 2d 	sts	0x2D04, r24	; 0x802d04 <pxCurrentTCB>
    2636:	90 93 05 2d 	sts	0x2D05, r25	; 0x802d05 <pxCurrentTCB+0x1>
    263a:	80 91 6c 2d 	lds	r24, 0x2D6C	; 0x802d6c <uxTaskNumber>
    263e:	8f 5f       	subi	r24, 0xFF	; 255
    2640:	80 93 6c 2d 	sts	0x2D6C, r24	; 0x802d6c <uxTaskNumber>
    2644:	20 91 6c 2d 	lds	r18, 0x2D6C	; 0x802d6c <uxTaskNumber>
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	9a 81       	ldd	r25, Y+2	; 0x02
    264c:	fc 01       	movw	r30, r24
    264e:	25 a3       	std	Z+37, r18	; 0x25
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	9a 81       	ldd	r25, Y+2	; 0x02
    2654:	fc 01       	movw	r30, r24
    2656:	92 8d       	ldd	r25, Z+26	; 0x1a
    2658:	80 91 67 2d 	lds	r24, 0x2D67	; 0x802d67 <uxTopReadyPriority>
    265c:	89 17       	cp	r24, r25
    265e:	30 f4       	brcc	.+12     	; 0x266c <prvAddNewTaskToReadyList+0xaa>
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	9a 81       	ldd	r25, Y+2	; 0x02
    2664:	fc 01       	movw	r30, r24
    2666:	82 8d       	ldd	r24, Z+26	; 0x1a
    2668:	80 93 67 2d 	sts	0x2D67, r24	; 0x802d67 <uxTopReadyPriority>
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	9a 81       	ldd	r25, Y+2	; 0x02
    2670:	ac 01       	movw	r20, r24
    2672:	4e 5f       	subi	r20, 0xFE	; 254
    2674:	5f 4f       	sbci	r21, 0xFF	; 255
    2676:	89 81       	ldd	r24, Y+1	; 0x01
    2678:	9a 81       	ldd	r25, Y+2	; 0x02
    267a:	fc 01       	movw	r30, r24
    267c:	82 8d       	ldd	r24, Z+26	; 0x1a
    267e:	28 2f       	mov	r18, r24
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	6b e0       	ldi	r22, 0x0B	; 11
    2684:	62 9f       	mul	r22, r18
    2686:	c0 01       	movw	r24, r0
    2688:	63 9f       	mul	r22, r19
    268a:	90 0d       	add	r25, r0
    268c:	11 24       	eor	r1, r1
    268e:	8a 5f       	subi	r24, 0xFA	; 250
    2690:	92 4d       	sbci	r25, 0xD2	; 210
    2692:	ba 01       	movw	r22, r20
    2694:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <vListInsertEnd>
    2698:	ff 91       	pop	r31
    269a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    269e:	80 91 68 2d 	lds	r24, 0x2D68	; 0x802d68 <xSchedulerRunning>
    26a2:	88 23       	and	r24, r24
    26a4:	71 f0       	breq	.+28     	; 0x26c2 <prvAddNewTaskToReadyList+0x100>
    26a6:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    26aa:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    26ae:	fc 01       	movw	r30, r24
    26b0:	22 8d       	ldd	r18, Z+26	; 0x1a
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	9a 81       	ldd	r25, Y+2	; 0x02
    26b6:	fc 01       	movw	r30, r24
    26b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    26ba:	28 17       	cp	r18, r24
    26bc:	10 f4       	brcc	.+4      	; 0x26c2 <prvAddNewTaskToReadyList+0x100>
    26be:	0e 94 2d 0b 	call	0x165a	; 0x165a <vPortYield>
    26c2:	00 00       	nop
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	08 95       	ret

000026ce <vTaskDelay>:
    26ce:	cf 93       	push	r28
    26d0:	df 93       	push	r29
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	25 97       	sbiw	r28, 0x05	; 5
    26d8:	cd bf       	out	0x3d, r28	; 61
    26da:	de bf       	out	0x3e, r29	; 62
    26dc:	6a 83       	std	Y+2, r22	; 0x02
    26de:	7b 83       	std	Y+3, r23	; 0x03
    26e0:	8c 83       	std	Y+4, r24	; 0x04
    26e2:	9d 83       	std	Y+5, r25	; 0x05
    26e4:	19 82       	std	Y+1, r1	; 0x01
    26e6:	8a 81       	ldd	r24, Y+2	; 0x02
    26e8:	9b 81       	ldd	r25, Y+3	; 0x03
    26ea:	ac 81       	ldd	r26, Y+4	; 0x04
    26ec:	bd 81       	ldd	r27, Y+5	; 0x05
    26ee:	89 2b       	or	r24, r25
    26f0:	8a 2b       	or	r24, r26
    26f2:	8b 2b       	or	r24, r27
    26f4:	71 f0       	breq	.+28     	; 0x2712 <vTaskDelay+0x44>
    26f6:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <vTaskSuspendAll>
    26fa:	8a 81       	ldd	r24, Y+2	; 0x02
    26fc:	9b 81       	ldd	r25, Y+3	; 0x03
    26fe:	ac 81       	ldd	r26, Y+4	; 0x04
    2700:	bd 81       	ldd	r27, Y+5	; 0x05
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	bc 01       	movw	r22, r24
    2706:	cd 01       	movw	r24, r26
    2708:	0e 94 4a 1b 	call	0x3694	; 0x3694 <prvAddCurrentTaskToDelayedList>
    270c:	0e 94 ee 13 	call	0x27dc	; 0x27dc <xTaskResumeAll>
    2710:	89 83       	std	Y+1, r24	; 0x01
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	88 23       	and	r24, r24
    2716:	11 f4       	brne	.+4      	; 0x271c <vTaskDelay+0x4e>
    2718:	0e 94 2d 0b 	call	0x165a	; 0x165a <vPortYield>
    271c:	00 00       	nop
    271e:	25 96       	adiw	r28, 0x05	; 5
    2720:	cd bf       	out	0x3d, r28	; 61
    2722:	de bf       	out	0x3e, r29	; 62
    2724:	df 91       	pop	r29
    2726:	cf 91       	pop	r28
    2728:	08 95       	ret

0000272a <vTaskStartScheduler>:
    272a:	ef 92       	push	r14
    272c:	ff 92       	push	r15
    272e:	0f 93       	push	r16
    2730:	cf 93       	push	r28
    2732:	df 93       	push	r29
    2734:	1f 92       	push	r1
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    273a:	0f 2e       	mov	r0, r31
    273c:	f1 e7       	ldi	r31, 0x71	; 113
    273e:	ef 2e       	mov	r14, r31
    2740:	fd e2       	ldi	r31, 0x2D	; 45
    2742:	ff 2e       	mov	r15, r31
    2744:	f0 2d       	mov	r31, r0
    2746:	00 e0       	ldi	r16, 0x00	; 0
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	48 ec       	ldi	r20, 0xC8	; 200
    274e:	50 e0       	ldi	r21, 0x00	; 0
    2750:	60 e0       	ldi	r22, 0x00	; 0
    2752:	70 e2       	ldi	r23, 0x20	; 32
    2754:	88 ec       	ldi	r24, 0xC8	; 200
    2756:	98 e1       	ldi	r25, 0x18	; 24
    2758:	0e 94 94 11 	call	0x2328	; 0x2328 <xTaskCreate>
    275c:	89 83       	std	Y+1, r24	; 0x01
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	81 30       	cpi	r24, 0x01	; 1
    2762:	19 f4       	brne	.+6      	; 0x276a <vTaskStartScheduler+0x40>
    2764:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <xTimerCreateTimerTask>
    2768:	89 83       	std	Y+1, r24	; 0x01
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	81 30       	cpi	r24, 0x01	; 1
    276e:	09 f5       	brne	.+66     	; 0x27b2 <vTaskStartScheduler+0x88>
    2770:	80 ea       	ldi	r24, 0xA0	; 160
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	20 ea       	ldi	r18, 0xA0	; 160
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	f9 01       	movw	r30, r18
    277a:	22 81       	ldd	r18, Z+2	; 0x02
    277c:	28 7f       	andi	r18, 0xF8	; 248
    277e:	fc 01       	movw	r30, r24
    2780:	22 83       	std	Z+2, r18	; 0x02
    2782:	8f ef       	ldi	r24, 0xFF	; 255
    2784:	9f ef       	ldi	r25, 0xFF	; 255
    2786:	dc 01       	movw	r26, r24
    2788:	80 93 6d 2d 	sts	0x2D6D, r24	; 0x802d6d <xNextTaskUnblockTime>
    278c:	90 93 6e 2d 	sts	0x2D6E, r25	; 0x802d6e <xNextTaskUnblockTime+0x1>
    2790:	a0 93 6f 2d 	sts	0x2D6F, r26	; 0x802d6f <xNextTaskUnblockTime+0x2>
    2794:	b0 93 70 2d 	sts	0x2D70, r27	; 0x802d70 <xNextTaskUnblockTime+0x3>
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	80 93 68 2d 	sts	0x2D68, r24	; 0x802d68 <xSchedulerRunning>
    279e:	10 92 63 2d 	sts	0x2D63, r1	; 0x802d63 <xTickCount>
    27a2:	10 92 64 2d 	sts	0x2D64, r1	; 0x802d64 <xTickCount+0x1>
    27a6:	10 92 65 2d 	sts	0x2D65, r1	; 0x802d65 <xTickCount+0x2>
    27aa:	10 92 66 2d 	sts	0x2D66, r1	; 0x802d66 <xTickCount+0x3>
    27ae:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <xPortStartScheduler>
    27b2:	00 00       	nop
    27b4:	0f 90       	pop	r0
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	0f 91       	pop	r16
    27bc:	ff 90       	pop	r15
    27be:	ef 90       	pop	r14
    27c0:	08 95       	ret

000027c2 <vTaskSuspendAll>:
    27c2:	cf 93       	push	r28
    27c4:	df 93       	push	r29
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	80 91 73 2d 	lds	r24, 0x2D73	; 0x802d73 <uxSchedulerSuspended>
    27ce:	8f 5f       	subi	r24, 0xFF	; 255
    27d0:	80 93 73 2d 	sts	0x2D73, r24	; 0x802d73 <uxSchedulerSuspended>
    27d4:	00 00       	nop
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	08 95       	ret

000027dc <xTaskResumeAll>:
    27dc:	cf 93       	push	r28
    27de:	df 93       	push	r29
    27e0:	00 d0       	rcall	.+0      	; 0x27e2 <xTaskResumeAll+0x6>
    27e2:	1f 92       	push	r1
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
    27e8:	19 82       	std	Y+1, r1	; 0x01
    27ea:	1a 82       	std	Y+2, r1	; 0x02
    27ec:	1b 82       	std	Y+3, r1	; 0x03
    27ee:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    27f2:	ff 93       	push	r31
    27f4:	f8 7f       	andi	r31, 0xF8	; 248
    27f6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    27fa:	80 91 73 2d 	lds	r24, 0x2D73	; 0x802d73 <uxSchedulerSuspended>
    27fe:	81 50       	subi	r24, 0x01	; 1
    2800:	80 93 73 2d 	sts	0x2D73, r24	; 0x802d73 <uxSchedulerSuspended>
    2804:	80 91 73 2d 	lds	r24, 0x2D73	; 0x802d73 <uxSchedulerSuspended>
    2808:	88 23       	and	r24, r24
    280a:	09 f0       	breq	.+2      	; 0x280e <xTaskResumeAll+0x32>
    280c:	74 c0       	rjmp	.+232    	; 0x28f6 <xTaskResumeAll+0x11a>
    280e:	80 91 62 2d 	lds	r24, 0x2D62	; 0x802d62 <uxCurrentNumberOfTasks>
    2812:	88 23       	and	r24, r24
    2814:	09 f4       	brne	.+2      	; 0x2818 <xTaskResumeAll+0x3c>
    2816:	6f c0       	rjmp	.+222    	; 0x28f6 <xTaskResumeAll+0x11a>
    2818:	46 c0       	rjmp	.+140    	; 0x28a6 <xTaskResumeAll+0xca>
    281a:	80 91 53 2d 	lds	r24, 0x2D53	; 0x802d53 <xPendingReadyList+0x7>
    281e:	90 91 54 2d 	lds	r25, 0x2D54	; 0x802d54 <xPendingReadyList+0x8>
    2822:	fc 01       	movw	r30, r24
    2824:	80 85       	ldd	r24, Z+8	; 0x08
    2826:	91 85       	ldd	r25, Z+9	; 0x09
    2828:	89 83       	std	Y+1, r24	; 0x01
    282a:	9a 83       	std	Y+2, r25	; 0x02
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	9a 81       	ldd	r25, Y+2	; 0x02
    2830:	0e 96       	adiw	r24, 0x0e	; 14
    2832:	0e 94 af 08 	call	0x115e	; 0x115e <uxListRemove>
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	9a 81       	ldd	r25, Y+2	; 0x02
    283a:	02 96       	adiw	r24, 0x02	; 2
    283c:	0e 94 af 08 	call	0x115e	; 0x115e <uxListRemove>
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	9a 81       	ldd	r25, Y+2	; 0x02
    2844:	fc 01       	movw	r30, r24
    2846:	92 8d       	ldd	r25, Z+26	; 0x1a
    2848:	80 91 67 2d 	lds	r24, 0x2D67	; 0x802d67 <uxTopReadyPriority>
    284c:	89 17       	cp	r24, r25
    284e:	30 f4       	brcc	.+12     	; 0x285c <xTaskResumeAll+0x80>
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	9a 81       	ldd	r25, Y+2	; 0x02
    2854:	fc 01       	movw	r30, r24
    2856:	82 8d       	ldd	r24, Z+26	; 0x1a
    2858:	80 93 67 2d 	sts	0x2D67, r24	; 0x802d67 <uxTopReadyPriority>
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	9a 81       	ldd	r25, Y+2	; 0x02
    2860:	ac 01       	movw	r20, r24
    2862:	4e 5f       	subi	r20, 0xFE	; 254
    2864:	5f 4f       	sbci	r21, 0xFF	; 255
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	9a 81       	ldd	r25, Y+2	; 0x02
    286a:	fc 01       	movw	r30, r24
    286c:	82 8d       	ldd	r24, Z+26	; 0x1a
    286e:	28 2f       	mov	r18, r24
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	6b e0       	ldi	r22, 0x0B	; 11
    2874:	62 9f       	mul	r22, r18
    2876:	c0 01       	movw	r24, r0
    2878:	63 9f       	mul	r22, r19
    287a:	90 0d       	add	r25, r0
    287c:	11 24       	eor	r1, r1
    287e:	8a 5f       	subi	r24, 0xFA	; 250
    2880:	92 4d       	sbci	r25, 0xD2	; 210
    2882:	ba 01       	movw	r22, r20
    2884:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <vListInsertEnd>
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	9a 81       	ldd	r25, Y+2	; 0x02
    288c:	fc 01       	movw	r30, r24
    288e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2890:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    2894:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    2898:	fc 01       	movw	r30, r24
    289a:	82 8d       	ldd	r24, Z+26	; 0x1a
    289c:	28 17       	cp	r18, r24
    289e:	18 f0       	brcs	.+6      	; 0x28a6 <xTaskResumeAll+0xca>
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	80 93 6a 2d 	sts	0x2D6A, r24	; 0x802d6a <xYieldPending>
    28a6:	80 91 4c 2d 	lds	r24, 0x2D4C	; 0x802d4c <xPendingReadyList>
    28aa:	88 23       	and	r24, r24
    28ac:	09 f0       	breq	.+2      	; 0x28b0 <xTaskResumeAll+0xd4>
    28ae:	b5 cf       	rjmp	.-150    	; 0x281a <xTaskResumeAll+0x3e>
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	9a 81       	ldd	r25, Y+2	; 0x02
    28b4:	89 2b       	or	r24, r25
    28b6:	11 f0       	breq	.+4      	; 0x28bc <xTaskResumeAll+0xe0>
    28b8:	0e 94 1e 19 	call	0x323c	; 0x323c <prvResetNextTaskUnblockTime>
    28bc:	80 91 69 2d 	lds	r24, 0x2D69	; 0x802d69 <uxPendedTicks>
    28c0:	8c 83       	std	Y+4, r24	; 0x04
    28c2:	8c 81       	ldd	r24, Y+4	; 0x04
    28c4:	88 23       	and	r24, r24
    28c6:	79 f0       	breq	.+30     	; 0x28e6 <xTaskResumeAll+0x10a>
    28c8:	0e 94 ac 14 	call	0x2958	; 0x2958 <xTaskIncrementTick>
    28cc:	88 23       	and	r24, r24
    28ce:	19 f0       	breq	.+6      	; 0x28d6 <xTaskResumeAll+0xfa>
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	80 93 6a 2d 	sts	0x2D6A, r24	; 0x802d6a <xYieldPending>
    28d6:	8c 81       	ldd	r24, Y+4	; 0x04
    28d8:	81 50       	subi	r24, 0x01	; 1
    28da:	8c 83       	std	Y+4, r24	; 0x04
    28dc:	8c 81       	ldd	r24, Y+4	; 0x04
    28de:	88 23       	and	r24, r24
    28e0:	99 f7       	brne	.-26     	; 0x28c8 <xTaskResumeAll+0xec>
    28e2:	10 92 69 2d 	sts	0x2D69, r1	; 0x802d69 <uxPendedTicks>
    28e6:	80 91 6a 2d 	lds	r24, 0x2D6A	; 0x802d6a <xYieldPending>
    28ea:	88 23       	and	r24, r24
    28ec:	21 f0       	breq	.+8      	; 0x28f6 <xTaskResumeAll+0x11a>
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	8b 83       	std	Y+3, r24	; 0x03
    28f2:	0e 94 2d 0b 	call	0x165a	; 0x165a <vPortYield>
    28f6:	ff 91       	pop	r31
    28f8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    28fc:	8b 81       	ldd	r24, Y+3	; 0x03
    28fe:	24 96       	adiw	r28, 0x04	; 4
    2900:	cd bf       	out	0x3d, r28	; 61
    2902:	de bf       	out	0x3e, r29	; 62
    2904:	df 91       	pop	r29
    2906:	cf 91       	pop	r28
    2908:	08 95       	ret

0000290a <xTaskGetTickCount>:
    290a:	cf 93       	push	r28
    290c:	df 93       	push	r29
    290e:	00 d0       	rcall	.+0      	; 0x2910 <xTaskGetTickCount+0x6>
    2910:	1f 92       	push	r1
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
    2916:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    291a:	ff 93       	push	r31
    291c:	f8 7f       	andi	r31, 0xF8	; 248
    291e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2922:	80 91 63 2d 	lds	r24, 0x2D63	; 0x802d63 <xTickCount>
    2926:	90 91 64 2d 	lds	r25, 0x2D64	; 0x802d64 <xTickCount+0x1>
    292a:	a0 91 65 2d 	lds	r26, 0x2D65	; 0x802d65 <xTickCount+0x2>
    292e:	b0 91 66 2d 	lds	r27, 0x2D66	; 0x802d66 <xTickCount+0x3>
    2932:	89 83       	std	Y+1, r24	; 0x01
    2934:	9a 83       	std	Y+2, r25	; 0x02
    2936:	ab 83       	std	Y+3, r26	; 0x03
    2938:	bc 83       	std	Y+4, r27	; 0x04
    293a:	ff 91       	pop	r31
    293c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2940:	89 81       	ldd	r24, Y+1	; 0x01
    2942:	9a 81       	ldd	r25, Y+2	; 0x02
    2944:	ab 81       	ldd	r26, Y+3	; 0x03
    2946:	bc 81       	ldd	r27, Y+4	; 0x04
    2948:	bc 01       	movw	r22, r24
    294a:	cd 01       	movw	r24, r26
    294c:	24 96       	adiw	r28, 0x04	; 4
    294e:	cd bf       	out	0x3d, r28	; 61
    2950:	de bf       	out	0x3e, r29	; 62
    2952:	df 91       	pop	r29
    2954:	cf 91       	pop	r28
    2956:	08 95       	ret

00002958 <xTaskIncrementTick>:
    2958:	cf 93       	push	r28
    295a:	df 93       	push	r29
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	2d 97       	sbiw	r28, 0x0d	; 13
    2962:	cd bf       	out	0x3d, r28	; 61
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	19 82       	std	Y+1, r1	; 0x01
    2968:	80 91 73 2d 	lds	r24, 0x2D73	; 0x802d73 <uxSchedulerSuspended>
    296c:	88 23       	and	r24, r24
    296e:	09 f0       	breq	.+2      	; 0x2972 <xTaskIncrementTick+0x1a>
    2970:	f1 c0       	rjmp	.+482    	; 0x2b54 <xTaskIncrementTick+0x1fc>
    2972:	80 91 63 2d 	lds	r24, 0x2D63	; 0x802d63 <xTickCount>
    2976:	90 91 64 2d 	lds	r25, 0x2D64	; 0x802d64 <xTickCount+0x1>
    297a:	a0 91 65 2d 	lds	r26, 0x2D65	; 0x802d65 <xTickCount+0x2>
    297e:	b0 91 66 2d 	lds	r27, 0x2D66	; 0x802d66 <xTickCount+0x3>
    2982:	01 96       	adiw	r24, 0x01	; 1
    2984:	a1 1d       	adc	r26, r1
    2986:	b1 1d       	adc	r27, r1
    2988:	8a 83       	std	Y+2, r24	; 0x02
    298a:	9b 83       	std	Y+3, r25	; 0x03
    298c:	ac 83       	std	Y+4, r26	; 0x04
    298e:	bd 83       	std	Y+5, r27	; 0x05
    2990:	8a 81       	ldd	r24, Y+2	; 0x02
    2992:	9b 81       	ldd	r25, Y+3	; 0x03
    2994:	ac 81       	ldd	r26, Y+4	; 0x04
    2996:	bd 81       	ldd	r27, Y+5	; 0x05
    2998:	80 93 63 2d 	sts	0x2D63, r24	; 0x802d63 <xTickCount>
    299c:	90 93 64 2d 	sts	0x2D64, r25	; 0x802d64 <xTickCount+0x1>
    29a0:	a0 93 65 2d 	sts	0x2D65, r26	; 0x802d65 <xTickCount+0x2>
    29a4:	b0 93 66 2d 	sts	0x2D66, r27	; 0x802d66 <xTickCount+0x3>
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	9b 81       	ldd	r25, Y+3	; 0x03
    29ac:	ac 81       	ldd	r26, Y+4	; 0x04
    29ae:	bd 81       	ldd	r27, Y+5	; 0x05
    29b0:	89 2b       	or	r24, r25
    29b2:	8a 2b       	or	r24, r26
    29b4:	8b 2b       	or	r24, r27
    29b6:	d9 f4       	brne	.+54     	; 0x29ee <xTaskIncrementTick+0x96>
    29b8:	80 91 48 2d 	lds	r24, 0x2D48	; 0x802d48 <pxDelayedTaskList>
    29bc:	90 91 49 2d 	lds	r25, 0x2D49	; 0x802d49 <pxDelayedTaskList+0x1>
    29c0:	8e 83       	std	Y+6, r24	; 0x06
    29c2:	9f 83       	std	Y+7, r25	; 0x07
    29c4:	80 91 4a 2d 	lds	r24, 0x2D4A	; 0x802d4a <pxOverflowDelayedTaskList>
    29c8:	90 91 4b 2d 	lds	r25, 0x2D4B	; 0x802d4b <pxOverflowDelayedTaskList+0x1>
    29cc:	80 93 48 2d 	sts	0x2D48, r24	; 0x802d48 <pxDelayedTaskList>
    29d0:	90 93 49 2d 	sts	0x2D49, r25	; 0x802d49 <pxDelayedTaskList+0x1>
    29d4:	8e 81       	ldd	r24, Y+6	; 0x06
    29d6:	9f 81       	ldd	r25, Y+7	; 0x07
    29d8:	80 93 4a 2d 	sts	0x2D4A, r24	; 0x802d4a <pxOverflowDelayedTaskList>
    29dc:	90 93 4b 2d 	sts	0x2D4B, r25	; 0x802d4b <pxOverflowDelayedTaskList+0x1>
    29e0:	80 91 6b 2d 	lds	r24, 0x2D6B	; 0x802d6b <xNumOfOverflows>
    29e4:	8f 5f       	subi	r24, 0xFF	; 255
    29e6:	80 93 6b 2d 	sts	0x2D6B, r24	; 0x802d6b <xNumOfOverflows>
    29ea:	0e 94 1e 19 	call	0x323c	; 0x323c <prvResetNextTaskUnblockTime>
    29ee:	80 91 6d 2d 	lds	r24, 0x2D6D	; 0x802d6d <xNextTaskUnblockTime>
    29f2:	90 91 6e 2d 	lds	r25, 0x2D6E	; 0x802d6e <xNextTaskUnblockTime+0x1>
    29f6:	a0 91 6f 2d 	lds	r26, 0x2D6F	; 0x802d6f <xNextTaskUnblockTime+0x2>
    29fa:	b0 91 70 2d 	lds	r27, 0x2D70	; 0x802d70 <xNextTaskUnblockTime+0x3>
    29fe:	2a 81       	ldd	r18, Y+2	; 0x02
    2a00:	3b 81       	ldd	r19, Y+3	; 0x03
    2a02:	4c 81       	ldd	r20, Y+4	; 0x04
    2a04:	5d 81       	ldd	r21, Y+5	; 0x05
    2a06:	28 17       	cp	r18, r24
    2a08:	39 07       	cpc	r19, r25
    2a0a:	4a 07       	cpc	r20, r26
    2a0c:	5b 07       	cpc	r21, r27
    2a0e:	08 f4       	brcc	.+2      	; 0x2a12 <xTaskIncrementTick+0xba>
    2a10:	8a c0       	rjmp	.+276    	; 0x2b26 <xTaskIncrementTick+0x1ce>
    2a12:	80 91 48 2d 	lds	r24, 0x2D48	; 0x802d48 <pxDelayedTaskList>
    2a16:	90 91 49 2d 	lds	r25, 0x2D49	; 0x802d49 <pxDelayedTaskList+0x1>
    2a1a:	fc 01       	movw	r30, r24
    2a1c:	80 81       	ld	r24, Z
    2a1e:	88 23       	and	r24, r24
    2a20:	61 f4       	brne	.+24     	; 0x2a3a <xTaskIncrementTick+0xe2>
    2a22:	8f ef       	ldi	r24, 0xFF	; 255
    2a24:	9f ef       	ldi	r25, 0xFF	; 255
    2a26:	dc 01       	movw	r26, r24
    2a28:	80 93 6d 2d 	sts	0x2D6D, r24	; 0x802d6d <xNextTaskUnblockTime>
    2a2c:	90 93 6e 2d 	sts	0x2D6E, r25	; 0x802d6e <xNextTaskUnblockTime+0x1>
    2a30:	a0 93 6f 2d 	sts	0x2D6F, r26	; 0x802d6f <xNextTaskUnblockTime+0x2>
    2a34:	b0 93 70 2d 	sts	0x2D70, r27	; 0x802d70 <xNextTaskUnblockTime+0x3>
    2a38:	76 c0       	rjmp	.+236    	; 0x2b26 <xTaskIncrementTick+0x1ce>
    2a3a:	80 91 48 2d 	lds	r24, 0x2D48	; 0x802d48 <pxDelayedTaskList>
    2a3e:	90 91 49 2d 	lds	r25, 0x2D49	; 0x802d49 <pxDelayedTaskList+0x1>
    2a42:	fc 01       	movw	r30, r24
    2a44:	87 81       	ldd	r24, Z+7	; 0x07
    2a46:	90 85       	ldd	r25, Z+8	; 0x08
    2a48:	fc 01       	movw	r30, r24
    2a4a:	80 85       	ldd	r24, Z+8	; 0x08
    2a4c:	91 85       	ldd	r25, Z+9	; 0x09
    2a4e:	88 87       	std	Y+8, r24	; 0x08
    2a50:	99 87       	std	Y+9, r25	; 0x09
    2a52:	88 85       	ldd	r24, Y+8	; 0x08
    2a54:	99 85       	ldd	r25, Y+9	; 0x09
    2a56:	fc 01       	movw	r30, r24
    2a58:	82 81       	ldd	r24, Z+2	; 0x02
    2a5a:	93 81       	ldd	r25, Z+3	; 0x03
    2a5c:	a4 81       	ldd	r26, Z+4	; 0x04
    2a5e:	b5 81       	ldd	r27, Z+5	; 0x05
    2a60:	8a 87       	std	Y+10, r24	; 0x0a
    2a62:	9b 87       	std	Y+11, r25	; 0x0b
    2a64:	ac 87       	std	Y+12, r26	; 0x0c
    2a66:	bd 87       	std	Y+13, r27	; 0x0d
    2a68:	2a 81       	ldd	r18, Y+2	; 0x02
    2a6a:	3b 81       	ldd	r19, Y+3	; 0x03
    2a6c:	4c 81       	ldd	r20, Y+4	; 0x04
    2a6e:	5d 81       	ldd	r21, Y+5	; 0x05
    2a70:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a72:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a74:	ac 85       	ldd	r26, Y+12	; 0x0c
    2a76:	bd 85       	ldd	r27, Y+13	; 0x0d
    2a78:	28 17       	cp	r18, r24
    2a7a:	39 07       	cpc	r19, r25
    2a7c:	4a 07       	cpc	r20, r26
    2a7e:	5b 07       	cpc	r21, r27
    2a80:	68 f4       	brcc	.+26     	; 0x2a9c <xTaskIncrementTick+0x144>
    2a82:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a84:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a86:	ac 85       	ldd	r26, Y+12	; 0x0c
    2a88:	bd 85       	ldd	r27, Y+13	; 0x0d
    2a8a:	80 93 6d 2d 	sts	0x2D6D, r24	; 0x802d6d <xNextTaskUnblockTime>
    2a8e:	90 93 6e 2d 	sts	0x2D6E, r25	; 0x802d6e <xNextTaskUnblockTime+0x1>
    2a92:	a0 93 6f 2d 	sts	0x2D6F, r26	; 0x802d6f <xNextTaskUnblockTime+0x2>
    2a96:	b0 93 70 2d 	sts	0x2D70, r27	; 0x802d70 <xNextTaskUnblockTime+0x3>
    2a9a:	45 c0       	rjmp	.+138    	; 0x2b26 <xTaskIncrementTick+0x1ce>
    2a9c:	88 85       	ldd	r24, Y+8	; 0x08
    2a9e:	99 85       	ldd	r25, Y+9	; 0x09
    2aa0:	02 96       	adiw	r24, 0x02	; 2
    2aa2:	0e 94 af 08 	call	0x115e	; 0x115e <uxListRemove>
    2aa6:	88 85       	ldd	r24, Y+8	; 0x08
    2aa8:	99 85       	ldd	r25, Y+9	; 0x09
    2aaa:	fc 01       	movw	r30, r24
    2aac:	80 8d       	ldd	r24, Z+24	; 0x18
    2aae:	91 8d       	ldd	r25, Z+25	; 0x19
    2ab0:	89 2b       	or	r24, r25
    2ab2:	29 f0       	breq	.+10     	; 0x2abe <xTaskIncrementTick+0x166>
    2ab4:	88 85       	ldd	r24, Y+8	; 0x08
    2ab6:	99 85       	ldd	r25, Y+9	; 0x09
    2ab8:	0e 96       	adiw	r24, 0x0e	; 14
    2aba:	0e 94 af 08 	call	0x115e	; 0x115e <uxListRemove>
    2abe:	88 85       	ldd	r24, Y+8	; 0x08
    2ac0:	99 85       	ldd	r25, Y+9	; 0x09
    2ac2:	fc 01       	movw	r30, r24
    2ac4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ac6:	80 91 67 2d 	lds	r24, 0x2D67	; 0x802d67 <uxTopReadyPriority>
    2aca:	89 17       	cp	r24, r25
    2acc:	30 f4       	brcc	.+12     	; 0x2ada <xTaskIncrementTick+0x182>
    2ace:	88 85       	ldd	r24, Y+8	; 0x08
    2ad0:	99 85       	ldd	r25, Y+9	; 0x09
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ad6:	80 93 67 2d 	sts	0x2D67, r24	; 0x802d67 <uxTopReadyPriority>
    2ada:	88 85       	ldd	r24, Y+8	; 0x08
    2adc:	99 85       	ldd	r25, Y+9	; 0x09
    2ade:	ac 01       	movw	r20, r24
    2ae0:	4e 5f       	subi	r20, 0xFE	; 254
    2ae2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ae4:	88 85       	ldd	r24, Y+8	; 0x08
    2ae6:	99 85       	ldd	r25, Y+9	; 0x09
    2ae8:	fc 01       	movw	r30, r24
    2aea:	82 8d       	ldd	r24, Z+26	; 0x1a
    2aec:	28 2f       	mov	r18, r24
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	6b e0       	ldi	r22, 0x0B	; 11
    2af2:	62 9f       	mul	r22, r18
    2af4:	c0 01       	movw	r24, r0
    2af6:	63 9f       	mul	r22, r19
    2af8:	90 0d       	add	r25, r0
    2afa:	11 24       	eor	r1, r1
    2afc:	8a 5f       	subi	r24, 0xFA	; 250
    2afe:	92 4d       	sbci	r25, 0xD2	; 210
    2b00:	ba 01       	movw	r22, r20
    2b02:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <vListInsertEnd>
    2b06:	88 85       	ldd	r24, Y+8	; 0x08
    2b08:	99 85       	ldd	r25, Y+9	; 0x09
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	22 8d       	ldd	r18, Z+26	; 0x1a
    2b0e:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    2b12:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    2b16:	fc 01       	movw	r30, r24
    2b18:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b1a:	28 17       	cp	r18, r24
    2b1c:	08 f4       	brcc	.+2      	; 0x2b20 <xTaskIncrementTick+0x1c8>
    2b1e:	79 cf       	rjmp	.-270    	; 0x2a12 <xTaskIncrementTick+0xba>
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	89 83       	std	Y+1, r24	; 0x01
    2b24:	76 cf       	rjmp	.-276    	; 0x2a12 <xTaskIncrementTick+0xba>
    2b26:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    2b2a:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    2b2e:	fc 01       	movw	r30, r24
    2b30:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b32:	28 2f       	mov	r18, r24
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	4b e0       	ldi	r20, 0x0B	; 11
    2b38:	42 9f       	mul	r20, r18
    2b3a:	c0 01       	movw	r24, r0
    2b3c:	43 9f       	mul	r20, r19
    2b3e:	90 0d       	add	r25, r0
    2b40:	11 24       	eor	r1, r1
    2b42:	8a 5f       	subi	r24, 0xFA	; 250
    2b44:	92 4d       	sbci	r25, 0xD2	; 210
    2b46:	fc 01       	movw	r30, r24
    2b48:	80 81       	ld	r24, Z
    2b4a:	82 30       	cpi	r24, 0x02	; 2
    2b4c:	40 f0       	brcs	.+16     	; 0x2b5e <xTaskIncrementTick+0x206>
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	89 83       	std	Y+1, r24	; 0x01
    2b52:	05 c0       	rjmp	.+10     	; 0x2b5e <xTaskIncrementTick+0x206>
    2b54:	80 91 69 2d 	lds	r24, 0x2D69	; 0x802d69 <uxPendedTicks>
    2b58:	8f 5f       	subi	r24, 0xFF	; 255
    2b5a:	80 93 69 2d 	sts	0x2D69, r24	; 0x802d69 <uxPendedTicks>
    2b5e:	80 91 6a 2d 	lds	r24, 0x2D6A	; 0x802d6a <xYieldPending>
    2b62:	88 23       	and	r24, r24
    2b64:	11 f0       	breq	.+4      	; 0x2b6a <xTaskIncrementTick+0x212>
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	89 83       	std	Y+1, r24	; 0x01
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	2d 96       	adiw	r28, 0x0d	; 13
    2b6e:	cd bf       	out	0x3d, r28	; 61
    2b70:	de bf       	out	0x3e, r29	; 62
    2b72:	df 91       	pop	r29
    2b74:	cf 91       	pop	r28
    2b76:	08 95       	ret

00002b78 <vTaskSwitchContext>:
    2b78:	cf 93       	push	r28
    2b7a:	df 93       	push	r29
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	29 97       	sbiw	r28, 0x09	; 9
    2b82:	cd bf       	out	0x3d, r28	; 61
    2b84:	de bf       	out	0x3e, r29	; 62
    2b86:	80 91 73 2d 	lds	r24, 0x2D73	; 0x802d73 <uxSchedulerSuspended>
    2b8a:	88 23       	and	r24, r24
    2b8c:	21 f0       	breq	.+8      	; 0x2b96 <vTaskSwitchContext+0x1e>
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	80 93 6a 2d 	sts	0x2D6A, r24	; 0x802d6a <xYieldPending>
    2b94:	ba c0       	rjmp	.+372    	; 0x2d0a <vTaskSwitchContext+0x192>
    2b96:	10 92 6a 2d 	sts	0x2D6A, r1	; 0x802d6a <xYieldPending>
    2b9a:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    2b9e:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	83 8d       	ldd	r24, Z+27	; 0x1b
    2ba6:	94 8d       	ldd	r25, Z+28	; 0x1c
    2ba8:	8a 83       	std	Y+2, r24	; 0x02
    2baa:	9b 83       	std	Y+3, r25	; 0x03
    2bac:	85 ea       	ldi	r24, 0xA5	; 165
    2bae:	95 ea       	ldi	r25, 0xA5	; 165
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	8c 83       	std	Y+4, r24	; 0x04
    2bb4:	9d 83       	std	Y+5, r25	; 0x05
    2bb6:	ae 83       	std	Y+6, r26	; 0x06
    2bb8:	bf 83       	std	Y+7, r27	; 0x07
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	20 81       	ld	r18, Z
    2bc2:	31 81       	ldd	r19, Z+1	; 0x01
    2bc4:	42 81       	ldd	r20, Z+2	; 0x02
    2bc6:	53 81       	ldd	r21, Z+3	; 0x03
    2bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bca:	9d 81       	ldd	r25, Y+5	; 0x05
    2bcc:	ae 81       	ldd	r26, Y+6	; 0x06
    2bce:	bf 81       	ldd	r27, Y+7	; 0x07
    2bd0:	28 17       	cp	r18, r24
    2bd2:	39 07       	cpc	r19, r25
    2bd4:	4a 07       	cpc	r20, r26
    2bd6:	5b 07       	cpc	r21, r27
    2bd8:	99 f5       	brne	.+102    	; 0x2c40 <vTaskSwitchContext+0xc8>
    2bda:	8a 81       	ldd	r24, Y+2	; 0x02
    2bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bde:	04 96       	adiw	r24, 0x04	; 4
    2be0:	fc 01       	movw	r30, r24
    2be2:	20 81       	ld	r18, Z
    2be4:	31 81       	ldd	r19, Z+1	; 0x01
    2be6:	42 81       	ldd	r20, Z+2	; 0x02
    2be8:	53 81       	ldd	r21, Z+3	; 0x03
    2bea:	8c 81       	ldd	r24, Y+4	; 0x04
    2bec:	9d 81       	ldd	r25, Y+5	; 0x05
    2bee:	ae 81       	ldd	r26, Y+6	; 0x06
    2bf0:	bf 81       	ldd	r27, Y+7	; 0x07
    2bf2:	28 17       	cp	r18, r24
    2bf4:	39 07       	cpc	r19, r25
    2bf6:	4a 07       	cpc	r20, r26
    2bf8:	5b 07       	cpc	r21, r27
    2bfa:	11 f5       	brne	.+68     	; 0x2c40 <vTaskSwitchContext+0xc8>
    2bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfe:	9b 81       	ldd	r25, Y+3	; 0x03
    2c00:	08 96       	adiw	r24, 0x08	; 8
    2c02:	fc 01       	movw	r30, r24
    2c04:	20 81       	ld	r18, Z
    2c06:	31 81       	ldd	r19, Z+1	; 0x01
    2c08:	42 81       	ldd	r20, Z+2	; 0x02
    2c0a:	53 81       	ldd	r21, Z+3	; 0x03
    2c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2c10:	ae 81       	ldd	r26, Y+6	; 0x06
    2c12:	bf 81       	ldd	r27, Y+7	; 0x07
    2c14:	28 17       	cp	r18, r24
    2c16:	39 07       	cpc	r19, r25
    2c18:	4a 07       	cpc	r20, r26
    2c1a:	5b 07       	cpc	r21, r27
    2c1c:	89 f4       	brne	.+34     	; 0x2c40 <vTaskSwitchContext+0xc8>
    2c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c20:	9b 81       	ldd	r25, Y+3	; 0x03
    2c22:	0c 96       	adiw	r24, 0x0c	; 12
    2c24:	fc 01       	movw	r30, r24
    2c26:	20 81       	ld	r18, Z
    2c28:	31 81       	ldd	r19, Z+1	; 0x01
    2c2a:	42 81       	ldd	r20, Z+2	; 0x02
    2c2c:	53 81       	ldd	r21, Z+3	; 0x03
    2c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c30:	9d 81       	ldd	r25, Y+5	; 0x05
    2c32:	ae 81       	ldd	r26, Y+6	; 0x06
    2c34:	bf 81       	ldd	r27, Y+7	; 0x07
    2c36:	28 17       	cp	r18, r24
    2c38:	39 07       	cpc	r19, r25
    2c3a:	4a 07       	cpc	r20, r26
    2c3c:	5b 07       	cpc	r21, r27
    2c3e:	71 f0       	breq	.+28     	; 0x2c5c <vTaskSwitchContext+0xe4>
    2c40:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    2c44:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    2c48:	9c 01       	movw	r18, r24
    2c4a:	23 5e       	subi	r18, 0xE3	; 227
    2c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c4e:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    2c52:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    2c56:	b9 01       	movw	r22, r18
    2c58:	0e 94 91 03 	call	0x722	; 0x722 <vApplicationStackOverflowHook>
    2c5c:	80 91 67 2d 	lds	r24, 0x2D67	; 0x802d67 <uxTopReadyPriority>
    2c60:	89 83       	std	Y+1, r24	; 0x01
    2c62:	03 c0       	rjmp	.+6      	; 0x2c6a <vTaskSwitchContext+0xf2>
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	81 50       	subi	r24, 0x01	; 1
    2c68:	89 83       	std	Y+1, r24	; 0x01
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
    2c6c:	28 2f       	mov	r18, r24
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	4b e0       	ldi	r20, 0x0B	; 11
    2c72:	42 9f       	mul	r20, r18
    2c74:	c0 01       	movw	r24, r0
    2c76:	43 9f       	mul	r20, r19
    2c78:	90 0d       	add	r25, r0
    2c7a:	11 24       	eor	r1, r1
    2c7c:	8a 5f       	subi	r24, 0xFA	; 250
    2c7e:	92 4d       	sbci	r25, 0xD2	; 210
    2c80:	fc 01       	movw	r30, r24
    2c82:	80 81       	ld	r24, Z
    2c84:	88 23       	and	r24, r24
    2c86:	71 f3       	breq	.-36     	; 0x2c64 <vTaskSwitchContext+0xec>
    2c88:	89 81       	ldd	r24, Y+1	; 0x01
    2c8a:	28 2f       	mov	r18, r24
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	4b e0       	ldi	r20, 0x0B	; 11
    2c90:	42 9f       	mul	r20, r18
    2c92:	c0 01       	movw	r24, r0
    2c94:	43 9f       	mul	r20, r19
    2c96:	90 0d       	add	r25, r0
    2c98:	11 24       	eor	r1, r1
    2c9a:	8a 5f       	subi	r24, 0xFA	; 250
    2c9c:	92 4d       	sbci	r25, 0xD2	; 210
    2c9e:	88 87       	std	Y+8, r24	; 0x08
    2ca0:	99 87       	std	Y+9, r25	; 0x09
    2ca2:	88 85       	ldd	r24, Y+8	; 0x08
    2ca4:	99 85       	ldd	r25, Y+9	; 0x09
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	81 81       	ldd	r24, Z+1	; 0x01
    2caa:	92 81       	ldd	r25, Z+2	; 0x02
    2cac:	fc 01       	movw	r30, r24
    2cae:	24 81       	ldd	r18, Z+4	; 0x04
    2cb0:	35 81       	ldd	r19, Z+5	; 0x05
    2cb2:	88 85       	ldd	r24, Y+8	; 0x08
    2cb4:	99 85       	ldd	r25, Y+9	; 0x09
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	21 83       	std	Z+1, r18	; 0x01
    2cba:	32 83       	std	Z+2, r19	; 0x02
    2cbc:	88 85       	ldd	r24, Y+8	; 0x08
    2cbe:	99 85       	ldd	r25, Y+9	; 0x09
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	21 81       	ldd	r18, Z+1	; 0x01
    2cc4:	32 81       	ldd	r19, Z+2	; 0x02
    2cc6:	88 85       	ldd	r24, Y+8	; 0x08
    2cc8:	99 85       	ldd	r25, Y+9	; 0x09
    2cca:	03 96       	adiw	r24, 0x03	; 3
    2ccc:	28 17       	cp	r18, r24
    2cce:	39 07       	cpc	r19, r25
    2cd0:	69 f4       	brne	.+26     	; 0x2cec <vTaskSwitchContext+0x174>
    2cd2:	88 85       	ldd	r24, Y+8	; 0x08
    2cd4:	99 85       	ldd	r25, Y+9	; 0x09
    2cd6:	fc 01       	movw	r30, r24
    2cd8:	81 81       	ldd	r24, Z+1	; 0x01
    2cda:	92 81       	ldd	r25, Z+2	; 0x02
    2cdc:	fc 01       	movw	r30, r24
    2cde:	24 81       	ldd	r18, Z+4	; 0x04
    2ce0:	35 81       	ldd	r19, Z+5	; 0x05
    2ce2:	88 85       	ldd	r24, Y+8	; 0x08
    2ce4:	99 85       	ldd	r25, Y+9	; 0x09
    2ce6:	fc 01       	movw	r30, r24
    2ce8:	21 83       	std	Z+1, r18	; 0x01
    2cea:	32 83       	std	Z+2, r19	; 0x02
    2cec:	88 85       	ldd	r24, Y+8	; 0x08
    2cee:	99 85       	ldd	r25, Y+9	; 0x09
    2cf0:	fc 01       	movw	r30, r24
    2cf2:	81 81       	ldd	r24, Z+1	; 0x01
    2cf4:	92 81       	ldd	r25, Z+2	; 0x02
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	80 85       	ldd	r24, Z+8	; 0x08
    2cfa:	91 85       	ldd	r25, Z+9	; 0x09
    2cfc:	80 93 04 2d 	sts	0x2D04, r24	; 0x802d04 <pxCurrentTCB>
    2d00:	90 93 05 2d 	sts	0x2D05, r25	; 0x802d05 <pxCurrentTCB+0x1>
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
    2d06:	80 93 67 2d 	sts	0x2D67, r24	; 0x802d67 <uxTopReadyPriority>
    2d0a:	00 00       	nop
    2d0c:	29 96       	adiw	r28, 0x09	; 9
    2d0e:	cd bf       	out	0x3d, r28	; 61
    2d10:	de bf       	out	0x3e, r29	; 62
    2d12:	df 91       	pop	r29
    2d14:	cf 91       	pop	r28
    2d16:	08 95       	ret

00002d18 <vTaskPlaceOnEventList>:
    2d18:	cf 93       	push	r28
    2d1a:	df 93       	push	r29
    2d1c:	00 d0       	rcall	.+0      	; 0x2d1e <vTaskPlaceOnEventList+0x6>
    2d1e:	00 d0       	rcall	.+0      	; 0x2d20 <vTaskPlaceOnEventList+0x8>
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
    2d24:	89 83       	std	Y+1, r24	; 0x01
    2d26:	9a 83       	std	Y+2, r25	; 0x02
    2d28:	4b 83       	std	Y+3, r20	; 0x03
    2d2a:	5c 83       	std	Y+4, r21	; 0x04
    2d2c:	6d 83       	std	Y+5, r22	; 0x05
    2d2e:	7e 83       	std	Y+6, r23	; 0x06
    2d30:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    2d34:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    2d38:	9c 01       	movw	r18, r24
    2d3a:	22 5f       	subi	r18, 0xF2	; 242
    2d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	9a 81       	ldd	r25, Y+2	; 0x02
    2d42:	b9 01       	movw	r22, r18
    2d44:	0e 94 2e 08 	call	0x105c	; 0x105c <vListInsert>
    2d48:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4c:	ad 81       	ldd	r26, Y+5	; 0x05
    2d4e:	be 81       	ldd	r27, Y+6	; 0x06
    2d50:	41 e0       	ldi	r20, 0x01	; 1
    2d52:	bc 01       	movw	r22, r24
    2d54:	cd 01       	movw	r24, r26
    2d56:	0e 94 4a 1b 	call	0x3694	; 0x3694 <prvAddCurrentTaskToDelayedList>
    2d5a:	00 00       	nop
    2d5c:	26 96       	adiw	r28, 0x06	; 6
    2d5e:	cd bf       	out	0x3d, r28	; 61
    2d60:	de bf       	out	0x3e, r29	; 62
    2d62:	df 91       	pop	r29
    2d64:	cf 91       	pop	r28
    2d66:	08 95       	ret

00002d68 <vTaskPlaceOnUnorderedEventList>:
    2d68:	0f 93       	push	r16
    2d6a:	1f 93       	push	r17
    2d6c:	cf 93       	push	r28
    2d6e:	df 93       	push	r29
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
    2d74:	2a 97       	sbiw	r28, 0x0a	; 10
    2d76:	cd bf       	out	0x3d, r28	; 61
    2d78:	de bf       	out	0x3e, r29	; 62
    2d7a:	89 83       	std	Y+1, r24	; 0x01
    2d7c:	9a 83       	std	Y+2, r25	; 0x02
    2d7e:	4b 83       	std	Y+3, r20	; 0x03
    2d80:	5c 83       	std	Y+4, r21	; 0x04
    2d82:	6d 83       	std	Y+5, r22	; 0x05
    2d84:	7e 83       	std	Y+6, r23	; 0x06
    2d86:	0f 83       	std	Y+7, r16	; 0x07
    2d88:	18 87       	std	Y+8, r17	; 0x08
    2d8a:	29 87       	std	Y+9, r18	; 0x09
    2d8c:	3a 87       	std	Y+10, r19	; 0x0a
    2d8e:	20 91 04 2d 	lds	r18, 0x2D04	; 0x802d04 <pxCurrentTCB>
    2d92:	30 91 05 2d 	lds	r19, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    2d96:	8b 81       	ldd	r24, Y+3	; 0x03
    2d98:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9a:	ad 81       	ldd	r26, Y+5	; 0x05
    2d9c:	be 81       	ldd	r27, Y+6	; 0x06
    2d9e:	b0 68       	ori	r27, 0x80	; 128
    2da0:	f9 01       	movw	r30, r18
    2da2:	86 87       	std	Z+14, r24	; 0x0e
    2da4:	97 87       	std	Z+15, r25	; 0x0f
    2da6:	a0 8b       	std	Z+16, r26	; 0x10
    2da8:	b1 8b       	std	Z+17, r27	; 0x11
    2daa:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    2dae:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    2db2:	9c 01       	movw	r18, r24
    2db4:	22 5f       	subi	r18, 0xF2	; 242
    2db6:	3f 4f       	sbci	r19, 0xFF	; 255
    2db8:	89 81       	ldd	r24, Y+1	; 0x01
    2dba:	9a 81       	ldd	r25, Y+2	; 0x02
    2dbc:	b9 01       	movw	r22, r18
    2dbe:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <vListInsertEnd>
    2dc2:	8f 81       	ldd	r24, Y+7	; 0x07
    2dc4:	98 85       	ldd	r25, Y+8	; 0x08
    2dc6:	a9 85       	ldd	r26, Y+9	; 0x09
    2dc8:	ba 85       	ldd	r27, Y+10	; 0x0a
    2dca:	41 e0       	ldi	r20, 0x01	; 1
    2dcc:	bc 01       	movw	r22, r24
    2dce:	cd 01       	movw	r24, r26
    2dd0:	0e 94 4a 1b 	call	0x3694	; 0x3694 <prvAddCurrentTaskToDelayedList>
    2dd4:	00 00       	nop
    2dd6:	2a 96       	adiw	r28, 0x0a	; 10
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	de bf       	out	0x3e, r29	; 62
    2ddc:	df 91       	pop	r29
    2dde:	cf 91       	pop	r28
    2de0:	1f 91       	pop	r17
    2de2:	0f 91       	pop	r16
    2de4:	08 95       	ret

00002de6 <vTaskPlaceOnEventListRestricted>:
    2de6:	cf 93       	push	r28
    2de8:	df 93       	push	r29
    2dea:	cd b7       	in	r28, 0x3d	; 61
    2dec:	de b7       	in	r29, 0x3e	; 62
    2dee:	27 97       	sbiw	r28, 0x07	; 7
    2df0:	cd bf       	out	0x3d, r28	; 61
    2df2:	de bf       	out	0x3e, r29	; 62
    2df4:	89 83       	std	Y+1, r24	; 0x01
    2df6:	9a 83       	std	Y+2, r25	; 0x02
    2df8:	4b 83       	std	Y+3, r20	; 0x03
    2dfa:	5c 83       	std	Y+4, r21	; 0x04
    2dfc:	6d 83       	std	Y+5, r22	; 0x05
    2dfe:	7e 83       	std	Y+6, r23	; 0x06
    2e00:	2f 83       	std	Y+7, r18	; 0x07
    2e02:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    2e06:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    2e0a:	9c 01       	movw	r18, r24
    2e0c:	22 5f       	subi	r18, 0xF2	; 242
    2e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e10:	89 81       	ldd	r24, Y+1	; 0x01
    2e12:	9a 81       	ldd	r25, Y+2	; 0x02
    2e14:	b9 01       	movw	r22, r18
    2e16:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <vListInsertEnd>
    2e1a:	8f 81       	ldd	r24, Y+7	; 0x07
    2e1c:	88 23       	and	r24, r24
    2e1e:	39 f0       	breq	.+14     	; 0x2e2e <vTaskPlaceOnEventListRestricted+0x48>
    2e20:	8f ef       	ldi	r24, 0xFF	; 255
    2e22:	9f ef       	ldi	r25, 0xFF	; 255
    2e24:	dc 01       	movw	r26, r24
    2e26:	8b 83       	std	Y+3, r24	; 0x03
    2e28:	9c 83       	std	Y+4, r25	; 0x04
    2e2a:	ad 83       	std	Y+5, r26	; 0x05
    2e2c:	be 83       	std	Y+6, r27	; 0x06
    2e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e30:	9c 81       	ldd	r25, Y+4	; 0x04
    2e32:	ad 81       	ldd	r26, Y+5	; 0x05
    2e34:	be 81       	ldd	r27, Y+6	; 0x06
    2e36:	4f 81       	ldd	r20, Y+7	; 0x07
    2e38:	bc 01       	movw	r22, r24
    2e3a:	cd 01       	movw	r24, r26
    2e3c:	0e 94 4a 1b 	call	0x3694	; 0x3694 <prvAddCurrentTaskToDelayedList>
    2e40:	00 00       	nop
    2e42:	27 96       	adiw	r28, 0x07	; 7
    2e44:	cd bf       	out	0x3d, r28	; 61
    2e46:	de bf       	out	0x3e, r29	; 62
    2e48:	df 91       	pop	r29
    2e4a:	cf 91       	pop	r28
    2e4c:	08 95       	ret

00002e4e <xTaskRemoveFromEventList>:
    2e4e:	cf 93       	push	r28
    2e50:	df 93       	push	r29
    2e52:	cd b7       	in	r28, 0x3d	; 61
    2e54:	de b7       	in	r29, 0x3e	; 62
    2e56:	25 97       	sbiw	r28, 0x05	; 5
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	de bf       	out	0x3e, r29	; 62
    2e5c:	8c 83       	std	Y+4, r24	; 0x04
    2e5e:	9d 83       	std	Y+5, r25	; 0x05
    2e60:	8c 81       	ldd	r24, Y+4	; 0x04
    2e62:	9d 81       	ldd	r25, Y+5	; 0x05
    2e64:	fc 01       	movw	r30, r24
    2e66:	87 81       	ldd	r24, Z+7	; 0x07
    2e68:	90 85       	ldd	r25, Z+8	; 0x08
    2e6a:	fc 01       	movw	r30, r24
    2e6c:	80 85       	ldd	r24, Z+8	; 0x08
    2e6e:	91 85       	ldd	r25, Z+9	; 0x09
    2e70:	8a 83       	std	Y+2, r24	; 0x02
    2e72:	9b 83       	std	Y+3, r25	; 0x03
    2e74:	8a 81       	ldd	r24, Y+2	; 0x02
    2e76:	9b 81       	ldd	r25, Y+3	; 0x03
    2e78:	0e 96       	adiw	r24, 0x0e	; 14
    2e7a:	0e 94 af 08 	call	0x115e	; 0x115e <uxListRemove>
    2e7e:	80 91 73 2d 	lds	r24, 0x2D73	; 0x802d73 <uxSchedulerSuspended>
    2e82:	88 23       	and	r24, r24
    2e84:	51 f5       	brne	.+84     	; 0x2eda <xTaskRemoveFromEventList+0x8c>
    2e86:	8a 81       	ldd	r24, Y+2	; 0x02
    2e88:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8a:	02 96       	adiw	r24, 0x02	; 2
    2e8c:	0e 94 af 08 	call	0x115e	; 0x115e <uxListRemove>
    2e90:	8a 81       	ldd	r24, Y+2	; 0x02
    2e92:	9b 81       	ldd	r25, Y+3	; 0x03
    2e94:	fc 01       	movw	r30, r24
    2e96:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e98:	80 91 67 2d 	lds	r24, 0x2D67	; 0x802d67 <uxTopReadyPriority>
    2e9c:	89 17       	cp	r24, r25
    2e9e:	30 f4       	brcc	.+12     	; 0x2eac <xTaskRemoveFromEventList+0x5e>
    2ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ea8:	80 93 67 2d 	sts	0x2D67, r24	; 0x802d67 <uxTopReadyPriority>
    2eac:	8a 81       	ldd	r24, Y+2	; 0x02
    2eae:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb0:	ac 01       	movw	r20, r24
    2eb2:	4e 5f       	subi	r20, 0xFE	; 254
    2eb4:	5f 4f       	sbci	r21, 0xFF	; 255
    2eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eba:	fc 01       	movw	r30, r24
    2ebc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ebe:	28 2f       	mov	r18, r24
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	6b e0       	ldi	r22, 0x0B	; 11
    2ec4:	62 9f       	mul	r22, r18
    2ec6:	c0 01       	movw	r24, r0
    2ec8:	63 9f       	mul	r22, r19
    2eca:	90 0d       	add	r25, r0
    2ecc:	11 24       	eor	r1, r1
    2ece:	8a 5f       	subi	r24, 0xFA	; 250
    2ed0:	92 4d       	sbci	r25, 0xD2	; 210
    2ed2:	ba 01       	movw	r22, r20
    2ed4:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <vListInsertEnd>
    2ed8:	08 c0       	rjmp	.+16     	; 0x2eea <xTaskRemoveFromEventList+0x9c>
    2eda:	8a 81       	ldd	r24, Y+2	; 0x02
    2edc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ede:	0e 96       	adiw	r24, 0x0e	; 14
    2ee0:	bc 01       	movw	r22, r24
    2ee2:	8c e4       	ldi	r24, 0x4C	; 76
    2ee4:	9d e2       	ldi	r25, 0x2D	; 45
    2ee6:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <vListInsertEnd>
    2eea:	8a 81       	ldd	r24, Y+2	; 0x02
    2eec:	9b 81       	ldd	r25, Y+3	; 0x03
    2eee:	fc 01       	movw	r30, r24
    2ef0:	22 8d       	ldd	r18, Z+26	; 0x1a
    2ef2:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    2ef6:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    2efa:	fc 01       	movw	r30, r24
    2efc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2efe:	82 17       	cp	r24, r18
    2f00:	30 f4       	brcc	.+12     	; 0x2f0e <xTaskRemoveFromEventList+0xc0>
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	89 83       	std	Y+1, r24	; 0x01
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	80 93 6a 2d 	sts	0x2D6A, r24	; 0x802d6a <xYieldPending>
    2f0c:	01 c0       	rjmp	.+2      	; 0x2f10 <xTaskRemoveFromEventList+0xc2>
    2f0e:	19 82       	std	Y+1, r1	; 0x01
    2f10:	89 81       	ldd	r24, Y+1	; 0x01
    2f12:	25 96       	adiw	r28, 0x05	; 5
    2f14:	cd bf       	out	0x3d, r28	; 61
    2f16:	de bf       	out	0x3e, r29	; 62
    2f18:	df 91       	pop	r29
    2f1a:	cf 91       	pop	r28
    2f1c:	08 95       	ret

00002f1e <vTaskRemoveFromUnorderedEventList>:
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
    2f26:	28 97       	sbiw	r28, 0x08	; 8
    2f28:	cd bf       	out	0x3d, r28	; 61
    2f2a:	de bf       	out	0x3e, r29	; 62
    2f2c:	8b 83       	std	Y+3, r24	; 0x03
    2f2e:	9c 83       	std	Y+4, r25	; 0x04
    2f30:	4d 83       	std	Y+5, r20	; 0x05
    2f32:	5e 83       	std	Y+6, r21	; 0x06
    2f34:	6f 83       	std	Y+7, r22	; 0x07
    2f36:	78 87       	std	Y+8, r23	; 0x08
    2f38:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3c:	af 81       	ldd	r26, Y+7	; 0x07
    2f3e:	b8 85       	ldd	r27, Y+8	; 0x08
    2f40:	b0 68       	ori	r27, 0x80	; 128
    2f42:	2b 81       	ldd	r18, Y+3	; 0x03
    2f44:	3c 81       	ldd	r19, Y+4	; 0x04
    2f46:	f9 01       	movw	r30, r18
    2f48:	80 83       	st	Z, r24
    2f4a:	91 83       	std	Z+1, r25	; 0x01
    2f4c:	a2 83       	std	Z+2, r26	; 0x02
    2f4e:	b3 83       	std	Z+3, r27	; 0x03
    2f50:	8b 81       	ldd	r24, Y+3	; 0x03
    2f52:	9c 81       	ldd	r25, Y+4	; 0x04
    2f54:	fc 01       	movw	r30, r24
    2f56:	80 85       	ldd	r24, Z+8	; 0x08
    2f58:	91 85       	ldd	r25, Z+9	; 0x09
    2f5a:	89 83       	std	Y+1, r24	; 0x01
    2f5c:	9a 83       	std	Y+2, r25	; 0x02
    2f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f60:	9c 81       	ldd	r25, Y+4	; 0x04
    2f62:	0e 94 af 08 	call	0x115e	; 0x115e <uxListRemove>
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6a:	02 96       	adiw	r24, 0x02	; 2
    2f6c:	0e 94 af 08 	call	0x115e	; 0x115e <uxListRemove>
    2f70:	89 81       	ldd	r24, Y+1	; 0x01
    2f72:	9a 81       	ldd	r25, Y+2	; 0x02
    2f74:	fc 01       	movw	r30, r24
    2f76:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f78:	80 91 67 2d 	lds	r24, 0x2D67	; 0x802d67 <uxTopReadyPriority>
    2f7c:	89 17       	cp	r24, r25
    2f7e:	30 f4       	brcc	.+12     	; 0x2f8c <vTaskRemoveFromUnorderedEventList+0x6e>
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	9a 81       	ldd	r25, Y+2	; 0x02
    2f84:	fc 01       	movw	r30, r24
    2f86:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f88:	80 93 67 2d 	sts	0x2D67, r24	; 0x802d67 <uxTopReadyPriority>
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f90:	ac 01       	movw	r20, r24
    2f92:	4e 5f       	subi	r20, 0xFE	; 254
    2f94:	5f 4f       	sbci	r21, 0xFF	; 255
    2f96:	89 81       	ldd	r24, Y+1	; 0x01
    2f98:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9a:	fc 01       	movw	r30, r24
    2f9c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f9e:	28 2f       	mov	r18, r24
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	6b e0       	ldi	r22, 0x0B	; 11
    2fa4:	62 9f       	mul	r22, r18
    2fa6:	c0 01       	movw	r24, r0
    2fa8:	63 9f       	mul	r22, r19
    2faa:	90 0d       	add	r25, r0
    2fac:	11 24       	eor	r1, r1
    2fae:	8a 5f       	subi	r24, 0xFA	; 250
    2fb0:	92 4d       	sbci	r25, 0xD2	; 210
    2fb2:	ba 01       	movw	r22, r20
    2fb4:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <vListInsertEnd>
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
    2fba:	9a 81       	ldd	r25, Y+2	; 0x02
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	22 8d       	ldd	r18, Z+26	; 0x1a
    2fc0:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    2fc4:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    2fc8:	fc 01       	movw	r30, r24
    2fca:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fcc:	82 17       	cp	r24, r18
    2fce:	18 f4       	brcc	.+6      	; 0x2fd6 <vTaskRemoveFromUnorderedEventList+0xb8>
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	80 93 6a 2d 	sts	0x2D6A, r24	; 0x802d6a <xYieldPending>
    2fd6:	00 00       	nop
    2fd8:	28 96       	adiw	r28, 0x08	; 8
    2fda:	cd bf       	out	0x3d, r28	; 61
    2fdc:	de bf       	out	0x3e, r29	; 62
    2fde:	df 91       	pop	r29
    2fe0:	cf 91       	pop	r28
    2fe2:	08 95       	ret

00002fe4 <vTaskInternalSetTimeOutState>:
    2fe4:	cf 93       	push	r28
    2fe6:	df 93       	push	r29
    2fe8:	1f 92       	push	r1
    2fea:	1f 92       	push	r1
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
    2ff0:	89 83       	std	Y+1, r24	; 0x01
    2ff2:	9a 83       	std	Y+2, r25	; 0x02
    2ff4:	20 91 6b 2d 	lds	r18, 0x2D6B	; 0x802d6b <xNumOfOverflows>
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffc:	fc 01       	movw	r30, r24
    2ffe:	20 83       	st	Z, r18
    3000:	80 91 63 2d 	lds	r24, 0x2D63	; 0x802d63 <xTickCount>
    3004:	90 91 64 2d 	lds	r25, 0x2D64	; 0x802d64 <xTickCount+0x1>
    3008:	a0 91 65 2d 	lds	r26, 0x2D65	; 0x802d65 <xTickCount+0x2>
    300c:	b0 91 66 2d 	lds	r27, 0x2D66	; 0x802d66 <xTickCount+0x3>
    3010:	29 81       	ldd	r18, Y+1	; 0x01
    3012:	3a 81       	ldd	r19, Y+2	; 0x02
    3014:	f9 01       	movw	r30, r18
    3016:	81 83       	std	Z+1, r24	; 0x01
    3018:	92 83       	std	Z+2, r25	; 0x02
    301a:	a3 83       	std	Z+3, r26	; 0x03
    301c:	b4 83       	std	Z+4, r27	; 0x04
    301e:	00 00       	nop
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	df 91       	pop	r29
    3026:	cf 91       	pop	r28
    3028:	08 95       	ret

0000302a <xTaskCheckForTimeOut>:
    302a:	ef 92       	push	r14
    302c:	ff 92       	push	r15
    302e:	0f 93       	push	r16
    3030:	1f 93       	push	r17
    3032:	cf 93       	push	r28
    3034:	df 93       	push	r29
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
    303a:	2d 97       	sbiw	r28, 0x0d	; 13
    303c:	cd bf       	out	0x3d, r28	; 61
    303e:	de bf       	out	0x3e, r29	; 62
    3040:	8a 87       	std	Y+10, r24	; 0x0a
    3042:	9b 87       	std	Y+11, r25	; 0x0b
    3044:	6c 87       	std	Y+12, r22	; 0x0c
    3046:	7d 87       	std	Y+13, r23	; 0x0d
    3048:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    304c:	ff 93       	push	r31
    304e:	f8 7f       	andi	r31, 0xF8	; 248
    3050:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3054:	80 91 63 2d 	lds	r24, 0x2D63	; 0x802d63 <xTickCount>
    3058:	90 91 64 2d 	lds	r25, 0x2D64	; 0x802d64 <xTickCount+0x1>
    305c:	a0 91 65 2d 	lds	r26, 0x2D65	; 0x802d65 <xTickCount+0x2>
    3060:	b0 91 66 2d 	lds	r27, 0x2D66	; 0x802d66 <xTickCount+0x3>
    3064:	8a 83       	std	Y+2, r24	; 0x02
    3066:	9b 83       	std	Y+3, r25	; 0x03
    3068:	ac 83       	std	Y+4, r26	; 0x04
    306a:	bd 83       	std	Y+5, r27	; 0x05
    306c:	8a 85       	ldd	r24, Y+10	; 0x0a
    306e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3070:	fc 01       	movw	r30, r24
    3072:	81 81       	ldd	r24, Z+1	; 0x01
    3074:	92 81       	ldd	r25, Z+2	; 0x02
    3076:	a3 81       	ldd	r26, Z+3	; 0x03
    3078:	b4 81       	ldd	r27, Z+4	; 0x04
    307a:	2a 81       	ldd	r18, Y+2	; 0x02
    307c:	3b 81       	ldd	r19, Y+3	; 0x03
    307e:	4c 81       	ldd	r20, Y+4	; 0x04
    3080:	5d 81       	ldd	r21, Y+5	; 0x05
    3082:	79 01       	movw	r14, r18
    3084:	8a 01       	movw	r16, r20
    3086:	e8 1a       	sub	r14, r24
    3088:	f9 0a       	sbc	r15, r25
    308a:	0a 0b       	sbc	r16, r26
    308c:	1b 0b       	sbc	r17, r27
    308e:	d8 01       	movw	r26, r16
    3090:	c7 01       	movw	r24, r14
    3092:	8e 83       	std	Y+6, r24	; 0x06
    3094:	9f 83       	std	Y+7, r25	; 0x07
    3096:	a8 87       	std	Y+8, r26	; 0x08
    3098:	b9 87       	std	Y+9, r27	; 0x09
    309a:	8c 85       	ldd	r24, Y+12	; 0x0c
    309c:	9d 85       	ldd	r25, Y+13	; 0x0d
    309e:	fc 01       	movw	r30, r24
    30a0:	80 81       	ld	r24, Z
    30a2:	91 81       	ldd	r25, Z+1	; 0x01
    30a4:	a2 81       	ldd	r26, Z+2	; 0x02
    30a6:	b3 81       	ldd	r27, Z+3	; 0x03
    30a8:	8f 3f       	cpi	r24, 0xFF	; 255
    30aa:	9f 4f       	sbci	r25, 0xFF	; 255
    30ac:	af 4f       	sbci	r26, 0xFF	; 255
    30ae:	bf 4f       	sbci	r27, 0xFF	; 255
    30b0:	11 f4       	brne	.+4      	; 0x30b6 <xTaskCheckForTimeOut+0x8c>
    30b2:	19 82       	std	Y+1, r1	; 0x01
    30b4:	54 c0       	rjmp	.+168    	; 0x315e <xTaskCheckForTimeOut+0x134>
    30b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    30b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    30ba:	fc 01       	movw	r30, r24
    30bc:	90 81       	ld	r25, Z
    30be:	80 91 6b 2d 	lds	r24, 0x2D6B	; 0x802d6b <xNumOfOverflows>
    30c2:	98 17       	cp	r25, r24
    30c4:	99 f0       	breq	.+38     	; 0x30ec <xTaskCheckForTimeOut+0xc2>
    30c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    30c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    30ca:	fc 01       	movw	r30, r24
    30cc:	21 81       	ldd	r18, Z+1	; 0x01
    30ce:	32 81       	ldd	r19, Z+2	; 0x02
    30d0:	43 81       	ldd	r20, Z+3	; 0x03
    30d2:	54 81       	ldd	r21, Z+4	; 0x04
    30d4:	8a 81       	ldd	r24, Y+2	; 0x02
    30d6:	9b 81       	ldd	r25, Y+3	; 0x03
    30d8:	ac 81       	ldd	r26, Y+4	; 0x04
    30da:	bd 81       	ldd	r27, Y+5	; 0x05
    30dc:	82 17       	cp	r24, r18
    30de:	93 07       	cpc	r25, r19
    30e0:	a4 07       	cpc	r26, r20
    30e2:	b5 07       	cpc	r27, r21
    30e4:	18 f0       	brcs	.+6      	; 0x30ec <xTaskCheckForTimeOut+0xc2>
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	89 83       	std	Y+1, r24	; 0x01
    30ea:	39 c0       	rjmp	.+114    	; 0x315e <xTaskCheckForTimeOut+0x134>
    30ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    30ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    30f0:	fc 01       	movw	r30, r24
    30f2:	20 81       	ld	r18, Z
    30f4:	31 81       	ldd	r19, Z+1	; 0x01
    30f6:	42 81       	ldd	r20, Z+2	; 0x02
    30f8:	53 81       	ldd	r21, Z+3	; 0x03
    30fa:	8e 81       	ldd	r24, Y+6	; 0x06
    30fc:	9f 81       	ldd	r25, Y+7	; 0x07
    30fe:	a8 85       	ldd	r26, Y+8	; 0x08
    3100:	b9 85       	ldd	r27, Y+9	; 0x09
    3102:	82 17       	cp	r24, r18
    3104:	93 07       	cpc	r25, r19
    3106:	a4 07       	cpc	r26, r20
    3108:	b5 07       	cpc	r27, r21
    310a:	00 f5       	brcc	.+64     	; 0x314c <xTaskCheckForTimeOut+0x122>
    310c:	8c 85       	ldd	r24, Y+12	; 0x0c
    310e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3110:	fc 01       	movw	r30, r24
    3112:	20 81       	ld	r18, Z
    3114:	31 81       	ldd	r19, Z+1	; 0x01
    3116:	42 81       	ldd	r20, Z+2	; 0x02
    3118:	53 81       	ldd	r21, Z+3	; 0x03
    311a:	8e 81       	ldd	r24, Y+6	; 0x06
    311c:	9f 81       	ldd	r25, Y+7	; 0x07
    311e:	a8 85       	ldd	r26, Y+8	; 0x08
    3120:	b9 85       	ldd	r27, Y+9	; 0x09
    3122:	79 01       	movw	r14, r18
    3124:	8a 01       	movw	r16, r20
    3126:	e8 1a       	sub	r14, r24
    3128:	f9 0a       	sbc	r15, r25
    312a:	0a 0b       	sbc	r16, r26
    312c:	1b 0b       	sbc	r17, r27
    312e:	d8 01       	movw	r26, r16
    3130:	c7 01       	movw	r24, r14
    3132:	2c 85       	ldd	r18, Y+12	; 0x0c
    3134:	3d 85       	ldd	r19, Y+13	; 0x0d
    3136:	f9 01       	movw	r30, r18
    3138:	80 83       	st	Z, r24
    313a:	91 83       	std	Z+1, r25	; 0x01
    313c:	a2 83       	std	Z+2, r26	; 0x02
    313e:	b3 83       	std	Z+3, r27	; 0x03
    3140:	8a 85       	ldd	r24, Y+10	; 0x0a
    3142:	9b 85       	ldd	r25, Y+11	; 0x0b
    3144:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <vTaskInternalSetTimeOutState>
    3148:	19 82       	std	Y+1, r1	; 0x01
    314a:	09 c0       	rjmp	.+18     	; 0x315e <xTaskCheckForTimeOut+0x134>
    314c:	8c 85       	ldd	r24, Y+12	; 0x0c
    314e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3150:	fc 01       	movw	r30, r24
    3152:	10 82       	st	Z, r1
    3154:	11 82       	std	Z+1, r1	; 0x01
    3156:	12 82       	std	Z+2, r1	; 0x02
    3158:	13 82       	std	Z+3, r1	; 0x03
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	89 83       	std	Y+1, r24	; 0x01
    315e:	ff 91       	pop	r31
    3160:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3164:	89 81       	ldd	r24, Y+1	; 0x01
    3166:	2d 96       	adiw	r28, 0x0d	; 13
    3168:	cd bf       	out	0x3d, r28	; 61
    316a:	de bf       	out	0x3e, r29	; 62
    316c:	df 91       	pop	r29
    316e:	cf 91       	pop	r28
    3170:	1f 91       	pop	r17
    3172:	0f 91       	pop	r16
    3174:	ff 90       	pop	r15
    3176:	ef 90       	pop	r14
    3178:	08 95       	ret

0000317a <vTaskMissedYield>:
    317a:	cf 93       	push	r28
    317c:	df 93       	push	r29
    317e:	cd b7       	in	r28, 0x3d	; 61
    3180:	de b7       	in	r29, 0x3e	; 62
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	80 93 6a 2d 	sts	0x2D6A, r24	; 0x802d6a <xYieldPending>
    3188:	00 00       	nop
    318a:	df 91       	pop	r29
    318c:	cf 91       	pop	r28
    318e:	08 95       	ret

00003190 <prvIdleTask>:
    3190:	cf 93       	push	r28
    3192:	df 93       	push	r29
    3194:	1f 92       	push	r1
    3196:	1f 92       	push	r1
    3198:	cd b7       	in	r28, 0x3d	; 61
    319a:	de b7       	in	r29, 0x3e	; 62
    319c:	89 83       	std	Y+1, r24	; 0x01
    319e:	9a 83       	std	Y+2, r25	; 0x02
    31a0:	0e 94 16 19 	call	0x322c	; 0x322c <prvCheckTasksWaitingTermination>
    31a4:	80 91 06 2d 	lds	r24, 0x2D06	; 0x802d06 <pxReadyTasksLists>
    31a8:	82 30       	cpi	r24, 0x02	; 2
    31aa:	10 f0       	brcs	.+4      	; 0x31b0 <prvIdleTask+0x20>
    31ac:	0e 94 2d 0b 	call	0x165a	; 0x165a <vPortYield>
    31b0:	0e 94 49 21 	call	0x4292	; 0x4292 <vApplicationIdleHook>
    31b4:	f5 cf       	rjmp	.-22     	; 0x31a0 <prvIdleTask+0x10>

000031b6 <prvInitialiseTaskLists>:
    31b6:	cf 93       	push	r28
    31b8:	df 93       	push	r29
    31ba:	1f 92       	push	r1
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
    31c0:	19 82       	std	Y+1, r1	; 0x01
    31c2:	10 c0       	rjmp	.+32     	; 0x31e4 <prvInitialiseTaskLists+0x2e>
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	28 2f       	mov	r18, r24
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	4b e0       	ldi	r20, 0x0B	; 11
    31cc:	42 9f       	mul	r20, r18
    31ce:	c0 01       	movw	r24, r0
    31d0:	43 9f       	mul	r20, r19
    31d2:	90 0d       	add	r25, r0
    31d4:	11 24       	eor	r1, r1
    31d6:	8a 5f       	subi	r24, 0xFA	; 250
    31d8:	92 4d       	sbci	r25, 0xD2	; 210
    31da:	0e 94 96 07 	call	0xf2c	; 0xf2c <vListInitialise>
    31de:	89 81       	ldd	r24, Y+1	; 0x01
    31e0:	8f 5f       	subi	r24, 0xFF	; 255
    31e2:	89 83       	std	Y+1, r24	; 0x01
    31e4:	89 81       	ldd	r24, Y+1	; 0x01
    31e6:	84 30       	cpi	r24, 0x04	; 4
    31e8:	68 f3       	brcs	.-38     	; 0x31c4 <prvInitialiseTaskLists+0xe>
    31ea:	82 e3       	ldi	r24, 0x32	; 50
    31ec:	9d e2       	ldi	r25, 0x2D	; 45
    31ee:	0e 94 96 07 	call	0xf2c	; 0xf2c <vListInitialise>
    31f2:	8d e3       	ldi	r24, 0x3D	; 61
    31f4:	9d e2       	ldi	r25, 0x2D	; 45
    31f6:	0e 94 96 07 	call	0xf2c	; 0xf2c <vListInitialise>
    31fa:	8c e4       	ldi	r24, 0x4C	; 76
    31fc:	9d e2       	ldi	r25, 0x2D	; 45
    31fe:	0e 94 96 07 	call	0xf2c	; 0xf2c <vListInitialise>
    3202:	87 e5       	ldi	r24, 0x57	; 87
    3204:	9d e2       	ldi	r25, 0x2D	; 45
    3206:	0e 94 96 07 	call	0xf2c	; 0xf2c <vListInitialise>
    320a:	82 e3       	ldi	r24, 0x32	; 50
    320c:	9d e2       	ldi	r25, 0x2D	; 45
    320e:	80 93 48 2d 	sts	0x2D48, r24	; 0x802d48 <pxDelayedTaskList>
    3212:	90 93 49 2d 	sts	0x2D49, r25	; 0x802d49 <pxDelayedTaskList+0x1>
    3216:	8d e3       	ldi	r24, 0x3D	; 61
    3218:	9d e2       	ldi	r25, 0x2D	; 45
    321a:	80 93 4a 2d 	sts	0x2D4A, r24	; 0x802d4a <pxOverflowDelayedTaskList>
    321e:	90 93 4b 2d 	sts	0x2D4B, r25	; 0x802d4b <pxOverflowDelayedTaskList+0x1>
    3222:	00 00       	nop
    3224:	0f 90       	pop	r0
    3226:	df 91       	pop	r29
    3228:	cf 91       	pop	r28
    322a:	08 95       	ret

0000322c <prvCheckTasksWaitingTermination>:
    322c:	cf 93       	push	r28
    322e:	df 93       	push	r29
    3230:	cd b7       	in	r28, 0x3d	; 61
    3232:	de b7       	in	r29, 0x3e	; 62
    3234:	00 00       	nop
    3236:	df 91       	pop	r29
    3238:	cf 91       	pop	r28
    323a:	08 95       	ret

0000323c <prvResetNextTaskUnblockTime>:
    323c:	cf 93       	push	r28
    323e:	df 93       	push	r29
    3240:	1f 92       	push	r1
    3242:	1f 92       	push	r1
    3244:	cd b7       	in	r28, 0x3d	; 61
    3246:	de b7       	in	r29, 0x3e	; 62
    3248:	80 91 48 2d 	lds	r24, 0x2D48	; 0x802d48 <pxDelayedTaskList>
    324c:	90 91 49 2d 	lds	r25, 0x2D49	; 0x802d49 <pxDelayedTaskList+0x1>
    3250:	fc 01       	movw	r30, r24
    3252:	80 81       	ld	r24, Z
    3254:	88 23       	and	r24, r24
    3256:	61 f4       	brne	.+24     	; 0x3270 <prvResetNextTaskUnblockTime+0x34>
    3258:	8f ef       	ldi	r24, 0xFF	; 255
    325a:	9f ef       	ldi	r25, 0xFF	; 255
    325c:	dc 01       	movw	r26, r24
    325e:	80 93 6d 2d 	sts	0x2D6D, r24	; 0x802d6d <xNextTaskUnblockTime>
    3262:	90 93 6e 2d 	sts	0x2D6E, r25	; 0x802d6e <xNextTaskUnblockTime+0x1>
    3266:	a0 93 6f 2d 	sts	0x2D6F, r26	; 0x802d6f <xNextTaskUnblockTime+0x2>
    326a:	b0 93 70 2d 	sts	0x2D70, r27	; 0x802d70 <xNextTaskUnblockTime+0x3>
    326e:	1b c0       	rjmp	.+54     	; 0x32a6 <prvResetNextTaskUnblockTime+0x6a>
    3270:	80 91 48 2d 	lds	r24, 0x2D48	; 0x802d48 <pxDelayedTaskList>
    3274:	90 91 49 2d 	lds	r25, 0x2D49	; 0x802d49 <pxDelayedTaskList+0x1>
    3278:	fc 01       	movw	r30, r24
    327a:	87 81       	ldd	r24, Z+7	; 0x07
    327c:	90 85       	ldd	r25, Z+8	; 0x08
    327e:	fc 01       	movw	r30, r24
    3280:	80 85       	ldd	r24, Z+8	; 0x08
    3282:	91 85       	ldd	r25, Z+9	; 0x09
    3284:	89 83       	std	Y+1, r24	; 0x01
    3286:	9a 83       	std	Y+2, r25	; 0x02
    3288:	89 81       	ldd	r24, Y+1	; 0x01
    328a:	9a 81       	ldd	r25, Y+2	; 0x02
    328c:	fc 01       	movw	r30, r24
    328e:	82 81       	ldd	r24, Z+2	; 0x02
    3290:	93 81       	ldd	r25, Z+3	; 0x03
    3292:	a4 81       	ldd	r26, Z+4	; 0x04
    3294:	b5 81       	ldd	r27, Z+5	; 0x05
    3296:	80 93 6d 2d 	sts	0x2D6D, r24	; 0x802d6d <xNextTaskUnblockTime>
    329a:	90 93 6e 2d 	sts	0x2D6E, r25	; 0x802d6e <xNextTaskUnblockTime+0x1>
    329e:	a0 93 6f 2d 	sts	0x2D6F, r26	; 0x802d6f <xNextTaskUnblockTime+0x2>
    32a2:	b0 93 70 2d 	sts	0x2D70, r27	; 0x802d70 <xNextTaskUnblockTime+0x3>
    32a6:	00 00       	nop
    32a8:	0f 90       	pop	r0
    32aa:	0f 90       	pop	r0
    32ac:	df 91       	pop	r29
    32ae:	cf 91       	pop	r28
    32b0:	08 95       	ret

000032b2 <xTaskGetSchedulerState>:
    32b2:	cf 93       	push	r28
    32b4:	df 93       	push	r29
    32b6:	1f 92       	push	r1
    32b8:	cd b7       	in	r28, 0x3d	; 61
    32ba:	de b7       	in	r29, 0x3e	; 62
    32bc:	80 91 68 2d 	lds	r24, 0x2D68	; 0x802d68 <xSchedulerRunning>
    32c0:	88 23       	and	r24, r24
    32c2:	19 f4       	brne	.+6      	; 0x32ca <xTaskGetSchedulerState+0x18>
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	89 83       	std	Y+1, r24	; 0x01
    32c8:	08 c0       	rjmp	.+16     	; 0x32da <xTaskGetSchedulerState+0x28>
    32ca:	80 91 73 2d 	lds	r24, 0x2D73	; 0x802d73 <uxSchedulerSuspended>
    32ce:	88 23       	and	r24, r24
    32d0:	19 f4       	brne	.+6      	; 0x32d8 <xTaskGetSchedulerState+0x26>
    32d2:	82 e0       	ldi	r24, 0x02	; 2
    32d4:	89 83       	std	Y+1, r24	; 0x01
    32d6:	01 c0       	rjmp	.+2      	; 0x32da <xTaskGetSchedulerState+0x28>
    32d8:	19 82       	std	Y+1, r1	; 0x01
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	0f 90       	pop	r0
    32de:	df 91       	pop	r29
    32e0:	cf 91       	pop	r28
    32e2:	08 95       	ret

000032e4 <uxTaskResetEventItemValue>:
    32e4:	ef 92       	push	r14
    32e6:	ff 92       	push	r15
    32e8:	0f 93       	push	r16
    32ea:	1f 93       	push	r17
    32ec:	cf 93       	push	r28
    32ee:	df 93       	push	r29
    32f0:	00 d0       	rcall	.+0      	; 0x32f2 <uxTaskResetEventItemValue+0xe>
    32f2:	1f 92       	push	r1
    32f4:	cd b7       	in	r28, 0x3d	; 61
    32f6:	de b7       	in	r29, 0x3e	; 62
    32f8:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    32fc:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    3300:	fc 01       	movw	r30, r24
    3302:	86 85       	ldd	r24, Z+14	; 0x0e
    3304:	97 85       	ldd	r25, Z+15	; 0x0f
    3306:	a0 89       	ldd	r26, Z+16	; 0x10
    3308:	b1 89       	ldd	r27, Z+17	; 0x11
    330a:	89 83       	std	Y+1, r24	; 0x01
    330c:	9a 83       	std	Y+2, r25	; 0x02
    330e:	ab 83       	std	Y+3, r26	; 0x03
    3310:	bc 83       	std	Y+4, r27	; 0x04
    3312:	60 91 04 2d 	lds	r22, 0x2D04	; 0x802d04 <pxCurrentTCB>
    3316:	70 91 05 2d 	lds	r23, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    331a:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    331e:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    3322:	fc 01       	movw	r30, r24
    3324:	82 8d       	ldd	r24, Z+26	; 0x1a
    3326:	88 2f       	mov	r24, r24
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	a0 e0       	ldi	r26, 0x00	; 0
    332c:	b0 e0       	ldi	r27, 0x00	; 0
    332e:	24 e0       	ldi	r18, 0x04	; 4
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	40 e0       	ldi	r20, 0x00	; 0
    3334:	50 e0       	ldi	r21, 0x00	; 0
    3336:	79 01       	movw	r14, r18
    3338:	8a 01       	movw	r16, r20
    333a:	e8 1a       	sub	r14, r24
    333c:	f9 0a       	sbc	r15, r25
    333e:	0a 0b       	sbc	r16, r26
    3340:	1b 0b       	sbc	r17, r27
    3342:	d8 01       	movw	r26, r16
    3344:	c7 01       	movw	r24, r14
    3346:	fb 01       	movw	r30, r22
    3348:	86 87       	std	Z+14, r24	; 0x0e
    334a:	97 87       	std	Z+15, r25	; 0x0f
    334c:	a0 8b       	std	Z+16, r26	; 0x10
    334e:	b1 8b       	std	Z+17, r27	; 0x11
    3350:	89 81       	ldd	r24, Y+1	; 0x01
    3352:	9a 81       	ldd	r25, Y+2	; 0x02
    3354:	ab 81       	ldd	r26, Y+3	; 0x03
    3356:	bc 81       	ldd	r27, Y+4	; 0x04
    3358:	bc 01       	movw	r22, r24
    335a:	cd 01       	movw	r24, r26
    335c:	24 96       	adiw	r28, 0x04	; 4
    335e:	cd bf       	out	0x3d, r28	; 61
    3360:	de bf       	out	0x3e, r29	; 62
    3362:	df 91       	pop	r29
    3364:	cf 91       	pop	r28
    3366:	1f 91       	pop	r17
    3368:	0f 91       	pop	r16
    336a:	ff 90       	pop	r15
    336c:	ef 90       	pop	r14
    336e:	08 95       	ret

00003370 <xTaskNotifyWait>:
    3370:	cf 92       	push	r12
    3372:	df 92       	push	r13
    3374:	ef 92       	push	r14
    3376:	ff 92       	push	r15
    3378:	0f 93       	push	r16
    337a:	1f 93       	push	r17
    337c:	cf 93       	push	r28
    337e:	df 93       	push	r29
    3380:	cd b7       	in	r28, 0x3d	; 61
    3382:	de b7       	in	r29, 0x3e	; 62
    3384:	2f 97       	sbiw	r28, 0x0f	; 15
    3386:	cd bf       	out	0x3d, r28	; 61
    3388:	de bf       	out	0x3e, r29	; 62
    338a:	6a 83       	std	Y+2, r22	; 0x02
    338c:	7b 83       	std	Y+3, r23	; 0x03
    338e:	8c 83       	std	Y+4, r24	; 0x04
    3390:	9d 83       	std	Y+5, r25	; 0x05
    3392:	2e 83       	std	Y+6, r18	; 0x06
    3394:	3f 83       	std	Y+7, r19	; 0x07
    3396:	48 87       	std	Y+8, r20	; 0x08
    3398:	59 87       	std	Y+9, r21	; 0x09
    339a:	0a 87       	std	Y+10, r16	; 0x0a
    339c:	1b 87       	std	Y+11, r17	; 0x0b
    339e:	cc 86       	std	Y+12, r12	; 0x0c
    33a0:	dd 86       	std	Y+13, r13	; 0x0d
    33a2:	ee 86       	std	Y+14, r14	; 0x0e
    33a4:	ff 86       	std	Y+15, r15	; 0x0f
    33a6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    33aa:	ff 93       	push	r31
    33ac:	f8 7f       	andi	r31, 0xF8	; 248
    33ae:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    33b2:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    33b6:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    33ba:	fc 01       	movw	r30, r24
    33bc:	83 a5       	ldd	r24, Z+43	; 0x2b
    33be:	82 30       	cpi	r24, 0x02	; 2
    33c0:	a1 f1       	breq	.+104    	; 0x342a <xTaskNotifyWait+0xba>
    33c2:	60 91 04 2d 	lds	r22, 0x2D04	; 0x802d04 <pxCurrentTCB>
    33c6:	70 91 05 2d 	lds	r23, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    33ca:	fb 01       	movw	r30, r22
    33cc:	27 a1       	ldd	r18, Z+39	; 0x27
    33ce:	30 a5       	ldd	r19, Z+40	; 0x28
    33d0:	41 a5       	ldd	r20, Z+41	; 0x29
    33d2:	52 a5       	ldd	r21, Z+42	; 0x2a
    33d4:	8a 81       	ldd	r24, Y+2	; 0x02
    33d6:	9b 81       	ldd	r25, Y+3	; 0x03
    33d8:	ac 81       	ldd	r26, Y+4	; 0x04
    33da:	bd 81       	ldd	r27, Y+5	; 0x05
    33dc:	80 95       	com	r24
    33de:	90 95       	com	r25
    33e0:	a0 95       	com	r26
    33e2:	b0 95       	com	r27
    33e4:	82 23       	and	r24, r18
    33e6:	93 23       	and	r25, r19
    33e8:	a4 23       	and	r26, r20
    33ea:	b5 23       	and	r27, r21
    33ec:	fb 01       	movw	r30, r22
    33ee:	87 a3       	std	Z+39, r24	; 0x27
    33f0:	90 a7       	std	Z+40, r25	; 0x28
    33f2:	a1 a7       	std	Z+41, r26	; 0x29
    33f4:	b2 a7       	std	Z+42, r27	; 0x2a
    33f6:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    33fa:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    33fe:	21 e0       	ldi	r18, 0x01	; 1
    3400:	fc 01       	movw	r30, r24
    3402:	23 a7       	std	Z+43, r18	; 0x2b
    3404:	8c 85       	ldd	r24, Y+12	; 0x0c
    3406:	9d 85       	ldd	r25, Y+13	; 0x0d
    3408:	ae 85       	ldd	r26, Y+14	; 0x0e
    340a:	bf 85       	ldd	r27, Y+15	; 0x0f
    340c:	89 2b       	or	r24, r25
    340e:	8a 2b       	or	r24, r26
    3410:	8b 2b       	or	r24, r27
    3412:	59 f0       	breq	.+22     	; 0x342a <xTaskNotifyWait+0xba>
    3414:	8c 85       	ldd	r24, Y+12	; 0x0c
    3416:	9d 85       	ldd	r25, Y+13	; 0x0d
    3418:	ae 85       	ldd	r26, Y+14	; 0x0e
    341a:	bf 85       	ldd	r27, Y+15	; 0x0f
    341c:	41 e0       	ldi	r20, 0x01	; 1
    341e:	bc 01       	movw	r22, r24
    3420:	cd 01       	movw	r24, r26
    3422:	0e 94 4a 1b 	call	0x3694	; 0x3694 <prvAddCurrentTaskToDelayedList>
    3426:	0e 94 2d 0b 	call	0x165a	; 0x165a <vPortYield>
    342a:	ff 91       	pop	r31
    342c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3430:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3434:	ff 93       	push	r31
    3436:	f8 7f       	andi	r31, 0xF8	; 248
    3438:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    343c:	8a 85       	ldd	r24, Y+10	; 0x0a
    343e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3440:	89 2b       	or	r24, r25
    3442:	81 f0       	breq	.+32     	; 0x3464 <xTaskNotifyWait+0xf4>
    3444:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    3448:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    344c:	fc 01       	movw	r30, r24
    344e:	87 a1       	ldd	r24, Z+39	; 0x27
    3450:	90 a5       	ldd	r25, Z+40	; 0x28
    3452:	a1 a5       	ldd	r26, Z+41	; 0x29
    3454:	b2 a5       	ldd	r27, Z+42	; 0x2a
    3456:	2a 85       	ldd	r18, Y+10	; 0x0a
    3458:	3b 85       	ldd	r19, Y+11	; 0x0b
    345a:	f9 01       	movw	r30, r18
    345c:	80 83       	st	Z, r24
    345e:	91 83       	std	Z+1, r25	; 0x01
    3460:	a2 83       	std	Z+2, r26	; 0x02
    3462:	b3 83       	std	Z+3, r27	; 0x03
    3464:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    3468:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    346c:	fc 01       	movw	r30, r24
    346e:	83 a5       	ldd	r24, Z+43	; 0x2b
    3470:	82 30       	cpi	r24, 0x02	; 2
    3472:	11 f0       	breq	.+4      	; 0x3478 <xTaskNotifyWait+0x108>
    3474:	19 82       	std	Y+1, r1	; 0x01
    3476:	1c c0       	rjmp	.+56     	; 0x34b0 <xTaskNotifyWait+0x140>
    3478:	60 91 04 2d 	lds	r22, 0x2D04	; 0x802d04 <pxCurrentTCB>
    347c:	70 91 05 2d 	lds	r23, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    3480:	fb 01       	movw	r30, r22
    3482:	27 a1       	ldd	r18, Z+39	; 0x27
    3484:	30 a5       	ldd	r19, Z+40	; 0x28
    3486:	41 a5       	ldd	r20, Z+41	; 0x29
    3488:	52 a5       	ldd	r21, Z+42	; 0x2a
    348a:	8e 81       	ldd	r24, Y+6	; 0x06
    348c:	9f 81       	ldd	r25, Y+7	; 0x07
    348e:	a8 85       	ldd	r26, Y+8	; 0x08
    3490:	b9 85       	ldd	r27, Y+9	; 0x09
    3492:	80 95       	com	r24
    3494:	90 95       	com	r25
    3496:	a0 95       	com	r26
    3498:	b0 95       	com	r27
    349a:	82 23       	and	r24, r18
    349c:	93 23       	and	r25, r19
    349e:	a4 23       	and	r26, r20
    34a0:	b5 23       	and	r27, r21
    34a2:	fb 01       	movw	r30, r22
    34a4:	87 a3       	std	Z+39, r24	; 0x27
    34a6:	90 a7       	std	Z+40, r25	; 0x28
    34a8:	a1 a7       	std	Z+41, r26	; 0x29
    34aa:	b2 a7       	std	Z+42, r27	; 0x2a
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	89 83       	std	Y+1, r24	; 0x01
    34b0:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    34b4:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    34b8:	fc 01       	movw	r30, r24
    34ba:	13 a6       	std	Z+43, r1	; 0x2b
    34bc:	ff 91       	pop	r31
    34be:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    34c2:	89 81       	ldd	r24, Y+1	; 0x01
    34c4:	2f 96       	adiw	r28, 0x0f	; 15
    34c6:	cd bf       	out	0x3d, r28	; 61
    34c8:	de bf       	out	0x3e, r29	; 62
    34ca:	df 91       	pop	r29
    34cc:	cf 91       	pop	r28
    34ce:	1f 91       	pop	r17
    34d0:	0f 91       	pop	r16
    34d2:	ff 90       	pop	r15
    34d4:	ef 90       	pop	r14
    34d6:	df 90       	pop	r13
    34d8:	cf 90       	pop	r12
    34da:	08 95       	ret

000034dc <xTaskGenericNotify>:
    34dc:	0f 93       	push	r16
    34de:	1f 93       	push	r17
    34e0:	cf 93       	push	r28
    34e2:	df 93       	push	r29
    34e4:	cd b7       	in	r28, 0x3d	; 61
    34e6:	de b7       	in	r29, 0x3e	; 62
    34e8:	2d 97       	sbiw	r28, 0x0d	; 13
    34ea:	cd bf       	out	0x3d, r28	; 61
    34ec:	de bf       	out	0x3e, r29	; 62
    34ee:	8d 83       	std	Y+5, r24	; 0x05
    34f0:	9e 83       	std	Y+6, r25	; 0x06
    34f2:	4f 83       	std	Y+7, r20	; 0x07
    34f4:	58 87       	std	Y+8, r21	; 0x08
    34f6:	69 87       	std	Y+9, r22	; 0x09
    34f8:	7a 87       	std	Y+10, r23	; 0x0a
    34fa:	2b 87       	std	Y+11, r18	; 0x0b
    34fc:	0c 87       	std	Y+12, r16	; 0x0c
    34fe:	1d 87       	std	Y+13, r17	; 0x0d
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	89 83       	std	Y+1, r24	; 0x01
    3504:	8d 81       	ldd	r24, Y+5	; 0x05
    3506:	9e 81       	ldd	r25, Y+6	; 0x06
    3508:	8a 83       	std	Y+2, r24	; 0x02
    350a:	9b 83       	std	Y+3, r25	; 0x03
    350c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3510:	ff 93       	push	r31
    3512:	f8 7f       	andi	r31, 0xF8	; 248
    3514:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3518:	8c 85       	ldd	r24, Y+12	; 0x0c
    351a:	9d 85       	ldd	r25, Y+13	; 0x0d
    351c:	89 2b       	or	r24, r25
    351e:	71 f0       	breq	.+28     	; 0x353c <xTaskGenericNotify+0x60>
    3520:	8a 81       	ldd	r24, Y+2	; 0x02
    3522:	9b 81       	ldd	r25, Y+3	; 0x03
    3524:	fc 01       	movw	r30, r24
    3526:	87 a1       	ldd	r24, Z+39	; 0x27
    3528:	90 a5       	ldd	r25, Z+40	; 0x28
    352a:	a1 a5       	ldd	r26, Z+41	; 0x29
    352c:	b2 a5       	ldd	r27, Z+42	; 0x2a
    352e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3530:	3d 85       	ldd	r19, Y+13	; 0x0d
    3532:	f9 01       	movw	r30, r18
    3534:	80 83       	st	Z, r24
    3536:	91 83       	std	Z+1, r25	; 0x01
    3538:	a2 83       	std	Z+2, r26	; 0x02
    353a:	b3 83       	std	Z+3, r27	; 0x03
    353c:	8a 81       	ldd	r24, Y+2	; 0x02
    353e:	9b 81       	ldd	r25, Y+3	; 0x03
    3540:	fc 01       	movw	r30, r24
    3542:	83 a5       	ldd	r24, Z+43	; 0x2b
    3544:	8c 83       	std	Y+4, r24	; 0x04
    3546:	8a 81       	ldd	r24, Y+2	; 0x02
    3548:	9b 81       	ldd	r25, Y+3	; 0x03
    354a:	22 e0       	ldi	r18, 0x02	; 2
    354c:	fc 01       	movw	r30, r24
    354e:	23 a7       	std	Z+43, r18	; 0x2b
    3550:	8b 85       	ldd	r24, Y+11	; 0x0b
    3552:	88 2f       	mov	r24, r24
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	82 30       	cpi	r24, 0x02	; 2
    3558:	91 05       	cpc	r25, r1
    355a:	31 f1       	breq	.+76     	; 0x35a8 <xTaskGenericNotify+0xcc>
    355c:	83 30       	cpi	r24, 0x03	; 3
    355e:	91 05       	cpc	r25, r1
    3560:	34 f4       	brge	.+12     	; 0x356e <xTaskGenericNotify+0x92>
    3562:	00 97       	sbiw	r24, 0x00	; 0
    3564:	09 f4       	brne	.+2      	; 0x3568 <xTaskGenericNotify+0x8c>
    3566:	4f c0       	rjmp	.+158    	; 0x3606 <xTaskGenericNotify+0x12a>
    3568:	01 97       	sbiw	r24, 0x01	; 1
    356a:	39 f0       	breq	.+14     	; 0x357a <xTaskGenericNotify+0x9e>
    356c:	4d c0       	rjmp	.+154    	; 0x3608 <xTaskGenericNotify+0x12c>
    356e:	83 30       	cpi	r24, 0x03	; 3
    3570:	91 05       	cpc	r25, r1
    3572:	61 f1       	breq	.+88     	; 0x35cc <xTaskGenericNotify+0xf0>
    3574:	04 97       	sbiw	r24, 0x04	; 4
    3576:	b1 f1       	breq	.+108    	; 0x35e4 <xTaskGenericNotify+0x108>
    3578:	47 c0       	rjmp	.+142    	; 0x3608 <xTaskGenericNotify+0x12c>
    357a:	8a 81       	ldd	r24, Y+2	; 0x02
    357c:	9b 81       	ldd	r25, Y+3	; 0x03
    357e:	fc 01       	movw	r30, r24
    3580:	27 a1       	ldd	r18, Z+39	; 0x27
    3582:	30 a5       	ldd	r19, Z+40	; 0x28
    3584:	41 a5       	ldd	r20, Z+41	; 0x29
    3586:	52 a5       	ldd	r21, Z+42	; 0x2a
    3588:	8f 81       	ldd	r24, Y+7	; 0x07
    358a:	98 85       	ldd	r25, Y+8	; 0x08
    358c:	a9 85       	ldd	r26, Y+9	; 0x09
    358e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3590:	82 2b       	or	r24, r18
    3592:	93 2b       	or	r25, r19
    3594:	a4 2b       	or	r26, r20
    3596:	b5 2b       	or	r27, r21
    3598:	2a 81       	ldd	r18, Y+2	; 0x02
    359a:	3b 81       	ldd	r19, Y+3	; 0x03
    359c:	f9 01       	movw	r30, r18
    359e:	87 a3       	std	Z+39, r24	; 0x27
    35a0:	90 a7       	std	Z+40, r25	; 0x28
    35a2:	a1 a7       	std	Z+41, r26	; 0x29
    35a4:	b2 a7       	std	Z+42, r27	; 0x2a
    35a6:	30 c0       	rjmp	.+96     	; 0x3608 <xTaskGenericNotify+0x12c>
    35a8:	8a 81       	ldd	r24, Y+2	; 0x02
    35aa:	9b 81       	ldd	r25, Y+3	; 0x03
    35ac:	fc 01       	movw	r30, r24
    35ae:	87 a1       	ldd	r24, Z+39	; 0x27
    35b0:	90 a5       	ldd	r25, Z+40	; 0x28
    35b2:	a1 a5       	ldd	r26, Z+41	; 0x29
    35b4:	b2 a5       	ldd	r27, Z+42	; 0x2a
    35b6:	01 96       	adiw	r24, 0x01	; 1
    35b8:	a1 1d       	adc	r26, r1
    35ba:	b1 1d       	adc	r27, r1
    35bc:	2a 81       	ldd	r18, Y+2	; 0x02
    35be:	3b 81       	ldd	r19, Y+3	; 0x03
    35c0:	f9 01       	movw	r30, r18
    35c2:	87 a3       	std	Z+39, r24	; 0x27
    35c4:	90 a7       	std	Z+40, r25	; 0x28
    35c6:	a1 a7       	std	Z+41, r26	; 0x29
    35c8:	b2 a7       	std	Z+42, r27	; 0x2a
    35ca:	1e c0       	rjmp	.+60     	; 0x3608 <xTaskGenericNotify+0x12c>
    35cc:	2a 81       	ldd	r18, Y+2	; 0x02
    35ce:	3b 81       	ldd	r19, Y+3	; 0x03
    35d0:	8f 81       	ldd	r24, Y+7	; 0x07
    35d2:	98 85       	ldd	r25, Y+8	; 0x08
    35d4:	a9 85       	ldd	r26, Y+9	; 0x09
    35d6:	ba 85       	ldd	r27, Y+10	; 0x0a
    35d8:	f9 01       	movw	r30, r18
    35da:	87 a3       	std	Z+39, r24	; 0x27
    35dc:	90 a7       	std	Z+40, r25	; 0x28
    35de:	a1 a7       	std	Z+41, r26	; 0x29
    35e0:	b2 a7       	std	Z+42, r27	; 0x2a
    35e2:	12 c0       	rjmp	.+36     	; 0x3608 <xTaskGenericNotify+0x12c>
    35e4:	8c 81       	ldd	r24, Y+4	; 0x04
    35e6:	82 30       	cpi	r24, 0x02	; 2
    35e8:	61 f0       	breq	.+24     	; 0x3602 <xTaskGenericNotify+0x126>
    35ea:	2a 81       	ldd	r18, Y+2	; 0x02
    35ec:	3b 81       	ldd	r19, Y+3	; 0x03
    35ee:	8f 81       	ldd	r24, Y+7	; 0x07
    35f0:	98 85       	ldd	r25, Y+8	; 0x08
    35f2:	a9 85       	ldd	r26, Y+9	; 0x09
    35f4:	ba 85       	ldd	r27, Y+10	; 0x0a
    35f6:	f9 01       	movw	r30, r18
    35f8:	87 a3       	std	Z+39, r24	; 0x27
    35fa:	90 a7       	std	Z+40, r25	; 0x28
    35fc:	a1 a7       	std	Z+41, r26	; 0x29
    35fe:	b2 a7       	std	Z+42, r27	; 0x2a
    3600:	03 c0       	rjmp	.+6      	; 0x3608 <xTaskGenericNotify+0x12c>
    3602:	19 82       	std	Y+1, r1	; 0x01
    3604:	01 c0       	rjmp	.+2      	; 0x3608 <xTaskGenericNotify+0x12c>
    3606:	00 00       	nop
    3608:	8c 81       	ldd	r24, Y+4	; 0x04
    360a:	81 30       	cpi	r24, 0x01	; 1
    360c:	b9 f5       	brne	.+110    	; 0x367c <xTaskGenericNotify+0x1a0>
    360e:	8a 81       	ldd	r24, Y+2	; 0x02
    3610:	9b 81       	ldd	r25, Y+3	; 0x03
    3612:	02 96       	adiw	r24, 0x02	; 2
    3614:	0e 94 af 08 	call	0x115e	; 0x115e <uxListRemove>
    3618:	8a 81       	ldd	r24, Y+2	; 0x02
    361a:	9b 81       	ldd	r25, Y+3	; 0x03
    361c:	fc 01       	movw	r30, r24
    361e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3620:	80 91 67 2d 	lds	r24, 0x2D67	; 0x802d67 <uxTopReadyPriority>
    3624:	89 17       	cp	r24, r25
    3626:	30 f4       	brcc	.+12     	; 0x3634 <xTaskGenericNotify+0x158>
    3628:	8a 81       	ldd	r24, Y+2	; 0x02
    362a:	9b 81       	ldd	r25, Y+3	; 0x03
    362c:	fc 01       	movw	r30, r24
    362e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3630:	80 93 67 2d 	sts	0x2D67, r24	; 0x802d67 <uxTopReadyPriority>
    3634:	8a 81       	ldd	r24, Y+2	; 0x02
    3636:	9b 81       	ldd	r25, Y+3	; 0x03
    3638:	ac 01       	movw	r20, r24
    363a:	4e 5f       	subi	r20, 0xFE	; 254
    363c:	5f 4f       	sbci	r21, 0xFF	; 255
    363e:	8a 81       	ldd	r24, Y+2	; 0x02
    3640:	9b 81       	ldd	r25, Y+3	; 0x03
    3642:	fc 01       	movw	r30, r24
    3644:	82 8d       	ldd	r24, Z+26	; 0x1a
    3646:	28 2f       	mov	r18, r24
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	6b e0       	ldi	r22, 0x0B	; 11
    364c:	62 9f       	mul	r22, r18
    364e:	c0 01       	movw	r24, r0
    3650:	63 9f       	mul	r22, r19
    3652:	90 0d       	add	r25, r0
    3654:	11 24       	eor	r1, r1
    3656:	8a 5f       	subi	r24, 0xFA	; 250
    3658:	92 4d       	sbci	r25, 0xD2	; 210
    365a:	ba 01       	movw	r22, r20
    365c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <vListInsertEnd>
    3660:	8a 81       	ldd	r24, Y+2	; 0x02
    3662:	9b 81       	ldd	r25, Y+3	; 0x03
    3664:	fc 01       	movw	r30, r24
    3666:	22 8d       	ldd	r18, Z+26	; 0x1a
    3668:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    366c:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    3670:	fc 01       	movw	r30, r24
    3672:	82 8d       	ldd	r24, Z+26	; 0x1a
    3674:	82 17       	cp	r24, r18
    3676:	10 f4       	brcc	.+4      	; 0x367c <xTaskGenericNotify+0x1a0>
    3678:	0e 94 2d 0b 	call	0x165a	; 0x165a <vPortYield>
    367c:	ff 91       	pop	r31
    367e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3682:	89 81       	ldd	r24, Y+1	; 0x01
    3684:	2d 96       	adiw	r28, 0x0d	; 13
    3686:	cd bf       	out	0x3d, r28	; 61
    3688:	de bf       	out	0x3e, r29	; 62
    368a:	df 91       	pop	r29
    368c:	cf 91       	pop	r28
    368e:	1f 91       	pop	r17
    3690:	0f 91       	pop	r16
    3692:	08 95       	ret

00003694 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3694:	cf 93       	push	r28
    3696:	df 93       	push	r29
    3698:	cd b7       	in	r28, 0x3d	; 61
    369a:	de b7       	in	r29, 0x3e	; 62
    369c:	2d 97       	sbiw	r28, 0x0d	; 13
    369e:	cd bf       	out	0x3d, r28	; 61
    36a0:	de bf       	out	0x3e, r29	; 62
    36a2:	69 87       	std	Y+9, r22	; 0x09
    36a4:	7a 87       	std	Y+10, r23	; 0x0a
    36a6:	8b 87       	std	Y+11, r24	; 0x0b
    36a8:	9c 87       	std	Y+12, r25	; 0x0c
    36aa:	4d 87       	std	Y+13, r20	; 0x0d
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    36ac:	80 91 63 2d 	lds	r24, 0x2D63	; 0x802d63 <xTickCount>
    36b0:	90 91 64 2d 	lds	r25, 0x2D64	; 0x802d64 <xTickCount+0x1>
    36b4:	a0 91 65 2d 	lds	r26, 0x2D65	; 0x802d65 <xTickCount+0x2>
    36b8:	b0 91 66 2d 	lds	r27, 0x2D66	; 0x802d66 <xTickCount+0x3>
    36bc:	89 83       	std	Y+1, r24	; 0x01
    36be:	9a 83       	std	Y+2, r25	; 0x02
    36c0:	ab 83       	std	Y+3, r26	; 0x03
    36c2:	bc 83       	std	Y+4, r27	; 0x04
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    36c4:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    36c8:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    36cc:	02 96       	adiw	r24, 0x02	; 2
    36ce:	0e 94 af 08 	call	0x115e	; 0x115e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    36d2:	89 85       	ldd	r24, Y+9	; 0x09
    36d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36d6:	ab 85       	ldd	r26, Y+11	; 0x0b
    36d8:	bc 85       	ldd	r27, Y+12	; 0x0c
    36da:	8f 3f       	cpi	r24, 0xFF	; 255
    36dc:	9f 4f       	sbci	r25, 0xFF	; 255
    36de:	af 4f       	sbci	r26, 0xFF	; 255
    36e0:	bf 4f       	sbci	r27, 0xFF	; 255
    36e2:	71 f4       	brne	.+28     	; 0x3700 <prvAddCurrentTaskToDelayedList+0x6c>
    36e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36e6:	88 23       	and	r24, r24
    36e8:	59 f0       	breq	.+22     	; 0x3700 <prvAddCurrentTaskToDelayedList+0x6c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    36ea:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    36ee:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    36f2:	02 96       	adiw	r24, 0x02	; 2
    36f4:	bc 01       	movw	r22, r24
    36f6:	87 e5       	ldi	r24, 0x57	; 87
    36f8:	9d e2       	ldi	r25, 0x2D	; 45
    36fa:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    36fe:	64 c0       	rjmp	.+200    	; 0x37c8 <prvAddCurrentTaskToDelayedList+0x134>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    3700:	29 81       	ldd	r18, Y+1	; 0x01
    3702:	3a 81       	ldd	r19, Y+2	; 0x02
    3704:	4b 81       	ldd	r20, Y+3	; 0x03
    3706:	5c 81       	ldd	r21, Y+4	; 0x04
    3708:	89 85       	ldd	r24, Y+9	; 0x09
    370a:	9a 85       	ldd	r25, Y+10	; 0x0a
    370c:	ab 85       	ldd	r26, Y+11	; 0x0b
    370e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3710:	82 0f       	add	r24, r18
    3712:	93 1f       	adc	r25, r19
    3714:	a4 1f       	adc	r26, r20
    3716:	b5 1f       	adc	r27, r21
    3718:	8d 83       	std	Y+5, r24	; 0x05
    371a:	9e 83       	std	Y+6, r25	; 0x06
    371c:	af 83       	std	Y+7, r26	; 0x07
    371e:	b8 87       	std	Y+8, r27	; 0x08

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    3720:	20 91 04 2d 	lds	r18, 0x2D04	; 0x802d04 <pxCurrentTCB>
    3724:	30 91 05 2d 	lds	r19, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    3728:	8d 81       	ldd	r24, Y+5	; 0x05
    372a:	9e 81       	ldd	r25, Y+6	; 0x06
    372c:	af 81       	ldd	r26, Y+7	; 0x07
    372e:	b8 85       	ldd	r27, Y+8	; 0x08
    3730:	f9 01       	movw	r30, r18
    3732:	82 83       	std	Z+2, r24	; 0x02
    3734:	93 83       	std	Z+3, r25	; 0x03
    3736:	a4 83       	std	Z+4, r26	; 0x04
    3738:	b5 83       	std	Z+5, r27	; 0x05

			if( xTimeToWake < xConstTickCount )
    373a:	2d 81       	ldd	r18, Y+5	; 0x05
    373c:	3e 81       	ldd	r19, Y+6	; 0x06
    373e:	4f 81       	ldd	r20, Y+7	; 0x07
    3740:	58 85       	ldd	r21, Y+8	; 0x08
    3742:	89 81       	ldd	r24, Y+1	; 0x01
    3744:	9a 81       	ldd	r25, Y+2	; 0x02
    3746:	ab 81       	ldd	r26, Y+3	; 0x03
    3748:	bc 81       	ldd	r27, Y+4	; 0x04
    374a:	28 17       	cp	r18, r24
    374c:	39 07       	cpc	r19, r25
    374e:	4a 07       	cpc	r20, r26
    3750:	5b 07       	cpc	r21, r27
    3752:	78 f4       	brcc	.+30     	; 0x3772 <prvAddCurrentTaskToDelayedList+0xde>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3754:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    3758:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    375c:	9c 01       	movw	r18, r24
    375e:	2e 5f       	subi	r18, 0xFE	; 254
    3760:	3f 4f       	sbci	r19, 0xFF	; 255
    3762:	80 91 4a 2d 	lds	r24, 0x2D4A	; 0x802d4a <pxOverflowDelayedTaskList>
    3766:	90 91 4b 2d 	lds	r25, 0x2D4B	; 0x802d4b <pxOverflowDelayedTaskList+0x1>
    376a:	b9 01       	movw	r22, r18
    376c:	0e 94 2e 08 	call	0x105c	; 0x105c <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3770:	2b c0       	rjmp	.+86     	; 0x37c8 <prvAddCurrentTaskToDelayedList+0x134>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3772:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <pxCurrentTCB>
    3776:	90 91 05 2d 	lds	r25, 0x2D05	; 0x802d05 <pxCurrentTCB+0x1>
    377a:	9c 01       	movw	r18, r24
    377c:	2e 5f       	subi	r18, 0xFE	; 254
    377e:	3f 4f       	sbci	r19, 0xFF	; 255
    3780:	80 91 48 2d 	lds	r24, 0x2D48	; 0x802d48 <pxDelayedTaskList>
    3784:	90 91 49 2d 	lds	r25, 0x2D49	; 0x802d49 <pxDelayedTaskList+0x1>
    3788:	b9 01       	movw	r22, r18
    378a:	0e 94 2e 08 	call	0x105c	; 0x105c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    378e:	80 91 6d 2d 	lds	r24, 0x2D6D	; 0x802d6d <xNextTaskUnblockTime>
    3792:	90 91 6e 2d 	lds	r25, 0x2D6E	; 0x802d6e <xNextTaskUnblockTime+0x1>
    3796:	a0 91 6f 2d 	lds	r26, 0x2D6F	; 0x802d6f <xNextTaskUnblockTime+0x2>
    379a:	b0 91 70 2d 	lds	r27, 0x2D70	; 0x802d70 <xNextTaskUnblockTime+0x3>
    379e:	2d 81       	ldd	r18, Y+5	; 0x05
    37a0:	3e 81       	ldd	r19, Y+6	; 0x06
    37a2:	4f 81       	ldd	r20, Y+7	; 0x07
    37a4:	58 85       	ldd	r21, Y+8	; 0x08
    37a6:	28 17       	cp	r18, r24
    37a8:	39 07       	cpc	r19, r25
    37aa:	4a 07       	cpc	r20, r26
    37ac:	5b 07       	cpc	r21, r27
    37ae:	60 f4       	brcc	.+24     	; 0x37c8 <prvAddCurrentTaskToDelayedList+0x134>
				{
					xNextTaskUnblockTime = xTimeToWake;
    37b0:	8d 81       	ldd	r24, Y+5	; 0x05
    37b2:	9e 81       	ldd	r25, Y+6	; 0x06
    37b4:	af 81       	ldd	r26, Y+7	; 0x07
    37b6:	b8 85       	ldd	r27, Y+8	; 0x08
    37b8:	80 93 6d 2d 	sts	0x2D6D, r24	; 0x802d6d <xNextTaskUnblockTime>
    37bc:	90 93 6e 2d 	sts	0x2D6E, r25	; 0x802d6e <xNextTaskUnblockTime+0x1>
    37c0:	a0 93 6f 2d 	sts	0x2D6F, r26	; 0x802d6f <xNextTaskUnblockTime+0x2>
    37c4:	b0 93 70 2d 	sts	0x2D70, r27	; 0x802d70 <xNextTaskUnblockTime+0x3>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    37c8:	00 00       	nop
    37ca:	2d 96       	adiw	r28, 0x0d	; 13
    37cc:	cd bf       	out	0x3d, r28	; 61
    37ce:	de bf       	out	0x3e, r29	; 62
    37d0:	df 91       	pop	r29
    37d2:	cf 91       	pop	r28
    37d4:	08 95       	ret

000037d6 <xTimerCreateTimerTask>:
	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
}
    37d6:	ef 92       	push	r14
    37d8:	ff 92       	push	r15
    37da:	0f 93       	push	r16
    37dc:	cf 93       	push	r28
    37de:	df 93       	push	r29
    37e0:	1f 92       	push	r1
    37e2:	cd b7       	in	r28, 0x3d	; 61
    37e4:	de b7       	in	r29, 0x3e	; 62
    37e6:	19 82       	std	Y+1, r1	; 0x01
    37e8:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <prvCheckForValidListAndQueue>
    37ec:	80 91 8e 2d 	lds	r24, 0x2D8E	; 0x802d8e <xTimerQueue>
    37f0:	90 91 8f 2d 	lds	r25, 0x2D8F	; 0x802d8f <xTimerQueue+0x1>
    37f4:	89 2b       	or	r24, r25
    37f6:	91 f0       	breq	.+36     	; 0x381c <xTimerCreateTimerTask+0x46>
    37f8:	0f 2e       	mov	r0, r31
    37fa:	f0 e9       	ldi	r31, 0x90	; 144
    37fc:	ef 2e       	mov	r14, r31
    37fe:	fd e2       	ldi	r31, 0x2D	; 45
    3800:	ff 2e       	mov	r15, r31
    3802:	f0 2d       	mov	r31, r0
    3804:	03 e0       	ldi	r16, 0x03	; 3
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	48 ec       	ldi	r20, 0xC8	; 200
    380c:	50 e0       	ldi	r21, 0x00	; 0
    380e:	65 e0       	ldi	r22, 0x05	; 5
    3810:	70 e2       	ldi	r23, 0x20	; 32
    3812:	81 e0       	ldi	r24, 0x01	; 1
    3814:	9d e1       	ldi	r25, 0x1D	; 29
    3816:	0e 94 94 11 	call	0x2328	; 0x2328 <xTaskCreate>
    381a:	89 83       	std	Y+1, r24	; 0x01
    381c:	89 81       	ldd	r24, Y+1	; 0x01
    381e:	0f 90       	pop	r0
    3820:	df 91       	pop	r29
    3822:	cf 91       	pop	r28
    3824:	0f 91       	pop	r16
    3826:	ff 90       	pop	r15
    3828:	ef 90       	pop	r14
    382a:	08 95       	ret

0000382c <xTimerGenericCommand>:
    382c:	cf 92       	push	r12
    382e:	df 92       	push	r13
    3830:	ef 92       	push	r14
    3832:	ff 92       	push	r15
    3834:	0f 93       	push	r16
    3836:	1f 93       	push	r17
    3838:	cf 93       	push	r28
    383a:	df 93       	push	r29
    383c:	cd b7       	in	r28, 0x3d	; 61
    383e:	de b7       	in	r29, 0x3e	; 62
    3840:	67 97       	sbiw	r28, 0x17	; 23
    3842:	cd bf       	out	0x3d, r28	; 61
    3844:	de bf       	out	0x3e, r29	; 62
    3846:	8b 87       	std	Y+11, r24	; 0x0b
    3848:	9c 87       	std	Y+12, r25	; 0x0c
    384a:	6d 87       	std	Y+13, r22	; 0x0d
    384c:	2e 87       	std	Y+14, r18	; 0x0e
    384e:	3f 87       	std	Y+15, r19	; 0x0f
    3850:	48 8b       	std	Y+16, r20	; 0x10
    3852:	59 8b       	std	Y+17, r21	; 0x11
    3854:	0a 8b       	std	Y+18, r16	; 0x12
    3856:	1b 8b       	std	Y+19, r17	; 0x13
    3858:	cc 8a       	std	Y+20, r12	; 0x14
    385a:	dd 8a       	std	Y+21, r13	; 0x15
    385c:	ee 8a       	std	Y+22, r14	; 0x16
    385e:	ff 8a       	std	Y+23, r15	; 0x17
    3860:	19 82       	std	Y+1, r1	; 0x01
    3862:	80 91 8e 2d 	lds	r24, 0x2D8E	; 0x802d8e <xTimerQueue>
    3866:	90 91 8f 2d 	lds	r25, 0x2D8F	; 0x802d8f <xTimerQueue+0x1>
    386a:	89 2b       	or	r24, r25
    386c:	09 f4       	brne	.+2      	; 0x3870 <xTimerGenericCommand+0x44>
    386e:	44 c0       	rjmp	.+136    	; 0x38f8 <xTimerGenericCommand+0xcc>
    3870:	8d 85       	ldd	r24, Y+13	; 0x0d
    3872:	8a 83       	std	Y+2, r24	; 0x02
    3874:	8e 85       	ldd	r24, Y+14	; 0x0e
    3876:	9f 85       	ldd	r25, Y+15	; 0x0f
    3878:	a8 89       	ldd	r26, Y+16	; 0x10
    387a:	b9 89       	ldd	r27, Y+17	; 0x11
    387c:	8b 83       	std	Y+3, r24	; 0x03
    387e:	9c 83       	std	Y+4, r25	; 0x04
    3880:	ad 83       	std	Y+5, r26	; 0x05
    3882:	be 83       	std	Y+6, r27	; 0x06
    3884:	8b 85       	ldd	r24, Y+11	; 0x0b
    3886:	9c 85       	ldd	r25, Y+12	; 0x0c
    3888:	8f 83       	std	Y+7, r24	; 0x07
    388a:	98 87       	std	Y+8, r25	; 0x08
    388c:	8d 85       	ldd	r24, Y+13	; 0x0d
    388e:	86 30       	cpi	r24, 0x06	; 6
    3890:	34 f5       	brge	.+76     	; 0x38de <xTimerGenericCommand+0xb2>
    3892:	0e 94 59 19 	call	0x32b2	; 0x32b2 <xTaskGetSchedulerState>
    3896:	82 30       	cpi	r24, 0x02	; 2
    3898:	99 f4       	brne	.+38     	; 0x38c0 <xTimerGenericCommand+0x94>
    389a:	e0 91 8e 2d 	lds	r30, 0x2D8E	; 0x802d8e <xTimerQueue>
    389e:	f0 91 8f 2d 	lds	r31, 0x2D8F	; 0x802d8f <xTimerQueue+0x1>
    38a2:	8c 89       	ldd	r24, Y+20	; 0x14
    38a4:	9d 89       	ldd	r25, Y+21	; 0x15
    38a6:	ae 89       	ldd	r26, Y+22	; 0x16
    38a8:	bf 89       	ldd	r27, Y+23	; 0x17
    38aa:	be 01       	movw	r22, r28
    38ac:	6e 5f       	subi	r22, 0xFE	; 254
    38ae:	7f 4f       	sbci	r23, 0xFF	; 255
    38b0:	00 e0       	ldi	r16, 0x00	; 0
    38b2:	9c 01       	movw	r18, r24
    38b4:	ad 01       	movw	r20, r26
    38b6:	cf 01       	movw	r24, r30
    38b8:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <xQueueGenericSend>
    38bc:	89 83       	std	Y+1, r24	; 0x01
    38be:	1c c0       	rjmp	.+56     	; 0x38f8 <xTimerGenericCommand+0xcc>
    38c0:	80 91 8e 2d 	lds	r24, 0x2D8E	; 0x802d8e <xTimerQueue>
    38c4:	90 91 8f 2d 	lds	r25, 0x2D8F	; 0x802d8f <xTimerQueue+0x1>
    38c8:	be 01       	movw	r22, r28
    38ca:	6e 5f       	subi	r22, 0xFE	; 254
    38cc:	7f 4f       	sbci	r23, 0xFF	; 255
    38ce:	00 e0       	ldi	r16, 0x00	; 0
    38d0:	20 e0       	ldi	r18, 0x00	; 0
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	a9 01       	movw	r20, r18
    38d6:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <xQueueGenericSend>
    38da:	89 83       	std	Y+1, r24	; 0x01
    38dc:	0d c0       	rjmp	.+26     	; 0x38f8 <xTimerGenericCommand+0xcc>
    38de:	80 91 8e 2d 	lds	r24, 0x2D8E	; 0x802d8e <xTimerQueue>
    38e2:	90 91 8f 2d 	lds	r25, 0x2D8F	; 0x802d8f <xTimerQueue+0x1>
    38e6:	4a 89       	ldd	r20, Y+18	; 0x12
    38e8:	5b 89       	ldd	r21, Y+19	; 0x13
    38ea:	be 01       	movw	r22, r28
    38ec:	6e 5f       	subi	r22, 0xFE	; 254
    38ee:	7f 4f       	sbci	r23, 0xFF	; 255
    38f0:	20 e0       	ldi	r18, 0x00	; 0
    38f2:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <xQueueGenericSendFromISR>
    38f6:	89 83       	std	Y+1, r24	; 0x01
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	67 96       	adiw	r28, 0x17	; 23
    38fc:	cd bf       	out	0x3d, r28	; 61
    38fe:	de bf       	out	0x3e, r29	; 62
    3900:	df 91       	pop	r29
    3902:	cf 91       	pop	r28
    3904:	1f 91       	pop	r17
    3906:	0f 91       	pop	r16
    3908:	ff 90       	pop	r15
    390a:	ef 90       	pop	r14
    390c:	df 90       	pop	r13
    390e:	cf 90       	pop	r12
    3910:	08 95       	ret

00003912 <prvProcessExpiredTimer>:
    3912:	cf 92       	push	r12
    3914:	df 92       	push	r13
    3916:	ef 92       	push	r14
    3918:	ff 92       	push	r15
    391a:	0f 93       	push	r16
    391c:	1f 93       	push	r17
    391e:	cf 93       	push	r28
    3920:	df 93       	push	r29
    3922:	cd b7       	in	r28, 0x3d	; 61
    3924:	de b7       	in	r29, 0x3e	; 62
    3926:	2b 97       	sbiw	r28, 0x0b	; 11
    3928:	cd bf       	out	0x3d, r28	; 61
    392a:	de bf       	out	0x3e, r29	; 62
    392c:	6c 83       	std	Y+4, r22	; 0x04
    392e:	7d 83       	std	Y+5, r23	; 0x05
    3930:	8e 83       	std	Y+6, r24	; 0x06
    3932:	9f 83       	std	Y+7, r25	; 0x07
    3934:	28 87       	std	Y+8, r18	; 0x08
    3936:	39 87       	std	Y+9, r19	; 0x09
    3938:	4a 87       	std	Y+10, r20	; 0x0a
    393a:	5b 87       	std	Y+11, r21	; 0x0b
    393c:	80 91 8a 2d 	lds	r24, 0x2D8A	; 0x802d8a <pxCurrentTimerList>
    3940:	90 91 8b 2d 	lds	r25, 0x2D8B	; 0x802d8b <pxCurrentTimerList+0x1>
    3944:	fc 01       	movw	r30, r24
    3946:	87 81       	ldd	r24, Z+7	; 0x07
    3948:	90 85       	ldd	r25, Z+8	; 0x08
    394a:	fc 01       	movw	r30, r24
    394c:	80 85       	ldd	r24, Z+8	; 0x08
    394e:	91 85       	ldd	r25, Z+9	; 0x09
    3950:	89 83       	std	Y+1, r24	; 0x01
    3952:	9a 83       	std	Y+2, r25	; 0x02
    3954:	89 81       	ldd	r24, Y+1	; 0x01
    3956:	9a 81       	ldd	r25, Y+2	; 0x02
    3958:	02 96       	adiw	r24, 0x02	; 2
    395a:	0e 94 af 08 	call	0x115e	; 0x115e <uxListRemove>
    395e:	89 81       	ldd	r24, Y+1	; 0x01
    3960:	9a 81       	ldd	r25, Y+2	; 0x02
    3962:	fc 01       	movw	r30, r24
    3964:	82 89       	ldd	r24, Z+18	; 0x12
    3966:	81 30       	cpi	r24, 0x01	; 1
    3968:	b1 f5       	brne	.+108    	; 0x39d6 <prvProcessExpiredTimer+0xc4>
    396a:	89 81       	ldd	r24, Y+1	; 0x01
    396c:	9a 81       	ldd	r25, Y+2	; 0x02
    396e:	fc 01       	movw	r30, r24
    3970:	26 85       	ldd	r18, Z+14	; 0x0e
    3972:	37 85       	ldd	r19, Z+15	; 0x0f
    3974:	40 89       	ldd	r20, Z+16	; 0x10
    3976:	51 89       	ldd	r21, Z+17	; 0x11
    3978:	8c 81       	ldd	r24, Y+4	; 0x04
    397a:	9d 81       	ldd	r25, Y+5	; 0x05
    397c:	ae 81       	ldd	r26, Y+6	; 0x06
    397e:	bf 81       	ldd	r27, Y+7	; 0x07
    3980:	82 0f       	add	r24, r18
    3982:	93 1f       	adc	r25, r19
    3984:	a4 1f       	adc	r26, r20
    3986:	b5 1f       	adc	r27, r21
    3988:	ec 80       	ldd	r14, Y+4	; 0x04
    398a:	fd 80       	ldd	r15, Y+5	; 0x05
    398c:	0e 81       	ldd	r16, Y+6	; 0x06
    398e:	1f 81       	ldd	r17, Y+7	; 0x07
    3990:	28 85       	ldd	r18, Y+8	; 0x08
    3992:	39 85       	ldd	r19, Y+9	; 0x09
    3994:	4a 85       	ldd	r20, Y+10	; 0x0a
    3996:	5b 85       	ldd	r21, Y+11	; 0x0b
    3998:	e9 81       	ldd	r30, Y+1	; 0x01
    399a:	fa 81       	ldd	r31, Y+2	; 0x02
    399c:	67 01       	movw	r12, r14
    399e:	78 01       	movw	r14, r16
    39a0:	89 01       	movw	r16, r18
    39a2:	9a 01       	movw	r18, r20
    39a4:	ac 01       	movw	r20, r24
    39a6:	bd 01       	movw	r22, r26
    39a8:	cf 01       	movw	r24, r30
    39aa:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <prvInsertTimerInActiveList>
    39ae:	88 23       	and	r24, r24
    39b0:	91 f0       	breq	.+36     	; 0x39d6 <prvProcessExpiredTimer+0xc4>
    39b2:	8c 81       	ldd	r24, Y+4	; 0x04
    39b4:	9d 81       	ldd	r25, Y+5	; 0x05
    39b6:	ae 81       	ldd	r26, Y+6	; 0x06
    39b8:	bf 81       	ldd	r27, Y+7	; 0x07
    39ba:	e9 81       	ldd	r30, Y+1	; 0x01
    39bc:	fa 81       	ldd	r31, Y+2	; 0x02
    39be:	c1 2c       	mov	r12, r1
    39c0:	d1 2c       	mov	r13, r1
    39c2:	76 01       	movw	r14, r12
    39c4:	00 e0       	ldi	r16, 0x00	; 0
    39c6:	10 e0       	ldi	r17, 0x00	; 0
    39c8:	9c 01       	movw	r18, r24
    39ca:	ad 01       	movw	r20, r26
    39cc:	60 e0       	ldi	r22, 0x00	; 0
    39ce:	cf 01       	movw	r24, r30
    39d0:	0e 94 16 1c 	call	0x382c	; 0x382c <xTimerGenericCommand>
    39d4:	8b 83       	std	Y+3, r24	; 0x03
    39d6:	89 81       	ldd	r24, Y+1	; 0x01
    39d8:	9a 81       	ldd	r25, Y+2	; 0x02
    39da:	fc 01       	movw	r30, r24
    39dc:	25 89       	ldd	r18, Z+21	; 0x15
    39de:	36 89       	ldd	r19, Z+22	; 0x16
    39e0:	89 81       	ldd	r24, Y+1	; 0x01
    39e2:	9a 81       	ldd	r25, Y+2	; 0x02
    39e4:	f9 01       	movw	r30, r18
    39e6:	19 95       	eicall
    39e8:	00 00       	nop
    39ea:	2b 96       	adiw	r28, 0x0b	; 11
    39ec:	cd bf       	out	0x3d, r28	; 61
    39ee:	de bf       	out	0x3e, r29	; 62
    39f0:	df 91       	pop	r29
    39f2:	cf 91       	pop	r28
    39f4:	1f 91       	pop	r17
    39f6:	0f 91       	pop	r16
    39f8:	ff 90       	pop	r15
    39fa:	ef 90       	pop	r14
    39fc:	df 90       	pop	r13
    39fe:	cf 90       	pop	r12
    3a00:	08 95       	ret

00003a02 <prvTimerTask>:
    3a02:	cf 93       	push	r28
    3a04:	df 93       	push	r29
    3a06:	cd b7       	in	r28, 0x3d	; 61
    3a08:	de b7       	in	r29, 0x3e	; 62
    3a0a:	27 97       	sbiw	r28, 0x07	; 7
    3a0c:	cd bf       	out	0x3d, r28	; 61
    3a0e:	de bf       	out	0x3e, r29	; 62
    3a10:	8e 83       	std	Y+6, r24	; 0x06
    3a12:	9f 83       	std	Y+7, r25	; 0x07
    3a14:	ce 01       	movw	r24, r28
    3a16:	05 96       	adiw	r24, 0x05	; 5
    3a18:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <prvGetNextExpireTime>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22
    3a20:	89 83       	std	Y+1, r24	; 0x01
    3a22:	9a 83       	std	Y+2, r25	; 0x02
    3a24:	ab 83       	std	Y+3, r26	; 0x03
    3a26:	bc 83       	std	Y+4, r27	; 0x04
    3a28:	2d 81       	ldd	r18, Y+5	; 0x05
    3a2a:	89 81       	ldd	r24, Y+1	; 0x01
    3a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a2e:	ab 81       	ldd	r26, Y+3	; 0x03
    3a30:	bc 81       	ldd	r27, Y+4	; 0x04
    3a32:	42 2f       	mov	r20, r18
    3a34:	bc 01       	movw	r22, r24
    3a36:	cd 01       	movw	r24, r26
    3a38:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <prvProcessTimerOrBlockTask>
    3a3c:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <prvProcessReceivedCommands>
    3a40:	e9 cf       	rjmp	.-46     	; 0x3a14 <prvTimerTask+0x12>

00003a42 <prvProcessTimerOrBlockTask>:
    3a42:	ef 92       	push	r14
    3a44:	ff 92       	push	r15
    3a46:	0f 93       	push	r16
    3a48:	1f 93       	push	r17
    3a4a:	cf 93       	push	r28
    3a4c:	df 93       	push	r29
    3a4e:	cd b7       	in	r28, 0x3d	; 61
    3a50:	de b7       	in	r29, 0x3e	; 62
    3a52:	2a 97       	sbiw	r28, 0x0a	; 10
    3a54:	cd bf       	out	0x3d, r28	; 61
    3a56:	de bf       	out	0x3e, r29	; 62
    3a58:	6e 83       	std	Y+6, r22	; 0x06
    3a5a:	7f 83       	std	Y+7, r23	; 0x07
    3a5c:	88 87       	std	Y+8, r24	; 0x08
    3a5e:	99 87       	std	Y+9, r25	; 0x09
    3a60:	4a 87       	std	Y+10, r20	; 0x0a
    3a62:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <vTaskSuspendAll>
    3a66:	ce 01       	movw	r24, r28
    3a68:	05 96       	adiw	r24, 0x05	; 5
    3a6a:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <prvSampleTimeNow>
    3a6e:	dc 01       	movw	r26, r24
    3a70:	cb 01       	movw	r24, r22
    3a72:	89 83       	std	Y+1, r24	; 0x01
    3a74:	9a 83       	std	Y+2, r25	; 0x02
    3a76:	ab 83       	std	Y+3, r26	; 0x03
    3a78:	bc 83       	std	Y+4, r27	; 0x04
    3a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7c:	88 23       	and	r24, r24
    3a7e:	09 f0       	breq	.+2      	; 0x3a82 <prvProcessTimerOrBlockTask+0x40>
    3a80:	4e c0       	rjmp	.+156    	; 0x3b1e <prvProcessTimerOrBlockTask+0xdc>
    3a82:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a84:	88 23       	and	r24, r24
    3a86:	e1 f4       	brne	.+56     	; 0x3ac0 <prvProcessTimerOrBlockTask+0x7e>
    3a88:	2e 81       	ldd	r18, Y+6	; 0x06
    3a8a:	3f 81       	ldd	r19, Y+7	; 0x07
    3a8c:	48 85       	ldd	r20, Y+8	; 0x08
    3a8e:	59 85       	ldd	r21, Y+9	; 0x09
    3a90:	89 81       	ldd	r24, Y+1	; 0x01
    3a92:	9a 81       	ldd	r25, Y+2	; 0x02
    3a94:	ab 81       	ldd	r26, Y+3	; 0x03
    3a96:	bc 81       	ldd	r27, Y+4	; 0x04
    3a98:	82 17       	cp	r24, r18
    3a9a:	93 07       	cpc	r25, r19
    3a9c:	a4 07       	cpc	r26, r20
    3a9e:	b5 07       	cpc	r27, r21
    3aa0:	78 f0       	brcs	.+30     	; 0x3ac0 <prvProcessTimerOrBlockTask+0x7e>
    3aa2:	0e 94 ee 13 	call	0x27dc	; 0x27dc <xTaskResumeAll>
    3aa6:	29 81       	ldd	r18, Y+1	; 0x01
    3aa8:	3a 81       	ldd	r19, Y+2	; 0x02
    3aaa:	4b 81       	ldd	r20, Y+3	; 0x03
    3aac:	5c 81       	ldd	r21, Y+4	; 0x04
    3aae:	8e 81       	ldd	r24, Y+6	; 0x06
    3ab0:	9f 81       	ldd	r25, Y+7	; 0x07
    3ab2:	a8 85       	ldd	r26, Y+8	; 0x08
    3ab4:	b9 85       	ldd	r27, Y+9	; 0x09
    3ab6:	bc 01       	movw	r22, r24
    3ab8:	cd 01       	movw	r24, r26
    3aba:	0e 94 89 1c 	call	0x3912	; 0x3912 <prvProcessExpiredTimer>
    3abe:	31 c0       	rjmp	.+98     	; 0x3b22 <prvProcessTimerOrBlockTask+0xe0>
    3ac0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ac2:	88 23       	and	r24, r24
    3ac4:	59 f0       	breq	.+22     	; 0x3adc <prvProcessTimerOrBlockTask+0x9a>
    3ac6:	80 91 8c 2d 	lds	r24, 0x2D8C	; 0x802d8c <pxOverflowTimerList>
    3aca:	90 91 8d 2d 	lds	r25, 0x2D8D	; 0x802d8d <pxOverflowTimerList+0x1>
    3ace:	fc 01       	movw	r30, r24
    3ad0:	90 81       	ld	r25, Z
    3ad2:	81 e0       	ldi	r24, 0x01	; 1
    3ad4:	99 23       	and	r25, r25
    3ad6:	09 f0       	breq	.+2      	; 0x3ada <prvProcessTimerOrBlockTask+0x98>
    3ad8:	80 e0       	ldi	r24, 0x00	; 0
    3ada:	8a 87       	std	Y+10, r24	; 0x0a
    3adc:	2e 81       	ldd	r18, Y+6	; 0x06
    3ade:	3f 81       	ldd	r19, Y+7	; 0x07
    3ae0:	48 85       	ldd	r20, Y+8	; 0x08
    3ae2:	59 85       	ldd	r21, Y+9	; 0x09
    3ae4:	89 81       	ldd	r24, Y+1	; 0x01
    3ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae8:	ab 81       	ldd	r26, Y+3	; 0x03
    3aea:	bc 81       	ldd	r27, Y+4	; 0x04
    3aec:	79 01       	movw	r14, r18
    3aee:	8a 01       	movw	r16, r20
    3af0:	e8 1a       	sub	r14, r24
    3af2:	f9 0a       	sbc	r15, r25
    3af4:	0a 0b       	sbc	r16, r26
    3af6:	1b 0b       	sbc	r17, r27
    3af8:	d8 01       	movw	r26, r16
    3afa:	c7 01       	movw	r24, r14
    3afc:	e0 91 8e 2d 	lds	r30, 0x2D8E	; 0x802d8e <xTimerQueue>
    3b00:	f0 91 8f 2d 	lds	r31, 0x2D8F	; 0x802d8f <xTimerQueue+0x1>
    3b04:	2a 85       	ldd	r18, Y+10	; 0x0a
    3b06:	ac 01       	movw	r20, r24
    3b08:	bd 01       	movw	r22, r26
    3b0a:	cf 01       	movw	r24, r30
    3b0c:	0e 94 46 11 	call	0x228c	; 0x228c <vQueueWaitForMessageRestricted>
    3b10:	0e 94 ee 13 	call	0x27dc	; 0x27dc <xTaskResumeAll>
    3b14:	88 23       	and	r24, r24
    3b16:	29 f4       	brne	.+10     	; 0x3b22 <prvProcessTimerOrBlockTask+0xe0>
    3b18:	0e 94 2d 0b 	call	0x165a	; 0x165a <vPortYield>
    3b1c:	02 c0       	rjmp	.+4      	; 0x3b22 <prvProcessTimerOrBlockTask+0xe0>
    3b1e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <xTaskResumeAll>
    3b22:	00 00       	nop
    3b24:	2a 96       	adiw	r28, 0x0a	; 10
    3b26:	cd bf       	out	0x3d, r28	; 61
    3b28:	de bf       	out	0x3e, r29	; 62
    3b2a:	df 91       	pop	r29
    3b2c:	cf 91       	pop	r28
    3b2e:	1f 91       	pop	r17
    3b30:	0f 91       	pop	r16
    3b32:	ff 90       	pop	r15
    3b34:	ef 90       	pop	r14
    3b36:	08 95       	ret

00003b38 <prvGetNextExpireTime>:
    3b38:	cf 93       	push	r28
    3b3a:	df 93       	push	r29
    3b3c:	00 d0       	rcall	.+0      	; 0x3b3e <prvGetNextExpireTime+0x6>
    3b3e:	00 d0       	rcall	.+0      	; 0x3b40 <prvGetNextExpireTime+0x8>
    3b40:	cd b7       	in	r28, 0x3d	; 61
    3b42:	de b7       	in	r29, 0x3e	; 62
    3b44:	8d 83       	std	Y+5, r24	; 0x05
    3b46:	9e 83       	std	Y+6, r25	; 0x06
    3b48:	80 91 8a 2d 	lds	r24, 0x2D8A	; 0x802d8a <pxCurrentTimerList>
    3b4c:	90 91 8b 2d 	lds	r25, 0x2D8B	; 0x802d8b <pxCurrentTimerList+0x1>
    3b50:	fc 01       	movw	r30, r24
    3b52:	90 81       	ld	r25, Z
    3b54:	81 e0       	ldi	r24, 0x01	; 1
    3b56:	99 23       	and	r25, r25
    3b58:	09 f0       	breq	.+2      	; 0x3b5c <prvGetNextExpireTime+0x24>
    3b5a:	80 e0       	ldi	r24, 0x00	; 0
    3b5c:	28 2f       	mov	r18, r24
    3b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b60:	9e 81       	ldd	r25, Y+6	; 0x06
    3b62:	fc 01       	movw	r30, r24
    3b64:	20 83       	st	Z, r18
    3b66:	8d 81       	ldd	r24, Y+5	; 0x05
    3b68:	9e 81       	ldd	r25, Y+6	; 0x06
    3b6a:	fc 01       	movw	r30, r24
    3b6c:	80 81       	ld	r24, Z
    3b6e:	88 23       	and	r24, r24
    3b70:	89 f4       	brne	.+34     	; 0x3b94 <prvGetNextExpireTime+0x5c>
    3b72:	80 91 8a 2d 	lds	r24, 0x2D8A	; 0x802d8a <pxCurrentTimerList>
    3b76:	90 91 8b 2d 	lds	r25, 0x2D8B	; 0x802d8b <pxCurrentTimerList+0x1>
    3b7a:	fc 01       	movw	r30, r24
    3b7c:	87 81       	ldd	r24, Z+7	; 0x07
    3b7e:	90 85       	ldd	r25, Z+8	; 0x08
    3b80:	fc 01       	movw	r30, r24
    3b82:	80 81       	ld	r24, Z
    3b84:	91 81       	ldd	r25, Z+1	; 0x01
    3b86:	a2 81       	ldd	r26, Z+2	; 0x02
    3b88:	b3 81       	ldd	r27, Z+3	; 0x03
    3b8a:	89 83       	std	Y+1, r24	; 0x01
    3b8c:	9a 83       	std	Y+2, r25	; 0x02
    3b8e:	ab 83       	std	Y+3, r26	; 0x03
    3b90:	bc 83       	std	Y+4, r27	; 0x04
    3b92:	04 c0       	rjmp	.+8      	; 0x3b9c <prvGetNextExpireTime+0x64>
    3b94:	19 82       	std	Y+1, r1	; 0x01
    3b96:	1a 82       	std	Y+2, r1	; 0x02
    3b98:	1b 82       	std	Y+3, r1	; 0x03
    3b9a:	1c 82       	std	Y+4, r1	; 0x04
    3b9c:	89 81       	ldd	r24, Y+1	; 0x01
    3b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba0:	ab 81       	ldd	r26, Y+3	; 0x03
    3ba2:	bc 81       	ldd	r27, Y+4	; 0x04
    3ba4:	bc 01       	movw	r22, r24
    3ba6:	cd 01       	movw	r24, r26
    3ba8:	26 96       	adiw	r28, 0x06	; 6
    3baa:	cd bf       	out	0x3d, r28	; 61
    3bac:	de bf       	out	0x3e, r29	; 62
    3bae:	df 91       	pop	r29
    3bb0:	cf 91       	pop	r28
    3bb2:	08 95       	ret

00003bb4 <prvSampleTimeNow>:
    3bb4:	cf 93       	push	r28
    3bb6:	df 93       	push	r29
    3bb8:	00 d0       	rcall	.+0      	; 0x3bba <prvSampleTimeNow+0x6>
    3bba:	00 d0       	rcall	.+0      	; 0x3bbc <prvSampleTimeNow+0x8>
    3bbc:	cd b7       	in	r28, 0x3d	; 61
    3bbe:	de b7       	in	r29, 0x3e	; 62
    3bc0:	8d 83       	std	Y+5, r24	; 0x05
    3bc2:	9e 83       	std	Y+6, r25	; 0x06
    3bc4:	0e 94 85 14 	call	0x290a	; 0x290a <xTaskGetTickCount>
    3bc8:	dc 01       	movw	r26, r24
    3bca:	cb 01       	movw	r24, r22
    3bcc:	89 83       	std	Y+1, r24	; 0x01
    3bce:	9a 83       	std	Y+2, r25	; 0x02
    3bd0:	ab 83       	std	Y+3, r26	; 0x03
    3bd2:	bc 83       	std	Y+4, r27	; 0x04
    3bd4:	80 91 92 2d 	lds	r24, 0x2D92	; 0x802d92 <xLastTime.4745>
    3bd8:	90 91 93 2d 	lds	r25, 0x2D93	; 0x802d93 <xLastTime.4745+0x1>
    3bdc:	a0 91 94 2d 	lds	r26, 0x2D94	; 0x802d94 <xLastTime.4745+0x2>
    3be0:	b0 91 95 2d 	lds	r27, 0x2D95	; 0x802d95 <xLastTime.4745+0x3>
    3be4:	29 81       	ldd	r18, Y+1	; 0x01
    3be6:	3a 81       	ldd	r19, Y+2	; 0x02
    3be8:	4b 81       	ldd	r20, Y+3	; 0x03
    3bea:	5c 81       	ldd	r21, Y+4	; 0x04
    3bec:	28 17       	cp	r18, r24
    3bee:	39 07       	cpc	r19, r25
    3bf0:	4a 07       	cpc	r20, r26
    3bf2:	5b 07       	cpc	r21, r27
    3bf4:	40 f4       	brcc	.+16     	; 0x3c06 <prvSampleTimeNow+0x52>
    3bf6:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <prvSwitchTimerLists>
    3bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    3bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    3bfe:	21 e0       	ldi	r18, 0x01	; 1
    3c00:	fc 01       	movw	r30, r24
    3c02:	20 83       	st	Z, r18
    3c04:	04 c0       	rjmp	.+8      	; 0x3c0e <prvSampleTimeNow+0x5a>
    3c06:	8d 81       	ldd	r24, Y+5	; 0x05
    3c08:	9e 81       	ldd	r25, Y+6	; 0x06
    3c0a:	fc 01       	movw	r30, r24
    3c0c:	10 82       	st	Z, r1
    3c0e:	89 81       	ldd	r24, Y+1	; 0x01
    3c10:	9a 81       	ldd	r25, Y+2	; 0x02
    3c12:	ab 81       	ldd	r26, Y+3	; 0x03
    3c14:	bc 81       	ldd	r27, Y+4	; 0x04
    3c16:	80 93 92 2d 	sts	0x2D92, r24	; 0x802d92 <xLastTime.4745>
    3c1a:	90 93 93 2d 	sts	0x2D93, r25	; 0x802d93 <xLastTime.4745+0x1>
    3c1e:	a0 93 94 2d 	sts	0x2D94, r26	; 0x802d94 <xLastTime.4745+0x2>
    3c22:	b0 93 95 2d 	sts	0x2D95, r27	; 0x802d95 <xLastTime.4745+0x3>
    3c26:	89 81       	ldd	r24, Y+1	; 0x01
    3c28:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2a:	ab 81       	ldd	r26, Y+3	; 0x03
    3c2c:	bc 81       	ldd	r27, Y+4	; 0x04
    3c2e:	bc 01       	movw	r22, r24
    3c30:	cd 01       	movw	r24, r26
    3c32:	26 96       	adiw	r28, 0x06	; 6
    3c34:	cd bf       	out	0x3d, r28	; 61
    3c36:	de bf       	out	0x3e, r29	; 62
    3c38:	df 91       	pop	r29
    3c3a:	cf 91       	pop	r28
    3c3c:	08 95       	ret

00003c3e <prvInsertTimerInActiveList>:
    3c3e:	cf 92       	push	r12
    3c40:	df 92       	push	r13
    3c42:	ef 92       	push	r14
    3c44:	ff 92       	push	r15
    3c46:	0f 93       	push	r16
    3c48:	1f 93       	push	r17
    3c4a:	cf 93       	push	r28
    3c4c:	df 93       	push	r29
    3c4e:	cd b7       	in	r28, 0x3d	; 61
    3c50:	de b7       	in	r29, 0x3e	; 62
    3c52:	2f 97       	sbiw	r28, 0x0f	; 15
    3c54:	cd bf       	out	0x3d, r28	; 61
    3c56:	de bf       	out	0x3e, r29	; 62
    3c58:	8a 83       	std	Y+2, r24	; 0x02
    3c5a:	9b 83       	std	Y+3, r25	; 0x03
    3c5c:	4c 83       	std	Y+4, r20	; 0x04
    3c5e:	5d 83       	std	Y+5, r21	; 0x05
    3c60:	6e 83       	std	Y+6, r22	; 0x06
    3c62:	7f 83       	std	Y+7, r23	; 0x07
    3c64:	08 87       	std	Y+8, r16	; 0x08
    3c66:	19 87       	std	Y+9, r17	; 0x09
    3c68:	2a 87       	std	Y+10, r18	; 0x0a
    3c6a:	3b 87       	std	Y+11, r19	; 0x0b
    3c6c:	cc 86       	std	Y+12, r12	; 0x0c
    3c6e:	dd 86       	std	Y+13, r13	; 0x0d
    3c70:	ee 86       	std	Y+14, r14	; 0x0e
    3c72:	ff 86       	std	Y+15, r15	; 0x0f
    3c74:	19 82       	std	Y+1, r1	; 0x01
    3c76:	2a 81       	ldd	r18, Y+2	; 0x02
    3c78:	3b 81       	ldd	r19, Y+3	; 0x03
    3c7a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c7c:	9d 81       	ldd	r25, Y+5	; 0x05
    3c7e:	ae 81       	ldd	r26, Y+6	; 0x06
    3c80:	bf 81       	ldd	r27, Y+7	; 0x07
    3c82:	f9 01       	movw	r30, r18
    3c84:	82 83       	std	Z+2, r24	; 0x02
    3c86:	93 83       	std	Z+3, r25	; 0x03
    3c88:	a4 83       	std	Z+4, r26	; 0x04
    3c8a:	b5 83       	std	Z+5, r27	; 0x05
    3c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c90:	2a 81       	ldd	r18, Y+2	; 0x02
    3c92:	3b 81       	ldd	r19, Y+3	; 0x03
    3c94:	fc 01       	movw	r30, r24
    3c96:	22 87       	std	Z+10, r18	; 0x0a
    3c98:	33 87       	std	Z+11, r19	; 0x0b
    3c9a:	2c 81       	ldd	r18, Y+4	; 0x04
    3c9c:	3d 81       	ldd	r19, Y+5	; 0x05
    3c9e:	4e 81       	ldd	r20, Y+6	; 0x06
    3ca0:	5f 81       	ldd	r21, Y+7	; 0x07
    3ca2:	88 85       	ldd	r24, Y+8	; 0x08
    3ca4:	99 85       	ldd	r25, Y+9	; 0x09
    3ca6:	aa 85       	ldd	r26, Y+10	; 0x0a
    3ca8:	bb 85       	ldd	r27, Y+11	; 0x0b
    3caa:	82 17       	cp	r24, r18
    3cac:	93 07       	cpc	r25, r19
    3cae:	a4 07       	cpc	r26, r20
    3cb0:	b5 07       	cpc	r27, r21
    3cb2:	40 f1       	brcs	.+80     	; 0x3d04 <prvInsertTimerInActiveList+0xc6>
    3cb4:	28 85       	ldd	r18, Y+8	; 0x08
    3cb6:	39 85       	ldd	r19, Y+9	; 0x09
    3cb8:	4a 85       	ldd	r20, Y+10	; 0x0a
    3cba:	5b 85       	ldd	r21, Y+11	; 0x0b
    3cbc:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cbe:	9d 85       	ldd	r25, Y+13	; 0x0d
    3cc0:	ae 85       	ldd	r26, Y+14	; 0x0e
    3cc2:	bf 85       	ldd	r27, Y+15	; 0x0f
    3cc4:	28 1b       	sub	r18, r24
    3cc6:	39 0b       	sbc	r19, r25
    3cc8:	4a 0b       	sbc	r20, r26
    3cca:	5b 0b       	sbc	r21, r27
    3ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cce:	9b 81       	ldd	r25, Y+3	; 0x03
    3cd0:	fc 01       	movw	r30, r24
    3cd2:	86 85       	ldd	r24, Z+14	; 0x0e
    3cd4:	97 85       	ldd	r25, Z+15	; 0x0f
    3cd6:	a0 89       	ldd	r26, Z+16	; 0x10
    3cd8:	b1 89       	ldd	r27, Z+17	; 0x11
    3cda:	28 17       	cp	r18, r24
    3cdc:	39 07       	cpc	r19, r25
    3cde:	4a 07       	cpc	r20, r26
    3ce0:	5b 07       	cpc	r21, r27
    3ce2:	18 f0       	brcs	.+6      	; 0x3cea <prvInsertTimerInActiveList+0xac>
    3ce4:	81 e0       	ldi	r24, 0x01	; 1
    3ce6:	89 83       	std	Y+1, r24	; 0x01
    3ce8:	36 c0       	rjmp	.+108    	; 0x3d56 <prvInsertTimerInActiveList+0x118>
    3cea:	8a 81       	ldd	r24, Y+2	; 0x02
    3cec:	9b 81       	ldd	r25, Y+3	; 0x03
    3cee:	9c 01       	movw	r18, r24
    3cf0:	2e 5f       	subi	r18, 0xFE	; 254
    3cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf4:	80 91 8c 2d 	lds	r24, 0x2D8C	; 0x802d8c <pxOverflowTimerList>
    3cf8:	90 91 8d 2d 	lds	r25, 0x2D8D	; 0x802d8d <pxOverflowTimerList+0x1>
    3cfc:	b9 01       	movw	r22, r18
    3cfe:	0e 94 2e 08 	call	0x105c	; 0x105c <vListInsert>
    3d02:	29 c0       	rjmp	.+82     	; 0x3d56 <prvInsertTimerInActiveList+0x118>
    3d04:	28 85       	ldd	r18, Y+8	; 0x08
    3d06:	39 85       	ldd	r19, Y+9	; 0x09
    3d08:	4a 85       	ldd	r20, Y+10	; 0x0a
    3d0a:	5b 85       	ldd	r21, Y+11	; 0x0b
    3d0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d0e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d10:	ae 85       	ldd	r26, Y+14	; 0x0e
    3d12:	bf 85       	ldd	r27, Y+15	; 0x0f
    3d14:	28 17       	cp	r18, r24
    3d16:	39 07       	cpc	r19, r25
    3d18:	4a 07       	cpc	r20, r26
    3d1a:	5b 07       	cpc	r21, r27
    3d1c:	80 f4       	brcc	.+32     	; 0x3d3e <prvInsertTimerInActiveList+0x100>
    3d1e:	2c 81       	ldd	r18, Y+4	; 0x04
    3d20:	3d 81       	ldd	r19, Y+5	; 0x05
    3d22:	4e 81       	ldd	r20, Y+6	; 0x06
    3d24:	5f 81       	ldd	r21, Y+7	; 0x07
    3d26:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d28:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d2a:	ae 85       	ldd	r26, Y+14	; 0x0e
    3d2c:	bf 85       	ldd	r27, Y+15	; 0x0f
    3d2e:	28 17       	cp	r18, r24
    3d30:	39 07       	cpc	r19, r25
    3d32:	4a 07       	cpc	r20, r26
    3d34:	5b 07       	cpc	r21, r27
    3d36:	18 f0       	brcs	.+6      	; 0x3d3e <prvInsertTimerInActiveList+0x100>
    3d38:	81 e0       	ldi	r24, 0x01	; 1
    3d3a:	89 83       	std	Y+1, r24	; 0x01
    3d3c:	0c c0       	rjmp	.+24     	; 0x3d56 <prvInsertTimerInActiveList+0x118>
    3d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d40:	9b 81       	ldd	r25, Y+3	; 0x03
    3d42:	9c 01       	movw	r18, r24
    3d44:	2e 5f       	subi	r18, 0xFE	; 254
    3d46:	3f 4f       	sbci	r19, 0xFF	; 255
    3d48:	80 91 8a 2d 	lds	r24, 0x2D8A	; 0x802d8a <pxCurrentTimerList>
    3d4c:	90 91 8b 2d 	lds	r25, 0x2D8B	; 0x802d8b <pxCurrentTimerList+0x1>
    3d50:	b9 01       	movw	r22, r18
    3d52:	0e 94 2e 08 	call	0x105c	; 0x105c <vListInsert>
    3d56:	89 81       	ldd	r24, Y+1	; 0x01
    3d58:	2f 96       	adiw	r28, 0x0f	; 15
    3d5a:	cd bf       	out	0x3d, r28	; 61
    3d5c:	de bf       	out	0x3e, r29	; 62
    3d5e:	df 91       	pop	r29
    3d60:	cf 91       	pop	r28
    3d62:	1f 91       	pop	r17
    3d64:	0f 91       	pop	r16
    3d66:	ff 90       	pop	r15
    3d68:	ef 90       	pop	r14
    3d6a:	df 90       	pop	r13
    3d6c:	cf 90       	pop	r12
    3d6e:	08 95       	ret

00003d70 <prvProcessReceivedCommands>:
    3d70:	cf 92       	push	r12
    3d72:	df 92       	push	r13
    3d74:	ef 92       	push	r14
    3d76:	ff 92       	push	r15
    3d78:	0f 93       	push	r16
    3d7a:	1f 93       	push	r17
    3d7c:	cf 93       	push	r28
    3d7e:	df 93       	push	r29
    3d80:	cd b7       	in	r28, 0x3d	; 61
    3d82:	de b7       	in	r29, 0x3e	; 62
    3d84:	65 97       	sbiw	r28, 0x15	; 21
    3d86:	cd bf       	out	0x3d, r28	; 61
    3d88:	de bf       	out	0x3e, r29	; 62
    3d8a:	e0 c0       	rjmp	.+448    	; 0x3f4c <prvProcessReceivedCommands+0x1dc>
    3d8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d8e:	88 23       	and	r24, r24
    3d90:	fc f4       	brge	.+62     	; 0x3dd0 <prvProcessReceivedCommands+0x60>
    3d92:	ce 01       	movw	r24, r28
    3d94:	0a 96       	adiw	r24, 0x0a	; 10
    3d96:	01 96       	adiw	r24, 0x01	; 1
    3d98:	89 83       	std	Y+1, r24	; 0x01
    3d9a:	9a 83       	std	Y+2, r25	; 0x02
    3d9c:	89 81       	ldd	r24, Y+1	; 0x01
    3d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3da0:	fc 01       	movw	r30, r24
    3da2:	20 81       	ld	r18, Z
    3da4:	31 81       	ldd	r19, Z+1	; 0x01
    3da6:	89 81       	ldd	r24, Y+1	; 0x01
    3da8:	9a 81       	ldd	r25, Y+2	; 0x02
    3daa:	fc 01       	movw	r30, r24
    3dac:	84 81       	ldd	r24, Z+4	; 0x04
    3dae:	95 81       	ldd	r25, Z+5	; 0x05
    3db0:	a6 81       	ldd	r26, Z+6	; 0x06
    3db2:	b7 81       	ldd	r27, Z+7	; 0x07
    3db4:	49 81       	ldd	r20, Y+1	; 0x01
    3db6:	5a 81       	ldd	r21, Y+2	; 0x02
    3db8:	fa 01       	movw	r30, r20
    3dba:	02 80       	ldd	r0, Z+2	; 0x02
    3dbc:	f3 81       	ldd	r31, Z+3	; 0x03
    3dbe:	e0 2d       	mov	r30, r0
    3dc0:	ec 8b       	std	Y+20, r30	; 0x14
    3dc2:	fd 8b       	std	Y+21, r31	; 0x15
    3dc4:	ac 01       	movw	r20, r24
    3dc6:	bd 01       	movw	r22, r26
    3dc8:	8c 89       	ldd	r24, Y+20	; 0x14
    3dca:	9d 89       	ldd	r25, Y+21	; 0x15
    3dcc:	f9 01       	movw	r30, r18
    3dce:	19 95       	eicall
    3dd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dd2:	88 23       	and	r24, r24
    3dd4:	0c f4       	brge	.+2      	; 0x3dd8 <prvProcessReceivedCommands+0x68>
    3dd6:	ba c0       	rjmp	.+372    	; 0x3f4c <prvProcessReceivedCommands+0x1dc>
    3dd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dda:	98 89       	ldd	r25, Y+16	; 0x10
    3ddc:	8b 83       	std	Y+3, r24	; 0x03
    3dde:	9c 83       	std	Y+4, r25	; 0x04
    3de0:	8b 81       	ldd	r24, Y+3	; 0x03
    3de2:	9c 81       	ldd	r25, Y+4	; 0x04
    3de4:	fc 01       	movw	r30, r24
    3de6:	84 85       	ldd	r24, Z+12	; 0x0c
    3de8:	95 85       	ldd	r25, Z+13	; 0x0d
    3dea:	89 2b       	or	r24, r25
    3dec:	29 f0       	breq	.+10     	; 0x3df8 <prvProcessReceivedCommands+0x88>
    3dee:	8b 81       	ldd	r24, Y+3	; 0x03
    3df0:	9c 81       	ldd	r25, Y+4	; 0x04
    3df2:	02 96       	adiw	r24, 0x02	; 2
    3df4:	0e 94 af 08 	call	0x115e	; 0x115e <uxListRemove>
    3df8:	ce 01       	movw	r24, r28
    3dfa:	43 96       	adiw	r24, 0x13	; 19
    3dfc:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <prvSampleTimeNow>
    3e00:	dc 01       	movw	r26, r24
    3e02:	cb 01       	movw	r24, r22
    3e04:	8d 83       	std	Y+5, r24	; 0x05
    3e06:	9e 83       	std	Y+6, r25	; 0x06
    3e08:	af 83       	std	Y+7, r26	; 0x07
    3e0a:	b8 87       	std	Y+8, r27	; 0x08
    3e0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e0e:	08 2e       	mov	r0, r24
    3e10:	00 0c       	add	r0, r0
    3e12:	99 0b       	sbc	r25, r25
    3e14:	09 2e       	mov	r0, r25
    3e16:	00 0c       	add	r0, r0
    3e18:	aa 0b       	sbc	r26, r26
    3e1a:	bb 0b       	sbc	r27, r27
    3e1c:	40 e0       	ldi	r20, 0x00	; 0
    3e1e:	50 e0       	ldi	r21, 0x00	; 0
    3e20:	29 e0       	ldi	r18, 0x09	; 9
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	84 1b       	sub	r24, r20
    3e26:	95 0b       	sbc	r25, r21
    3e28:	28 17       	cp	r18, r24
    3e2a:	39 07       	cpc	r19, r25
    3e2c:	08 f4       	brcc	.+2      	; 0x3e30 <prvProcessReceivedCommands+0xc0>
    3e2e:	8d c0       	rjmp	.+282    	; 0x3f4a <prvProcessReceivedCommands+0x1da>
    3e30:	fc 01       	movw	r30, r24
    3e32:	88 27       	eor	r24, r24
    3e34:	e2 50       	subi	r30, 0x02	; 2
    3e36:	ff 4f       	sbci	r31, 0xFF	; 255
    3e38:	8f 4f       	sbci	r24, 0xFF	; 255
    3e3a:	0c 94 ae 34 	jmp	0x695c	; 0x695c <__tablejump2__>
    3e3e:	eb 84       	ldd	r14, Y+11	; 0x0b
    3e40:	fc 84       	ldd	r15, Y+12	; 0x0c
    3e42:	0d 85       	ldd	r16, Y+13	; 0x0d
    3e44:	1e 85       	ldd	r17, Y+14	; 0x0e
    3e46:	2b 85       	ldd	r18, Y+11	; 0x0b
    3e48:	3c 85       	ldd	r19, Y+12	; 0x0c
    3e4a:	4d 85       	ldd	r20, Y+13	; 0x0d
    3e4c:	5e 85       	ldd	r21, Y+14	; 0x0e
    3e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e50:	9c 81       	ldd	r25, Y+4	; 0x04
    3e52:	fc 01       	movw	r30, r24
    3e54:	86 85       	ldd	r24, Z+14	; 0x0e
    3e56:	97 85       	ldd	r25, Z+15	; 0x0f
    3e58:	a0 89       	ldd	r26, Z+16	; 0x10
    3e5a:	b1 89       	ldd	r27, Z+17	; 0x11
    3e5c:	82 0f       	add	r24, r18
    3e5e:	93 1f       	adc	r25, r19
    3e60:	a4 1f       	adc	r26, r20
    3e62:	b5 1f       	adc	r27, r21
    3e64:	2d 81       	ldd	r18, Y+5	; 0x05
    3e66:	3e 81       	ldd	r19, Y+6	; 0x06
    3e68:	4f 81       	ldd	r20, Y+7	; 0x07
    3e6a:	58 85       	ldd	r21, Y+8	; 0x08
    3e6c:	eb 81       	ldd	r30, Y+3	; 0x03
    3e6e:	fc 81       	ldd	r31, Y+4	; 0x04
    3e70:	67 01       	movw	r12, r14
    3e72:	78 01       	movw	r14, r16
    3e74:	89 01       	movw	r16, r18
    3e76:	9a 01       	movw	r18, r20
    3e78:	ac 01       	movw	r20, r24
    3e7a:	bd 01       	movw	r22, r26
    3e7c:	cf 01       	movw	r24, r30
    3e7e:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <prvInsertTimerInActiveList>
    3e82:	88 23       	and	r24, r24
    3e84:	09 f4       	brne	.+2      	; 0x3e88 <prvProcessReceivedCommands+0x118>
    3e86:	62 c0       	rjmp	.+196    	; 0x3f4c <prvProcessReceivedCommands+0x1dc>
    3e88:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e8c:	fc 01       	movw	r30, r24
    3e8e:	25 89       	ldd	r18, Z+21	; 0x15
    3e90:	36 89       	ldd	r19, Z+22	; 0x16
    3e92:	8b 81       	ldd	r24, Y+3	; 0x03
    3e94:	9c 81       	ldd	r25, Y+4	; 0x04
    3e96:	f9 01       	movw	r30, r18
    3e98:	19 95       	eicall
    3e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e9e:	fc 01       	movw	r30, r24
    3ea0:	82 89       	ldd	r24, Z+18	; 0x12
    3ea2:	81 30       	cpi	r24, 0x01	; 1
    3ea4:	09 f0       	breq	.+2      	; 0x3ea8 <prvProcessReceivedCommands+0x138>
    3ea6:	52 c0       	rjmp	.+164    	; 0x3f4c <prvProcessReceivedCommands+0x1dc>
    3ea8:	2b 85       	ldd	r18, Y+11	; 0x0b
    3eaa:	3c 85       	ldd	r19, Y+12	; 0x0c
    3eac:	4d 85       	ldd	r20, Y+13	; 0x0d
    3eae:	5e 85       	ldd	r21, Y+14	; 0x0e
    3eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb4:	fc 01       	movw	r30, r24
    3eb6:	86 85       	ldd	r24, Z+14	; 0x0e
    3eb8:	97 85       	ldd	r25, Z+15	; 0x0f
    3eba:	a0 89       	ldd	r26, Z+16	; 0x10
    3ebc:	b1 89       	ldd	r27, Z+17	; 0x11
    3ebe:	82 0f       	add	r24, r18
    3ec0:	93 1f       	adc	r25, r19
    3ec2:	a4 1f       	adc	r26, r20
    3ec4:	b5 1f       	adc	r27, r21
    3ec6:	eb 81       	ldd	r30, Y+3	; 0x03
    3ec8:	fc 81       	ldd	r31, Y+4	; 0x04
    3eca:	c1 2c       	mov	r12, r1
    3ecc:	d1 2c       	mov	r13, r1
    3ece:	76 01       	movw	r14, r12
    3ed0:	00 e0       	ldi	r16, 0x00	; 0
    3ed2:	10 e0       	ldi	r17, 0x00	; 0
    3ed4:	9c 01       	movw	r18, r24
    3ed6:	ad 01       	movw	r20, r26
    3ed8:	60 e0       	ldi	r22, 0x00	; 0
    3eda:	cf 01       	movw	r24, r30
    3edc:	0e 94 16 1c 	call	0x382c	; 0x382c <xTimerGenericCommand>
    3ee0:	89 87       	std	Y+9, r24	; 0x09
    3ee2:	34 c0       	rjmp	.+104    	; 0x3f4c <prvProcessReceivedCommands+0x1dc>
    3ee4:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ee6:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ee8:	ad 85       	ldd	r26, Y+13	; 0x0d
    3eea:	be 85       	ldd	r27, Y+14	; 0x0e
    3eec:	2b 81       	ldd	r18, Y+3	; 0x03
    3eee:	3c 81       	ldd	r19, Y+4	; 0x04
    3ef0:	f9 01       	movw	r30, r18
    3ef2:	86 87       	std	Z+14, r24	; 0x0e
    3ef4:	97 87       	std	Z+15, r25	; 0x0f
    3ef6:	a0 8b       	std	Z+16, r26	; 0x10
    3ef8:	b1 8b       	std	Z+17, r27	; 0x11
    3efa:	8b 81       	ldd	r24, Y+3	; 0x03
    3efc:	9c 81       	ldd	r25, Y+4	; 0x04
    3efe:	fc 01       	movw	r30, r24
    3f00:	26 85       	ldd	r18, Z+14	; 0x0e
    3f02:	37 85       	ldd	r19, Z+15	; 0x0f
    3f04:	40 89       	ldd	r20, Z+16	; 0x10
    3f06:	51 89       	ldd	r21, Z+17	; 0x11
    3f08:	8d 81       	ldd	r24, Y+5	; 0x05
    3f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f0c:	af 81       	ldd	r26, Y+7	; 0x07
    3f0e:	b8 85       	ldd	r27, Y+8	; 0x08
    3f10:	82 0f       	add	r24, r18
    3f12:	93 1f       	adc	r25, r19
    3f14:	a4 1f       	adc	r26, r20
    3f16:	b5 1f       	adc	r27, r21
    3f18:	ed 80       	ldd	r14, Y+5	; 0x05
    3f1a:	fe 80       	ldd	r15, Y+6	; 0x06
    3f1c:	0f 81       	ldd	r16, Y+7	; 0x07
    3f1e:	18 85       	ldd	r17, Y+8	; 0x08
    3f20:	2d 81       	ldd	r18, Y+5	; 0x05
    3f22:	3e 81       	ldd	r19, Y+6	; 0x06
    3f24:	4f 81       	ldd	r20, Y+7	; 0x07
    3f26:	58 85       	ldd	r21, Y+8	; 0x08
    3f28:	eb 81       	ldd	r30, Y+3	; 0x03
    3f2a:	fc 81       	ldd	r31, Y+4	; 0x04
    3f2c:	67 01       	movw	r12, r14
    3f2e:	78 01       	movw	r14, r16
    3f30:	89 01       	movw	r16, r18
    3f32:	9a 01       	movw	r18, r20
    3f34:	ac 01       	movw	r20, r24
    3f36:	bd 01       	movw	r22, r26
    3f38:	cf 01       	movw	r24, r30
    3f3a:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <prvInsertTimerInActiveList>
    3f3e:	06 c0       	rjmp	.+12     	; 0x3f4c <prvProcessReceivedCommands+0x1dc>
    3f40:	8b 81       	ldd	r24, Y+3	; 0x03
    3f42:	9c 81       	ldd	r25, Y+4	; 0x04
    3f44:	0e 94 88 07 	call	0xf10	; 0xf10 <vPortFree>
    3f48:	01 c0       	rjmp	.+2      	; 0x3f4c <prvProcessReceivedCommands+0x1dc>
    3f4a:	00 00       	nop
    3f4c:	80 91 8e 2d 	lds	r24, 0x2D8E	; 0x802d8e <xTimerQueue>
    3f50:	90 91 8f 2d 	lds	r25, 0x2D8F	; 0x802d8f <xTimerQueue+0x1>
    3f54:	be 01       	movw	r22, r28
    3f56:	66 5f       	subi	r22, 0xF6	; 246
    3f58:	7f 4f       	sbci	r23, 0xFF	; 255
    3f5a:	20 e0       	ldi	r18, 0x00	; 0
    3f5c:	30 e0       	ldi	r19, 0x00	; 0
    3f5e:	a9 01       	movw	r20, r18
    3f60:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <xQueueReceive>
    3f64:	88 23       	and	r24, r24
    3f66:	09 f0       	breq	.+2      	; 0x3f6a <prvProcessReceivedCommands+0x1fa>
    3f68:	11 cf       	rjmp	.-478    	; 0x3d8c <prvProcessReceivedCommands+0x1c>
    3f6a:	00 00       	nop
    3f6c:	65 96       	adiw	r28, 0x15	; 21
    3f6e:	cd bf       	out	0x3d, r28	; 61
    3f70:	de bf       	out	0x3e, r29	; 62
    3f72:	df 91       	pop	r29
    3f74:	cf 91       	pop	r28
    3f76:	1f 91       	pop	r17
    3f78:	0f 91       	pop	r16
    3f7a:	ff 90       	pop	r15
    3f7c:	ef 90       	pop	r14
    3f7e:	df 90       	pop	r13
    3f80:	cf 90       	pop	r12
    3f82:	08 95       	ret

00003f84 <prvSwitchTimerLists>:
    3f84:	cf 92       	push	r12
    3f86:	df 92       	push	r13
    3f88:	ef 92       	push	r14
    3f8a:	ff 92       	push	r15
    3f8c:	0f 93       	push	r16
    3f8e:	1f 93       	push	r17
    3f90:	cf 93       	push	r28
    3f92:	df 93       	push	r29
    3f94:	cd b7       	in	r28, 0x3d	; 61
    3f96:	de b7       	in	r29, 0x3e	; 62
    3f98:	2d 97       	sbiw	r28, 0x0d	; 13
    3f9a:	cd bf       	out	0x3d, r28	; 61
    3f9c:	de bf       	out	0x3e, r29	; 62
    3f9e:	82 c0       	rjmp	.+260    	; 0x40a4 <__stack+0xa5>
    3fa0:	80 91 8a 2d 	lds	r24, 0x2D8A	; 0x802d8a <pxCurrentTimerList>
    3fa4:	90 91 8b 2d 	lds	r25, 0x2D8B	; 0x802d8b <pxCurrentTimerList+0x1>
    3fa8:	fc 01       	movw	r30, r24
    3faa:	87 81       	ldd	r24, Z+7	; 0x07
    3fac:	90 85       	ldd	r25, Z+8	; 0x08
    3fae:	fc 01       	movw	r30, r24
    3fb0:	80 81       	ld	r24, Z
    3fb2:	91 81       	ldd	r25, Z+1	; 0x01
    3fb4:	a2 81       	ldd	r26, Z+2	; 0x02
    3fb6:	b3 81       	ldd	r27, Z+3	; 0x03
    3fb8:	89 83       	std	Y+1, r24	; 0x01
    3fba:	9a 83       	std	Y+2, r25	; 0x02
    3fbc:	ab 83       	std	Y+3, r26	; 0x03
    3fbe:	bc 83       	std	Y+4, r27	; 0x04
    3fc0:	80 91 8a 2d 	lds	r24, 0x2D8A	; 0x802d8a <pxCurrentTimerList>
    3fc4:	90 91 8b 2d 	lds	r25, 0x2D8B	; 0x802d8b <pxCurrentTimerList+0x1>
    3fc8:	fc 01       	movw	r30, r24
    3fca:	87 81       	ldd	r24, Z+7	; 0x07
    3fcc:	90 85       	ldd	r25, Z+8	; 0x08
    3fce:	fc 01       	movw	r30, r24
    3fd0:	80 85       	ldd	r24, Z+8	; 0x08
    3fd2:	91 85       	ldd	r25, Z+9	; 0x09
    3fd4:	8d 83       	std	Y+5, r24	; 0x05
    3fd6:	9e 83       	std	Y+6, r25	; 0x06
    3fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fda:	9e 81       	ldd	r25, Y+6	; 0x06
    3fdc:	02 96       	adiw	r24, 0x02	; 2
    3fde:	0e 94 af 08 	call	0x115e	; 0x115e <uxListRemove>
    3fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fe6:	fc 01       	movw	r30, r24
    3fe8:	25 89       	ldd	r18, Z+21	; 0x15
    3fea:	36 89       	ldd	r19, Z+22	; 0x16
    3fec:	8d 81       	ldd	r24, Y+5	; 0x05
    3fee:	9e 81       	ldd	r25, Y+6	; 0x06
    3ff0:	f9 01       	movw	r30, r18
    3ff2:	19 95       	eicall
    3ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ff8:	fc 01       	movw	r30, r24
    3ffa:	82 89       	ldd	r24, Z+18	; 0x12
    3ffc:	81 30       	cpi	r24, 0x01	; 1
    3ffe:	09 f0       	breq	.+2      	; 0x4002 <__stack+0x3>
    4000:	51 c0       	rjmp	.+162    	; 0x40a4 <__stack+0xa5>
    4002:	8d 81       	ldd	r24, Y+5	; 0x05
    4004:	9e 81       	ldd	r25, Y+6	; 0x06
    4006:	fc 01       	movw	r30, r24
    4008:	26 85       	ldd	r18, Z+14	; 0x0e
    400a:	37 85       	ldd	r19, Z+15	; 0x0f
    400c:	40 89       	ldd	r20, Z+16	; 0x10
    400e:	51 89       	ldd	r21, Z+17	; 0x11
    4010:	89 81       	ldd	r24, Y+1	; 0x01
    4012:	9a 81       	ldd	r25, Y+2	; 0x02
    4014:	ab 81       	ldd	r26, Y+3	; 0x03
    4016:	bc 81       	ldd	r27, Y+4	; 0x04
    4018:	82 0f       	add	r24, r18
    401a:	93 1f       	adc	r25, r19
    401c:	a4 1f       	adc	r26, r20
    401e:	b5 1f       	adc	r27, r21
    4020:	8f 83       	std	Y+7, r24	; 0x07
    4022:	98 87       	std	Y+8, r25	; 0x08
    4024:	a9 87       	std	Y+9, r26	; 0x09
    4026:	ba 87       	std	Y+10, r27	; 0x0a
    4028:	2f 81       	ldd	r18, Y+7	; 0x07
    402a:	38 85       	ldd	r19, Y+8	; 0x08
    402c:	49 85       	ldd	r20, Y+9	; 0x09
    402e:	5a 85       	ldd	r21, Y+10	; 0x0a
    4030:	89 81       	ldd	r24, Y+1	; 0x01
    4032:	9a 81       	ldd	r25, Y+2	; 0x02
    4034:	ab 81       	ldd	r26, Y+3	; 0x03
    4036:	bc 81       	ldd	r27, Y+4	; 0x04
    4038:	82 17       	cp	r24, r18
    403a:	93 07       	cpc	r25, r19
    403c:	a4 07       	cpc	r26, r20
    403e:	b5 07       	cpc	r27, r21
    4040:	f8 f4       	brcc	.+62     	; 0x4080 <__stack+0x81>
    4042:	2d 81       	ldd	r18, Y+5	; 0x05
    4044:	3e 81       	ldd	r19, Y+6	; 0x06
    4046:	8f 81       	ldd	r24, Y+7	; 0x07
    4048:	98 85       	ldd	r25, Y+8	; 0x08
    404a:	a9 85       	ldd	r26, Y+9	; 0x09
    404c:	ba 85       	ldd	r27, Y+10	; 0x0a
    404e:	f9 01       	movw	r30, r18
    4050:	82 83       	std	Z+2, r24	; 0x02
    4052:	93 83       	std	Z+3, r25	; 0x03
    4054:	a4 83       	std	Z+4, r26	; 0x04
    4056:	b5 83       	std	Z+5, r27	; 0x05
    4058:	8d 81       	ldd	r24, Y+5	; 0x05
    405a:	9e 81       	ldd	r25, Y+6	; 0x06
    405c:	2d 81       	ldd	r18, Y+5	; 0x05
    405e:	3e 81       	ldd	r19, Y+6	; 0x06
    4060:	fc 01       	movw	r30, r24
    4062:	22 87       	std	Z+10, r18	; 0x0a
    4064:	33 87       	std	Z+11, r19	; 0x0b
    4066:	8d 81       	ldd	r24, Y+5	; 0x05
    4068:	9e 81       	ldd	r25, Y+6	; 0x06
    406a:	9c 01       	movw	r18, r24
    406c:	2e 5f       	subi	r18, 0xFE	; 254
    406e:	3f 4f       	sbci	r19, 0xFF	; 255
    4070:	80 91 8a 2d 	lds	r24, 0x2D8A	; 0x802d8a <pxCurrentTimerList>
    4074:	90 91 8b 2d 	lds	r25, 0x2D8B	; 0x802d8b <pxCurrentTimerList+0x1>
    4078:	b9 01       	movw	r22, r18
    407a:	0e 94 2e 08 	call	0x105c	; 0x105c <vListInsert>
    407e:	12 c0       	rjmp	.+36     	; 0x40a4 <__stack+0xa5>
    4080:	89 81       	ldd	r24, Y+1	; 0x01
    4082:	9a 81       	ldd	r25, Y+2	; 0x02
    4084:	ab 81       	ldd	r26, Y+3	; 0x03
    4086:	bc 81       	ldd	r27, Y+4	; 0x04
    4088:	ed 81       	ldd	r30, Y+5	; 0x05
    408a:	fe 81       	ldd	r31, Y+6	; 0x06
    408c:	c1 2c       	mov	r12, r1
    408e:	d1 2c       	mov	r13, r1
    4090:	76 01       	movw	r14, r12
    4092:	00 e0       	ldi	r16, 0x00	; 0
    4094:	10 e0       	ldi	r17, 0x00	; 0
    4096:	9c 01       	movw	r18, r24
    4098:	ad 01       	movw	r20, r26
    409a:	60 e0       	ldi	r22, 0x00	; 0
    409c:	cf 01       	movw	r24, r30
    409e:	0e 94 16 1c 	call	0x382c	; 0x382c <xTimerGenericCommand>
    40a2:	8b 87       	std	Y+11, r24	; 0x0b
    40a4:	80 91 8a 2d 	lds	r24, 0x2D8A	; 0x802d8a <pxCurrentTimerList>
    40a8:	90 91 8b 2d 	lds	r25, 0x2D8B	; 0x802d8b <pxCurrentTimerList+0x1>
    40ac:	fc 01       	movw	r30, r24
    40ae:	80 81       	ld	r24, Z
    40b0:	88 23       	and	r24, r24
    40b2:	09 f0       	breq	.+2      	; 0x40b6 <__stack+0xb7>
    40b4:	75 cf       	rjmp	.-278    	; 0x3fa0 <prvSwitchTimerLists+0x1c>
    40b6:	80 91 8a 2d 	lds	r24, 0x2D8A	; 0x802d8a <pxCurrentTimerList>
    40ba:	90 91 8b 2d 	lds	r25, 0x2D8B	; 0x802d8b <pxCurrentTimerList+0x1>
    40be:	8c 87       	std	Y+12, r24	; 0x0c
    40c0:	9d 87       	std	Y+13, r25	; 0x0d
    40c2:	80 91 8c 2d 	lds	r24, 0x2D8C	; 0x802d8c <pxOverflowTimerList>
    40c6:	90 91 8d 2d 	lds	r25, 0x2D8D	; 0x802d8d <pxOverflowTimerList+0x1>
    40ca:	80 93 8a 2d 	sts	0x2D8A, r24	; 0x802d8a <pxCurrentTimerList>
    40ce:	90 93 8b 2d 	sts	0x2D8B, r25	; 0x802d8b <pxCurrentTimerList+0x1>
    40d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    40d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    40d6:	80 93 8c 2d 	sts	0x2D8C, r24	; 0x802d8c <pxOverflowTimerList>
    40da:	90 93 8d 2d 	sts	0x2D8D, r25	; 0x802d8d <pxOverflowTimerList+0x1>
    40de:	00 00       	nop
    40e0:	2d 96       	adiw	r28, 0x0d	; 13
    40e2:	cd bf       	out	0x3d, r28	; 61
    40e4:	de bf       	out	0x3e, r29	; 62
    40e6:	df 91       	pop	r29
    40e8:	cf 91       	pop	r28
    40ea:	1f 91       	pop	r17
    40ec:	0f 91       	pop	r16
    40ee:	ff 90       	pop	r15
    40f0:	ef 90       	pop	r14
    40f2:	df 90       	pop	r13
    40f4:	cf 90       	pop	r12
    40f6:	08 95       	ret

000040f8 <prvCheckForValidListAndQueue>:
    40f8:	cf 93       	push	r28
    40fa:	df 93       	push	r29
    40fc:	cd b7       	in	r28, 0x3d	; 61
    40fe:	de b7       	in	r29, 0x3e	; 62
    4100:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4104:	ff 93       	push	r31
    4106:	f8 7f       	andi	r31, 0xF8	; 248
    4108:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    410c:	80 91 8e 2d 	lds	r24, 0x2D8E	; 0x802d8e <xTimerQueue>
    4110:	90 91 8f 2d 	lds	r25, 0x2D8F	; 0x802d8f <xTimerQueue+0x1>
    4114:	89 2b       	or	r24, r25
    4116:	e9 f4       	brne	.+58     	; 0x4152 <prvCheckForValidListAndQueue+0x5a>
    4118:	84 e7       	ldi	r24, 0x74	; 116
    411a:	9d e2       	ldi	r25, 0x2D	; 45
    411c:	0e 94 96 07 	call	0xf2c	; 0xf2c <vListInitialise>
    4120:	8f e7       	ldi	r24, 0x7F	; 127
    4122:	9d e2       	ldi	r25, 0x2D	; 45
    4124:	0e 94 96 07 	call	0xf2c	; 0xf2c <vListInitialise>
    4128:	84 e7       	ldi	r24, 0x74	; 116
    412a:	9d e2       	ldi	r25, 0x2D	; 45
    412c:	80 93 8a 2d 	sts	0x2D8A, r24	; 0x802d8a <pxCurrentTimerList>
    4130:	90 93 8b 2d 	sts	0x2D8B, r25	; 0x802d8b <pxCurrentTimerList+0x1>
    4134:	8f e7       	ldi	r24, 0x7F	; 127
    4136:	9d e2       	ldi	r25, 0x2D	; 45
    4138:	80 93 8c 2d 	sts	0x2D8C, r24	; 0x802d8c <pxOverflowTimerList>
    413c:	90 93 8d 2d 	sts	0x2D8D, r25	; 0x802d8d <pxOverflowTimerList+0x1>
    4140:	40 e0       	ldi	r20, 0x00	; 0
    4142:	69 e0       	ldi	r22, 0x09	; 9
    4144:	85 e0       	ldi	r24, 0x05	; 5
    4146:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <xQueueGenericCreate>
    414a:	80 93 8e 2d 	sts	0x2D8E, r24	; 0x802d8e <xTimerQueue>
    414e:	90 93 8f 2d 	sts	0x2D8F, r25	; 0x802d8f <xTimerQueue+0x1>
    4152:	ff 91       	pop	r31
    4154:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4158:	00 00       	nop
    415a:	df 91       	pop	r29
    415c:	cf 91       	pop	r28
    415e:	08 95       	ret

00004160 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    4160:	0f 93       	push	r16
    4162:	1f 93       	push	r17
    4164:	cf 93       	push	r28
    4166:	df 93       	push	r29
    4168:	cd b7       	in	r28, 0x3d	; 61
    416a:	de b7       	in	r29, 0x3e	; 62
    416c:	64 97       	sbiw	r28, 0x14	; 20
    416e:	cd bf       	out	0x3d, r28	; 61
    4170:	de bf       	out	0x3e, r29	; 62
    4172:	8b 87       	std	Y+11, r24	; 0x0b
    4174:	9c 87       	std	Y+12, r25	; 0x0c
    4176:	6d 87       	std	Y+13, r22	; 0x0d
    4178:	7e 87       	std	Y+14, r23	; 0x0e
    417a:	2f 87       	std	Y+15, r18	; 0x0f
    417c:	38 8b       	std	Y+16, r19	; 0x10
    417e:	49 8b       	std	Y+17, r20	; 0x11
    4180:	5a 8b       	std	Y+18, r21	; 0x12
    4182:	0b 8b       	std	Y+19, r16	; 0x13
    4184:	1c 8b       	std	Y+20, r17	; 0x14
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    4186:	8e ef       	ldi	r24, 0xFE	; 254
    4188:	8a 83       	std	Y+2, r24	; 0x02
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    418a:	8b 85       	ldd	r24, Y+11	; 0x0b
    418c:	9c 85       	ldd	r25, Y+12	; 0x0c
    418e:	8b 83       	std	Y+3, r24	; 0x03
    4190:	9c 83       	std	Y+4, r25	; 0x04
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    4192:	8d 85       	ldd	r24, Y+13	; 0x0d
    4194:	9e 85       	ldd	r25, Y+14	; 0x0e
    4196:	8d 83       	std	Y+5, r24	; 0x05
    4198:	9e 83       	std	Y+6, r25	; 0x06
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    419a:	8f 85       	ldd	r24, Y+15	; 0x0f
    419c:	98 89       	ldd	r25, Y+16	; 0x10
    419e:	a9 89       	ldd	r26, Y+17	; 0x11
    41a0:	ba 89       	ldd	r27, Y+18	; 0x12
    41a2:	8f 83       	std	Y+7, r24	; 0x07
    41a4:	98 87       	std	Y+8, r25	; 0x08
    41a6:	a9 87       	std	Y+9, r26	; 0x09
    41a8:	ba 87       	std	Y+10, r27	; 0x0a

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    41aa:	80 91 8e 2d 	lds	r24, 0x2D8E	; 0x802d8e <xTimerQueue>
    41ae:	90 91 8f 2d 	lds	r25, 0x2D8F	; 0x802d8f <xTimerQueue+0x1>
    41b2:	4b 89       	ldd	r20, Y+19	; 0x13
    41b4:	5c 89       	ldd	r21, Y+20	; 0x14
    41b6:	be 01       	movw	r22, r28
    41b8:	6e 5f       	subi	r22, 0xFE	; 254
    41ba:	7f 4f       	sbci	r23, 0xFF	; 255
    41bc:	20 e0       	ldi	r18, 0x00	; 0
    41be:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <xQueueGenericSendFromISR>
    41c2:	89 83       	std	Y+1, r24	; 0x01

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
    41c4:	89 81       	ldd	r24, Y+1	; 0x01
	}
    41c6:	64 96       	adiw	r28, 0x14	; 20
    41c8:	cd bf       	out	0x3d, r28	; 61
    41ca:	de bf       	out	0x3e, r29	; 62
    41cc:	df 91       	pop	r29
    41ce:	cf 91       	pop	r28
    41d0:	1f 91       	pop	r17
    41d2:	0f 91       	pop	r16
    41d4:	08 95       	ret

000041d6 <vInitClock>:
#include "init.h"
#include "clksys_driver.h"


void vInitClock(void)
{
    41d6:	cf 93       	push	r28
    41d8:	df 93       	push	r29
    41da:	cd b7       	in	r28, 0x3d	; 61
    41dc:	de b7       	in	r29, 0x3e	; 62
	CLKSYS_Enable( OSC_RC2MEN_bm );
    41de:	80 e5       	ldi	r24, 0x50	; 80
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	20 e5       	ldi	r18, 0x50	; 80
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	f9 01       	movw	r30, r18
    41e8:	20 81       	ld	r18, Z
    41ea:	21 60       	ori	r18, 0x01	; 1
    41ec:	fc 01       	movw	r30, r24
    41ee:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    41f0:	80 e5       	ldi	r24, 0x50	; 80
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	fc 01       	movw	r30, r24
    41f6:	81 81       	ldd	r24, Z+1	; 0x01
    41f8:	88 2f       	mov	r24, r24
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	81 70       	andi	r24, 0x01	; 1
    41fe:	99 27       	eor	r25, r25
    4200:	89 2b       	or	r24, r25
    4202:	b1 f3       	breq	.-20     	; 0x41f0 <vInitClock+0x1a>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    4204:	80 e0       	ldi	r24, 0x00	; 0
    4206:	0e 94 1b 03 	call	0x636	; 0x636 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    420a:	8e e1       	ldi	r24, 0x1E	; 30
    420c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    4210:	60 e0       	ldi	r22, 0x00	; 0
    4212:	80 e0       	ldi	r24, 0x00	; 0
    4214:	0e 94 04 03 	call	0x608	; 0x608 <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    4218:	43 e0       	ldi	r20, 0x03	; 3
    421a:	60 e0       	ldi	r22, 0x00	; 0
    421c:	80 e4       	ldi	r24, 0x40	; 64
    421e:	0e 94 af 02 	call	0x55e	; 0x55e <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    4222:	80 e5       	ldi	r24, 0x50	; 80
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	20 e5       	ldi	r18, 0x50	; 80
    4228:	30 e0       	ldi	r19, 0x00	; 0
    422a:	f9 01       	movw	r30, r18
    422c:	20 81       	ld	r18, Z
    422e:	28 60       	ori	r18, 0x08	; 8
    4230:	fc 01       	movw	r30, r24
    4232:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    4234:	80 e5       	ldi	r24, 0x50	; 80
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	fc 01       	movw	r30, r24
    423a:	81 81       	ldd	r24, Z+1	; 0x01
    423c:	88 2f       	mov	r24, r24
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	88 70       	andi	r24, 0x08	; 8
    4242:	99 27       	eor	r25, r25
    4244:	89 2b       	or	r24, r25
    4246:	b1 f3       	breq	.-20     	; 0x4234 <vInitClock+0x5e>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    4248:	64 e0       	ldi	r22, 0x04	; 4
    424a:	80 ec       	ldi	r24, 0xC0	; 192
    424c:	0e 94 cc 02 	call	0x598	; 0x598 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    4250:	80 e5       	ldi	r24, 0x50	; 80
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	20 e5       	ldi	r18, 0x50	; 80
    4256:	30 e0       	ldi	r19, 0x00	; 0
    4258:	f9 01       	movw	r30, r18
    425a:	20 81       	ld	r18, Z
    425c:	20 61       	ori	r18, 0x10	; 16
    425e:	fc 01       	movw	r30, r24
    4260:	20 83       	st	Z, r18
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    4262:	60 e0       	ldi	r22, 0x00	; 0
    4264:	80 e0       	ldi	r24, 0x00	; 0
    4266:	0e 94 04 03 	call	0x608	; 0x608 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    426a:	80 e5       	ldi	r24, 0x50	; 80
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	fc 01       	movw	r30, r24
    4270:	81 81       	ldd	r24, Z+1	; 0x01
    4272:	88 2f       	mov	r24, r24
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	80 71       	andi	r24, 0x10	; 16
    4278:	99 27       	eor	r25, r25
    427a:	89 2b       	or	r24, r25
    427c:	b1 f3       	breq	.-20     	; 0x426a <vInitClock+0x94>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    427e:	84 e0       	ldi	r24, 0x04	; 4
    4280:	0e 94 1b 03 	call	0x636	; 0x636 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    4284:	87 e0       	ldi	r24, 0x07	; 7
    4286:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <CLKSYS_Disable>
    428a:	00 00       	nop
    428c:	df 91       	pop	r29
    428e:	cf 91       	pop	r28
    4290:	08 95       	ret

00004292 <vApplicationIdleHook>:




void vApplicationIdleHook( void )
{	
    4292:	cf 93       	push	r28
    4294:	df 93       	push	r29
    4296:	cd b7       	in	r28, 0x3d	; 61
    4298:	de b7       	in	r29, 0x3e	; 62
	
}
    429a:	00 00       	nop
    429c:	df 91       	pop	r29
    429e:	cf 91       	pop	r28
    42a0:	08 95       	ret

000042a2 <main>:
TaskHandle_t xSteuertask;
TaskHandle_t xButtonTaskHandle;


int main(void)//Hauptprogramm
{
    42a2:	ef 92       	push	r14
    42a4:	ff 92       	push	r15
    42a6:	0f 93       	push	r16
    42a8:	cf 93       	push	r28
    42aa:	df 93       	push	r29
    42ac:	1f 92       	push	r1
    42ae:	cd b7       	in	r28, 0x3d	; 61
    42b0:	de b7       	in	r29, 0x3e	; 62
    resetReason_t reason = getResetReason();
    42b2:	0e 94 1d 32 	call	0x643a	; 0x643a <getResetReason>
    42b6:	89 83       	std	Y+1, r24	; 0x01

	vInitClock();
    42b8:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <vInitClock>
	vInitDisplay();
    42bc:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <vInitDisplay>
    
 

	xTaskCreate(vQuamGen, NULL, configMINIMAL_STACK_SIZE+100, NULL, 2, NULL);
    42c0:	e1 2c       	mov	r14, r1
    42c2:	f1 2c       	mov	r15, r1
    42c4:	02 e0       	ldi	r16, 0x02	; 2
    42c6:	20 e0       	ldi	r18, 0x00	; 0
    42c8:	30 e0       	ldi	r19, 0x00	; 0
    42ca:	4c e2       	ldi	r20, 0x2C	; 44
    42cc:	51 e0       	ldi	r21, 0x01	; 1
    42ce:	60 e0       	ldi	r22, 0x00	; 0
    42d0:	70 e0       	ldi	r23, 0x00	; 0
    42d2:	80 ea       	ldi	r24, 0xA0	; 160
    42d4:	9e e2       	ldi	r25, 0x2E	; 46
    42d6:	0e 94 94 11 	call	0x2328	; 0x2328 <xTaskCreate>
    xTaskCreate(vSteuertask, NULL, configMINIMAL_STACK_SIZE+100, NULL, 2, &xSteuertask);
    42da:	0f 2e       	mov	r0, r31
    42dc:	f5 ec       	ldi	r31, 0xC5	; 197
    42de:	ef 2e       	mov	r14, r31
    42e0:	fe e2       	ldi	r31, 0x2E	; 46
    42e2:	ff 2e       	mov	r15, r31
    42e4:	f0 2d       	mov	r31, r0
    42e6:	02 e0       	ldi	r16, 0x02	; 2
    42e8:	20 e0       	ldi	r18, 0x00	; 0
    42ea:	30 e0       	ldi	r19, 0x00	; 0
    42ec:	4c e2       	ldi	r20, 0x2C	; 44
    42ee:	51 e0       	ldi	r21, 0x01	; 1
    42f0:	60 e0       	ldi	r22, 0x00	; 0
    42f2:	70 e0       	ldi	r23, 0x00	; 0
    42f4:	84 eb       	ldi	r24, 0xB4	; 180
    42f6:	91 e2       	ldi	r25, 0x21	; 33
    42f8:	0e 94 94 11 	call	0x2328	; 0x2328 <xTaskCreate>
    xTaskCreate(vButtonTask, (const char *) "ButtonTask", configMINIMAL_STACK_SIZE, NULL, 2, &xButtonTaskHandle);
    42fc:	0f 2e       	mov	r0, r31
    42fe:	f3 ec       	ldi	r31, 0xC3	; 195
    4300:	ef 2e       	mov	r14, r31
    4302:	fe e2       	ldi	r31, 0x2E	; 46
    4304:	ff 2e       	mov	r15, r31
    4306:	f0 2d       	mov	r31, r0
    4308:	02 e0       	ldi	r16, 0x02	; 2
    430a:	20 e0       	ldi	r18, 0x00	; 0
    430c:	30 e0       	ldi	r19, 0x00	; 0
    430e:	48 ec       	ldi	r20, 0xC8	; 200
    4310:	50 e0       	ldi	r21, 0x00	; 0
    4312:	6d e0       	ldi	r22, 0x0D	; 13
    4314:	70 e2       	ldi	r23, 0x20	; 32
    4316:	8d e3       	ldi	r24, 0x3D	; 61
    4318:	93 e2       	ldi	r25, 0x23	; 35
    431a:	0e 94 94 11 	call	0x2328	; 0x2328 <xTaskCreate>

    

	vDisplayClear();
    431e:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <vDisplayClear>
	vDisplayWriteStringAtPos(0,0,"QAM 4 Generator R: %d", reason);
    4322:	89 81       	ldd	r24, Y+1	; 0x01
    4324:	88 2f       	mov	r24, r24
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	29 2f       	mov	r18, r25
    432a:	2f 93       	push	r18
    432c:	8f 93       	push	r24
    432e:	88 e1       	ldi	r24, 0x18	; 24
    4330:	90 e2       	ldi	r25, 0x20	; 32
    4332:	89 2f       	mov	r24, r25
    4334:	8f 93       	push	r24
    4336:	88 e1       	ldi	r24, 0x18	; 24
    4338:	90 e2       	ldi	r25, 0x20	; 32
    433a:	8f 93       	push	r24
    433c:	1f 92       	push	r1
    433e:	1f 92       	push	r1
    4340:	1f 92       	push	r1
    4342:	1f 92       	push	r1
    4344:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <vDisplayWriteStringAtPos>
    4348:	8d b7       	in	r24, 0x3d	; 61
    434a:	9e b7       	in	r25, 0x3e	; 62
    434c:	08 96       	adiw	r24, 0x08	; 8
    434e:	cd bf       	out	0x3d, r28	; 61
    4350:	de bf       	out	0x3e, r29	; 62
	vTaskStartScheduler();
    4352:	0e 94 95 13 	call	0x272a	; 0x272a <vTaskStartScheduler>
	return 0;
    4356:	80 e0       	ldi	r24, 0x00	; 0
    4358:	90 e0       	ldi	r25, 0x00	; 0
}
    435a:	0f 90       	pop	r0
    435c:	df 91       	pop	r29
    435e:	cf 91       	pop	r28
    4360:	0f 91       	pop	r16
    4362:	ff 90       	pop	r15
    4364:	ef 90       	pop	r14
    4366:	08 95       	ret

00004368 <vSteuertask>:

void vSteuertask(void *pvParameters)
{
    4368:	cf 92       	push	r12
    436a:	df 92       	push	r13
    436c:	ef 92       	push	r14
    436e:	ff 92       	push	r15
    4370:	0f 93       	push	r16
    4372:	1f 93       	push	r17
    4374:	cf 93       	push	r28
    4376:	df 93       	push	r29
    4378:	cd b7       	in	r28, 0x3d	; 61
    437a:	de b7       	in	r29, 0x3e	; 62
    437c:	a8 97       	sbiw	r28, 0x28	; 40
    437e:	cd bf       	out	0x3d, r28	; 61
    4380:	de bf       	out	0x3e, r29	; 62
    4382:	8f a3       	std	Y+39, r24	; 0x27
    4384:	98 a7       	std	Y+40, r25	; 0x28
(void) pvParameters;
uint32_t Buttonvalue;
uint8_t DataString[33];
	
eSteuerungStates Steuerung = smalldata;
    4386:	81 e0       	ldi	r24, 0x01	; 1
    4388:	89 83       	std	Y+1, r24	; 0x01
    
    while(1)
    {
        
        xTaskNotifyWait(0, 0xffffffff, &Buttonvalue, pdMS_TO_TICKS(200));
    438a:	ce 01       	movw	r24, r28
    438c:	02 96       	adiw	r24, 0x02	; 2
    438e:	0f 2e       	mov	r0, r31
    4390:	f8 ec       	ldi	r31, 0xC8	; 200
    4392:	cf 2e       	mov	r12, r31
    4394:	d1 2c       	mov	r13, r1
    4396:	e1 2c       	mov	r14, r1
    4398:	f1 2c       	mov	r15, r1
    439a:	f0 2d       	mov	r31, r0
    439c:	8c 01       	movw	r16, r24
    439e:	2f ef       	ldi	r18, 0xFF	; 255
    43a0:	3f ef       	ldi	r19, 0xFF	; 255
    43a2:	a9 01       	movw	r20, r18
    43a4:	60 e0       	ldi	r22, 0x00	; 0
    43a6:	70 e0       	ldi	r23, 0x00	; 0
    43a8:	cb 01       	movw	r24, r22
    43aa:	0e 94 b8 19 	call	0x3370	; 0x3370 <xTaskNotifyWait>
        
		switch(Steuerung)
    43ae:	89 81       	ldd	r24, Y+1	; 0x01
    43b0:	88 2f       	mov	r24, r24
    43b2:	90 e0       	ldi	r25, 0x00	; 0
    43b4:	82 30       	cpi	r24, 0x02	; 2
    43b6:	91 05       	cpc	r25, r1
    43b8:	09 f4       	brne	.+2      	; 0x43bc <vSteuertask+0x54>
    43ba:	6e c0       	rjmp	.+220    	; 0x4498 <vSteuertask+0x130>
    43bc:	83 30       	cpi	r24, 0x03	; 3
    43be:	91 05       	cpc	r25, r1
    43c0:	34 f4       	brge	.+12     	; 0x43ce <vSteuertask+0x66>
    43c2:	00 97       	sbiw	r24, 0x00	; 0
    43c4:	81 f0       	breq	.+32     	; 0x43e6 <vSteuertask+0x7e>
    43c6:	01 97       	sbiw	r24, 0x01	; 1
    43c8:	09 f4       	brne	.+2      	; 0x43cc <vSteuertask+0x64>
    43ca:	47 c0       	rjmp	.+142    	; 0x445a <vSteuertask+0xf2>
    43cc:	55 c1       	rjmp	.+682    	; 0x4678 <vSteuertask+0x310>
    43ce:	84 30       	cpi	r24, 0x04	; 4
    43d0:	91 05       	cpc	r25, r1
    43d2:	09 f4       	brne	.+2      	; 0x43d6 <vSteuertask+0x6e>
    43d4:	ef c0       	rjmp	.+478    	; 0x45b4 <vSteuertask+0x24c>
    43d6:	84 30       	cpi	r24, 0x04	; 4
    43d8:	91 05       	cpc	r25, r1
    43da:	0c f4       	brge	.+2      	; 0x43de <vSteuertask+0x76>
    43dc:	94 c0       	rjmp	.+296    	; 0x4506 <vSteuertask+0x19e>
    43de:	05 97       	sbiw	r24, 0x05	; 5
    43e0:	09 f4       	brne	.+2      	; 0x43e4 <vSteuertask+0x7c>
    43e2:	0c c1       	rjmp	.+536    	; 0x45fc <vSteuertask+0x294>
    43e4:	49 c1       	rjmp	.+658    	; 0x4678 <vSteuertask+0x310>
		{
			
		    case idle:
            {
                
                if (Buttonvalue&BUTTON1SHORTPRESSEDMASK)
    43e6:	8a 81       	ldd	r24, Y+2	; 0x02
    43e8:	9b 81       	ldd	r25, Y+3	; 0x03
    43ea:	ac 81       	ldd	r26, Y+4	; 0x04
    43ec:	bd 81       	ldd	r27, Y+5	; 0x05
    43ee:	81 70       	andi	r24, 0x01	; 1
    43f0:	99 27       	eor	r25, r25
    43f2:	aa 27       	eor	r26, r26
    43f4:	bb 27       	eor	r27, r27
    43f6:	89 2b       	or	r24, r25
    43f8:	8a 2b       	or	r24, r26
    43fa:	8b 2b       	or	r24, r27
    43fc:	11 f0       	breq	.+4      	; 0x4402 <vSteuertask+0x9a>
                {
                    Steuerung=smalldata;
    43fe:	81 e0       	ldi	r24, 0x01	; 1
    4400:	89 83       	std	Y+1, r24	; 0x01
                }
                
                if (Buttonvalue&BUTTON2SHORTPRESSEDMASK)
    4402:	8a 81       	ldd	r24, Y+2	; 0x02
    4404:	9b 81       	ldd	r25, Y+3	; 0x03
    4406:	ac 81       	ldd	r26, Y+4	; 0x04
    4408:	bd 81       	ldd	r27, Y+5	; 0x05
    440a:	82 70       	andi	r24, 0x02	; 2
    440c:	99 27       	eor	r25, r25
    440e:	aa 27       	eor	r26, r26
    4410:	bb 27       	eor	r27, r27
    4412:	89 2b       	or	r24, r25
    4414:	8a 2b       	or	r24, r26
    4416:	8b 2b       	or	r24, r27
    4418:	11 f0       	breq	.+4      	; 0x441e <vSteuertask+0xb6>
                {
                    Steuerung=middledata;
    441a:	82 e0       	ldi	r24, 0x02	; 2
    441c:	89 83       	std	Y+1, r24	; 0x01
                }
                
                if (Buttonvalue&BUTTON3SHORTPRESSEDMASK)
    441e:	8a 81       	ldd	r24, Y+2	; 0x02
    4420:	9b 81       	ldd	r25, Y+3	; 0x03
    4422:	ac 81       	ldd	r26, Y+4	; 0x04
    4424:	bd 81       	ldd	r27, Y+5	; 0x05
    4426:	84 70       	andi	r24, 0x04	; 4
    4428:	99 27       	eor	r25, r25
    442a:	aa 27       	eor	r26, r26
    442c:	bb 27       	eor	r27, r27
    442e:	89 2b       	or	r24, r25
    4430:	8a 2b       	or	r24, r26
    4432:	8b 2b       	or	r24, r27
    4434:	11 f0       	breq	.+4      	; 0x443a <vSteuertask+0xd2>
                {
                    Steuerung=bigdata;
    4436:	83 e0       	ldi	r24, 0x03	; 3
    4438:	89 83       	std	Y+1, r24	; 0x01
                }
                
                if (Buttonvalue&BUTTON4SHORTPRESSEDMASK)
    443a:	8a 81       	ldd	r24, Y+2	; 0x02
    443c:	9b 81       	ldd	r25, Y+3	; 0x03
    443e:	ac 81       	ldd	r26, Y+4	; 0x04
    4440:	bd 81       	ldd	r27, Y+5	; 0x05
    4442:	88 70       	andi	r24, 0x08	; 8
    4444:	99 27       	eor	r25, r25
    4446:	aa 27       	eor	r26, r26
    4448:	bb 27       	eor	r27, r27
    444a:	89 2b       	or	r24, r25
    444c:	8a 2b       	or	r24, r26
    444e:	8b 2b       	or	r24, r27
    4450:	09 f4       	brne	.+2      	; 0x4454 <vSteuertask+0xec>
    4452:	11 c1       	rjmp	.+546    	; 0x4676 <vSteuertask+0x30e>
                {
                    Steuerung=stringdata;
    4454:	84 e0       	ldi	r24, 0x04	; 4
    4456:	89 83       	std	Y+1, r24	; 0x01
                }
                break;
    4458:	0e c1       	rjmp	.+540    	; 0x4676 <vSteuertask+0x30e>
            }            
		
			case smalldata:
			{
			
				DataString[0] = 0x83;   // Command + Amount of Data 0bXXXY'YYYY
    445a:	83 e8       	ldi	r24, 0x83	; 131
    445c:	8e 83       	std	Y+6, r24	; 0x06
				DataString[1] = 0xAB;
    445e:	8b ea       	ldi	r24, 0xAB	; 171
    4460:	8f 83       	std	Y+7, r24	; 0x07
				DataString[2] = 0x37;
    4462:	87 e3       	ldi	r24, 0x37	; 55
    4464:	88 87       	std	Y+8, r24	; 0x08
				DataString[3] = 0x85;
    4466:	85 e8       	ldi	r24, 0x85	; 133
    4468:	89 87       	std	Y+9, r24	; 0x09
				Steuerung = writedata;
    446a:	85 e0       	ldi	r24, 0x05	; 5
    446c:	89 83       	std	Y+1, r24	; 0x01
				vDisplayWriteStringAtPos(1, 0, "Data:      small    ");
    446e:	8e e2       	ldi	r24, 0x2E	; 46
    4470:	90 e2       	ldi	r25, 0x20	; 32
    4472:	89 2f       	mov	r24, r25
    4474:	8f 93       	push	r24
    4476:	8e e2       	ldi	r24, 0x2E	; 46
    4478:	90 e2       	ldi	r25, 0x20	; 32
    447a:	8f 93       	push	r24
    447c:	1f 92       	push	r1
    447e:	1f 92       	push	r1
    4480:	1f 92       	push	r1
    4482:	81 e0       	ldi	r24, 0x01	; 1
    4484:	8f 93       	push	r24
    4486:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <vDisplayWriteStringAtPos>
    448a:	0f 90       	pop	r0
    448c:	0f 90       	pop	r0
    448e:	0f 90       	pop	r0
    4490:	0f 90       	pop	r0
    4492:	0f 90       	pop	r0
    4494:	0f 90       	pop	r0
                
			    break;	
    4496:	f0 c0       	rjmp	.+480    	; 0x4678 <vSteuertask+0x310>
			}
		
			case middledata:
			{
                DataString[0] = 0x2F;
    4498:	8f e2       	ldi	r24, 0x2F	; 47
    449a:	8e 83       	std	Y+6, r24	; 0x06
                DataString[1] = 0x57;
    449c:	87 e5       	ldi	r24, 0x57	; 87
    449e:	8f 83       	std	Y+7, r24	; 0x07
                DataString[2] = 0x6F;
    44a0:	8f e6       	ldi	r24, 0x6F	; 111
    44a2:	88 87       	std	Y+8, r24	; 0x08
                DataString[3] = 0x2D;
    44a4:	8d e2       	ldi	r24, 0x2D	; 45
    44a6:	89 87       	std	Y+9, r24	; 0x09
                DataString[4] = 0x62;
    44a8:	82 e6       	ldi	r24, 0x62	; 98
    44aa:	8a 87       	std	Y+10, r24	; 0x0a
                DataString[5] = 0x69;
    44ac:	89 e6       	ldi	r24, 0x69	; 105
    44ae:	8b 87       	std	Y+11, r24	; 0x0b
                DataString[6] = 0x6E;
    44b0:	8e e6       	ldi	r24, 0x6E	; 110
    44b2:	8c 87       	std	Y+12, r24	; 0x0c
                DataString[7] = 0x2D;
    44b4:	8d e2       	ldi	r24, 0x2D	; 45
    44b6:	8d 87       	std	Y+13, r24	; 0x0d
                DataString[8] = 0x69;
    44b8:	89 e6       	ldi	r24, 0x69	; 105
    44ba:	8e 87       	std	Y+14, r24	; 0x0e
                DataString[9] = 0x63;
    44bc:	83 e6       	ldi	r24, 0x63	; 99
    44be:	8f 87       	std	Y+15, r24	; 0x0f
                DataString[10] = 0x68;
    44c0:	88 e6       	ldi	r24, 0x68	; 104
    44c2:	88 8b       	std	Y+16, r24	; 0x10
                DataString[11] = 0x2D;
    44c4:	8d e2       	ldi	r24, 0x2D	; 45
    44c6:	89 8b       	std	Y+17, r24	; 0x11
                DataString[12] = 0x68;
    44c8:	88 e6       	ldi	r24, 0x68	; 104
    44ca:	8a 8b       	std	Y+18, r24	; 0x12
                DataString[13] = 0x69;
    44cc:	89 e6       	ldi	r24, 0x69	; 105
    44ce:	8b 8b       	std	Y+19, r24	; 0x13
                DataString[14] = 0x65;
    44d0:	85 e6       	ldi	r24, 0x65	; 101
    44d2:	8c 8b       	std	Y+20, r24	; 0x14
                DataString[15] = 0x72;
    44d4:	82 e7       	ldi	r24, 0x72	; 114
    44d6:	8d 8b       	std	Y+21, r24	; 0x15
                Steuerung = writedata;
    44d8:	85 e0       	ldi	r24, 0x05	; 5
    44da:	89 83       	std	Y+1, r24	; 0x01
                vDisplayWriteStringAtPos(1, 0, "Data:      middle   ");
    44dc:	83 e4       	ldi	r24, 0x43	; 67
    44de:	90 e2       	ldi	r25, 0x20	; 32
    44e0:	89 2f       	mov	r24, r25
    44e2:	8f 93       	push	r24
    44e4:	83 e4       	ldi	r24, 0x43	; 67
    44e6:	90 e2       	ldi	r25, 0x20	; 32
    44e8:	8f 93       	push	r24
    44ea:	1f 92       	push	r1
    44ec:	1f 92       	push	r1
    44ee:	1f 92       	push	r1
    44f0:	81 e0       	ldi	r24, 0x01	; 1
    44f2:	8f 93       	push	r24
    44f4:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <vDisplayWriteStringAtPos>
    44f8:	0f 90       	pop	r0
    44fa:	0f 90       	pop	r0
    44fc:	0f 90       	pop	r0
    44fe:	0f 90       	pop	r0
    4500:	0f 90       	pop	r0
    4502:	0f 90       	pop	r0
                
				break;
    4504:	b9 c0       	rjmp	.+370    	; 0x4678 <vSteuertask+0x310>
			}
		
			case bigdata:
			{
    			DataString[0] = 0x5F;
    4506:	8f e5       	ldi	r24, 0x5F	; 95
    4508:	8e 83       	std	Y+6, r24	; 0x06
    			DataString[1] = 0x4D;
    450a:	8d e4       	ldi	r24, 0x4D	; 77
    450c:	8f 83       	std	Y+7, r24	; 0x07
    			DataString[2] = 0x65;
    450e:	85 e6       	ldi	r24, 0x65	; 101
    4510:	88 87       	std	Y+8, r24	; 0x08
    			DataString[3] = 0x69;
    4512:	89 e6       	ldi	r24, 0x69	; 105
    4514:	89 87       	std	Y+9, r24	; 0x09
    			DataString[4] = 0x6E;
    4516:	8e e6       	ldi	r24, 0x6E	; 110
    4518:	8a 87       	std	Y+10, r24	; 0x0a
    			DataString[5] = 0x2D;
    451a:	8d e2       	ldi	r24, 0x2D	; 45
    451c:	8b 87       	std	Y+11, r24	; 0x0b
    			DataString[6] = 0x4E;
    451e:	8e e4       	ldi	r24, 0x4E	; 78
    4520:	8c 87       	std	Y+12, r24	; 0x0c
    			DataString[7] = 0x61;
    4522:	81 e6       	ldi	r24, 0x61	; 97
    4524:	8d 87       	std	Y+13, r24	; 0x0d
    			DataString[8] = 0x6D;
    4526:	8d e6       	ldi	r24, 0x6D	; 109
    4528:	8e 87       	std	Y+14, r24	; 0x0e
    			DataString[9] = 0x65;
    452a:	85 e6       	ldi	r24, 0x65	; 101
    452c:	8f 87       	std	Y+15, r24	; 0x0f
    			DataString[10] = 0x2D;
    452e:	8d e2       	ldi	r24, 0x2D	; 45
    4530:	88 8b       	std	Y+16, r24	; 0x10
    			DataString[11] = 0x69;
    4532:	89 e6       	ldi	r24, 0x69	; 105
    4534:	89 8b       	std	Y+17, r24	; 0x11
    			DataString[12] = 0x73;
    4536:	83 e7       	ldi	r24, 0x73	; 115
    4538:	8a 8b       	std	Y+18, r24	; 0x12
    			DataString[13] = 0x74;
    453a:	84 e7       	ldi	r24, 0x74	; 116
    453c:	8b 8b       	std	Y+19, r24	; 0x13
    			DataString[14] = 0x2D;
    453e:	8d e2       	ldi	r24, 0x2D	; 45
    4540:	8c 8b       	std	Y+20, r24	; 0x14
    			DataString[15] = 0x51;
    4542:	81 e5       	ldi	r24, 0x51	; 81
    4544:	8d 8b       	std	Y+21, r24	; 0x15
    			DataString[16] = 0x41;
    4546:	81 e4       	ldi	r24, 0x41	; 65
    4548:	8e 8b       	std	Y+22, r24	; 0x16
    			DataString[17] = 0x4D;
    454a:	8d e4       	ldi	r24, 0x4D	; 77
    454c:	8f 8b       	std	Y+23, r24	; 0x17
    			DataString[18] = 0x2D;
    454e:	8d e2       	ldi	r24, 0x2D	; 45
    4550:	88 8f       	std	Y+24, r24	; 0x18
    			DataString[19] = 0x56;
    4552:	86 e5       	ldi	r24, 0x56	; 86
    4554:	89 8f       	std	Y+25, r24	; 0x19
    			DataString[20] = 0x65;
    4556:	85 e6       	ldi	r24, 0x65	; 101
    4558:	8a 8f       	std	Y+26, r24	; 0x1a
    			DataString[21] = 0x72;
    455a:	82 e7       	ldi	r24, 0x72	; 114
    455c:	8b 8f       	std	Y+27, r24	; 0x1b
    			DataString[22] = 0x73;
    455e:	83 e7       	ldi	r24, 0x73	; 115
    4560:	8c 8f       	std	Y+28, r24	; 0x1c
    			DataString[23] = 0x69;
    4562:	89 e6       	ldi	r24, 0x69	; 105
    4564:	8d 8f       	std	Y+29, r24	; 0x1d
    			DataString[24] = 0x6F;
    4566:	8f e6       	ldi	r24, 0x6F	; 111
    4568:	8e 8f       	std	Y+30, r24	; 0x1e
    			DataString[25] = 0x6E;
    456a:	8e e6       	ldi	r24, 0x6E	; 110
    456c:	8f 8f       	std	Y+31, r24	; 0x1f
    			DataString[26] = 0x31;
    456e:	81 e3       	ldi	r24, 0x31	; 49
    4570:	88 a3       	std	Y+32, r24	; 0x20
    			DataString[27] = 0x2E;
    4572:	8e e2       	ldi	r24, 0x2E	; 46
    4574:	89 a3       	std	Y+33, r24	; 0x21
    			DataString[28] = 0x30;
    4576:	80 e3       	ldi	r24, 0x30	; 48
    4578:	8a a3       	std	Y+34, r24	; 0x22
    			DataString[29] = 0x2E;
    457a:	8e e2       	ldi	r24, 0x2E	; 46
    457c:	8b a3       	std	Y+35, r24	; 0x23
    			DataString[30] = 0x30;
    457e:	80 e3       	ldi	r24, 0x30	; 48
    4580:	8c a3       	std	Y+36, r24	; 0x24
    			DataString[31] = 0x2D;
    4582:	8d e2       	ldi	r24, 0x2D	; 45
    4584:	8d a3       	std	Y+37, r24	; 0x25
    			Steuerung = writedata;
    4586:	85 e0       	ldi	r24, 0x05	; 5
    4588:	89 83       	std	Y+1, r24	; 0x01
    			vDisplayWriteStringAtPos(1, 0, "Data:      big      ");
    458a:	88 e5       	ldi	r24, 0x58	; 88
    458c:	90 e2       	ldi	r25, 0x20	; 32
    458e:	89 2f       	mov	r24, r25
    4590:	8f 93       	push	r24
    4592:	88 e5       	ldi	r24, 0x58	; 88
    4594:	90 e2       	ldi	r25, 0x20	; 32
    4596:	8f 93       	push	r24
    4598:	1f 92       	push	r1
    459a:	1f 92       	push	r1
    459c:	1f 92       	push	r1
    459e:	81 e0       	ldi	r24, 0x01	; 1
    45a0:	8f 93       	push	r24
    45a2:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <vDisplayWriteStringAtPos>
    45a6:	0f 90       	pop	r0
    45a8:	0f 90       	pop	r0
    45aa:	0f 90       	pop	r0
    45ac:	0f 90       	pop	r0
    45ae:	0f 90       	pop	r0
    45b0:	0f 90       	pop	r0
                
				break;
    45b2:	62 c0       	rjmp	.+196    	; 0x4678 <vSteuertask+0x310>
			}
		
            case stringdata:
            {
                /* Command 3 is the command to transmit a string. */
                DataString[0] = 0x71;   // 0b011 1'0001 -> Command = 3, Databytes = 17
    45b4:	81 e7       	ldi	r24, 0x71	; 113
    45b6:	8e 83       	std	Y+6, r24	; 0x06
                sprintf((char*)&DataString[1], "Test erfolgreich!");
    45b8:	ce 01       	movw	r24, r28
    45ba:	06 96       	adiw	r24, 0x06	; 6
    45bc:	01 96       	adiw	r24, 0x01	; 1
    45be:	22 e1       	ldi	r18, 0x12	; 18
    45c0:	ed e6       	ldi	r30, 0x6D	; 109
    45c2:	f0 e2       	ldi	r31, 0x20	; 32
    45c4:	dc 01       	movw	r26, r24
    45c6:	01 90       	ld	r0, Z+
    45c8:	0d 92       	st	X+, r0
    45ca:	2a 95       	dec	r18
    45cc:	e1 f7       	brne	.-8      	; 0x45c6 <vSteuertask+0x25e>
                Steuerung = writedata;
    45ce:	85 e0       	ldi	r24, 0x05	; 5
    45d0:	89 83       	std	Y+1, r24	; 0x01
                vDisplayWriteStringAtPos(1, 0, "Data:      string   ");
    45d2:	8f e7       	ldi	r24, 0x7F	; 127
    45d4:	90 e2       	ldi	r25, 0x20	; 32
    45d6:	89 2f       	mov	r24, r25
    45d8:	8f 93       	push	r24
    45da:	8f e7       	ldi	r24, 0x7F	; 127
    45dc:	90 e2       	ldi	r25, 0x20	; 32
    45de:	8f 93       	push	r24
    45e0:	1f 92       	push	r1
    45e2:	1f 92       	push	r1
    45e4:	1f 92       	push	r1
    45e6:	81 e0       	ldi	r24, 0x01	; 1
    45e8:	8f 93       	push	r24
    45ea:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <vDisplayWriteStringAtPos>
    45ee:	0f 90       	pop	r0
    45f0:	0f 90       	pop	r0
    45f2:	0f 90       	pop	r0
    45f4:	0f 90       	pop	r0
    45f6:	0f 90       	pop	r0
    45f8:	0f 90       	pop	r0
                
                break;
    45fa:	3e c0       	rjmp	.+124    	; 0x4678 <vSteuertask+0x310>
            }
            
			case writedata:
			{
    			vDisplayWriteStringAtPos(2, 0, "Command:   %d ", DataString[0] >> 5);
    45fc:	8e 81       	ldd	r24, Y+6	; 0x06
    45fe:	82 95       	swap	r24
    4600:	86 95       	lsr	r24
    4602:	87 70       	andi	r24, 0x07	; 7
    4604:	88 2f       	mov	r24, r24
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	29 2f       	mov	r18, r25
    460a:	2f 93       	push	r18
    460c:	8f 93       	push	r24
    460e:	84 e9       	ldi	r24, 0x94	; 148
    4610:	90 e2       	ldi	r25, 0x20	; 32
    4612:	89 2f       	mov	r24, r25
    4614:	8f 93       	push	r24
    4616:	84 e9       	ldi	r24, 0x94	; 148
    4618:	90 e2       	ldi	r25, 0x20	; 32
    461a:	8f 93       	push	r24
    461c:	1f 92       	push	r1
    461e:	1f 92       	push	r1
    4620:	1f 92       	push	r1
    4622:	82 e0       	ldi	r24, 0x02	; 2
    4624:	8f 93       	push	r24
    4626:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <vDisplayWriteStringAtPos>
    462a:	8d b7       	in	r24, 0x3d	; 61
    462c:	9e b7       	in	r25, 0x3e	; 62
    462e:	08 96       	adiw	r24, 0x08	; 8
    4630:	cd bf       	out	0x3d, r28	; 61
    4632:	de bf       	out	0x3e, r29	; 62
    			vDisplayWriteStringAtPos(3, 0, "DataBytes: %d ", DataString[0] & 0x1F);
    4634:	8e 81       	ldd	r24, Y+6	; 0x06
    4636:	88 2f       	mov	r24, r24
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	8f 71       	andi	r24, 0x1F	; 31
    463c:	99 27       	eor	r25, r25
    463e:	29 2f       	mov	r18, r25
    4640:	2f 93       	push	r18
    4642:	8f 93       	push	r24
    4644:	83 ea       	ldi	r24, 0xA3	; 163
    4646:	90 e2       	ldi	r25, 0x20	; 32
    4648:	89 2f       	mov	r24, r25
    464a:	8f 93       	push	r24
    464c:	83 ea       	ldi	r24, 0xA3	; 163
    464e:	90 e2       	ldi	r25, 0x20	; 32
    4650:	8f 93       	push	r24
    4652:	1f 92       	push	r1
    4654:	1f 92       	push	r1
    4656:	1f 92       	push	r1
    4658:	83 e0       	ldi	r24, 0x03	; 3
    465a:	8f 93       	push	r24
    465c:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <vDisplayWriteStringAtPos>
    4660:	8d b7       	in	r24, 0x3d	; 61
    4662:	9e b7       	in	r25, 0x3e	; 62
    4664:	08 96       	adiw	r24, 0x08	; 8
    4666:	cd bf       	out	0x3d, r28	; 61
    4668:	de bf       	out	0x3e, r29	; 62
				vsendCommand(DataString);
    466a:	ce 01       	movw	r24, r28
    466c:	06 96       	adiw	r24, 0x06	; 6
    466e:	0e 94 a5 30 	call	0x614a	; 0x614a <vsendCommand>
				Steuerung = idle;
    4672:	19 82       	std	Y+1, r1	; 0x01
                
				break;
    4674:	01 c0       	rjmp	.+2      	; 0x4678 <vSteuertask+0x310>
                
                if (Buttonvalue&BUTTON4SHORTPRESSEDMASK)
                {
                    Steuerung=stringdata;
                }
                break;
    4676:	00 00       	nop
                
				break;
			}
		}
    
    }    
    4678:	88 ce       	rjmp	.-752    	; 0x438a <vSteuertask+0x22>

0000467a <vButtonTask>:
    
}

void vButtonTask(void *pvParameters) {
    467a:	0f 93       	push	r16
    467c:	1f 93       	push	r17
    467e:	cf 93       	push	r28
    4680:	df 93       	push	r29
    4682:	1f 92       	push	r1
    4684:	1f 92       	push	r1
    4686:	cd b7       	in	r28, 0x3d	; 61
    4688:	de b7       	in	r29, 0x3e	; 62
    468a:	89 83       	std	Y+1, r24	; 0x01
    468c:	9a 83       	std	Y+2, r25	; 0x02
    initButtons();
    468e:	0e 94 4c 01 	call	0x298	; 0x298 <initButtons>

    for(;;) {
        updateButtons();
    4692:	0e 94 68 01 	call	0x2d0	; 0x2d0 <updateButtons>
        
        if(getButtonPress(BUTTON1) == SHORT_PRESSED) {
    4696:	80 e0       	ldi	r24, 0x00	; 0
    4698:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <getButtonPress>
    469c:	81 30       	cpi	r24, 0x01	; 1
    469e:	69 f4       	brne	.+26     	; 0x46ba <vButtonTask+0x40>
            
            xTaskNotify(xSteuertask,BUTTON1SHORTPRESSEDMASK,eSetValueWithOverwrite);
    46a0:	80 91 c5 2e 	lds	r24, 0x2EC5	; 0x802ec5 <xSteuertask>
    46a4:	90 91 c6 2e 	lds	r25, 0x2EC6	; 0x802ec6 <xSteuertask+0x1>
    46a8:	00 e0       	ldi	r16, 0x00	; 0
    46aa:	10 e0       	ldi	r17, 0x00	; 0
    46ac:	23 e0       	ldi	r18, 0x03	; 3
    46ae:	41 e0       	ldi	r20, 0x01	; 1
    46b0:	50 e0       	ldi	r21, 0x00	; 0
    46b2:	60 e0       	ldi	r22, 0x00	; 0
    46b4:	70 e0       	ldi	r23, 0x00	; 0
    46b6:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <xTaskGenericNotify>
            
            
        }
        if(getButtonPress(BUTTON2) == SHORT_PRESSED) {
    46ba:	81 e0       	ldi	r24, 0x01	; 1
    46bc:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <getButtonPress>
    46c0:	81 30       	cpi	r24, 0x01	; 1
    46c2:	69 f4       	brne	.+26     	; 0x46de <vButtonTask+0x64>
            
            xTaskNotify(xSteuertask,BUTTON2SHORTPRESSEDMASK,eSetValueWithOverwrite);
    46c4:	80 91 c5 2e 	lds	r24, 0x2EC5	; 0x802ec5 <xSteuertask>
    46c8:	90 91 c6 2e 	lds	r25, 0x2EC6	; 0x802ec6 <xSteuertask+0x1>
    46cc:	00 e0       	ldi	r16, 0x00	; 0
    46ce:	10 e0       	ldi	r17, 0x00	; 0
    46d0:	23 e0       	ldi	r18, 0x03	; 3
    46d2:	42 e0       	ldi	r20, 0x02	; 2
    46d4:	50 e0       	ldi	r21, 0x00	; 0
    46d6:	60 e0       	ldi	r22, 0x00	; 0
    46d8:	70 e0       	ldi	r23, 0x00	; 0
    46da:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <xTaskGenericNotify>
        }
        if(getButtonPress(BUTTON3) == SHORT_PRESSED) {
    46de:	82 e0       	ldi	r24, 0x02	; 2
    46e0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <getButtonPress>
    46e4:	81 30       	cpi	r24, 0x01	; 1
    46e6:	69 f4       	brne	.+26     	; 0x4702 <vButtonTask+0x88>
            
            xTaskNotify(xSteuertask,BUTTON3SHORTPRESSEDMASK,eSetValueWithOverwrite);
    46e8:	80 91 c5 2e 	lds	r24, 0x2EC5	; 0x802ec5 <xSteuertask>
    46ec:	90 91 c6 2e 	lds	r25, 0x2EC6	; 0x802ec6 <xSteuertask+0x1>
    46f0:	00 e0       	ldi	r16, 0x00	; 0
    46f2:	10 e0       	ldi	r17, 0x00	; 0
    46f4:	23 e0       	ldi	r18, 0x03	; 3
    46f6:	44 e0       	ldi	r20, 0x04	; 4
    46f8:	50 e0       	ldi	r21, 0x00	; 0
    46fa:	60 e0       	ldi	r22, 0x00	; 0
    46fc:	70 e0       	ldi	r23, 0x00	; 0
    46fe:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <xTaskGenericNotify>
            
        }
        if(getButtonPress(BUTTON4) == SHORT_PRESSED) {
    4702:	83 e0       	ldi	r24, 0x03	; 3
    4704:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <getButtonPress>
    4708:	81 30       	cpi	r24, 0x01	; 1
    470a:	69 f4       	brne	.+26     	; 0x4726 <vButtonTask+0xac>
            
            xTaskNotify(xSteuertask,BUTTON4SHORTPRESSEDMASK,eSetValueWithOverwrite);
    470c:	80 91 c5 2e 	lds	r24, 0x2EC5	; 0x802ec5 <xSteuertask>
    4710:	90 91 c6 2e 	lds	r25, 0x2EC6	; 0x802ec6 <xSteuertask+0x1>
    4714:	00 e0       	ldi	r16, 0x00	; 0
    4716:	10 e0       	ldi	r17, 0x00	; 0
    4718:	23 e0       	ldi	r18, 0x03	; 3
    471a:	48 e0       	ldi	r20, 0x08	; 8
    471c:	50 e0       	ldi	r21, 0x00	; 0
    471e:	60 e0       	ldi	r22, 0x00	; 0
    4720:	70 e0       	ldi	r23, 0x00	; 0
    4722:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <xTaskGenericNotify>
            
        }

        vTaskDelay((1000/BUTTON_UPDATE_FREQUENCY_HZ)/portTICK_RATE_MS);
    4726:	6a e0       	ldi	r22, 0x0A	; 10
    4728:	70 e0       	ldi	r23, 0x00	; 0
    472a:	80 e0       	ldi	r24, 0x00	; 0
    472c:	90 e0       	ldi	r25, 0x00	; 0
    472e:	0e 94 67 13 	call	0x26ce	; 0x26ce <vTaskDelay>
    }
    4732:	af cf       	rjmp	.-162    	; 0x4692 <vButtonTask+0x18>

00004734 <__vector_108>:
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
 }
    4734:	1f 92       	push	r1
    4736:	0f 92       	push	r0
    4738:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    473c:	0f 92       	push	r0
    473e:	11 24       	eor	r1, r1
    4740:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4744:	0f 92       	push	r0
    4746:	2f 93       	push	r18
    4748:	3f 93       	push	r19
    474a:	4f 93       	push	r20
    474c:	5f 93       	push	r21
    474e:	6f 93       	push	r22
    4750:	7f 93       	push	r23
    4752:	8f 93       	push	r24
    4754:	9f 93       	push	r25
    4756:	af 93       	push	r26
    4758:	bf 93       	push	r27
    475a:	ef 93       	push	r30
    475c:	ff 93       	push	r31
    475e:	cf 93       	push	r28
    4760:	df 93       	push	r29
    4762:	1f 92       	push	r1
    4764:	cd b7       	in	r28, 0x3d	; 61
    4766:	de b7       	in	r29, 0x3e	; 62
    4768:	19 82       	std	Y+1, r1	; 0x01
    476a:	80 91 c9 2e 	lds	r24, 0x2EC9	; 0x802ec9 <egDisplayTiming>
    476e:	90 91 ca 2e 	lds	r25, 0x2ECA	; 0x802eca <egDisplayTiming+0x1>
    4772:	9e 01       	movw	r18, r28
    4774:	2f 5f       	subi	r18, 0xFF	; 255
    4776:	3f 4f       	sbci	r19, 0xFF	; 255
    4778:	41 e0       	ldi	r20, 0x01	; 1
    477a:	50 e0       	ldi	r21, 0x00	; 0
    477c:	60 e0       	ldi	r22, 0x00	; 0
    477e:	70 e0       	ldi	r23, 0x00	; 0
    4780:	0e 94 1a 07 	call	0xe34	; 0xe34 <xEventGroupSetBitsFromISR>
    4784:	60 e0       	ldi	r22, 0x00	; 0
    4786:	80 e0       	ldi	r24, 0x00	; 0
    4788:	9b e0       	ldi	r25, 0x0B	; 11
    478a:	0e 94 3d 03 	call	0x67a	; 0x67a <TC0_ConfigClockSource>
    478e:	80 e0       	ldi	r24, 0x00	; 0
    4790:	9b e0       	ldi	r25, 0x0B	; 11
    4792:	fc 01       	movw	r30, r24
    4794:	16 82       	std	Z+6, r1	; 0x06
    4796:	00 00       	nop
    4798:	0f 90       	pop	r0
    479a:	df 91       	pop	r29
    479c:	cf 91       	pop	r28
    479e:	ff 91       	pop	r31
    47a0:	ef 91       	pop	r30
    47a2:	bf 91       	pop	r27
    47a4:	af 91       	pop	r26
    47a6:	9f 91       	pop	r25
    47a8:	8f 91       	pop	r24
    47aa:	7f 91       	pop	r23
    47ac:	6f 91       	pop	r22
    47ae:	5f 91       	pop	r21
    47b0:	4f 91       	pop	r20
    47b2:	3f 91       	pop	r19
    47b4:	2f 91       	pop	r18
    47b6:	0f 90       	pop	r0
    47b8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    47bc:	0f 90       	pop	r0
    47be:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    47c2:	0f 90       	pop	r0
    47c4:	1f 90       	pop	r1
    47c6:	18 95       	reti

000047c8 <delayUS>:
    47c8:	cf 92       	push	r12
    47ca:	df 92       	push	r13
    47cc:	ef 92       	push	r14
    47ce:	ff 92       	push	r15
    47d0:	0f 93       	push	r16
    47d2:	cf 93       	push	r28
    47d4:	df 93       	push	r29
    47d6:	00 d0       	rcall	.+0      	; 0x47d8 <delayUS+0x10>
    47d8:	1f 92       	push	r1
    47da:	cd b7       	in	r28, 0x3d	; 61
    47dc:	de b7       	in	r29, 0x3e	; 62
    47de:	69 83       	std	Y+1, r22	; 0x01
    47e0:	7a 83       	std	Y+2, r23	; 0x02
    47e2:	8b 83       	std	Y+3, r24	; 0x03
    47e4:	9c 83       	std	Y+4, r25	; 0x04
    47e6:	89 81       	ldd	r24, Y+1	; 0x01
    47e8:	9a 81       	ldd	r25, Y+2	; 0x02
    47ea:	ab 81       	ldd	r26, Y+3	; 0x03
    47ec:	bc 81       	ldd	r27, Y+4	; 0x04
    47ee:	02 97       	sbiw	r24, 0x02	; 2
    47f0:	a1 05       	cpc	r26, r1
    47f2:	b1 05       	cpc	r27, r1
    47f4:	40 f4       	brcc	.+16     	; 0x4806 <delayUS+0x3e>
    47f6:	82 e0       	ldi	r24, 0x02	; 2
    47f8:	90 e0       	ldi	r25, 0x00	; 0
    47fa:	a0 e0       	ldi	r26, 0x00	; 0
    47fc:	b0 e0       	ldi	r27, 0x00	; 0
    47fe:	89 83       	std	Y+1, r24	; 0x01
    4800:	9a 83       	std	Y+2, r25	; 0x02
    4802:	ab 83       	std	Y+3, r26	; 0x03
    4804:	bc 83       	std	Y+4, r27	; 0x04
    4806:	80 e0       	ldi	r24, 0x00	; 0
    4808:	9b e0       	ldi	r25, 0x0B	; 11
    480a:	21 e0       	ldi	r18, 0x01	; 1
    480c:	fc 01       	movw	r30, r24
    480e:	26 83       	std	Z+6, r18	; 0x06
    4810:	80 e0       	ldi	r24, 0x00	; 0
    4812:	9b e0       	ldi	r25, 0x0B	; 11
    4814:	fc 01       	movw	r30, r24
    4816:	10 a2       	std	Z+32, r1	; 0x20
    4818:	11 a2       	std	Z+33, r1	; 0x21
    481a:	60 e0       	ldi	r22, 0x00	; 0
    481c:	80 e0       	ldi	r24, 0x00	; 0
    481e:	9b e0       	ldi	r25, 0x0B	; 11
    4820:	0e 94 59 03 	call	0x6b2	; 0x6b2 <TC0_ConfigWGM>
    4824:	89 81       	ldd	r24, Y+1	; 0x01
    4826:	9a 81       	ldd	r25, Y+2	; 0x02
    4828:	ab 81       	ldd	r26, Y+3	; 0x03
    482a:	bc 81       	ldd	r27, Y+4	; 0x04
    482c:	8e 3f       	cpi	r24, 0xFE	; 254
    482e:	9f 4f       	sbci	r25, 0xFF	; 255
    4830:	a1 05       	cpc	r26, r1
    4832:	b1 05       	cpc	r27, r1
    4834:	98 f4       	brcc	.+38     	; 0x485c <delayUS+0x94>
    4836:	20 e0       	ldi	r18, 0x00	; 0
    4838:	3b e0       	ldi	r19, 0x0B	; 11
    483a:	89 81       	ldd	r24, Y+1	; 0x01
    483c:	9a 81       	ldd	r25, Y+2	; 0x02
    483e:	ab 81       	ldd	r26, Y+3	; 0x03
    4840:	bc 81       	ldd	r27, Y+4	; 0x04
    4842:	b6 95       	lsr	r27
    4844:	a7 95       	ror	r26
    4846:	97 95       	ror	r25
    4848:	87 95       	ror	r24
    484a:	f9 01       	movw	r30, r18
    484c:	86 a3       	std	Z+38, r24	; 0x26
    484e:	97 a3       	std	Z+39, r25	; 0x27
    4850:	65 e0       	ldi	r22, 0x05	; 5
    4852:	80 e0       	ldi	r24, 0x00	; 0
    4854:	9b e0       	ldi	r25, 0x0B	; 11
    4856:	0e 94 3d 03 	call	0x67a	; 0x67a <TC0_ConfigClockSource>
    485a:	1f c0       	rjmp	.+62     	; 0x489a <delayUS+0xd2>
    485c:	89 81       	ldd	r24, Y+1	; 0x01
    485e:	9a 81       	ldd	r25, Y+2	; 0x02
    4860:	ab 81       	ldd	r26, Y+3	; 0x03
    4862:	bc 81       	ldd	r27, Y+4	; 0x04
    4864:	80 34       	cpi	r24, 0x40	; 64
    4866:	92 44       	sbci	r25, 0x42	; 66
    4868:	af 40       	sbci	r26, 0x0F	; 15
    486a:	b1 05       	cpc	r27, r1
    486c:	b0 f4       	brcc	.+44     	; 0x489a <delayUS+0xd2>
    486e:	20 e0       	ldi	r18, 0x00	; 0
    4870:	3b e0       	ldi	r19, 0x0B	; 11
    4872:	89 81       	ldd	r24, Y+1	; 0x01
    4874:	9a 81       	ldd	r25, Y+2	; 0x02
    4876:	ab 81       	ldd	r26, Y+3	; 0x03
    4878:	bc 81       	ldd	r27, Y+4	; 0x04
    487a:	68 94       	set
    487c:	14 f8       	bld	r1, 4
    487e:	b6 95       	lsr	r27
    4880:	a7 95       	ror	r26
    4882:	97 95       	ror	r25
    4884:	87 95       	ror	r24
    4886:	16 94       	lsr	r1
    4888:	d1 f7       	brne	.-12     	; 0x487e <delayUS+0xb6>
    488a:	f9 01       	movw	r30, r18
    488c:	86 a3       	std	Z+38, r24	; 0x26
    488e:	97 a3       	std	Z+39, r25	; 0x27
    4890:	67 e0       	ldi	r22, 0x07	; 7
    4892:	80 e0       	ldi	r24, 0x00	; 0
    4894:	9b e0       	ldi	r25, 0x0B	; 11
    4896:	0e 94 3d 03 	call	0x67a	; 0x67a <TC0_ConfigClockSource>
    489a:	80 91 c9 2e 	lds	r24, 0x2EC9	; 0x802ec9 <egDisplayTiming>
    489e:	90 91 ca 2e 	lds	r25, 0x2ECA	; 0x802eca <egDisplayTiming+0x1>
    48a2:	0f 2e       	mov	r0, r31
    48a4:	f4 ef       	ldi	r31, 0xF4	; 244
    48a6:	cf 2e       	mov	r12, r31
    48a8:	dd 24       	eor	r13, r13
    48aa:	d3 94       	inc	r13
    48ac:	e1 2c       	mov	r14, r1
    48ae:	f1 2c       	mov	r15, r1
    48b0:	f0 2d       	mov	r31, r0
    48b2:	00 e0       	ldi	r16, 0x00	; 0
    48b4:	21 e0       	ldi	r18, 0x01	; 1
    48b6:	41 e0       	ldi	r20, 0x01	; 1
    48b8:	50 e0       	ldi	r21, 0x00	; 0
    48ba:	60 e0       	ldi	r22, 0x00	; 0
    48bc:	70 e0       	ldi	r23, 0x00	; 0
    48be:	0e 94 fe 03 	call	0x7fc	; 0x7fc <xEventGroupWaitBits>
    48c2:	00 00       	nop
    48c4:	24 96       	adiw	r28, 0x04	; 4
    48c6:	cd bf       	out	0x3d, r28	; 61
    48c8:	de bf       	out	0x3e, r29	; 62
    48ca:	df 91       	pop	r29
    48cc:	cf 91       	pop	r28
    48ce:	0f 91       	pop	r16
    48d0:	ff 90       	pop	r15
    48d2:	ef 90       	pop	r14
    48d4:	df 90       	pop	r13
    48d6:	cf 90       	pop	r12
    48d8:	08 95       	ret

000048da <setPort>:
    48da:	cf 93       	push	r28
    48dc:	df 93       	push	r29
    48de:	1f 92       	push	r1
    48e0:	cd b7       	in	r28, 0x3d	; 61
    48e2:	de b7       	in	r29, 0x3e	; 62
    48e4:	89 83       	std	Y+1, r24	; 0x01
    48e6:	89 81       	ldd	r24, Y+1	; 0x01
    48e8:	8f 70       	andi	r24, 0x0F	; 15
    48ea:	89 83       	std	Y+1, r24	; 0x01
    48ec:	89 81       	ldd	r24, Y+1	; 0x01
    48ee:	82 95       	swap	r24
    48f0:	80 7f       	andi	r24, 0xF0	; 240
    48f2:	89 83       	std	Y+1, r24	; 0x01
    48f4:	80 e0       	ldi	r24, 0x00	; 0
    48f6:	96 e0       	ldi	r25, 0x06	; 6
    48f8:	20 e0       	ldi	r18, 0x00	; 0
    48fa:	36 e0       	ldi	r19, 0x06	; 6
    48fc:	f9 01       	movw	r30, r18
    48fe:	34 81       	ldd	r19, Z+4	; 0x04
    4900:	29 81       	ldd	r18, Y+1	; 0x01
    4902:	2f 60       	ori	r18, 0x0F	; 15
    4904:	23 23       	and	r18, r19
    4906:	fc 01       	movw	r30, r24
    4908:	24 83       	std	Z+4, r18	; 0x04
    490a:	80 e0       	ldi	r24, 0x00	; 0
    490c:	96 e0       	ldi	r25, 0x06	; 6
    490e:	20 e0       	ldi	r18, 0x00	; 0
    4910:	36 e0       	ldi	r19, 0x06	; 6
    4912:	f9 01       	movw	r30, r18
    4914:	34 81       	ldd	r19, Z+4	; 0x04
    4916:	29 81       	ldd	r18, Y+1	; 0x01
    4918:	23 2b       	or	r18, r19
    491a:	fc 01       	movw	r30, r24
    491c:	24 83       	std	Z+4, r18	; 0x04
    491e:	00 00       	nop
    4920:	0f 90       	pop	r0
    4922:	df 91       	pop	r29
    4924:	cf 91       	pop	r28
    4926:	08 95       	ret

00004928 <setRS>:
    4928:	cf 93       	push	r28
    492a:	df 93       	push	r29
    492c:	1f 92       	push	r1
    492e:	cd b7       	in	r28, 0x3d	; 61
    4930:	de b7       	in	r29, 0x3e	; 62
    4932:	89 83       	std	Y+1, r24	; 0x01
    4934:	89 81       	ldd	r24, Y+1	; 0x01
    4936:	88 23       	and	r24, r24
    4938:	31 f0       	breq	.+12     	; 0x4946 <setRS+0x1e>
    493a:	80 e6       	ldi	r24, 0x60	; 96
    493c:	96 e0       	ldi	r25, 0x06	; 6
    493e:	21 e0       	ldi	r18, 0x01	; 1
    4940:	fc 01       	movw	r30, r24
    4942:	25 83       	std	Z+5, r18	; 0x05
    4944:	05 c0       	rjmp	.+10     	; 0x4950 <setRS+0x28>
    4946:	80 e6       	ldi	r24, 0x60	; 96
    4948:	96 e0       	ldi	r25, 0x06	; 6
    494a:	21 e0       	ldi	r18, 0x01	; 1
    494c:	fc 01       	movw	r30, r24
    494e:	26 83       	std	Z+6, r18	; 0x06
    4950:	00 00       	nop
    4952:	0f 90       	pop	r0
    4954:	df 91       	pop	r29
    4956:	cf 91       	pop	r28
    4958:	08 95       	ret

0000495a <setRW>:
    495a:	cf 93       	push	r28
    495c:	df 93       	push	r29
    495e:	1f 92       	push	r1
    4960:	cd b7       	in	r28, 0x3d	; 61
    4962:	de b7       	in	r29, 0x3e	; 62
    4964:	89 83       	std	Y+1, r24	; 0x01
    4966:	89 81       	ldd	r24, Y+1	; 0x01
    4968:	88 23       	and	r24, r24
    496a:	31 f0       	breq	.+12     	; 0x4978 <setRW+0x1e>
    496c:	80 e6       	ldi	r24, 0x60	; 96
    496e:	96 e0       	ldi	r25, 0x06	; 6
    4970:	22 e0       	ldi	r18, 0x02	; 2
    4972:	fc 01       	movw	r30, r24
    4974:	25 83       	std	Z+5, r18	; 0x05
    4976:	05 c0       	rjmp	.+10     	; 0x4982 <setRW+0x28>
    4978:	80 e6       	ldi	r24, 0x60	; 96
    497a:	96 e0       	ldi	r25, 0x06	; 6
    497c:	22 e0       	ldi	r18, 0x02	; 2
    497e:	fc 01       	movw	r30, r24
    4980:	26 83       	std	Z+6, r18	; 0x06
    4982:	00 00       	nop
    4984:	0f 90       	pop	r0
    4986:	df 91       	pop	r29
    4988:	cf 91       	pop	r28
    498a:	08 95       	ret

0000498c <setE>:
    498c:	cf 93       	push	r28
    498e:	df 93       	push	r29
    4990:	1f 92       	push	r1
    4992:	cd b7       	in	r28, 0x3d	; 61
    4994:	de b7       	in	r29, 0x3e	; 62
    4996:	89 83       	std	Y+1, r24	; 0x01
    4998:	89 81       	ldd	r24, Y+1	; 0x01
    499a:	88 23       	and	r24, r24
    499c:	31 f0       	breq	.+12     	; 0x49aa <setE+0x1e>
    499e:	80 e6       	ldi	r24, 0x60	; 96
    49a0:	96 e0       	ldi	r25, 0x06	; 6
    49a2:	24 e0       	ldi	r18, 0x04	; 4
    49a4:	fc 01       	movw	r30, r24
    49a6:	25 83       	std	Z+5, r18	; 0x05
    49a8:	05 c0       	rjmp	.+10     	; 0x49b4 <setE+0x28>
    49aa:	80 e6       	ldi	r24, 0x60	; 96
    49ac:	96 e0       	ldi	r25, 0x06	; 6
    49ae:	24 e0       	ldi	r18, 0x04	; 4
    49b0:	fc 01       	movw	r30, r24
    49b2:	26 83       	std	Z+6, r18	; 0x06
    49b4:	00 00       	nop
    49b6:	0f 90       	pop	r0
    49b8:	df 91       	pop	r29
    49ba:	cf 91       	pop	r28
    49bc:	08 95       	ret

000049be <Nybble>:
    49be:	cf 93       	push	r28
    49c0:	df 93       	push	r29
    49c2:	cd b7       	in	r28, 0x3d	; 61
    49c4:	de b7       	in	r29, 0x3e	; 62
    49c6:	81 e0       	ldi	r24, 0x01	; 1
    49c8:	0e 94 c6 24 	call	0x498c	; 0x498c <setE>
    49cc:	61 e0       	ldi	r22, 0x01	; 1
    49ce:	70 e0       	ldi	r23, 0x00	; 0
    49d0:	80 e0       	ldi	r24, 0x00	; 0
    49d2:	90 e0       	ldi	r25, 0x00	; 0
    49d4:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <delayUS>
    49d8:	80 e0       	ldi	r24, 0x00	; 0
    49da:	0e 94 c6 24 	call	0x498c	; 0x498c <setE>
    49de:	00 00       	nop
    49e0:	df 91       	pop	r29
    49e2:	cf 91       	pop	r28
    49e4:	08 95       	ret

000049e6 <command>:
    49e6:	cf 93       	push	r28
    49e8:	df 93       	push	r29
    49ea:	1f 92       	push	r1
    49ec:	cd b7       	in	r28, 0x3d	; 61
    49ee:	de b7       	in	r29, 0x3e	; 62
    49f0:	89 83       	std	Y+1, r24	; 0x01
    49f2:	89 81       	ldd	r24, Y+1	; 0x01
    49f4:	82 95       	swap	r24
    49f6:	8f 70       	andi	r24, 0x0F	; 15
    49f8:	0e 94 6d 24 	call	0x48da	; 0x48da <setPort>
    49fc:	80 e0       	ldi	r24, 0x00	; 0
    49fe:	0e 94 94 24 	call	0x4928	; 0x4928 <setRS>
    4a02:	80 e0       	ldi	r24, 0x00	; 0
    4a04:	0e 94 ad 24 	call	0x495a	; 0x495a <setRW>
    4a08:	0e 94 df 24 	call	0x49be	; 0x49be <Nybble>
    4a0c:	89 81       	ldd	r24, Y+1	; 0x01
    4a0e:	8f 70       	andi	r24, 0x0F	; 15
    4a10:	0e 94 6d 24 	call	0x48da	; 0x48da <setPort>
    4a14:	0e 94 df 24 	call	0x49be	; 0x49be <Nybble>
    4a18:	00 00       	nop
    4a1a:	0f 90       	pop	r0
    4a1c:	df 91       	pop	r29
    4a1e:	cf 91       	pop	r28
    4a20:	08 95       	ret

00004a22 <write>:
    4a22:	cf 93       	push	r28
    4a24:	df 93       	push	r29
    4a26:	1f 92       	push	r1
    4a28:	cd b7       	in	r28, 0x3d	; 61
    4a2a:	de b7       	in	r29, 0x3e	; 62
    4a2c:	89 83       	std	Y+1, r24	; 0x01
    4a2e:	89 81       	ldd	r24, Y+1	; 0x01
    4a30:	82 95       	swap	r24
    4a32:	8f 70       	andi	r24, 0x0F	; 15
    4a34:	0e 94 6d 24 	call	0x48da	; 0x48da <setPort>
    4a38:	81 e0       	ldi	r24, 0x01	; 1
    4a3a:	0e 94 94 24 	call	0x4928	; 0x4928 <setRS>
    4a3e:	80 e0       	ldi	r24, 0x00	; 0
    4a40:	0e 94 ad 24 	call	0x495a	; 0x495a <setRW>
    4a44:	0e 94 df 24 	call	0x49be	; 0x49be <Nybble>
    4a48:	89 81       	ldd	r24, Y+1	; 0x01
    4a4a:	8f 70       	andi	r24, 0x0F	; 15
    4a4c:	0e 94 6d 24 	call	0x48da	; 0x48da <setPort>
    4a50:	0e 94 df 24 	call	0x49be	; 0x49be <Nybble>
    4a54:	00 00       	nop
    4a56:	0f 90       	pop	r0
    4a58:	df 91       	pop	r29
    4a5a:	cf 91       	pop	r28
    4a5c:	08 95       	ret

00004a5e <vInitDisplay>:
 
 void vInitDisplay() {
    4a5e:	ef 92       	push	r14
    4a60:	ff 92       	push	r15
    4a62:	0f 93       	push	r16
    4a64:	cf 93       	push	r28
    4a66:	df 93       	push	r29
    4a68:	cd b7       	in	r28, 0x3d	; 61
    4a6a:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRSET = PIN4_bm;
    4a6c:	80 e0       	ldi	r24, 0x00	; 0
    4a6e:	96 e0       	ldi	r25, 0x06	; 6
    4a70:	20 e1       	ldi	r18, 0x10	; 16
    4a72:	fc 01       	movw	r30, r24
    4a74:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN5_bm;
    4a76:	80 e0       	ldi	r24, 0x00	; 0
    4a78:	96 e0       	ldi	r25, 0x06	; 6
    4a7a:	20 e2       	ldi	r18, 0x20	; 32
    4a7c:	fc 01       	movw	r30, r24
    4a7e:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN6_bm;
    4a80:	80 e0       	ldi	r24, 0x00	; 0
    4a82:	96 e0       	ldi	r25, 0x06	; 6
    4a84:	20 e4       	ldi	r18, 0x40	; 64
    4a86:	fc 01       	movw	r30, r24
    4a88:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN7_bm;
    4a8a:	80 e0       	ldi	r24, 0x00	; 0
    4a8c:	96 e0       	ldi	r25, 0x06	; 6
    4a8e:	20 e8       	ldi	r18, 0x80	; 128
    4a90:	fc 01       	movw	r30, r24
    4a92:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN0_bm;
    4a94:	80 e6       	ldi	r24, 0x60	; 96
    4a96:	96 e0       	ldi	r25, 0x06	; 6
    4a98:	21 e0       	ldi	r18, 0x01	; 1
    4a9a:	fc 01       	movw	r30, r24
    4a9c:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN1_bm;
    4a9e:	80 e6       	ldi	r24, 0x60	; 96
    4aa0:	96 e0       	ldi	r25, 0x06	; 6
    4aa2:	22 e0       	ldi	r18, 0x02	; 2
    4aa4:	fc 01       	movw	r30, r24
    4aa6:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN2_bm;
    4aa8:	80 e6       	ldi	r24, 0x60	; 96
    4aaa:	96 e0       	ldi	r25, 0x06	; 6
    4aac:	24 e0       	ldi	r18, 0x04	; 4
    4aae:	fc 01       	movw	r30, r24
    4ab0:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUT &= 0x0F;
    4ab2:	80 e0       	ldi	r24, 0x00	; 0
    4ab4:	96 e0       	ldi	r25, 0x06	; 6
    4ab6:	20 e0       	ldi	r18, 0x00	; 0
    4ab8:	36 e0       	ldi	r19, 0x06	; 6
    4aba:	f9 01       	movw	r30, r18
    4abc:	24 81       	ldd	r18, Z+4	; 0x04
    4abe:	2f 70       	andi	r18, 0x0F	; 15
    4ac0:	fc 01       	movw	r30, r24
    4ac2:	24 83       	std	Z+4, r18	; 0x04
	PORTD.OUT &= 0xF8;
    4ac4:	80 e6       	ldi	r24, 0x60	; 96
    4ac6:	96 e0       	ldi	r25, 0x06	; 6
    4ac8:	20 e6       	ldi	r18, 0x60	; 96
    4aca:	36 e0       	ldi	r19, 0x06	; 6
    4acc:	f9 01       	movw	r30, r18
    4ace:	24 81       	ldd	r18, Z+4	; 0x04
    4ad0:	28 7f       	andi	r18, 0xF8	; 248
    4ad2:	fc 01       	movw	r30, r24
    4ad4:	24 83       	std	Z+4, r18	; 0x04

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    4ad6:	40 e0       	ldi	r20, 0x00	; 0
    4ad8:	66 e1       	ldi	r22, 0x16	; 22
    4ada:	88 e0       	ldi	r24, 0x08	; 8
    4adc:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <xQueueGenericCreate>
    4ae0:	80 93 c7 2e 	sts	0x2EC7, r24	; 0x802ec7 <displayLineQueue>
    4ae4:	90 93 c8 2e 	sts	0x2EC8, r25	; 0x802ec8 <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    4ae8:	0e 94 db 03 	call	0x7b6	; 0x7b6 <xEventGroupCreate>
    4aec:	80 93 c9 2e 	sts	0x2EC9, r24	; 0x802ec9 <egDisplayTiming>
    4af0:	90 93 ca 2e 	sts	0x2ECA, r25	; 0x802eca <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 1, NULL);	
    4af4:	e1 2c       	mov	r14, r1
    4af6:	f1 2c       	mov	r15, r1
    4af8:	01 e0       	ldi	r16, 0x01	; 1
    4afa:	20 e0       	ldi	r18, 0x00	; 0
    4afc:	30 e0       	ldi	r19, 0x00	; 0
    4afe:	4e e5       	ldi	r20, 0x5E	; 94
    4b00:	51 e0       	ldi	r21, 0x01	; 1
    4b02:	62 eb       	ldi	r22, 0xB2	; 178
    4b04:	70 e2       	ldi	r23, 0x20	; 32
    4b06:	8d e2       	ldi	r24, 0x2D	; 45
    4b08:	96 e2       	ldi	r25, 0x26	; 38
    4b0a:	0e 94 94 11 	call	0x2328	; 0x2328 <xTaskCreate>
 }
    4b0e:	00 00       	nop
    4b10:	df 91       	pop	r29
    4b12:	cf 91       	pop	r28
    4b14:	0f 91       	pop	r16
    4b16:	ff 90       	pop	r15
    4b18:	ef 90       	pop	r14
    4b1a:	08 95       	ret

00004b1c <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
    4b1c:	cf 93       	push	r28
    4b1e:	df 93       	push	r29
    4b20:	00 d0       	rcall	.+0      	; 0x4b22 <_displaySetPos+0x6>
    4b22:	1f 92       	push	r1
    4b24:	cd b7       	in	r28, 0x3d	; 61
    4b26:	de b7       	in	r29, 0x3e	; 62
    4b28:	89 83       	std	Y+1, r24	; 0x01
    4b2a:	9a 83       	std	Y+2, r25	; 0x02
    4b2c:	6b 83       	std	Y+3, r22	; 0x03
    4b2e:	7c 83       	std	Y+4, r23	; 0x04
	 switch(line) {
    4b30:	89 81       	ldd	r24, Y+1	; 0x01
    4b32:	9a 81       	ldd	r25, Y+2	; 0x02
    4b34:	81 30       	cpi	r24, 0x01	; 1
    4b36:	91 05       	cpc	r25, r1
    4b38:	89 f0       	breq	.+34     	; 0x4b5c <_displaySetPos+0x40>
    4b3a:	82 30       	cpi	r24, 0x02	; 2
    4b3c:	91 05       	cpc	r25, r1
    4b3e:	1c f4       	brge	.+6      	; 0x4b46 <_displaySetPos+0x2a>
    4b40:	89 2b       	or	r24, r25
    4b42:	39 f0       	breq	.+14     	; 0x4b52 <_displaySetPos+0x36>
    4b44:	1a c0       	rjmp	.+52     	; 0x4b7a <_displaySetPos+0x5e>
    4b46:	82 30       	cpi	r24, 0x02	; 2
    4b48:	91 05       	cpc	r25, r1
    4b4a:	69 f0       	breq	.+26     	; 0x4b66 <_displaySetPos+0x4a>
    4b4c:	03 97       	sbiw	r24, 0x03	; 3
    4b4e:	81 f0       	breq	.+32     	; 0x4b70 <_displaySetPos+0x54>
    4b50:	14 c0       	rjmp	.+40     	; 0x4b7a <_displaySetPos+0x5e>
		 case 0:
		 command(0x80 + 0x00 + pos);
    4b52:	8b 81       	ldd	r24, Y+3	; 0x03
    4b54:	80 58       	subi	r24, 0x80	; 128
    4b56:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <command>
		 break;
    4b5a:	0f c0       	rjmp	.+30     	; 0x4b7a <_displaySetPos+0x5e>
		 case 1:
		 command(0x80 + 0x40 + pos);
    4b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b5e:	80 54       	subi	r24, 0x40	; 64
    4b60:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <command>
		 break;
    4b64:	0a c0       	rjmp	.+20     	; 0x4b7a <_displaySetPos+0x5e>
		 case 2:
		 command(0x80 + 0x14 + pos);
    4b66:	8b 81       	ldd	r24, Y+3	; 0x03
    4b68:	8c 56       	subi	r24, 0x6C	; 108
    4b6a:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <command>
		 break;
    4b6e:	05 c0       	rjmp	.+10     	; 0x4b7a <_displaySetPos+0x5e>
		 case 3:
		 command(0x80 + 0x54 + pos);
    4b70:	8b 81       	ldd	r24, Y+3	; 0x03
    4b72:	8c 52       	subi	r24, 0x2C	; 44
    4b74:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <command>
		 break;
    4b78:	00 00       	nop
	 }
	 delayUS(39);
    4b7a:	67 e2       	ldi	r22, 0x27	; 39
    4b7c:	70 e0       	ldi	r23, 0x00	; 0
    4b7e:	80 e0       	ldi	r24, 0x00	; 0
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <delayUS>
 }
    4b86:	00 00       	nop
    4b88:	24 96       	adiw	r28, 0x04	; 4
    4b8a:	cd bf       	out	0x3d, r28	; 61
    4b8c:	de bf       	out	0x3e, r29	; 62
    4b8e:	df 91       	pop	r29
    4b90:	cf 91       	pop	r28
    4b92:	08 95       	ret

00004b94 <_displayWriteChar>:

 void _displayWriteChar(char c) {
    4b94:	cf 93       	push	r28
    4b96:	df 93       	push	r29
    4b98:	1f 92       	push	r1
    4b9a:	cd b7       	in	r28, 0x3d	; 61
    4b9c:	de b7       	in	r29, 0x3e	; 62
    4b9e:	89 83       	std	Y+1, r24	; 0x01
	 write(c);
    4ba0:	89 81       	ldd	r24, Y+1	; 0x01
    4ba2:	0e 94 11 25 	call	0x4a22	; 0x4a22 <write>
	 delayUS(43);
    4ba6:	6b e2       	ldi	r22, 0x2B	; 43
    4ba8:	70 e0       	ldi	r23, 0x00	; 0
    4baa:	80 e0       	ldi	r24, 0x00	; 0
    4bac:	90 e0       	ldi	r25, 0x00	; 0
    4bae:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <delayUS>
 }
    4bb2:	00 00       	nop
    4bb4:	0f 90       	pop	r0
    4bb6:	df 91       	pop	r29
    4bb8:	cf 91       	pop	r28
    4bba:	08 95       	ret

00004bbc <_displayWriteString>:
 
 void _displayWriteString(char* s) {
    4bbc:	cf 93       	push	r28
    4bbe:	df 93       	push	r29
    4bc0:	00 d0       	rcall	.+0      	; 0x4bc2 <_displayWriteString+0x6>
    4bc2:	1f 92       	push	r1
    4bc4:	cd b7       	in	r28, 0x3d	; 61
    4bc6:	de b7       	in	r29, 0x3e	; 62
    4bc8:	8b 83       	std	Y+3, r24	; 0x03
    4bca:	9c 83       	std	Y+4, r25	; 0x04
	 for(int i = 0; i < 20; i++) {
    4bcc:	19 82       	std	Y+1, r1	; 0x01
    4bce:	1a 82       	std	Y+2, r1	; 0x02
    4bd0:	19 c0       	rjmp	.+50     	; 0x4c04 <_displayWriteString+0x48>
		 if(s[i] == '\0') {
    4bd2:	89 81       	ldd	r24, Y+1	; 0x01
    4bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    4bd6:	2b 81       	ldd	r18, Y+3	; 0x03
    4bd8:	3c 81       	ldd	r19, Y+4	; 0x04
    4bda:	82 0f       	add	r24, r18
    4bdc:	93 1f       	adc	r25, r19
    4bde:	fc 01       	movw	r30, r24
    4be0:	80 81       	ld	r24, Z
    4be2:	88 23       	and	r24, r24
    4be4:	a1 f0       	breq	.+40     	; 0x4c0e <_displayWriteString+0x52>
			 break;
		 }
		 _displayWriteChar(s[i]);
    4be6:	89 81       	ldd	r24, Y+1	; 0x01
    4be8:	9a 81       	ldd	r25, Y+2	; 0x02
    4bea:	2b 81       	ldd	r18, Y+3	; 0x03
    4bec:	3c 81       	ldd	r19, Y+4	; 0x04
    4bee:	82 0f       	add	r24, r18
    4bf0:	93 1f       	adc	r25, r19
    4bf2:	fc 01       	movw	r30, r24
    4bf4:	80 81       	ld	r24, Z
    4bf6:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    4bfa:	89 81       	ldd	r24, Y+1	; 0x01
    4bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bfe:	01 96       	adiw	r24, 0x01	; 1
    4c00:	89 83       	std	Y+1, r24	; 0x01
    4c02:	9a 83       	std	Y+2, r25	; 0x02
    4c04:	89 81       	ldd	r24, Y+1	; 0x01
    4c06:	9a 81       	ldd	r25, Y+2	; 0x02
    4c08:	44 97       	sbiw	r24, 0x14	; 20
    4c0a:	1c f3       	brlt	.-58     	; 0x4bd2 <_displayWriteString+0x16>
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    4c0c:	01 c0       	rjmp	.+2      	; 0x4c10 <_displayWriteString+0x54>
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
			 break;
    4c0e:	00 00       	nop
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    4c10:	00 00       	nop
    4c12:	24 96       	adiw	r28, 0x04	; 4
    4c14:	cd bf       	out	0x3d, r28	; 61
    4c16:	de bf       	out	0x3e, r29	; 62
    4c18:	df 91       	pop	r29
    4c1a:	cf 91       	pop	r28
    4c1c:	08 95       	ret

00004c1e <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    4c1e:	cf 93       	push	r28
    4c20:	df 93       	push	r29
    4c22:	00 d0       	rcall	.+0      	; 0x4c24 <_displayWriteStringAtPos+0x6>
    4c24:	00 d0       	rcall	.+0      	; 0x4c26 <_displayWriteStringAtPos+0x8>
    4c26:	cd b7       	in	r28, 0x3d	; 61
    4c28:	de b7       	in	r29, 0x3e	; 62
    4c2a:	89 83       	std	Y+1, r24	; 0x01
    4c2c:	9a 83       	std	Y+2, r25	; 0x02
    4c2e:	6b 83       	std	Y+3, r22	; 0x03
    4c30:	7c 83       	std	Y+4, r23	; 0x04
    4c32:	4d 83       	std	Y+5, r20	; 0x05
    4c34:	5e 83       	std	Y+6, r21	; 0x06
	 _displaySetPos(line, pos);
    4c36:	2b 81       	ldd	r18, Y+3	; 0x03
    4c38:	3c 81       	ldd	r19, Y+4	; 0x04
    4c3a:	89 81       	ldd	r24, Y+1	; 0x01
    4c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c3e:	b9 01       	movw	r22, r18
    4c40:	0e 94 8e 25 	call	0x4b1c	; 0x4b1c <_displaySetPos>
	 _displayWriteString(s);
    4c44:	8d 81       	ldd	r24, Y+5	; 0x05
    4c46:	9e 81       	ldd	r25, Y+6	; 0x06
    4c48:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <_displayWriteString>
 }
    4c4c:	00 00       	nop
    4c4e:	26 96       	adiw	r28, 0x06	; 6
    4c50:	cd bf       	out	0x3d, r28	; 61
    4c52:	de bf       	out	0x3e, r29	; 62
    4c54:	df 91       	pop	r29
    4c56:	cf 91       	pop	r28
    4c58:	08 95       	ret

00004c5a <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    4c5a:	cf 93       	push	r28
    4c5c:	df 93       	push	r29
    4c5e:	cd b7       	in	r28, 0x3d	; 61
    4c60:	de b7       	in	r29, 0x3e	; 62
    4c62:	c0 57       	subi	r28, 0x70	; 112
    4c64:	d1 09       	sbc	r29, r1
    4c66:	cd bf       	out	0x3d, r28	; 61
    4c68:	de bf       	out	0x3e, r29	; 62
    4c6a:	9e 01       	movw	r18, r28
    4c6c:	21 59       	subi	r18, 0x91	; 145
    4c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c70:	f9 01       	movw	r30, r18
    4c72:	80 83       	st	Z, r24
    4c74:	91 83       	std	Z+1, r25	; 0x01
	 int i = 0;
    4c76:	19 82       	std	Y+1, r1	; 0x01
    4c78:	1a 82       	std	Y+2, r1	; 0x02
	 int j = 0;
    4c7a:	1b 82       	std	Y+3, r1	; 0x03
    4c7c:	1c 82       	std	Y+4, r1	; 0x04
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    4c7e:	1d 82       	std	Y+5, r1	; 0x05
    4c80:	1e 82       	std	Y+6, r1	; 0x06
    4c82:	26 c0       	rjmp	.+76     	; 0x4cd0 <vDisplayUpdateTask+0x76>
		for(int j = 0; j < 20; j ++) {
    4c84:	1f 82       	std	Y+7, r1	; 0x07
    4c86:	18 86       	std	Y+8, r1	; 0x08
    4c88:	1a c0       	rjmp	.+52     	; 0x4cbe <vDisplayUpdateTask+0x64>
			displayLines[i][j] = 0x20;
    4c8a:	2d 81       	ldd	r18, Y+5	; 0x05
    4c8c:	3e 81       	ldd	r19, Y+6	; 0x06
    4c8e:	44 e1       	ldi	r20, 0x14	; 20
    4c90:	42 9f       	mul	r20, r18
    4c92:	c0 01       	movw	r24, r0
    4c94:	43 9f       	mul	r20, r19
    4c96:	90 0d       	add	r25, r0
    4c98:	11 24       	eor	r1, r1
    4c9a:	9e 01       	movw	r18, r28
    4c9c:	2f 5f       	subi	r18, 0xFF	; 255
    4c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    4ca0:	28 0f       	add	r18, r24
    4ca2:	39 1f       	adc	r19, r25
    4ca4:	8f 81       	ldd	r24, Y+7	; 0x07
    4ca6:	98 85       	ldd	r25, Y+8	; 0x08
    4ca8:	82 0f       	add	r24, r18
    4caa:	93 1f       	adc	r25, r19
    4cac:	08 96       	adiw	r24, 0x08	; 8
    4cae:	20 e2       	ldi	r18, 0x20	; 32
    4cb0:	fc 01       	movw	r30, r24
    4cb2:	20 83       	st	Z, r18
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    4cb4:	8f 81       	ldd	r24, Y+7	; 0x07
    4cb6:	98 85       	ldd	r25, Y+8	; 0x08
    4cb8:	01 96       	adiw	r24, 0x01	; 1
    4cba:	8f 83       	std	Y+7, r24	; 0x07
    4cbc:	98 87       	std	Y+8, r25	; 0x08
    4cbe:	8f 81       	ldd	r24, Y+7	; 0x07
    4cc0:	98 85       	ldd	r25, Y+8	; 0x08
    4cc2:	44 97       	sbiw	r24, 0x14	; 20
    4cc4:	14 f3       	brlt	.-60     	; 0x4c8a <vDisplayUpdateTask+0x30>

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    4cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    4cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    4cca:	01 96       	adiw	r24, 0x01	; 1
    4ccc:	8d 83       	std	Y+5, r24	; 0x05
    4cce:	9e 83       	std	Y+6, r25	; 0x06
    4cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    4cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    4cd4:	04 97       	sbiw	r24, 0x04	; 4
    4cd6:	b4 f2       	brlt	.-84     	; 0x4c84 <vDisplayUpdateTask+0x2a>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    4cd8:	60 e4       	ldi	r22, 0x40	; 64
    4cda:	7c e9       	ldi	r23, 0x9C	; 156
    4cdc:	80 e0       	ldi	r24, 0x00	; 0
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <delayUS>
	 setPort(0x03);
    4ce4:	83 e0       	ldi	r24, 0x03	; 3
    4ce6:	0e 94 6d 24 	call	0x48da	; 0x48da <setPort>
	 delayUS(5000);
    4cea:	68 e8       	ldi	r22, 0x88	; 136
    4cec:	73 e1       	ldi	r23, 0x13	; 19
    4cee:	80 e0       	ldi	r24, 0x00	; 0
    4cf0:	90 e0       	ldi	r25, 0x00	; 0
    4cf2:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <delayUS>
	 Nybble();
    4cf6:	0e 94 df 24 	call	0x49be	; 0x49be <Nybble>
	 delayUS(160);
    4cfa:	60 ea       	ldi	r22, 0xA0	; 160
    4cfc:	70 e0       	ldi	r23, 0x00	; 0
    4cfe:	80 e0       	ldi	r24, 0x00	; 0
    4d00:	90 e0       	ldi	r25, 0x00	; 0
    4d02:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <delayUS>
	 Nybble();
    4d06:	0e 94 df 24 	call	0x49be	; 0x49be <Nybble>
	 delayUS(160);
    4d0a:	60 ea       	ldi	r22, 0xA0	; 160
    4d0c:	70 e0       	ldi	r23, 0x00	; 0
    4d0e:	80 e0       	ldi	r24, 0x00	; 0
    4d10:	90 e0       	ldi	r25, 0x00	; 0
    4d12:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <delayUS>
	 Nybble();
    4d16:	0e 94 df 24 	call	0x49be	; 0x49be <Nybble>
	 delayUS(160);
    4d1a:	60 ea       	ldi	r22, 0xA0	; 160
    4d1c:	70 e0       	ldi	r23, 0x00	; 0
    4d1e:	80 e0       	ldi	r24, 0x00	; 0
    4d20:	90 e0       	ldi	r25, 0x00	; 0
    4d22:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <delayUS>
	 setPort(0x02);
    4d26:	82 e0       	ldi	r24, 0x02	; 2
    4d28:	0e 94 6d 24 	call	0x48da	; 0x48da <setPort>
	 Nybble();
    4d2c:	0e 94 df 24 	call	0x49be	; 0x49be <Nybble>
	 command(0x28);
    4d30:	88 e2       	ldi	r24, 0x28	; 40
    4d32:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <command>
	 command(0x10);
    4d36:	80 e1       	ldi	r24, 0x10	; 16
    4d38:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <command>
	 command(0x0C); //Cursor and Blinking off
    4d3c:	8c e0       	ldi	r24, 0x0C	; 12
    4d3e:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <command>
	 command(0x06);
    4d42:	86 e0       	ldi	r24, 0x06	; 6
    4d44:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <command>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    4d48:	68 ec       	ldi	r22, 0xC8	; 200
    4d4a:	70 e0       	ldi	r23, 0x00	; 0
    4d4c:	80 e0       	ldi	r24, 0x00	; 0
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
    4d50:	0e 94 67 13 	call	0x26ce	; 0x26ce <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    4d54:	80 91 c9 2e 	lds	r24, 0x2EC9	; 0x802ec9 <egDisplayTiming>
    4d58:	90 91 ca 2e 	lds	r25, 0x2ECA	; 0x802eca <egDisplayTiming+0x1>
    4d5c:	40 e0       	ldi	r20, 0x00	; 0
    4d5e:	50 e0       	ldi	r21, 0x00	; 0
    4d60:	ba 01       	movw	r22, r20
    4d62:	0e 94 36 05 	call	0xa6c	; 0xa6c <xEventGroupClearBits>
    4d66:	dc 01       	movw	r26, r24
    4d68:	cb 01       	movw	r24, r22
    4d6a:	89 2b       	or	r24, r25
    4d6c:	8a 2b       	or	r24, r26
    4d6e:	8b 2b       	or	r24, r27
    4d70:	09 f4       	brne	.+2      	; 0x4d74 <vDisplayUpdateTask+0x11a>
    4d72:	96 c0       	rjmp	.+300    	; 0x4ea0 <vDisplayUpdateTask+0x246>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    4d74:	80 91 c9 2e 	lds	r24, 0x2EC9	; 0x802ec9 <egDisplayTiming>
    4d78:	90 91 ca 2e 	lds	r25, 0x2ECA	; 0x802eca <egDisplayTiming+0x1>
    4d7c:	42 e0       	ldi	r20, 0x02	; 2
    4d7e:	50 e0       	ldi	r21, 0x00	; 0
    4d80:	60 e0       	ldi	r22, 0x00	; 0
    4d82:	70 e0       	ldi	r23, 0x00	; 0
    4d84:	0e 94 36 05 	call	0xa6c	; 0xa6c <xEventGroupClearBits>
			for(i = 0; i < 4;i++) {
    4d88:	19 82       	std	Y+1, r1	; 0x01
    4d8a:	1a 82       	std	Y+2, r1	; 0x02
    4d8c:	26 c0       	rjmp	.+76     	; 0x4dda <vDisplayUpdateTask+0x180>
				for(j = 0; j < 20; j ++) {
    4d8e:	1b 82       	std	Y+3, r1	; 0x03
    4d90:	1c 82       	std	Y+4, r1	; 0x04
    4d92:	1a c0       	rjmp	.+52     	; 0x4dc8 <vDisplayUpdateTask+0x16e>
					displayLines[i][j] = 0x20;
    4d94:	29 81       	ldd	r18, Y+1	; 0x01
    4d96:	3a 81       	ldd	r19, Y+2	; 0x02
    4d98:	44 e1       	ldi	r20, 0x14	; 20
    4d9a:	42 9f       	mul	r20, r18
    4d9c:	c0 01       	movw	r24, r0
    4d9e:	43 9f       	mul	r20, r19
    4da0:	90 0d       	add	r25, r0
    4da2:	11 24       	eor	r1, r1
    4da4:	9e 01       	movw	r18, r28
    4da6:	2f 5f       	subi	r18, 0xFF	; 255
    4da8:	3f 4f       	sbci	r19, 0xFF	; 255
    4daa:	28 0f       	add	r18, r24
    4dac:	39 1f       	adc	r19, r25
    4dae:	8b 81       	ldd	r24, Y+3	; 0x03
    4db0:	9c 81       	ldd	r25, Y+4	; 0x04
    4db2:	82 0f       	add	r24, r18
    4db4:	93 1f       	adc	r25, r19
    4db6:	08 96       	adiw	r24, 0x08	; 8
    4db8:	20 e2       	ldi	r18, 0x20	; 32
    4dba:	fc 01       	movw	r30, r24
    4dbc:	20 83       	st	Z, r18
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    4dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    4dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    4dc2:	01 96       	adiw	r24, 0x01	; 1
    4dc4:	8b 83       	std	Y+3, r24	; 0x03
    4dc6:	9c 83       	std	Y+4, r25	; 0x04
    4dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    4dca:	9c 81       	ldd	r25, Y+4	; 0x04
    4dcc:	44 97       	sbiw	r24, 0x14	; 20
    4dce:	14 f3       	brlt	.-60     	; 0x4d94 <vDisplayUpdateTask+0x13a>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    4dd0:	89 81       	ldd	r24, Y+1	; 0x01
    4dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    4dd4:	01 96       	adiw	r24, 0x01	; 1
    4dd6:	89 83       	std	Y+1, r24	; 0x01
    4dd8:	9a 83       	std	Y+2, r25	; 0x02
    4dda:	89 81       	ldd	r24, Y+1	; 0x01
    4ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    4dde:	04 97       	sbiw	r24, 0x04	; 4
    4de0:	b4 f2       	brlt	.-84     	; 0x4d8e <vDisplayUpdateTask+0x134>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    4de2:	5e c0       	rjmp	.+188    	; 0x4ea0 <vDisplayUpdateTask+0x246>
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    4de4:	80 91 c7 2e 	lds	r24, 0x2EC7	; 0x802ec7 <displayLineQueue>
    4de8:	90 91 c8 2e 	lds	r25, 0x2EC8	; 0x802ec8 <displayLineQueue+0x1>
    4dec:	be 01       	movw	r22, r28
    4dee:	67 5a       	subi	r22, 0xA7	; 167
    4df0:	7f 4f       	sbci	r23, 0xFF	; 255
    4df2:	2f ef       	ldi	r18, 0xFF	; 255
    4df4:	3f ef       	ldi	r19, 0xFF	; 255
    4df6:	a9 01       	movw	r20, r18
    4df8:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <xQueueReceive>
    4dfc:	88 23       	and	r24, r24
    4dfe:	09 f4       	brne	.+2      	; 0x4e02 <vDisplayUpdateTask+0x1a8>
    4e00:	4f c0       	rjmp	.+158    	; 0x4ea0 <vDisplayUpdateTask+0x246>
				i=0;			
    4e02:	19 82       	std	Y+1, r1	; 0x01
    4e04:	1a 82       	std	Y+2, r1	; 0x02
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    4e06:	32 c0       	rjmp	.+100    	; 0x4e6c <vDisplayUpdateTask+0x212>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    4e08:	ce 01       	movw	r24, r28
    4e0a:	87 5a       	subi	r24, 0xA7	; 167
    4e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    4e0e:	fc 01       	movw	r30, r24
    4e10:	80 81       	ld	r24, Z
    4e12:	48 2f       	mov	r20, r24
    4e14:	50 e0       	ldi	r21, 0x00	; 0
    4e16:	ce 01       	movw	r24, r28
    4e18:	87 5a       	subi	r24, 0xA7	; 167
    4e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e1c:	fc 01       	movw	r30, r24
    4e1e:	81 81       	ldd	r24, Z+1	; 0x01
    4e20:	28 2f       	mov	r18, r24
    4e22:	30 e0       	ldi	r19, 0x00	; 0
    4e24:	89 81       	ldd	r24, Y+1	; 0x01
    4e26:	9a 81       	ldd	r25, Y+2	; 0x02
    4e28:	82 0f       	add	r24, r18
    4e2a:	93 1f       	adc	r25, r19
    4e2c:	be 01       	movw	r22, r28
    4e2e:	67 5a       	subi	r22, 0xA7	; 167
    4e30:	7f 4f       	sbci	r23, 0xFF	; 255
    4e32:	29 81       	ldd	r18, Y+1	; 0x01
    4e34:	3a 81       	ldd	r19, Y+2	; 0x02
    4e36:	26 0f       	add	r18, r22
    4e38:	37 1f       	adc	r19, r23
    4e3a:	2e 5f       	subi	r18, 0xFE	; 254
    4e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e3e:	f9 01       	movw	r30, r18
    4e40:	60 81       	ld	r22, Z
    4e42:	74 e1       	ldi	r23, 0x14	; 20
    4e44:	74 9f       	mul	r23, r20
    4e46:	90 01       	movw	r18, r0
    4e48:	75 9f       	mul	r23, r21
    4e4a:	30 0d       	add	r19, r0
    4e4c:	11 24       	eor	r1, r1
    4e4e:	ae 01       	movw	r20, r28
    4e50:	4f 5f       	subi	r20, 0xFF	; 255
    4e52:	5f 4f       	sbci	r21, 0xFF	; 255
    4e54:	24 0f       	add	r18, r20
    4e56:	35 1f       	adc	r19, r21
    4e58:	82 0f       	add	r24, r18
    4e5a:	93 1f       	adc	r25, r19
    4e5c:	08 96       	adiw	r24, 0x08	; 8
    4e5e:	fc 01       	movw	r30, r24
    4e60:	60 83       	st	Z, r22
					i++;
    4e62:	89 81       	ldd	r24, Y+1	; 0x01
    4e64:	9a 81       	ldd	r25, Y+2	; 0x02
    4e66:	01 96       	adiw	r24, 0x01	; 1
    4e68:	89 83       	std	Y+1, r24	; 0x01
    4e6a:	9a 83       	std	Y+2, r25	; 0x02
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    4e6c:	ce 01       	movw	r24, r28
    4e6e:	87 5a       	subi	r24, 0xA7	; 167
    4e70:	9f 4f       	sbci	r25, 0xFF	; 255
    4e72:	fc 01       	movw	r30, r24
    4e74:	81 81       	ldd	r24, Z+1	; 0x01
    4e76:	28 2f       	mov	r18, r24
    4e78:	30 e0       	ldi	r19, 0x00	; 0
    4e7a:	89 81       	ldd	r24, Y+1	; 0x01
    4e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e7e:	82 0f       	add	r24, r18
    4e80:	93 1f       	adc	r25, r19
    4e82:	44 97       	sbiw	r24, 0x14	; 20
    4e84:	6c f4       	brge	.+26     	; 0x4ea0 <vDisplayUpdateTask+0x246>
    4e86:	9e 01       	movw	r18, r28
    4e88:	27 5a       	subi	r18, 0xA7	; 167
    4e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    4e8c:	89 81       	ldd	r24, Y+1	; 0x01
    4e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e90:	82 0f       	add	r24, r18
    4e92:	93 1f       	adc	r25, r19
    4e94:	02 96       	adiw	r24, 0x02	; 2
    4e96:	fc 01       	movw	r30, r24
    4e98:	80 81       	ld	r24, Z
    4e9a:	88 23       	and	r24, r24
    4e9c:	09 f0       	breq	.+2      	; 0x4ea0 <vDisplayUpdateTask+0x246>
    4e9e:	b4 cf       	rjmp	.-152    	; 0x4e08 <vDisplayUpdateTask+0x1ae>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    4ea0:	80 91 c7 2e 	lds	r24, 0x2EC7	; 0x802ec7 <displayLineQueue>
    4ea4:	90 91 c8 2e 	lds	r25, 0x2EC8	; 0x802ec8 <displayLineQueue+0x1>
    4ea8:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <uxQueueMessagesWaiting>
    4eac:	88 23       	and	r24, r24
    4eae:	09 f0       	breq	.+2      	; 0x4eb2 <vDisplayUpdateTask+0x258>
    4eb0:	99 cf       	rjmp	.-206    	; 0x4de4 <vDisplayUpdateTask+0x18a>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    4eb2:	19 82       	std	Y+1, r1	; 0x01
    4eb4:	1a 82       	std	Y+2, r1	; 0x02
    4eb6:	19 c0       	rjmp	.+50     	; 0x4eea <vDisplayUpdateTask+0x290>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    4eb8:	9e 01       	movw	r18, r28
    4eba:	27 5f       	subi	r18, 0xF7	; 247
    4ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    4ebe:	49 81       	ldd	r20, Y+1	; 0x01
    4ec0:	5a 81       	ldd	r21, Y+2	; 0x02
    4ec2:	64 e1       	ldi	r22, 0x14	; 20
    4ec4:	64 9f       	mul	r22, r20
    4ec6:	c0 01       	movw	r24, r0
    4ec8:	65 9f       	mul	r22, r21
    4eca:	90 0d       	add	r25, r0
    4ecc:	11 24       	eor	r1, r1
    4ece:	28 0f       	add	r18, r24
    4ed0:	39 1f       	adc	r19, r25
    4ed2:	89 81       	ldd	r24, Y+1	; 0x01
    4ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed6:	a9 01       	movw	r20, r18
    4ed8:	60 e0       	ldi	r22, 0x00	; 0
    4eda:	70 e0       	ldi	r23, 0x00	; 0
    4edc:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    4ee0:	89 81       	ldd	r24, Y+1	; 0x01
    4ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ee4:	01 96       	adiw	r24, 0x01	; 1
    4ee6:	89 83       	std	Y+1, r24	; 0x01
    4ee8:	9a 83       	std	Y+2, r25	; 0x02
    4eea:	89 81       	ldd	r24, Y+1	; 0x01
    4eec:	9a 81       	ldd	r25, Y+2	; 0x02
    4eee:	04 97       	sbiw	r24, 0x04	; 4
    4ef0:	1c f3       	brlt	.-58     	; 0x4eb8 <vDisplayUpdateTask+0x25e>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
		 }
	 }
    4ef2:	2a cf       	rjmp	.-428    	; 0x4d48 <vDisplayUpdateTask+0xee>

00004ef4 <vDisplayClear>:
 }
 

void vDisplayClear() {
    4ef4:	cf 93       	push	r28
    4ef6:	df 93       	push	r29
    4ef8:	cd b7       	in	r28, 0x3d	; 61
    4efa:	de b7       	in	r29, 0x3e	; 62
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    4efc:	80 91 c9 2e 	lds	r24, 0x2EC9	; 0x802ec9 <egDisplayTiming>
    4f00:	90 91 ca 2e 	lds	r25, 0x2ECA	; 0x802eca <egDisplayTiming+0x1>
    4f04:	42 e0       	ldi	r20, 0x02	; 2
    4f06:	50 e0       	ldi	r21, 0x00	; 0
    4f08:	60 e0       	ldi	r22, 0x00	; 0
    4f0a:	70 e0       	ldi	r23, 0x00	; 0
    4f0c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <xEventGroupSetBits>
}
    4f10:	00 00       	nop
    4f12:	df 91       	pop	r29
    4f14:	cf 91       	pop	r28
    4f16:	08 95       	ret

00004f18 <vDisplayWriteStringAtPos>:

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    4f18:	cf 93       	push	r28
    4f1a:	df 93       	push	r29
    4f1c:	1f 92       	push	r1
    4f1e:	1f 92       	push	r1
    4f20:	cd b7       	in	r28, 0x3d	; 61
    4f22:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
    4f24:	ce 01       	movw	r24, r28
    4f26:	0e 96       	adiw	r24, 0x0e	; 14
    4f28:	89 83       	std	Y+1, r24	; 0x01
    4f2a:	9a 83       	std	Y+2, r25	; 0x02
	display_vprintf(line, pos, fmt, arg);
    4f2c:	29 81       	ldd	r18, Y+1	; 0x01
    4f2e:	3a 81       	ldd	r19, Y+2	; 0x02
    4f30:	4c 85       	ldd	r20, Y+12	; 0x0c
    4f32:	5d 85       	ldd	r21, Y+13	; 0x0d
    4f34:	6a 85       	ldd	r22, Y+10	; 0x0a
    4f36:	7b 85       	ldd	r23, Y+11	; 0x0b
    4f38:	88 85       	ldd	r24, Y+8	; 0x08
    4f3a:	99 85       	ldd	r25, Y+9	; 0x09
    4f3c:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <display_vprintf>
	va_end(arg);	
}
    4f40:	00 00       	nop
    4f42:	0f 90       	pop	r0
    4f44:	0f 90       	pop	r0
    4f46:	df 91       	pop	r29
    4f48:	cf 91       	pop	r28
    4f4a:	08 95       	ret

00004f4c <display_vprintf>:
 
static int display_vprintf(int line, int pos, char const *fmt, va_list arg) {
    4f4c:	0f 93       	push	r16
    4f4e:	cf 93       	push	r28
    4f50:	df 93       	push	r29
    4f52:	cd b7       	in	r28, 0x3d	; 61
    4f54:	de b7       	in	r29, 0x3e	; 62
    4f56:	ec 97       	sbiw	r28, 0x3c	; 60
    4f58:	cd bf       	out	0x3d, r28	; 61
    4f5a:	de bf       	out	0x3e, r29	; 62
    4f5c:	8d ab       	std	Y+53, r24	; 0x35
    4f5e:	9e ab       	std	Y+54, r25	; 0x36
    4f60:	6f ab       	std	Y+55, r22	; 0x37
    4f62:	78 af       	std	Y+56, r23	; 0x38
    4f64:	49 af       	std	Y+57, r20	; 0x39
    4f66:	5a af       	std	Y+58, r21	; 0x3a
    4f68:	2b af       	std	Y+59, r18	; 0x3b
    4f6a:	3c af       	std	Y+60, r19	; 0x3c
	int int_temp;
	char char_temp;
	char *string_temp;
	double double_temp;
	char ch;
	int length = 0;
    4f6c:	19 82       	std	Y+1, r1	; 0x01
    4f6e:	1a 82       	std	Y+2, r1	; 0x02

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    4f70:	1b 82       	std	Y+3, r1	; 0x03
    4f72:	1c 82       	std	Y+4, r1	; 0x04
    4f74:	0b c0       	rjmp	.+22     	; 0x4f8c <display_vprintf+0x40>
		buffer[i] = 0x00;
    4f76:	8b 81       	ldd	r24, Y+3	; 0x03
    4f78:	9c 81       	ldd	r25, Y+4	; 0x04
    4f7a:	8a 56       	subi	r24, 0x6A	; 106
    4f7c:	92 4d       	sbci	r25, 0xD2	; 210
    4f7e:	fc 01       	movw	r30, r24
    4f80:	10 82       	st	Z, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    4f82:	8b 81       	ldd	r24, Y+3	; 0x03
    4f84:	9c 81       	ldd	r25, Y+4	; 0x04
    4f86:	01 96       	adiw	r24, 0x01	; 1
    4f88:	8b 83       	std	Y+3, r24	; 0x03
    4f8a:	9c 83       	std	Y+4, r25	; 0x04
    4f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f90:	44 97       	sbiw	r24, 0x14	; 20
    4f92:	8c f3       	brlt	.-30     	; 0x4f76 <display_vprintf+0x2a>
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    4f94:	1d 82       	std	Y+5, r1	; 0x05
    4f96:	1e 82       	std	Y+6, r1	; 0x06
    4f98:	0b c0       	rjmp	.+22     	; 0x4fb0 <display_vprintf+0x64>
		str[i] = 0x00;
    4f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    4f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    4f9e:	86 55       	subi	r24, 0x56	; 86
    4fa0:	92 4d       	sbci	r25, 0xD2	; 210
    4fa2:	fc 01       	movw	r30, r24
    4fa4:	10 82       	st	Z, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    4fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    4fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    4faa:	01 96       	adiw	r24, 0x01	; 1
    4fac:	8d 83       	std	Y+5, r24	; 0x05
    4fae:	9e 83       	std	Y+6, r25	; 0x06
    4fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    4fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    4fb4:	44 97       	sbiw	r24, 0x14	; 20
    4fb6:	8c f3       	brlt	.-30     	; 0x4f9a <display_vprintf+0x4e>
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    4fb8:	be c1       	rjmp	.+892    	; 0x5336 <display_vprintf+0x3ea>
		if ( '%' == ch ) {
    4fba:	8d 89       	ldd	r24, Y+21	; 0x15
    4fbc:	85 32       	cpi	r24, 0x25	; 37
    4fbe:	09 f0       	breq	.+2      	; 0x4fc2 <display_vprintf+0x76>
    4fc0:	a0 c1       	rjmp	.+832    	; 0x5302 <display_vprintf+0x3b6>
			switch (ch = *fmt++) {
    4fc2:	89 ad       	ldd	r24, Y+57	; 0x39
    4fc4:	9a ad       	ldd	r25, Y+58	; 0x3a
    4fc6:	9c 01       	movw	r18, r24
    4fc8:	2f 5f       	subi	r18, 0xFF	; 255
    4fca:	3f 4f       	sbci	r19, 0xFF	; 255
    4fcc:	29 af       	std	Y+57, r18	; 0x39
    4fce:	3a af       	std	Y+58, r19	; 0x3a
    4fd0:	fc 01       	movw	r30, r24
    4fd2:	80 81       	ld	r24, Z
    4fd4:	8d 8b       	std	Y+21, r24	; 0x15
    4fd6:	8d 89       	ldd	r24, Y+21	; 0x15
    4fd8:	88 2f       	mov	r24, r24
    4fda:	90 e0       	ldi	r25, 0x00	; 0
    4fdc:	85 36       	cpi	r24, 0x65	; 101
    4fde:	91 05       	cpc	r25, r1
    4fe0:	09 f4       	brne	.+2      	; 0x4fe4 <display_vprintf+0x98>
    4fe2:	46 c1       	rjmp	.+652    	; 0x5270 <display_vprintf+0x324>
    4fe4:	86 36       	cpi	r24, 0x66	; 102
    4fe6:	91 05       	cpc	r25, r1
    4fe8:	54 f4       	brge	.+20     	; 0x4ffe <display_vprintf+0xb2>
    4fea:	83 36       	cpi	r24, 0x63	; 99
    4fec:	91 05       	cpc	r25, r1
    4fee:	01 f1       	breq	.+64     	; 0x5030 <display_vprintf+0xe4>
    4ff0:	84 36       	cpi	r24, 0x64	; 100
    4ff2:	91 05       	cpc	r25, r1
    4ff4:	0c f0       	brlt	.+2      	; 0x4ff8 <display_vprintf+0xac>
    4ff6:	70 c0       	rjmp	.+224    	; 0x50d8 <display_vprintf+0x18c>
    4ff8:	85 97       	sbiw	r24, 0x25	; 37
    4ffa:	69 f0       	breq	.+26     	; 0x5016 <display_vprintf+0xca>
    4ffc:	9c c1       	rjmp	.+824    	; 0x5336 <display_vprintf+0x3ea>
    4ffe:	83 37       	cpi	r24, 0x73	; 115
    5000:	91 05       	cpc	r25, r1
    5002:	71 f1       	breq	.+92     	; 0x5060 <display_vprintf+0x114>
    5004:	88 37       	cpi	r24, 0x78	; 120
    5006:	91 05       	cpc	r25, r1
    5008:	09 f4       	brne	.+2      	; 0x500c <display_vprintf+0xc0>
    500a:	a8 c0       	rjmp	.+336    	; 0x515c <display_vprintf+0x210>
    500c:	86 36       	cpi	r24, 0x66	; 102
    500e:	91 05       	cpc	r25, r1
    5010:	09 f4       	brne	.+2      	; 0x5014 <display_vprintf+0xc8>
    5012:	e6 c0       	rjmp	.+460    	; 0x51e0 <display_vprintf+0x294>
    5014:	90 c1       	rjmp	.+800    	; 0x5336 <display_vprintf+0x3ea>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    5016:	89 81       	ldd	r24, Y+1	; 0x01
    5018:	9a 81       	ldd	r25, Y+2	; 0x02
    501a:	86 55       	subi	r24, 0x56	; 86
    501c:	92 4d       	sbci	r25, 0xD2	; 210
    501e:	25 e2       	ldi	r18, 0x25	; 37
    5020:	fc 01       	movw	r30, r24
    5022:	20 83       	st	Z, r18
				length++;
    5024:	89 81       	ldd	r24, Y+1	; 0x01
    5026:	9a 81       	ldd	r25, Y+2	; 0x02
    5028:	01 96       	adiw	r24, 0x01	; 1
    502a:	89 83       	std	Y+1, r24	; 0x01
    502c:	9a 83       	std	Y+2, r25	; 0x02
				break;
    502e:	83 c1       	rjmp	.+774    	; 0x5336 <display_vprintf+0x3ea>

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    5030:	8b ad       	ldd	r24, Y+59	; 0x3b
    5032:	9c ad       	ldd	r25, Y+60	; 0x3c
    5034:	9c 01       	movw	r18, r24
    5036:	2e 5f       	subi	r18, 0xFE	; 254
    5038:	3f 4f       	sbci	r19, 0xFF	; 255
    503a:	2b af       	std	Y+59, r18	; 0x3b
    503c:	3c af       	std	Y+60, r19	; 0x3c
    503e:	fc 01       	movw	r30, r24
    5040:	80 81       	ld	r24, Z
    5042:	91 81       	ldd	r25, Z+1	; 0x01
    5044:	8e 8b       	std	Y+22, r24	; 0x16
				str[length] = char_temp;
    5046:	89 81       	ldd	r24, Y+1	; 0x01
    5048:	9a 81       	ldd	r25, Y+2	; 0x02
    504a:	86 55       	subi	r24, 0x56	; 86
    504c:	92 4d       	sbci	r25, 0xD2	; 210
    504e:	2e 89       	ldd	r18, Y+22	; 0x16
    5050:	fc 01       	movw	r30, r24
    5052:	20 83       	st	Z, r18
				length++;
    5054:	89 81       	ldd	r24, Y+1	; 0x01
    5056:	9a 81       	ldd	r25, Y+2	; 0x02
    5058:	01 96       	adiw	r24, 0x01	; 1
    505a:	89 83       	std	Y+1, r24	; 0x01
    505c:	9a 83       	std	Y+2, r25	; 0x02
				break;
    505e:	6b c1       	rjmp	.+726    	; 0x5336 <display_vprintf+0x3ea>

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    5060:	8b ad       	ldd	r24, Y+59	; 0x3b
    5062:	9c ad       	ldd	r25, Y+60	; 0x3c
    5064:	9c 01       	movw	r18, r24
    5066:	2e 5f       	subi	r18, 0xFE	; 254
    5068:	3f 4f       	sbci	r19, 0xFF	; 255
    506a:	2b af       	std	Y+59, r18	; 0x3b
    506c:	3c af       	std	Y+60, r19	; 0x3c
    506e:	fc 01       	movw	r30, r24
    5070:	80 81       	ld	r24, Z
    5072:	91 81       	ldd	r25, Z+1	; 0x01
    5074:	8f 8b       	std	Y+23, r24	; 0x17
    5076:	98 8f       	std	Y+24, r25	; 0x18
				for(int i = 0; i < strlen(string_temp);i++) {
    5078:	1f 82       	std	Y+7, r1	; 0x07
    507a:	18 86       	std	Y+8, r1	; 0x08
    507c:	17 c0       	rjmp	.+46     	; 0x50ac <display_vprintf+0x160>
					str[length+i] = string_temp[i];
    507e:	29 81       	ldd	r18, Y+1	; 0x01
    5080:	3a 81       	ldd	r19, Y+2	; 0x02
    5082:	8f 81       	ldd	r24, Y+7	; 0x07
    5084:	98 85       	ldd	r25, Y+8	; 0x08
    5086:	82 0f       	add	r24, r18
    5088:	93 1f       	adc	r25, r19
    508a:	2f 81       	ldd	r18, Y+7	; 0x07
    508c:	38 85       	ldd	r19, Y+8	; 0x08
    508e:	4f 89       	ldd	r20, Y+23	; 0x17
    5090:	58 8d       	ldd	r21, Y+24	; 0x18
    5092:	24 0f       	add	r18, r20
    5094:	35 1f       	adc	r19, r21
    5096:	f9 01       	movw	r30, r18
    5098:	20 81       	ld	r18, Z
    509a:	86 55       	subi	r24, 0x56	; 86
    509c:	92 4d       	sbci	r25, 0xD2	; 210
    509e:	fc 01       	movw	r30, r24
    50a0:	20 83       	st	Z, r18
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    50a2:	8f 81       	ldd	r24, Y+7	; 0x07
    50a4:	98 85       	ldd	r25, Y+8	; 0x08
    50a6:	01 96       	adiw	r24, 0x01	; 1
    50a8:	8f 83       	std	Y+7, r24	; 0x07
    50aa:	98 87       	std	Y+8, r25	; 0x08
    50ac:	8f 89       	ldd	r24, Y+23	; 0x17
    50ae:	98 8d       	ldd	r25, Y+24	; 0x18
    50b0:	0e 94 c6 34 	call	0x698c	; 0x698c <strlen>
    50b4:	9c 01       	movw	r18, r24
    50b6:	8f 81       	ldd	r24, Y+7	; 0x07
    50b8:	98 85       	ldd	r25, Y+8	; 0x08
    50ba:	82 17       	cp	r24, r18
    50bc:	93 07       	cpc	r25, r19
    50be:	f8 f2       	brcs	.-66     	; 0x507e <display_vprintf+0x132>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    50c0:	8f 89       	ldd	r24, Y+23	; 0x17
    50c2:	98 8d       	ldd	r25, Y+24	; 0x18
    50c4:	0e 94 c6 34 	call	0x698c	; 0x698c <strlen>
    50c8:	9c 01       	movw	r18, r24
    50ca:	89 81       	ldd	r24, Y+1	; 0x01
    50cc:	9a 81       	ldd	r25, Y+2	; 0x02
    50ce:	82 0f       	add	r24, r18
    50d0:	93 1f       	adc	r25, r19
    50d2:	89 83       	std	Y+1, r24	; 0x01
    50d4:	9a 83       	std	Y+2, r25	; 0x02
				break;
    50d6:	2f c1       	rjmp	.+606    	; 0x5336 <display_vprintf+0x3ea>

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    50d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    50da:	9c ad       	ldd	r25, Y+60	; 0x3c
    50dc:	9c 01       	movw	r18, r24
    50de:	2e 5f       	subi	r18, 0xFE	; 254
    50e0:	3f 4f       	sbci	r19, 0xFF	; 255
    50e2:	2b af       	std	Y+59, r18	; 0x3b
    50e4:	3c af       	std	Y+60, r19	; 0x3c
    50e6:	fc 01       	movw	r30, r24
    50e8:	80 81       	ld	r24, Z
    50ea:	91 81       	ldd	r25, Z+1	; 0x01
    50ec:	89 8f       	std	Y+25, r24	; 0x19
    50ee:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 10);
    50f0:	89 8d       	ldd	r24, Y+25	; 0x19
    50f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    50f4:	4a e0       	ldi	r20, 0x0A	; 10
    50f6:	50 e0       	ldi	r21, 0x00	; 0
    50f8:	66 e9       	ldi	r22, 0x96	; 150
    50fa:	7d e2       	ldi	r23, 0x2D	; 45
    50fc:	0e 94 cf 34 	call	0x699e	; 0x699e <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    5100:	19 86       	std	Y+9, r1	; 0x09
    5102:	1a 86       	std	Y+10, r1	; 0x0a
    5104:	15 c0       	rjmp	.+42     	; 0x5130 <display_vprintf+0x1e4>
					str[length+i] = buffer[i];
    5106:	29 81       	ldd	r18, Y+1	; 0x01
    5108:	3a 81       	ldd	r19, Y+2	; 0x02
    510a:	89 85       	ldd	r24, Y+9	; 0x09
    510c:	9a 85       	ldd	r25, Y+10	; 0x0a
    510e:	82 0f       	add	r24, r18
    5110:	93 1f       	adc	r25, r19
    5112:	29 85       	ldd	r18, Y+9	; 0x09
    5114:	3a 85       	ldd	r19, Y+10	; 0x0a
    5116:	2a 56       	subi	r18, 0x6A	; 106
    5118:	32 4d       	sbci	r19, 0xD2	; 210
    511a:	f9 01       	movw	r30, r18
    511c:	20 81       	ld	r18, Z
    511e:	86 55       	subi	r24, 0x56	; 86
    5120:	92 4d       	sbci	r25, 0xD2	; 210
    5122:	fc 01       	movw	r30, r24
    5124:	20 83       	st	Z, r18

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    5126:	89 85       	ldd	r24, Y+9	; 0x09
    5128:	9a 85       	ldd	r25, Y+10	; 0x0a
    512a:	01 96       	adiw	r24, 0x01	; 1
    512c:	89 87       	std	Y+9, r24	; 0x09
    512e:	9a 87       	std	Y+10, r25	; 0x0a
    5130:	86 e9       	ldi	r24, 0x96	; 150
    5132:	9d e2       	ldi	r25, 0x2D	; 45
    5134:	0e 94 c6 34 	call	0x698c	; 0x698c <strlen>
    5138:	9c 01       	movw	r18, r24
    513a:	89 85       	ldd	r24, Y+9	; 0x09
    513c:	9a 85       	ldd	r25, Y+10	; 0x0a
    513e:	82 17       	cp	r24, r18
    5140:	93 07       	cpc	r25, r19
    5142:	08 f3       	brcs	.-62     	; 0x5106 <display_vprintf+0x1ba>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    5144:	86 e9       	ldi	r24, 0x96	; 150
    5146:	9d e2       	ldi	r25, 0x2D	; 45
    5148:	0e 94 c6 34 	call	0x698c	; 0x698c <strlen>
    514c:	9c 01       	movw	r18, r24
    514e:	89 81       	ldd	r24, Y+1	; 0x01
    5150:	9a 81       	ldd	r25, Y+2	; 0x02
    5152:	82 0f       	add	r24, r18
    5154:	93 1f       	adc	r25, r19
    5156:	89 83       	std	Y+1, r24	; 0x01
    5158:	9a 83       	std	Y+2, r25	; 0x02
				break;
    515a:	ed c0       	rjmp	.+474    	; 0x5336 <display_vprintf+0x3ea>

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    515c:	8b ad       	ldd	r24, Y+59	; 0x3b
    515e:	9c ad       	ldd	r25, Y+60	; 0x3c
    5160:	9c 01       	movw	r18, r24
    5162:	2e 5f       	subi	r18, 0xFE	; 254
    5164:	3f 4f       	sbci	r19, 0xFF	; 255
    5166:	2b af       	std	Y+59, r18	; 0x3b
    5168:	3c af       	std	Y+60, r19	; 0x3c
    516a:	fc 01       	movw	r30, r24
    516c:	80 81       	ld	r24, Z
    516e:	91 81       	ldd	r25, Z+1	; 0x01
    5170:	89 8f       	std	Y+25, r24	; 0x19
    5172:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 16);
    5174:	89 8d       	ldd	r24, Y+25	; 0x19
    5176:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5178:	40 e1       	ldi	r20, 0x10	; 16
    517a:	50 e0       	ldi	r21, 0x00	; 0
    517c:	66 e9       	ldi	r22, 0x96	; 150
    517e:	7d e2       	ldi	r23, 0x2D	; 45
    5180:	0e 94 cf 34 	call	0x699e	; 0x699e <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    5184:	1b 86       	std	Y+11, r1	; 0x0b
    5186:	1c 86       	std	Y+12, r1	; 0x0c
    5188:	15 c0       	rjmp	.+42     	; 0x51b4 <display_vprintf+0x268>
					str[length+i] = buffer[i];
    518a:	29 81       	ldd	r18, Y+1	; 0x01
    518c:	3a 81       	ldd	r19, Y+2	; 0x02
    518e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5190:	9c 85       	ldd	r25, Y+12	; 0x0c
    5192:	82 0f       	add	r24, r18
    5194:	93 1f       	adc	r25, r19
    5196:	2b 85       	ldd	r18, Y+11	; 0x0b
    5198:	3c 85       	ldd	r19, Y+12	; 0x0c
    519a:	2a 56       	subi	r18, 0x6A	; 106
    519c:	32 4d       	sbci	r19, 0xD2	; 210
    519e:	f9 01       	movw	r30, r18
    51a0:	20 81       	ld	r18, Z
    51a2:	86 55       	subi	r24, 0x56	; 86
    51a4:	92 4d       	sbci	r25, 0xD2	; 210
    51a6:	fc 01       	movw	r30, r24
    51a8:	20 83       	st	Z, r18

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    51aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    51ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    51ae:	01 96       	adiw	r24, 0x01	; 1
    51b0:	8b 87       	std	Y+11, r24	; 0x0b
    51b2:	9c 87       	std	Y+12, r25	; 0x0c
    51b4:	86 e9       	ldi	r24, 0x96	; 150
    51b6:	9d e2       	ldi	r25, 0x2D	; 45
    51b8:	0e 94 c6 34 	call	0x698c	; 0x698c <strlen>
    51bc:	9c 01       	movw	r18, r24
    51be:	8b 85       	ldd	r24, Y+11	; 0x0b
    51c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    51c2:	82 17       	cp	r24, r18
    51c4:	93 07       	cpc	r25, r19
    51c6:	08 f3       	brcs	.-62     	; 0x518a <display_vprintf+0x23e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    51c8:	86 e9       	ldi	r24, 0x96	; 150
    51ca:	9d e2       	ldi	r25, 0x2D	; 45
    51cc:	0e 94 c6 34 	call	0x698c	; 0x698c <strlen>
    51d0:	9c 01       	movw	r18, r24
    51d2:	89 81       	ldd	r24, Y+1	; 0x01
    51d4:	9a 81       	ldd	r25, Y+2	; 0x02
    51d6:	82 0f       	add	r24, r18
    51d8:	93 1f       	adc	r25, r19
    51da:	89 83       	std	Y+1, r24	; 0x01
    51dc:	9a 83       	std	Y+2, r25	; 0x02
				break;
    51de:	ab c0       	rjmp	.+342    	; 0x5336 <display_vprintf+0x3ea>

				case 'f':
				double_temp = va_arg(arg, double);
    51e0:	8b ad       	ldd	r24, Y+59	; 0x3b
    51e2:	9c ad       	ldd	r25, Y+60	; 0x3c
    51e4:	9c 01       	movw	r18, r24
    51e6:	2c 5f       	subi	r18, 0xFC	; 252
    51e8:	3f 4f       	sbci	r19, 0xFF	; 255
    51ea:	2b af       	std	Y+59, r18	; 0x3b
    51ec:	3c af       	std	Y+60, r19	; 0x3c
    51ee:	fc 01       	movw	r30, r24
    51f0:	80 81       	ld	r24, Z
    51f2:	91 81       	ldd	r25, Z+1	; 0x01
    51f4:	a2 81       	ldd	r26, Z+2	; 0x02
    51f6:	b3 81       	ldd	r27, Z+3	; 0x03
    51f8:	8b 8f       	std	Y+27, r24	; 0x1b
    51fa:	9c 8f       	std	Y+28, r25	; 0x1c
    51fc:	ad 8f       	std	Y+29, r26	; 0x1d
    51fe:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_fixed(buffer, double_temp);
    5200:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5202:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5204:	ad 8d       	ldd	r26, Y+29	; 0x1d
    5206:	be 8d       	ldd	r27, Y+30	; 0x1e
    5208:	ac 01       	movw	r20, r24
    520a:	bd 01       	movw	r22, r26
    520c:	86 e9       	ldi	r24, 0x96	; 150
    520e:	9d e2       	ldi	r25, 0x2D	; 45
    5210:	0e 94 75 2a 	call	0x54ea	; 0x54ea <ftoa_fixed>
				for(int i = 0; i < strlen(buffer);i++) {
    5214:	1d 86       	std	Y+13, r1	; 0x0d
    5216:	1e 86       	std	Y+14, r1	; 0x0e
    5218:	15 c0       	rjmp	.+42     	; 0x5244 <display_vprintf+0x2f8>
					str[length+i] = buffer[i];
    521a:	29 81       	ldd	r18, Y+1	; 0x01
    521c:	3a 81       	ldd	r19, Y+2	; 0x02
    521e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5220:	9e 85       	ldd	r25, Y+14	; 0x0e
    5222:	82 0f       	add	r24, r18
    5224:	93 1f       	adc	r25, r19
    5226:	2d 85       	ldd	r18, Y+13	; 0x0d
    5228:	3e 85       	ldd	r19, Y+14	; 0x0e
    522a:	2a 56       	subi	r18, 0x6A	; 106
    522c:	32 4d       	sbci	r19, 0xD2	; 210
    522e:	f9 01       	movw	r30, r18
    5230:	20 81       	ld	r18, Z
    5232:	86 55       	subi	r24, 0x56	; 86
    5234:	92 4d       	sbci	r25, 0xD2	; 210
    5236:	fc 01       	movw	r30, r24
    5238:	20 83       	st	Z, r18
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    523a:	8d 85       	ldd	r24, Y+13	; 0x0d
    523c:	9e 85       	ldd	r25, Y+14	; 0x0e
    523e:	01 96       	adiw	r24, 0x01	; 1
    5240:	8d 87       	std	Y+13, r24	; 0x0d
    5242:	9e 87       	std	Y+14, r25	; 0x0e
    5244:	86 e9       	ldi	r24, 0x96	; 150
    5246:	9d e2       	ldi	r25, 0x2D	; 45
    5248:	0e 94 c6 34 	call	0x698c	; 0x698c <strlen>
    524c:	9c 01       	movw	r18, r24
    524e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5250:	9e 85       	ldd	r25, Y+14	; 0x0e
    5252:	82 17       	cp	r24, r18
    5254:	93 07       	cpc	r25, r19
    5256:	08 f3       	brcs	.-62     	; 0x521a <display_vprintf+0x2ce>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    5258:	86 e9       	ldi	r24, 0x96	; 150
    525a:	9d e2       	ldi	r25, 0x2D	; 45
    525c:	0e 94 c6 34 	call	0x698c	; 0x698c <strlen>
    5260:	9c 01       	movw	r18, r24
    5262:	89 81       	ldd	r24, Y+1	; 0x01
    5264:	9a 81       	ldd	r25, Y+2	; 0x02
    5266:	82 0f       	add	r24, r18
    5268:	93 1f       	adc	r25, r19
    526a:	89 83       	std	Y+1, r24	; 0x01
    526c:	9a 83       	std	Y+2, r25	; 0x02
				break;
    526e:	63 c0       	rjmp	.+198    	; 0x5336 <display_vprintf+0x3ea>

				case 'e':
				double_temp = va_arg(arg, double);
    5270:	8b ad       	ldd	r24, Y+59	; 0x3b
    5272:	9c ad       	ldd	r25, Y+60	; 0x3c
    5274:	9c 01       	movw	r18, r24
    5276:	2c 5f       	subi	r18, 0xFC	; 252
    5278:	3f 4f       	sbci	r19, 0xFF	; 255
    527a:	2b af       	std	Y+59, r18	; 0x3b
    527c:	3c af       	std	Y+60, r19	; 0x3c
    527e:	fc 01       	movw	r30, r24
    5280:	80 81       	ld	r24, Z
    5282:	91 81       	ldd	r25, Z+1	; 0x01
    5284:	a2 81       	ldd	r26, Z+2	; 0x02
    5286:	b3 81       	ldd	r27, Z+3	; 0x03
    5288:	8b 8f       	std	Y+27, r24	; 0x1b
    528a:	9c 8f       	std	Y+28, r25	; 0x1c
    528c:	ad 8f       	std	Y+29, r26	; 0x1d
    528e:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_sci(buffer, double_temp);
    5290:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5292:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5294:	ad 8d       	ldd	r26, Y+29	; 0x1d
    5296:	be 8d       	ldd	r27, Y+30	; 0x1e
    5298:	ac 01       	movw	r20, r24
    529a:	bd 01       	movw	r22, r26
    529c:	86 e9       	ldi	r24, 0x96	; 150
    529e:	9d e2       	ldi	r25, 0x2D	; 45
    52a0:	0e 94 c4 2b 	call	0x5788	; 0x5788 <ftoa_sci>
				for(int i = 0; i < strlen(buffer);i++) {
    52a4:	1f 86       	std	Y+15, r1	; 0x0f
    52a6:	18 8a       	std	Y+16, r1	; 0x10
    52a8:	15 c0       	rjmp	.+42     	; 0x52d4 <display_vprintf+0x388>
					str[length+i] = buffer[i];
    52aa:	29 81       	ldd	r18, Y+1	; 0x01
    52ac:	3a 81       	ldd	r19, Y+2	; 0x02
    52ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    52b0:	98 89       	ldd	r25, Y+16	; 0x10
    52b2:	82 0f       	add	r24, r18
    52b4:	93 1f       	adc	r25, r19
    52b6:	2f 85       	ldd	r18, Y+15	; 0x0f
    52b8:	38 89       	ldd	r19, Y+16	; 0x10
    52ba:	2a 56       	subi	r18, 0x6A	; 106
    52bc:	32 4d       	sbci	r19, 0xD2	; 210
    52be:	f9 01       	movw	r30, r18
    52c0:	20 81       	ld	r18, Z
    52c2:	86 55       	subi	r24, 0x56	; 86
    52c4:	92 4d       	sbci	r25, 0xD2	; 210
    52c6:	fc 01       	movw	r30, r24
    52c8:	20 83       	st	Z, r18
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    52ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    52cc:	98 89       	ldd	r25, Y+16	; 0x10
    52ce:	01 96       	adiw	r24, 0x01	; 1
    52d0:	8f 87       	std	Y+15, r24	; 0x0f
    52d2:	98 8b       	std	Y+16, r25	; 0x10
    52d4:	86 e9       	ldi	r24, 0x96	; 150
    52d6:	9d e2       	ldi	r25, 0x2D	; 45
    52d8:	0e 94 c6 34 	call	0x698c	; 0x698c <strlen>
    52dc:	9c 01       	movw	r18, r24
    52de:	8f 85       	ldd	r24, Y+15	; 0x0f
    52e0:	98 89       	ldd	r25, Y+16	; 0x10
    52e2:	82 17       	cp	r24, r18
    52e4:	93 07       	cpc	r25, r19
    52e6:	08 f3       	brcs	.-62     	; 0x52aa <display_vprintf+0x35e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    52e8:	86 e9       	ldi	r24, 0x96	; 150
    52ea:	9d e2       	ldi	r25, 0x2D	; 45
    52ec:	0e 94 c6 34 	call	0x698c	; 0x698c <strlen>
    52f0:	9c 01       	movw	r18, r24
    52f2:	89 81       	ldd	r24, Y+1	; 0x01
    52f4:	9a 81       	ldd	r25, Y+2	; 0x02
    52f6:	82 0f       	add	r24, r18
    52f8:	93 1f       	adc	r25, r19
    52fa:	89 83       	std	Y+1, r24	; 0x01
    52fc:	9a 83       	std	Y+2, r25	; 0x02
				break;
    52fe:	00 00       	nop
    5300:	1a c0       	rjmp	.+52     	; 0x5336 <display_vprintf+0x3ea>
			}
		}
		else {
			str[length] = ch;
    5302:	89 81       	ldd	r24, Y+1	; 0x01
    5304:	9a 81       	ldd	r25, Y+2	; 0x02
    5306:	86 55       	subi	r24, 0x56	; 86
    5308:	92 4d       	sbci	r25, 0xD2	; 210
    530a:	2d 89       	ldd	r18, Y+21	; 0x15
    530c:	fc 01       	movw	r30, r24
    530e:	20 83       	st	Z, r18
			if(str[length] == '\n') {
    5310:	89 81       	ldd	r24, Y+1	; 0x01
    5312:	9a 81       	ldd	r25, Y+2	; 0x02
    5314:	86 55       	subi	r24, 0x56	; 86
    5316:	92 4d       	sbci	r25, 0xD2	; 210
    5318:	fc 01       	movw	r30, r24
    531a:	80 81       	ld	r24, Z
    531c:	8a 30       	cpi	r24, 0x0A	; 10
    531e:	31 f4       	brne	.+12     	; 0x532c <display_vprintf+0x3e0>
				str[length] = '\0';				
    5320:	89 81       	ldd	r24, Y+1	; 0x01
    5322:	9a 81       	ldd	r25, Y+2	; 0x02
    5324:	86 55       	subi	r24, 0x56	; 86
    5326:	92 4d       	sbci	r25, 0xD2	; 210
    5328:	fc 01       	movw	r30, r24
    532a:	10 82       	st	Z, r1
			}
			length++;
    532c:	89 81       	ldd	r24, Y+1	; 0x01
    532e:	9a 81       	ldd	r25, Y+2	; 0x02
    5330:	01 96       	adiw	r24, 0x01	; 1
    5332:	89 83       	std	Y+1, r24	; 0x01
    5334:	9a 83       	std	Y+2, r25	; 0x02
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    5336:	89 ad       	ldd	r24, Y+57	; 0x39
    5338:	9a ad       	ldd	r25, Y+58	; 0x3a
    533a:	9c 01       	movw	r18, r24
    533c:	2f 5f       	subi	r18, 0xFF	; 255
    533e:	3f 4f       	sbci	r19, 0xFF	; 255
    5340:	29 af       	std	Y+57, r18	; 0x39
    5342:	3a af       	std	Y+58, r19	; 0x3a
    5344:	fc 01       	movw	r30, r24
    5346:	80 81       	ld	r24, Z
    5348:	8d 8b       	std	Y+21, r24	; 0x15
    534a:	8d 89       	ldd	r24, Y+21	; 0x15
    534c:	88 23       	and	r24, r24
    534e:	09 f0       	breq	.+2      	; 0x5352 <display_vprintf+0x406>
    5350:	34 ce       	rjmp	.-920    	; 0x4fba <display_vprintf+0x6e>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    5352:	29 81       	ldd	r18, Y+1	; 0x01
    5354:	3a 81       	ldd	r19, Y+2	; 0x02
    5356:	8f a9       	ldd	r24, Y+55	; 0x37
    5358:	98 ad       	ldd	r25, Y+56	; 0x38
    535a:	82 0f       	add	r24, r18
    535c:	93 1f       	adc	r25, r19
    535e:	44 97       	sbiw	r24, 0x14	; 20
    5360:	54 f0       	brlt	.+20     	; 0x5376 <display_vprintf+0x42a>
		length = 20-pos;
    5362:	24 e1       	ldi	r18, 0x14	; 20
    5364:	30 e0       	ldi	r19, 0x00	; 0
    5366:	8f a9       	ldd	r24, Y+55	; 0x37
    5368:	98 ad       	ldd	r25, Y+56	; 0x38
    536a:	a9 01       	movw	r20, r18
    536c:	48 1b       	sub	r20, r24
    536e:	59 0b       	sbc	r21, r25
    5370:	ca 01       	movw	r24, r20
    5372:	89 83       	std	Y+1, r24	; 0x01
    5374:	9a 83       	std	Y+2, r25	; 0x02
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    5376:	19 8a       	std	Y+17, r1	; 0x11
    5378:	1a 8a       	std	Y+18, r1	; 0x12
    537a:	0e c0       	rjmp	.+28     	; 0x5398 <display_vprintf+0x44c>
		newLine.displayBuffer[i] = 0x00;
    537c:	9e 01       	movw	r18, r28
    537e:	2f 5d       	subi	r18, 0xDF	; 223
    5380:	3f 4f       	sbci	r19, 0xFF	; 255
    5382:	89 89       	ldd	r24, Y+17	; 0x11
    5384:	9a 89       	ldd	r25, Y+18	; 0x12
    5386:	82 0f       	add	r24, r18
    5388:	93 1f       	adc	r25, r19
    538a:	fc 01       	movw	r30, r24
    538c:	10 82       	st	Z, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    538e:	89 89       	ldd	r24, Y+17	; 0x11
    5390:	9a 89       	ldd	r25, Y+18	; 0x12
    5392:	01 96       	adiw	r24, 0x01	; 1
    5394:	89 8b       	std	Y+17, r24	; 0x11
    5396:	9a 8b       	std	Y+18, r25	; 0x12
    5398:	89 89       	ldd	r24, Y+17	; 0x11
    539a:	9a 89       	ldd	r25, Y+18	; 0x12
    539c:	44 97       	sbiw	r24, 0x14	; 20
    539e:	74 f3       	brlt	.-36     	; 0x537c <display_vprintf+0x430>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    53a0:	8d a9       	ldd	r24, Y+53	; 0x35
    53a2:	8f 8f       	std	Y+31, r24	; 0x1f
	newLine.displayPos = pos;
    53a4:	8f a9       	ldd	r24, Y+55	; 0x37
    53a6:	88 a3       	std	Y+32, r24	; 0x20
	for(int i = 0; i < length;i++) {
    53a8:	1b 8a       	std	Y+19, r1	; 0x13
    53aa:	1c 8a       	std	Y+20, r1	; 0x14
    53ac:	14 c0       	rjmp	.+40     	; 0x53d6 <display_vprintf+0x48a>
		newLine.displayBuffer[i] = str[i];
    53ae:	8b 89       	ldd	r24, Y+19	; 0x13
    53b0:	9c 89       	ldd	r25, Y+20	; 0x14
    53b2:	86 55       	subi	r24, 0x56	; 86
    53b4:	92 4d       	sbci	r25, 0xD2	; 210
    53b6:	fc 01       	movw	r30, r24
    53b8:	40 81       	ld	r20, Z
    53ba:	9e 01       	movw	r18, r28
    53bc:	2f 5d       	subi	r18, 0xDF	; 223
    53be:	3f 4f       	sbci	r19, 0xFF	; 255
    53c0:	8b 89       	ldd	r24, Y+19	; 0x13
    53c2:	9c 89       	ldd	r25, Y+20	; 0x14
    53c4:	82 0f       	add	r24, r18
    53c6:	93 1f       	adc	r25, r19
    53c8:	fc 01       	movw	r30, r24
    53ca:	40 83       	st	Z, r20
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    53cc:	8b 89       	ldd	r24, Y+19	; 0x13
    53ce:	9c 89       	ldd	r25, Y+20	; 0x14
    53d0:	01 96       	adiw	r24, 0x01	; 1
    53d2:	8b 8b       	std	Y+19, r24	; 0x13
    53d4:	9c 8b       	std	Y+20, r25	; 0x14
    53d6:	2b 89       	ldd	r18, Y+19	; 0x13
    53d8:	3c 89       	ldd	r19, Y+20	; 0x14
    53da:	89 81       	ldd	r24, Y+1	; 0x01
    53dc:	9a 81       	ldd	r25, Y+2	; 0x02
    53de:	28 17       	cp	r18, r24
    53e0:	39 07       	cpc	r19, r25
    53e2:	2c f3       	brlt	.-54     	; 0x53ae <display_vprintf+0x462>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    53e4:	80 91 c7 2e 	lds	r24, 0x2EC7	; 0x802ec7 <displayLineQueue>
    53e8:	90 91 c8 2e 	lds	r25, 0x2EC8	; 0x802ec8 <displayLineQueue+0x1>
    53ec:	be 01       	movw	r22, r28
    53ee:	61 5e       	subi	r22, 0xE1	; 225
    53f0:	7f 4f       	sbci	r23, 0xFF	; 255
    53f2:	00 e0       	ldi	r16, 0x00	; 0
    53f4:	2f ef       	ldi	r18, 0xFF	; 255
    53f6:	3f ef       	ldi	r19, 0xFF	; 255
    53f8:	a9 01       	movw	r20, r18
    53fa:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <xQueueGenericSend>
	
	
	return length;
    53fe:	89 81       	ldd	r24, Y+1	; 0x01
    5400:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5402:	ec 96       	adiw	r28, 0x3c	; 60
    5404:	cd bf       	out	0x3d, r28	; 61
    5406:	de bf       	out	0x3e, r29	; 62
    5408:	df 91       	pop	r29
    540a:	cf 91       	pop	r28
    540c:	0f 91       	pop	r16
    540e:	08 95       	ret

00005410 <normalize>:

static int normalize(double *val) {
    5410:	cf 93       	push	r28
    5412:	df 93       	push	r29
    5414:	cd b7       	in	r28, 0x3d	; 61
    5416:	de b7       	in	r29, 0x3e	; 62
    5418:	28 97       	sbiw	r28, 0x08	; 8
    541a:	cd bf       	out	0x3d, r28	; 61
    541c:	de bf       	out	0x3e, r29	; 62
    541e:	8f 83       	std	Y+7, r24	; 0x07
    5420:	98 87       	std	Y+8, r25	; 0x08
    int exponent = 0;
    5422:	19 82       	std	Y+1, r1	; 0x01
    5424:	1a 82       	std	Y+2, r1	; 0x02
    double value = *val;
    5426:	8f 81       	ldd	r24, Y+7	; 0x07
    5428:	98 85       	ldd	r25, Y+8	; 0x08
    542a:	fc 01       	movw	r30, r24
    542c:	80 81       	ld	r24, Z
    542e:	91 81       	ldd	r25, Z+1	; 0x01
    5430:	a2 81       	ldd	r26, Z+2	; 0x02
    5432:	b3 81       	ldd	r27, Z+3	; 0x03
    5434:	8b 83       	std	Y+3, r24	; 0x03
    5436:	9c 83       	std	Y+4, r25	; 0x04
    5438:	ad 83       	std	Y+5, r26	; 0x05
    543a:	be 83       	std	Y+6, r27	; 0x06

    while (value >= 1.0) {
    543c:	15 c0       	rjmp	.+42     	; 0x5468 <normalize+0x58>
        value /= 10.0;
    543e:	20 e0       	ldi	r18, 0x00	; 0
    5440:	30 e0       	ldi	r19, 0x00	; 0
    5442:	40 e2       	ldi	r20, 0x20	; 32
    5444:	51 e4       	ldi	r21, 0x41	; 65
    5446:	6b 81       	ldd	r22, Y+3	; 0x03
    5448:	7c 81       	ldd	r23, Y+4	; 0x04
    544a:	8d 81       	ldd	r24, Y+5	; 0x05
    544c:	9e 81       	ldd	r25, Y+6	; 0x06
    544e:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__divsf3>
    5452:	dc 01       	movw	r26, r24
    5454:	cb 01       	movw	r24, r22
    5456:	8b 83       	std	Y+3, r24	; 0x03
    5458:	9c 83       	std	Y+4, r25	; 0x04
    545a:	ad 83       	std	Y+5, r26	; 0x05
    545c:	be 83       	std	Y+6, r27	; 0x06
        ++exponent;
    545e:	89 81       	ldd	r24, Y+1	; 0x01
    5460:	9a 81       	ldd	r25, Y+2	; 0x02
    5462:	01 96       	adiw	r24, 0x01	; 1
    5464:	89 83       	std	Y+1, r24	; 0x01
    5466:	9a 83       	std	Y+2, r25	; 0x02

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    5468:	20 e0       	ldi	r18, 0x00	; 0
    546a:	30 e0       	ldi	r19, 0x00	; 0
    546c:	40 e8       	ldi	r20, 0x80	; 128
    546e:	5f e3       	ldi	r21, 0x3F	; 63
    5470:	6b 81       	ldd	r22, Y+3	; 0x03
    5472:	7c 81       	ldd	r23, Y+4	; 0x04
    5474:	8d 81       	ldd	r24, Y+5	; 0x05
    5476:	9e 81       	ldd	r25, Y+6	; 0x06
    5478:	0e 94 3c 34 	call	0x6878	; 0x6878 <__gesf2>
    547c:	88 23       	and	r24, r24
    547e:	fc f6       	brge	.-66     	; 0x543e <normalize+0x2e>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    5480:	15 c0       	rjmp	.+42     	; 0x54ac <normalize+0x9c>
        value *= 10.0;
    5482:	20 e0       	ldi	r18, 0x00	; 0
    5484:	30 e0       	ldi	r19, 0x00	; 0
    5486:	40 e2       	ldi	r20, 0x20	; 32
    5488:	51 e4       	ldi	r21, 0x41	; 65
    548a:	6b 81       	ldd	r22, Y+3	; 0x03
    548c:	7c 81       	ldd	r23, Y+4	; 0x04
    548e:	8d 81       	ldd	r24, Y+5	; 0x05
    5490:	9e 81       	ldd	r25, Y+6	; 0x06
    5492:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    5496:	dc 01       	movw	r26, r24
    5498:	cb 01       	movw	r24, r22
    549a:	8b 83       	std	Y+3, r24	; 0x03
    549c:	9c 83       	std	Y+4, r25	; 0x04
    549e:	ad 83       	std	Y+5, r26	; 0x05
    54a0:	be 83       	std	Y+6, r27	; 0x06
        --exponent;
    54a2:	89 81       	ldd	r24, Y+1	; 0x01
    54a4:	9a 81       	ldd	r25, Y+2	; 0x02
    54a6:	01 97       	sbiw	r24, 0x01	; 1
    54a8:	89 83       	std	Y+1, r24	; 0x01
    54aa:	9a 83       	std	Y+2, r25	; 0x02
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    54ac:	2d ec       	ldi	r18, 0xCD	; 205
    54ae:	3c ec       	ldi	r19, 0xCC	; 204
    54b0:	4c ec       	ldi	r20, 0xCC	; 204
    54b2:	5d e3       	ldi	r21, 0x3D	; 61
    54b4:	6b 81       	ldd	r22, Y+3	; 0x03
    54b6:	7c 81       	ldd	r23, Y+4	; 0x04
    54b8:	8d 81       	ldd	r24, Y+5	; 0x05
    54ba:	9e 81       	ldd	r25, Y+6	; 0x06
    54bc:	0e 94 dd 32 	call	0x65ba	; 0x65ba <__cmpsf2>
    54c0:	88 23       	and	r24, r24
    54c2:	fc f2       	brlt	.-66     	; 0x5482 <normalize+0x72>
        value *= 10.0;
        --exponent;
    }
    *val = value;
    54c4:	2f 81       	ldd	r18, Y+7	; 0x07
    54c6:	38 85       	ldd	r19, Y+8	; 0x08
    54c8:	8b 81       	ldd	r24, Y+3	; 0x03
    54ca:	9c 81       	ldd	r25, Y+4	; 0x04
    54cc:	ad 81       	ldd	r26, Y+5	; 0x05
    54ce:	be 81       	ldd	r27, Y+6	; 0x06
    54d0:	f9 01       	movw	r30, r18
    54d2:	80 83       	st	Z, r24
    54d4:	91 83       	std	Z+1, r25	; 0x01
    54d6:	a2 83       	std	Z+2, r26	; 0x02
    54d8:	b3 83       	std	Z+3, r27	; 0x03
    return exponent;
    54da:	89 81       	ldd	r24, Y+1	; 0x01
    54dc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    54de:	28 96       	adiw	r28, 0x08	; 8
    54e0:	cd bf       	out	0x3d, r28	; 61
    54e2:	de bf       	out	0x3e, r29	; 62
    54e4:	df 91       	pop	r29
    54e6:	cf 91       	pop	r28
    54e8:	08 95       	ret

000054ea <ftoa_fixed>:

static void ftoa_fixed(char *buffer, double value) {  
    54ea:	cf 92       	push	r12
    54ec:	df 92       	push	r13
    54ee:	ef 92       	push	r14
    54f0:	ff 92       	push	r15
    54f2:	cf 93       	push	r28
    54f4:	df 93       	push	r29
    54f6:	cd b7       	in	r28, 0x3d	; 61
    54f8:	de b7       	in	r29, 0x3e	; 62
    54fa:	2e 97       	sbiw	r28, 0x0e	; 14
    54fc:	cd bf       	out	0x3d, r28	; 61
    54fe:	de bf       	out	0x3e, r29	; 62
    5500:	89 87       	std	Y+9, r24	; 0x09
    5502:	9a 87       	std	Y+10, r25	; 0x0a
    5504:	4b 87       	std	Y+11, r20	; 0x0b
    5506:	5c 87       	std	Y+12, r21	; 0x0c
    5508:	6d 87       	std	Y+13, r22	; 0x0d
    550a:	7e 87       	std	Y+14, r23	; 0x0e
     * The largest value we expect is an IEEE 754 double precision real, with maximum magnitude of approximately
     * e+308. The C standard requires an implementation to allow a single conversion to produce up to 512 
     * characters, so that's what we really expect as the buffer size.     
     */

    int exponent = 0;
    550c:	19 82       	std	Y+1, r1	; 0x01
    550e:	1a 82       	std	Y+2, r1	; 0x02
    int places = 0;
    5510:	1b 82       	std	Y+3, r1	; 0x03
    5512:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    5514:	8b 85       	ldd	r24, Y+11	; 0x0b
    5516:	9c 85       	ldd	r25, Y+12	; 0x0c
    5518:	ad 85       	ldd	r26, Y+13	; 0x0d
    551a:	be 85       	ldd	r27, Y+14	; 0x0e
    551c:	20 e0       	ldi	r18, 0x00	; 0
    551e:	30 e0       	ldi	r19, 0x00	; 0
    5520:	a9 01       	movw	r20, r18
    5522:	bc 01       	movw	r22, r24
    5524:	cd 01       	movw	r24, r26
    5526:	0e 94 dd 32 	call	0x65ba	; 0x65ba <__cmpsf2>
    552a:	88 23       	and	r24, r24
    552c:	59 f4       	brne	.+22     	; 0x5544 <ftoa_fixed+0x5a>
        buffer[0] = '0';
    552e:	89 85       	ldd	r24, Y+9	; 0x09
    5530:	9a 85       	ldd	r25, Y+10	; 0x0a
    5532:	20 e3       	ldi	r18, 0x30	; 48
    5534:	fc 01       	movw	r30, r24
    5536:	20 83       	st	Z, r18
        buffer[1] = '\0';
    5538:	89 85       	ldd	r24, Y+9	; 0x09
    553a:	9a 85       	ldd	r25, Y+10	; 0x0a
    553c:	01 96       	adiw	r24, 0x01	; 1
    553e:	fc 01       	movw	r30, r24
    5540:	10 82       	st	Z, r1
        return;
    5542:	18 c1       	rjmp	.+560    	; 0x5774 <ftoa_fixed+0x28a>
    }         

    if (value < 0.0) {
    5544:	8b 85       	ldd	r24, Y+11	; 0x0b
    5546:	9c 85       	ldd	r25, Y+12	; 0x0c
    5548:	ad 85       	ldd	r26, Y+13	; 0x0d
    554a:	be 85       	ldd	r27, Y+14	; 0x0e
    554c:	20 e0       	ldi	r18, 0x00	; 0
    554e:	30 e0       	ldi	r19, 0x00	; 0
    5550:	a9 01       	movw	r20, r18
    5552:	bc 01       	movw	r22, r24
    5554:	cd 01       	movw	r24, r26
    5556:	0e 94 dd 32 	call	0x65ba	; 0x65ba <__cmpsf2>
    555a:	88 23       	and	r24, r24
    555c:	9c f4       	brge	.+38     	; 0x5584 <ftoa_fixed+0x9a>
        *buffer++ = '-';
    555e:	89 85       	ldd	r24, Y+9	; 0x09
    5560:	9a 85       	ldd	r25, Y+10	; 0x0a
    5562:	9c 01       	movw	r18, r24
    5564:	2f 5f       	subi	r18, 0xFF	; 255
    5566:	3f 4f       	sbci	r19, 0xFF	; 255
    5568:	29 87       	std	Y+9, r18	; 0x09
    556a:	3a 87       	std	Y+10, r19	; 0x0a
    556c:	2d e2       	ldi	r18, 0x2D	; 45
    556e:	fc 01       	movw	r30, r24
    5570:	20 83       	st	Z, r18
        value = -value;
    5572:	8b 85       	ldd	r24, Y+11	; 0x0b
    5574:	9c 85       	ldd	r25, Y+12	; 0x0c
    5576:	ad 85       	ldd	r26, Y+13	; 0x0d
    5578:	be 85       	ldd	r27, Y+14	; 0x0e
    557a:	b0 58       	subi	r27, 0x80	; 128
    557c:	8b 87       	std	Y+11, r24	; 0x0b
    557e:	9c 87       	std	Y+12, r25	; 0x0c
    5580:	ad 87       	std	Y+13, r26	; 0x0d
    5582:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    5584:	ce 01       	movw	r24, r28
    5586:	0b 96       	adiw	r24, 0x0b	; 11
    5588:	0e 94 08 2a 	call	0x5410	; 0x5410 <normalize>
    558c:	89 83       	std	Y+1, r24	; 0x01
    558e:	9a 83       	std	Y+2, r25	; 0x02

    while (exponent > 0) {
    5590:	53 c0       	rjmp	.+166    	; 0x5638 <ftoa_fixed+0x14e>
        int digit = value * 10;
    5592:	8b 85       	ldd	r24, Y+11	; 0x0b
    5594:	9c 85       	ldd	r25, Y+12	; 0x0c
    5596:	ad 85       	ldd	r26, Y+13	; 0x0d
    5598:	be 85       	ldd	r27, Y+14	; 0x0e
    559a:	20 e0       	ldi	r18, 0x00	; 0
    559c:	30 e0       	ldi	r19, 0x00	; 0
    559e:	40 e2       	ldi	r20, 0x20	; 32
    55a0:	51 e4       	ldi	r21, 0x41	; 65
    55a2:	bc 01       	movw	r22, r24
    55a4:	cd 01       	movw	r24, r26
    55a6:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    55aa:	dc 01       	movw	r26, r24
    55ac:	cb 01       	movw	r24, r22
    55ae:	bc 01       	movw	r22, r24
    55b0:	cd 01       	movw	r24, r26
    55b2:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__fixsfsi>
    55b6:	dc 01       	movw	r26, r24
    55b8:	cb 01       	movw	r24, r22
    55ba:	8d 83       	std	Y+5, r24	; 0x05
    55bc:	9e 83       	std	Y+6, r25	; 0x06
        *buffer++ = digit + '0';
    55be:	89 85       	ldd	r24, Y+9	; 0x09
    55c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    55c2:	9c 01       	movw	r18, r24
    55c4:	2f 5f       	subi	r18, 0xFF	; 255
    55c6:	3f 4f       	sbci	r19, 0xFF	; 255
    55c8:	29 87       	std	Y+9, r18	; 0x09
    55ca:	3a 87       	std	Y+10, r19	; 0x0a
    55cc:	2d 81       	ldd	r18, Y+5	; 0x05
    55ce:	20 5d       	subi	r18, 0xD0	; 208
    55d0:	fc 01       	movw	r30, r24
    55d2:	20 83       	st	Z, r18
        value = value * 10 - digit;
    55d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    55d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    55d8:	ad 85       	ldd	r26, Y+13	; 0x0d
    55da:	be 85       	ldd	r27, Y+14	; 0x0e
    55dc:	20 e0       	ldi	r18, 0x00	; 0
    55de:	30 e0       	ldi	r19, 0x00	; 0
    55e0:	40 e2       	ldi	r20, 0x20	; 32
    55e2:	51 e4       	ldi	r21, 0x41	; 65
    55e4:	bc 01       	movw	r22, r24
    55e6:	cd 01       	movw	r24, r26
    55e8:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    55ec:	dc 01       	movw	r26, r24
    55ee:	cb 01       	movw	r24, r22
    55f0:	6c 01       	movw	r12, r24
    55f2:	7d 01       	movw	r14, r26
    55f4:	8d 81       	ldd	r24, Y+5	; 0x05
    55f6:	9e 81       	ldd	r25, Y+6	; 0x06
    55f8:	09 2e       	mov	r0, r25
    55fa:	00 0c       	add	r0, r0
    55fc:	aa 0b       	sbc	r26, r26
    55fe:	bb 0b       	sbc	r27, r27
    5600:	bc 01       	movw	r22, r24
    5602:	cd 01       	movw	r24, r26
    5604:	0e 94 8c 33 	call	0x6718	; 0x6718 <__floatsisf>
    5608:	dc 01       	movw	r26, r24
    560a:	cb 01       	movw	r24, r22
    560c:	9c 01       	movw	r18, r24
    560e:	ad 01       	movw	r20, r26
    5610:	c7 01       	movw	r24, r14
    5612:	b6 01       	movw	r22, r12
    5614:	0e 94 70 32 	call	0x64e0	; 0x64e0 <__subsf3>
    5618:	dc 01       	movw	r26, r24
    561a:	cb 01       	movw	r24, r22
    561c:	8b 87       	std	Y+11, r24	; 0x0b
    561e:	9c 87       	std	Y+12, r25	; 0x0c
    5620:	ad 87       	std	Y+13, r26	; 0x0d
    5622:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    5624:	8b 81       	ldd	r24, Y+3	; 0x03
    5626:	9c 81       	ldd	r25, Y+4	; 0x04
    5628:	01 96       	adiw	r24, 0x01	; 1
    562a:	8b 83       	std	Y+3, r24	; 0x03
    562c:	9c 83       	std	Y+4, r25	; 0x04
        --exponent;
    562e:	89 81       	ldd	r24, Y+1	; 0x01
    5630:	9a 81       	ldd	r25, Y+2	; 0x02
    5632:	01 97       	sbiw	r24, 0x01	; 1
    5634:	89 83       	std	Y+1, r24	; 0x01
    5636:	9a 83       	std	Y+2, r25	; 0x02
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    5638:	89 81       	ldd	r24, Y+1	; 0x01
    563a:	9a 81       	ldd	r25, Y+2	; 0x02
    563c:	18 16       	cp	r1, r24
    563e:	19 06       	cpc	r1, r25
    5640:	0c f4       	brge	.+2      	; 0x5644 <ftoa_fixed+0x15a>
    5642:	a7 cf       	rjmp	.-178    	; 0x5592 <ftoa_fixed+0xa8>
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    5644:	8b 81       	ldd	r24, Y+3	; 0x03
    5646:	9c 81       	ldd	r25, Y+4	; 0x04
    5648:	89 2b       	or	r24, r25
    564a:	51 f4       	brne	.+20     	; 0x5660 <ftoa_fixed+0x176>
        *buffer++ = '0';
    564c:	89 85       	ldd	r24, Y+9	; 0x09
    564e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5650:	9c 01       	movw	r18, r24
    5652:	2f 5f       	subi	r18, 0xFF	; 255
    5654:	3f 4f       	sbci	r19, 0xFF	; 255
    5656:	29 87       	std	Y+9, r18	; 0x09
    5658:	3a 87       	std	Y+10, r19	; 0x0a
    565a:	20 e3       	ldi	r18, 0x30	; 48
    565c:	fc 01       	movw	r30, r24
    565e:	20 83       	st	Z, r18

    *buffer++ = '.';
    5660:	89 85       	ldd	r24, Y+9	; 0x09
    5662:	9a 85       	ldd	r25, Y+10	; 0x0a
    5664:	9c 01       	movw	r18, r24
    5666:	2f 5f       	subi	r18, 0xFF	; 255
    5668:	3f 4f       	sbci	r19, 0xFF	; 255
    566a:	29 87       	std	Y+9, r18	; 0x09
    566c:	3a 87       	std	Y+10, r19	; 0x0a
    566e:	2e e2       	ldi	r18, 0x2E	; 46
    5670:	fc 01       	movw	r30, r24
    5672:	20 83       	st	Z, r18

    while (exponent < 0 && places < width) {
    5674:	14 c0       	rjmp	.+40     	; 0x569e <ftoa_fixed+0x1b4>
        *buffer++ = '0';
    5676:	89 85       	ldd	r24, Y+9	; 0x09
    5678:	9a 85       	ldd	r25, Y+10	; 0x0a
    567a:	9c 01       	movw	r18, r24
    567c:	2f 5f       	subi	r18, 0xFF	; 255
    567e:	3f 4f       	sbci	r19, 0xFF	; 255
    5680:	29 87       	std	Y+9, r18	; 0x09
    5682:	3a 87       	std	Y+10, r19	; 0x0a
    5684:	20 e3       	ldi	r18, 0x30	; 48
    5686:	fc 01       	movw	r30, r24
    5688:	20 83       	st	Z, r18
        --exponent;
    568a:	89 81       	ldd	r24, Y+1	; 0x01
    568c:	9a 81       	ldd	r25, Y+2	; 0x02
    568e:	01 97       	sbiw	r24, 0x01	; 1
    5690:	89 83       	std	Y+1, r24	; 0x01
    5692:	9a 83       	std	Y+2, r25	; 0x02
        ++places;
    5694:	8b 81       	ldd	r24, Y+3	; 0x03
    5696:	9c 81       	ldd	r25, Y+4	; 0x04
    5698:	01 96       	adiw	r24, 0x01	; 1
    569a:	8b 83       	std	Y+3, r24	; 0x03
    569c:	9c 83       	std	Y+4, r25	; 0x04
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    569e:	89 81       	ldd	r24, Y+1	; 0x01
    56a0:	9a 81       	ldd	r25, Y+2	; 0x02
    56a2:	99 23       	and	r25, r25
    56a4:	0c f0       	brlt	.+2      	; 0x56a8 <ftoa_fixed+0x1be>
    56a6:	58 c0       	rjmp	.+176    	; 0x5758 <ftoa_fixed+0x26e>
    56a8:	80 91 bd 20 	lds	r24, 0x20BD	; 0x8020bd <width.5062>
    56ac:	90 91 be 20 	lds	r25, 0x20BE	; 0x8020be <width.5062+0x1>
    56b0:	2b 81       	ldd	r18, Y+3	; 0x03
    56b2:	3c 81       	ldd	r19, Y+4	; 0x04
    56b4:	28 17       	cp	r18, r24
    56b6:	39 07       	cpc	r19, r25
    56b8:	f4 f2       	brlt	.-68     	; 0x5676 <ftoa_fixed+0x18c>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    56ba:	4e c0       	rjmp	.+156    	; 0x5758 <ftoa_fixed+0x26e>
        int digit = value * 10.0;
    56bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    56be:	9c 85       	ldd	r25, Y+12	; 0x0c
    56c0:	ad 85       	ldd	r26, Y+13	; 0x0d
    56c2:	be 85       	ldd	r27, Y+14	; 0x0e
    56c4:	20 e0       	ldi	r18, 0x00	; 0
    56c6:	30 e0       	ldi	r19, 0x00	; 0
    56c8:	40 e2       	ldi	r20, 0x20	; 32
    56ca:	51 e4       	ldi	r21, 0x41	; 65
    56cc:	bc 01       	movw	r22, r24
    56ce:	cd 01       	movw	r24, r26
    56d0:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    56d4:	dc 01       	movw	r26, r24
    56d6:	cb 01       	movw	r24, r22
    56d8:	bc 01       	movw	r22, r24
    56da:	cd 01       	movw	r24, r26
    56dc:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__fixsfsi>
    56e0:	dc 01       	movw	r26, r24
    56e2:	cb 01       	movw	r24, r22
    56e4:	8f 83       	std	Y+7, r24	; 0x07
    56e6:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    56e8:	89 85       	ldd	r24, Y+9	; 0x09
    56ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    56ec:	9c 01       	movw	r18, r24
    56ee:	2f 5f       	subi	r18, 0xFF	; 255
    56f0:	3f 4f       	sbci	r19, 0xFF	; 255
    56f2:	29 87       	std	Y+9, r18	; 0x09
    56f4:	3a 87       	std	Y+10, r19	; 0x0a
    56f6:	2f 81       	ldd	r18, Y+7	; 0x07
    56f8:	20 5d       	subi	r18, 0xD0	; 208
    56fa:	fc 01       	movw	r30, r24
    56fc:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    56fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    5700:	9c 85       	ldd	r25, Y+12	; 0x0c
    5702:	ad 85       	ldd	r26, Y+13	; 0x0d
    5704:	be 85       	ldd	r27, Y+14	; 0x0e
    5706:	20 e0       	ldi	r18, 0x00	; 0
    5708:	30 e0       	ldi	r19, 0x00	; 0
    570a:	40 e2       	ldi	r20, 0x20	; 32
    570c:	51 e4       	ldi	r21, 0x41	; 65
    570e:	bc 01       	movw	r22, r24
    5710:	cd 01       	movw	r24, r26
    5712:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    5716:	dc 01       	movw	r26, r24
    5718:	cb 01       	movw	r24, r22
    571a:	6c 01       	movw	r12, r24
    571c:	7d 01       	movw	r14, r26
    571e:	8f 81       	ldd	r24, Y+7	; 0x07
    5720:	98 85       	ldd	r25, Y+8	; 0x08
    5722:	09 2e       	mov	r0, r25
    5724:	00 0c       	add	r0, r0
    5726:	aa 0b       	sbc	r26, r26
    5728:	bb 0b       	sbc	r27, r27
    572a:	bc 01       	movw	r22, r24
    572c:	cd 01       	movw	r24, r26
    572e:	0e 94 8c 33 	call	0x6718	; 0x6718 <__floatsisf>
    5732:	dc 01       	movw	r26, r24
    5734:	cb 01       	movw	r24, r22
    5736:	9c 01       	movw	r18, r24
    5738:	ad 01       	movw	r20, r26
    573a:	c7 01       	movw	r24, r14
    573c:	b6 01       	movw	r22, r12
    573e:	0e 94 70 32 	call	0x64e0	; 0x64e0 <__subsf3>
    5742:	dc 01       	movw	r26, r24
    5744:	cb 01       	movw	r24, r22
    5746:	8b 87       	std	Y+11, r24	; 0x0b
    5748:	9c 87       	std	Y+12, r25	; 0x0c
    574a:	ad 87       	std	Y+13, r26	; 0x0d
    574c:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    574e:	8b 81       	ldd	r24, Y+3	; 0x03
    5750:	9c 81       	ldd	r25, Y+4	; 0x04
    5752:	01 96       	adiw	r24, 0x01	; 1
    5754:	8b 83       	std	Y+3, r24	; 0x03
    5756:	9c 83       	std	Y+4, r25	; 0x04
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    5758:	80 91 bd 20 	lds	r24, 0x20BD	; 0x8020bd <width.5062>
    575c:	90 91 be 20 	lds	r25, 0x20BE	; 0x8020be <width.5062+0x1>
    5760:	2b 81       	ldd	r18, Y+3	; 0x03
    5762:	3c 81       	ldd	r19, Y+4	; 0x04
    5764:	28 17       	cp	r18, r24
    5766:	39 07       	cpc	r19, r25
    5768:	0c f4       	brge	.+2      	; 0x576c <ftoa_fixed+0x282>
    576a:	a8 cf       	rjmp	.-176    	; 0x56bc <ftoa_fixed+0x1d2>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    576c:	89 85       	ldd	r24, Y+9	; 0x09
    576e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5770:	fc 01       	movw	r30, r24
    5772:	10 82       	st	Z, r1
}
    5774:	2e 96       	adiw	r28, 0x0e	; 14
    5776:	cd bf       	out	0x3d, r28	; 61
    5778:	de bf       	out	0x3e, r29	; 62
    577a:	df 91       	pop	r29
    577c:	cf 91       	pop	r28
    577e:	ff 90       	pop	r15
    5780:	ef 90       	pop	r14
    5782:	df 90       	pop	r13
    5784:	cf 90       	pop	r12
    5786:	08 95       	ret

00005788 <ftoa_sci>:

void ftoa_sci(char *buffer, double value) {
    5788:	cf 92       	push	r12
    578a:	df 92       	push	r13
    578c:	ef 92       	push	r14
    578e:	ff 92       	push	r15
    5790:	cf 93       	push	r28
    5792:	df 93       	push	r29
    5794:	cd b7       	in	r28, 0x3d	; 61
    5796:	de b7       	in	r29, 0x3e	; 62
    5798:	2e 97       	sbiw	r28, 0x0e	; 14
    579a:	cd bf       	out	0x3d, r28	; 61
    579c:	de bf       	out	0x3e, r29	; 62
    579e:	89 87       	std	Y+9, r24	; 0x09
    57a0:	9a 87       	std	Y+10, r25	; 0x0a
    57a2:	4b 87       	std	Y+11, r20	; 0x0b
    57a4:	5c 87       	std	Y+12, r21	; 0x0c
    57a6:	6d 87       	std	Y+13, r22	; 0x0d
    57a8:	7e 87       	std	Y+14, r23	; 0x0e
    int exponent = 0;    
    57aa:	1b 82       	std	Y+3, r1	; 0x03
    57ac:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    57ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    57b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    57b2:	ad 85       	ldd	r26, Y+13	; 0x0d
    57b4:	be 85       	ldd	r27, Y+14	; 0x0e
    57b6:	20 e0       	ldi	r18, 0x00	; 0
    57b8:	30 e0       	ldi	r19, 0x00	; 0
    57ba:	a9 01       	movw	r20, r18
    57bc:	bc 01       	movw	r22, r24
    57be:	cd 01       	movw	r24, r26
    57c0:	0e 94 dd 32 	call	0x65ba	; 0x65ba <__cmpsf2>
    57c4:	88 23       	and	r24, r24
    57c6:	59 f4       	brne	.+22     	; 0x57de <ftoa_sci+0x56>
        buffer[0] = '0';
    57c8:	89 85       	ldd	r24, Y+9	; 0x09
    57ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    57cc:	20 e3       	ldi	r18, 0x30	; 48
    57ce:	fc 01       	movw	r30, r24
    57d0:	20 83       	st	Z, r18
        buffer[1] = '\0';
    57d2:	89 85       	ldd	r24, Y+9	; 0x09
    57d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    57d6:	01 96       	adiw	r24, 0x01	; 1
    57d8:	fc 01       	movw	r30, r24
    57da:	10 82       	st	Z, r1
        return;
    57dc:	ec c0       	rjmp	.+472    	; 0x59b6 <ftoa_sci+0x22e>
    }

    if (value < 0.0) {
    57de:	8b 85       	ldd	r24, Y+11	; 0x0b
    57e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    57e2:	ad 85       	ldd	r26, Y+13	; 0x0d
    57e4:	be 85       	ldd	r27, Y+14	; 0x0e
    57e6:	20 e0       	ldi	r18, 0x00	; 0
    57e8:	30 e0       	ldi	r19, 0x00	; 0
    57ea:	a9 01       	movw	r20, r18
    57ec:	bc 01       	movw	r22, r24
    57ee:	cd 01       	movw	r24, r26
    57f0:	0e 94 dd 32 	call	0x65ba	; 0x65ba <__cmpsf2>
    57f4:	88 23       	and	r24, r24
    57f6:	9c f4       	brge	.+38     	; 0x581e <ftoa_sci+0x96>
        *buffer++ = '-';
    57f8:	89 85       	ldd	r24, Y+9	; 0x09
    57fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    57fc:	9c 01       	movw	r18, r24
    57fe:	2f 5f       	subi	r18, 0xFF	; 255
    5800:	3f 4f       	sbci	r19, 0xFF	; 255
    5802:	29 87       	std	Y+9, r18	; 0x09
    5804:	3a 87       	std	Y+10, r19	; 0x0a
    5806:	2d e2       	ldi	r18, 0x2D	; 45
    5808:	fc 01       	movw	r30, r24
    580a:	20 83       	st	Z, r18
        value = -value;
    580c:	8b 85       	ldd	r24, Y+11	; 0x0b
    580e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5810:	ad 85       	ldd	r26, Y+13	; 0x0d
    5812:	be 85       	ldd	r27, Y+14	; 0x0e
    5814:	b0 58       	subi	r27, 0x80	; 128
    5816:	8b 87       	std	Y+11, r24	; 0x0b
    5818:	9c 87       	std	Y+12, r25	; 0x0c
    581a:	ad 87       	std	Y+13, r26	; 0x0d
    581c:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    581e:	ce 01       	movw	r24, r28
    5820:	0b 96       	adiw	r24, 0x0b	; 11
    5822:	0e 94 08 2a 	call	0x5410	; 0x5410 <normalize>
    5826:	8b 83       	std	Y+3, r24	; 0x03
    5828:	9c 83       	std	Y+4, r25	; 0x04

    int digit = value * 10.0;
    582a:	8b 85       	ldd	r24, Y+11	; 0x0b
    582c:	9c 85       	ldd	r25, Y+12	; 0x0c
    582e:	ad 85       	ldd	r26, Y+13	; 0x0d
    5830:	be 85       	ldd	r27, Y+14	; 0x0e
    5832:	20 e0       	ldi	r18, 0x00	; 0
    5834:	30 e0       	ldi	r19, 0x00	; 0
    5836:	40 e2       	ldi	r20, 0x20	; 32
    5838:	51 e4       	ldi	r21, 0x41	; 65
    583a:	bc 01       	movw	r22, r24
    583c:	cd 01       	movw	r24, r26
    583e:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    5842:	dc 01       	movw	r26, r24
    5844:	cb 01       	movw	r24, r22
    5846:	bc 01       	movw	r22, r24
    5848:	cd 01       	movw	r24, r26
    584a:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__fixsfsi>
    584e:	dc 01       	movw	r26, r24
    5850:	cb 01       	movw	r24, r22
    5852:	8d 83       	std	Y+5, r24	; 0x05
    5854:	9e 83       	std	Y+6, r25	; 0x06
    *buffer++ = digit + '0';
    5856:	89 85       	ldd	r24, Y+9	; 0x09
    5858:	9a 85       	ldd	r25, Y+10	; 0x0a
    585a:	9c 01       	movw	r18, r24
    585c:	2f 5f       	subi	r18, 0xFF	; 255
    585e:	3f 4f       	sbci	r19, 0xFF	; 255
    5860:	29 87       	std	Y+9, r18	; 0x09
    5862:	3a 87       	std	Y+10, r19	; 0x0a
    5864:	2d 81       	ldd	r18, Y+5	; 0x05
    5866:	20 5d       	subi	r18, 0xD0	; 208
    5868:	fc 01       	movw	r30, r24
    586a:	20 83       	st	Z, r18
    value = value * 10.0 - digit;
    586c:	8b 85       	ldd	r24, Y+11	; 0x0b
    586e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5870:	ad 85       	ldd	r26, Y+13	; 0x0d
    5872:	be 85       	ldd	r27, Y+14	; 0x0e
    5874:	20 e0       	ldi	r18, 0x00	; 0
    5876:	30 e0       	ldi	r19, 0x00	; 0
    5878:	40 e2       	ldi	r20, 0x20	; 32
    587a:	51 e4       	ldi	r21, 0x41	; 65
    587c:	bc 01       	movw	r22, r24
    587e:	cd 01       	movw	r24, r26
    5880:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    5884:	dc 01       	movw	r26, r24
    5886:	cb 01       	movw	r24, r22
    5888:	6c 01       	movw	r12, r24
    588a:	7d 01       	movw	r14, r26
    588c:	8d 81       	ldd	r24, Y+5	; 0x05
    588e:	9e 81       	ldd	r25, Y+6	; 0x06
    5890:	09 2e       	mov	r0, r25
    5892:	00 0c       	add	r0, r0
    5894:	aa 0b       	sbc	r26, r26
    5896:	bb 0b       	sbc	r27, r27
    5898:	bc 01       	movw	r22, r24
    589a:	cd 01       	movw	r24, r26
    589c:	0e 94 8c 33 	call	0x6718	; 0x6718 <__floatsisf>
    58a0:	dc 01       	movw	r26, r24
    58a2:	cb 01       	movw	r24, r22
    58a4:	9c 01       	movw	r18, r24
    58a6:	ad 01       	movw	r20, r26
    58a8:	c7 01       	movw	r24, r14
    58aa:	b6 01       	movw	r22, r12
    58ac:	0e 94 70 32 	call	0x64e0	; 0x64e0 <__subsf3>
    58b0:	dc 01       	movw	r26, r24
    58b2:	cb 01       	movw	r24, r22
    58b4:	8b 87       	std	Y+11, r24	; 0x0b
    58b6:	9c 87       	std	Y+12, r25	; 0x0c
    58b8:	ad 87       	std	Y+13, r26	; 0x0d
    58ba:	be 87       	std	Y+14, r27	; 0x0e
    --exponent;
    58bc:	8b 81       	ldd	r24, Y+3	; 0x03
    58be:	9c 81       	ldd	r25, Y+4	; 0x04
    58c0:	01 97       	sbiw	r24, 0x01	; 1
    58c2:	8b 83       	std	Y+3, r24	; 0x03
    58c4:	9c 83       	std	Y+4, r25	; 0x04

    *buffer++ = '.';
    58c6:	89 85       	ldd	r24, Y+9	; 0x09
    58c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    58ca:	9c 01       	movw	r18, r24
    58cc:	2f 5f       	subi	r18, 0xFF	; 255
    58ce:	3f 4f       	sbci	r19, 0xFF	; 255
    58d0:	29 87       	std	Y+9, r18	; 0x09
    58d2:	3a 87       	std	Y+10, r19	; 0x0a
    58d4:	2e e2       	ldi	r18, 0x2E	; 46
    58d6:	fc 01       	movw	r30, r24
    58d8:	20 83       	st	Z, r18

    for (int i = 0; i < width; i++) {
    58da:	19 82       	std	Y+1, r1	; 0x01
    58dc:	1a 82       	std	Y+2, r1	; 0x02
    58de:	4e c0       	rjmp	.+156    	; 0x597c <ftoa_sci+0x1f4>
        int digit = value * 10.0;
    58e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    58e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    58e4:	ad 85       	ldd	r26, Y+13	; 0x0d
    58e6:	be 85       	ldd	r27, Y+14	; 0x0e
    58e8:	20 e0       	ldi	r18, 0x00	; 0
    58ea:	30 e0       	ldi	r19, 0x00	; 0
    58ec:	40 e2       	ldi	r20, 0x20	; 32
    58ee:	51 e4       	ldi	r21, 0x41	; 65
    58f0:	bc 01       	movw	r22, r24
    58f2:	cd 01       	movw	r24, r26
    58f4:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    58f8:	dc 01       	movw	r26, r24
    58fa:	cb 01       	movw	r24, r22
    58fc:	bc 01       	movw	r22, r24
    58fe:	cd 01       	movw	r24, r26
    5900:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__fixsfsi>
    5904:	dc 01       	movw	r26, r24
    5906:	cb 01       	movw	r24, r22
    5908:	8f 83       	std	Y+7, r24	; 0x07
    590a:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    590c:	89 85       	ldd	r24, Y+9	; 0x09
    590e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5910:	9c 01       	movw	r18, r24
    5912:	2f 5f       	subi	r18, 0xFF	; 255
    5914:	3f 4f       	sbci	r19, 0xFF	; 255
    5916:	29 87       	std	Y+9, r18	; 0x09
    5918:	3a 87       	std	Y+10, r19	; 0x0a
    591a:	2f 81       	ldd	r18, Y+7	; 0x07
    591c:	20 5d       	subi	r18, 0xD0	; 208
    591e:	fc 01       	movw	r30, r24
    5920:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    5922:	8b 85       	ldd	r24, Y+11	; 0x0b
    5924:	9c 85       	ldd	r25, Y+12	; 0x0c
    5926:	ad 85       	ldd	r26, Y+13	; 0x0d
    5928:	be 85       	ldd	r27, Y+14	; 0x0e
    592a:	20 e0       	ldi	r18, 0x00	; 0
    592c:	30 e0       	ldi	r19, 0x00	; 0
    592e:	40 e2       	ldi	r20, 0x20	; 32
    5930:	51 e4       	ldi	r21, 0x41	; 65
    5932:	bc 01       	movw	r22, r24
    5934:	cd 01       	movw	r24, r26
    5936:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    593a:	dc 01       	movw	r26, r24
    593c:	cb 01       	movw	r24, r22
    593e:	6c 01       	movw	r12, r24
    5940:	7d 01       	movw	r14, r26
    5942:	8f 81       	ldd	r24, Y+7	; 0x07
    5944:	98 85       	ldd	r25, Y+8	; 0x08
    5946:	09 2e       	mov	r0, r25
    5948:	00 0c       	add	r0, r0
    594a:	aa 0b       	sbc	r26, r26
    594c:	bb 0b       	sbc	r27, r27
    594e:	bc 01       	movw	r22, r24
    5950:	cd 01       	movw	r24, r26
    5952:	0e 94 8c 33 	call	0x6718	; 0x6718 <__floatsisf>
    5956:	dc 01       	movw	r26, r24
    5958:	cb 01       	movw	r24, r22
    595a:	9c 01       	movw	r18, r24
    595c:	ad 01       	movw	r20, r26
    595e:	c7 01       	movw	r24, r14
    5960:	b6 01       	movw	r22, r12
    5962:	0e 94 70 32 	call	0x64e0	; 0x64e0 <__subsf3>
    5966:	dc 01       	movw	r26, r24
    5968:	cb 01       	movw	r24, r22
    596a:	8b 87       	std	Y+11, r24	; 0x0b
    596c:	9c 87       	std	Y+12, r25	; 0x0c
    596e:	ad 87       	std	Y+13, r26	; 0x0d
    5970:	be 87       	std	Y+14, r27	; 0x0e
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    5972:	89 81       	ldd	r24, Y+1	; 0x01
    5974:	9a 81       	ldd	r25, Y+2	; 0x02
    5976:	01 96       	adiw	r24, 0x01	; 1
    5978:	89 83       	std	Y+1, r24	; 0x01
    597a:	9a 83       	std	Y+2, r25	; 0x02
    597c:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <width.5079>
    5980:	90 91 c0 20 	lds	r25, 0x20C0	; 0x8020c0 <width.5079+0x1>
    5984:	29 81       	ldd	r18, Y+1	; 0x01
    5986:	3a 81       	ldd	r19, Y+2	; 0x02
    5988:	28 17       	cp	r18, r24
    598a:	39 07       	cpc	r19, r25
    598c:	0c f4       	brge	.+2      	; 0x5990 <ftoa_sci+0x208>
    598e:	a8 cf       	rjmp	.-176    	; 0x58e0 <ftoa_sci+0x158>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    5990:	89 85       	ldd	r24, Y+9	; 0x09
    5992:	9a 85       	ldd	r25, Y+10	; 0x0a
    5994:	9c 01       	movw	r18, r24
    5996:	2f 5f       	subi	r18, 0xFF	; 255
    5998:	3f 4f       	sbci	r19, 0xFF	; 255
    599a:	29 87       	std	Y+9, r18	; 0x09
    599c:	3a 87       	std	Y+10, r19	; 0x0a
    599e:	25 e6       	ldi	r18, 0x65	; 101
    59a0:	fc 01       	movw	r30, r24
    59a2:	20 83       	st	Z, r18
    itoa(exponent, buffer, 10);
    59a4:	29 85       	ldd	r18, Y+9	; 0x09
    59a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    59a8:	8b 81       	ldd	r24, Y+3	; 0x03
    59aa:	9c 81       	ldd	r25, Y+4	; 0x04
    59ac:	4a e0       	ldi	r20, 0x0A	; 10
    59ae:	50 e0       	ldi	r21, 0x00	; 0
    59b0:	b9 01       	movw	r22, r18
    59b2:	0e 94 cf 34 	call	0x699e	; 0x699e <itoa>
}
    59b6:	2e 96       	adiw	r28, 0x0e	; 14
    59b8:	cd bf       	out	0x3d, r28	; 61
    59ba:	de bf       	out	0x3e, r29	; 62
    59bc:	df 91       	pop	r29
    59be:	cf 91       	pop	r28
    59c0:	ff 90       	pop	r15
    59c2:	ef 90       	pop	r14
    59c4:	df 90       	pop	r13
    59c6:	cf 90       	pop	r12
    59c8:	08 95       	ret

000059ca <initDAC>:
static uint16_t dacBuffer3[NR_OF_GENERATOR_SAMPLES] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

void initDAC(void) {
    59ca:	cf 93       	push	r28
    59cc:	df 93       	push	r29
    59ce:	cd b7       	in	r28, 0x3d	; 61
    59d0:	de b7       	in	r29, 0x3e	; 62
	DACB.CTRLA = DAC_CH0EN_bm | DAC_CH1EN_bm;
    59d2:	80 e2       	ldi	r24, 0x20	; 32
    59d4:	93 e0       	ldi	r25, 0x03	; 3
    59d6:	2c e0       	ldi	r18, 0x0C	; 12
    59d8:	fc 01       	movw	r30, r24
    59da:	20 83       	st	Z, r18
	DACB.CTRLB = DAC_CHSEL1_bm | DAC_CH0TRIG_bm | DAC_CH1TRIG_bm;
    59dc:	80 e2       	ldi	r24, 0x20	; 32
    59de:	93 e0       	ldi	r25, 0x03	; 3
    59e0:	23 e4       	ldi	r18, 0x43	; 67
    59e2:	fc 01       	movw	r30, r24
    59e4:	21 83       	std	Z+1, r18	; 0x01
	DACB.CTRLC = DAC_REFSEL0_bm; // Reference Voltage = AVCC
    59e6:	80 e2       	ldi	r24, 0x20	; 32
    59e8:	93 e0       	ldi	r25, 0x03	; 3
    59ea:	28 e0       	ldi	r18, 0x08	; 8
    59ec:	fc 01       	movw	r30, r24
    59ee:	22 83       	std	Z+2, r18	; 0x02
	DACB.EVCTRL = 0x00;
    59f0:	80 e2       	ldi	r24, 0x20	; 32
    59f2:	93 e0       	ldi	r25, 0x03	; 3
    59f4:	fc 01       	movw	r30, r24
    59f6:	13 82       	std	Z+3, r1	; 0x03
	DACB.CTRLA |= DAC_ENABLE_bm;
    59f8:	80 e2       	ldi	r24, 0x20	; 32
    59fa:	93 e0       	ldi	r25, 0x03	; 3
    59fc:	20 e2       	ldi	r18, 0x20	; 32
    59fe:	33 e0       	ldi	r19, 0x03	; 3
    5a00:	f9 01       	movw	r30, r18
    5a02:	20 81       	ld	r18, Z
    5a04:	21 60       	ori	r18, 0x01	; 1
    5a06:	fc 01       	movw	r30, r24
    5a08:	20 83       	st	Z, r18
	PORTB.DIRSET = 0x04;
    5a0a:	80 e2       	ldi	r24, 0x20	; 32
    5a0c:	96 e0       	ldi	r25, 0x06	; 6
    5a0e:	24 e0       	ldi	r18, 0x04	; 4
    5a10:	fc 01       	movw	r30, r24
    5a12:	21 83       	std	Z+1, r18	; 0x01
    PORTB.DIRSET = 0x08;
    5a14:	80 e2       	ldi	r24, 0x20	; 32
    5a16:	96 e0       	ldi	r25, 0x06	; 6
    5a18:	28 e0       	ldi	r18, 0x08	; 8
    5a1a:	fc 01       	movw	r30, r24
    5a1c:	21 83       	std	Z+1, r18	; 0x01
}
    5a1e:	00 00       	nop
    5a20:	df 91       	pop	r29
    5a22:	cf 91       	pop	r28
    5a24:	08 95       	ret

00005a26 <initGenDMA>:
    
void initGenDMA(void) {
    5a26:	cf 93       	push	r28
    5a28:	df 93       	push	r29
    5a2a:	cd b7       	in	r28, 0x3d	; 61
    5a2c:	de b7       	in	r29, 0x3e	; 62
	DMA.CTRL = 0;
    5a2e:	80 e0       	ldi	r24, 0x00	; 0
    5a30:	91 e0       	ldi	r25, 0x01	; 1
    5a32:	fc 01       	movw	r30, r24
    5a34:	10 82       	st	Z, r1
	DMA.CTRL = DMA_RESET_bm;
    5a36:	80 e0       	ldi	r24, 0x00	; 0
    5a38:	91 e0       	ldi	r25, 0x01	; 1
    5a3a:	20 e4       	ldi	r18, 0x40	; 64
    5a3c:	fc 01       	movw	r30, r24
    5a3e:	20 83       	st	Z, r18
	while ((DMA.CTRL & DMA_RESET_bm) != 0);
    5a40:	00 00       	nop
    5a42:	80 e0       	ldi	r24, 0x00	; 0
    5a44:	91 e0       	ldi	r25, 0x01	; 1
    5a46:	fc 01       	movw	r30, r24
    5a48:	80 81       	ld	r24, Z
    5a4a:	88 2f       	mov	r24, r24
    5a4c:	90 e0       	ldi	r25, 0x00	; 0
    5a4e:	80 74       	andi	r24, 0x40	; 64
    5a50:	99 27       	eor	r25, r25
    5a52:	89 2b       	or	r24, r25
    5a54:	b1 f7       	brne	.-20     	; 0x5a42 <initGenDMA+0x1c>

	DMA.CTRL = DMA_ENABLE_bm | DMA_DBUFMODE_CH01CH23_gc;
    5a56:	80 e0       	ldi	r24, 0x00	; 0
    5a58:	91 e0       	ldi	r25, 0x01	; 1
    5a5a:	2c e8       	ldi	r18, 0x8C	; 140
    5a5c:	fc 01       	movw	r30, r24
    5a5e:	20 83       	st	Z, r18

	DMA.CH0.REPCNT = 0;
    5a60:	80 e0       	ldi	r24, 0x00	; 0
    5a62:	91 e0       	ldi	r25, 0x01	; 1
    5a64:	fc 01       	movw	r30, r24
    5a66:	16 8a       	std	Z+22, r1	; 0x16
	DMA.CH0.CTRLB|=0x01;
    5a68:	80 e0       	ldi	r24, 0x00	; 0
    5a6a:	91 e0       	ldi	r25, 0x01	; 1
    5a6c:	20 e0       	ldi	r18, 0x00	; 0
    5a6e:	31 e0       	ldi	r19, 0x01	; 1
    5a70:	f9 01       	movw	r30, r18
    5a72:	21 89       	ldd	r18, Z+17	; 0x11
    5a74:	21 60       	ori	r18, 0x01	; 1
    5a76:	fc 01       	movw	r30, r24
    5a78:	21 8b       	std	Z+17, r18	; 0x11
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;					// ADC result is 2 byte 12 bit word
    5a7a:	80 e0       	ldi	r24, 0x00	; 0
    5a7c:	91 e0       	ldi	r25, 0x01	; 1
    5a7e:	25 e2       	ldi	r18, 0x25	; 37
    5a80:	fc 01       	movw	r30, r24
    5a82:	20 8b       	std	Z+16, r18	; 0x10
	DMA.CH0.ADDRCTRL =	DMA_CH_SRCRELOAD_TRANSACTION_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc;	// reload source after every burst, reload dest after every transaction
    5a84:	80 e0       	ldi	r24, 0x00	; 0
    5a86:	91 e0       	ldi	r25, 0x01	; 1
    5a88:	29 ed       	ldi	r18, 0xD9	; 217
    5a8a:	fc 01       	movw	r30, r24
    5a8c:	22 8b       	std	Z+18, r18	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_DACB_CH0_gc;
    5a8e:	80 e0       	ldi	r24, 0x00	; 0
    5a90:	91 e0       	ldi	r25, 0x01	; 1
    5a92:	25 e2       	ldi	r18, 0x25	; 37
    5a94:	fc 01       	movw	r30, r24
    5a96:	23 8b       	std	Z+19, r18	; 0x13
	DMA.CH0.TRFCNT = NR_OF_GENERATOR_SAMPLES*2;	// always the number of bytes, even if burst length > 1
    5a98:	80 e0       	ldi	r24, 0x00	; 0
    5a9a:	91 e0       	ldi	r25, 0x01	; 1
    5a9c:	20 e4       	ldi	r18, 0x40	; 64
    5a9e:	30 e0       	ldi	r19, 0x00	; 0
    5aa0:	fc 01       	movw	r30, r24
    5aa2:	24 8b       	std	Z+20, r18	; 0x14
    5aa4:	35 8b       	std	Z+21, r19	; 0x15
	DMA.CH0.SRCADDR0 = ((uint16_t)(&dacBuffer0[0]) >> 0) & 0xFF;
    5aa6:	80 e0       	ldi	r24, 0x00	; 0
    5aa8:	91 e0       	ldi	r25, 0x01	; 1
    5aaa:	2e eb       	ldi	r18, 0xBE	; 190
    5aac:	3d e2       	ldi	r19, 0x2D	; 45
    5aae:	fc 01       	movw	r30, r24
    5ab0:	20 8f       	std	Z+24, r18	; 0x18
	DMA.CH0.SRCADDR1 = ((uint16_t)(&dacBuffer0[0]) >>  8) & 0xFF;
    5ab2:	80 e0       	ldi	r24, 0x00	; 0
    5ab4:	91 e0       	ldi	r25, 0x01	; 1
    5ab6:	2e eb       	ldi	r18, 0xBE	; 190
    5ab8:	3d e2       	ldi	r19, 0x2D	; 45
    5aba:	23 2f       	mov	r18, r19
    5abc:	33 27       	eor	r19, r19
    5abe:	fc 01       	movw	r30, r24
    5ac0:	21 8f       	std	Z+25, r18	; 0x19
	DMA.CH0.SRCADDR2 =0;
    5ac2:	80 e0       	ldi	r24, 0x00	; 0
    5ac4:	91 e0       	ldi	r25, 0x01	; 1
    5ac6:	fc 01       	movw	r30, r24
    5ac8:	12 8e       	std	Z+26, r1	; 0x1a
	DMA.CH0.DESTADDR0 = ((uint16_t)(&DACB.CH0DATA) >> 0) & 0xFF;
    5aca:	80 e0       	ldi	r24, 0x00	; 0
    5acc:	91 e0       	ldi	r25, 0x01	; 1
    5ace:	28 e3       	ldi	r18, 0x38	; 56
    5ad0:	fc 01       	movw	r30, r24
    5ad2:	24 8f       	std	Z+28, r18	; 0x1c
	DMA.CH0.DESTADDR1 = ((uint16_t)(&DACB.CH0DATA) >> 8) & 0xFF;
    5ad4:	80 e0       	ldi	r24, 0x00	; 0
    5ad6:	91 e0       	ldi	r25, 0x01	; 1
    5ad8:	23 e0       	ldi	r18, 0x03	; 3
    5ada:	fc 01       	movw	r30, r24
    5adc:	25 8f       	std	Z+29, r18	; 0x1d
	DMA.CH0.DESTADDR2 = 0;
    5ade:	80 e0       	ldi	r24, 0x00	; 0
    5ae0:	91 e0       	ldi	r25, 0x01	; 1
    5ae2:	fc 01       	movw	r30, r24
    5ae4:	16 8e       	std	Z+30, r1	; 0x1e

	DMA.CH1.REPCNT = 0;
    5ae6:	80 e0       	ldi	r24, 0x00	; 0
    5ae8:	91 e0       	ldi	r25, 0x01	; 1
    5aea:	fc 01       	movw	r30, r24
    5aec:	16 a2       	std	Z+38, r1	; 0x26
	DMA.CH1.CTRLB |= 0x01;
    5aee:	80 e0       	ldi	r24, 0x00	; 0
    5af0:	91 e0       	ldi	r25, 0x01	; 1
    5af2:	20 e0       	ldi	r18, 0x00	; 0
    5af4:	31 e0       	ldi	r19, 0x01	; 1
    5af6:	f9 01       	movw	r30, r18
    5af8:	21 a1       	ldd	r18, Z+33	; 0x21
    5afa:	21 60       	ori	r18, 0x01	; 1
    5afc:	fc 01       	movw	r30, r24
    5afe:	21 a3       	std	Z+33, r18	; 0x21
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
    5b00:	80 e0       	ldi	r24, 0x00	; 0
    5b02:	91 e0       	ldi	r25, 0x01	; 1
    5b04:	25 e2       	ldi	r18, 0x25	; 37
    5b06:	fc 01       	movw	r30, r24
    5b08:	20 a3       	std	Z+32, r18	; 0x20
	DMA.CH1.ADDRCTRL = DMA_CH_SRCRELOAD_TRANSACTION_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc;
    5b0a:	80 e0       	ldi	r24, 0x00	; 0
    5b0c:	91 e0       	ldi	r25, 0x01	; 1
    5b0e:	29 ed       	ldi	r18, 0xD9	; 217
    5b10:	fc 01       	movw	r30, r24
    5b12:	22 a3       	std	Z+34, r18	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_DACB_CH0_gc;
    5b14:	80 e0       	ldi	r24, 0x00	; 0
    5b16:	91 e0       	ldi	r25, 0x01	; 1
    5b18:	25 e2       	ldi	r18, 0x25	; 37
    5b1a:	fc 01       	movw	r30, r24
    5b1c:	23 a3       	std	Z+35, r18	; 0x23
	DMA.CH1.TRFCNT = NR_OF_GENERATOR_SAMPLES*2;
    5b1e:	80 e0       	ldi	r24, 0x00	; 0
    5b20:	91 e0       	ldi	r25, 0x01	; 1
    5b22:	20 e4       	ldi	r18, 0x40	; 64
    5b24:	30 e0       	ldi	r19, 0x00	; 0
    5b26:	fc 01       	movw	r30, r24
    5b28:	24 a3       	std	Z+36, r18	; 0x24
    5b2a:	35 a3       	std	Z+37, r19	; 0x25
	DMA.CH1.SRCADDR0 = ((uint16_t)(&dacBuffer1[0]) >> 0) & 0xFF;
    5b2c:	80 e0       	ldi	r24, 0x00	; 0
    5b2e:	91 e0       	ldi	r25, 0x01	; 1
    5b30:	2e ef       	ldi	r18, 0xFE	; 254
    5b32:	3d e2       	ldi	r19, 0x2D	; 45
    5b34:	fc 01       	movw	r30, r24
    5b36:	20 a7       	std	Z+40, r18	; 0x28
	DMA.CH1.SRCADDR1 = ((uint16_t)(&dacBuffer1[0]) >>  8) & 0xFF;
    5b38:	80 e0       	ldi	r24, 0x00	; 0
    5b3a:	91 e0       	ldi	r25, 0x01	; 1
    5b3c:	2e ef       	ldi	r18, 0xFE	; 254
    5b3e:	3d e2       	ldi	r19, 0x2D	; 45
    5b40:	23 2f       	mov	r18, r19
    5b42:	33 27       	eor	r19, r19
    5b44:	fc 01       	movw	r30, r24
    5b46:	21 a7       	std	Z+41, r18	; 0x29
	DMA.CH1.SRCADDR2 =0;
    5b48:	80 e0       	ldi	r24, 0x00	; 0
    5b4a:	91 e0       	ldi	r25, 0x01	; 1
    5b4c:	fc 01       	movw	r30, r24
    5b4e:	12 a6       	std	Z+42, r1	; 0x2a
	DMA.CH1.DESTADDR0 = ((uint16_t)(&DACB.CH0DATA) >> 0) & 0xFF;
    5b50:	80 e0       	ldi	r24, 0x00	; 0
    5b52:	91 e0       	ldi	r25, 0x01	; 1
    5b54:	28 e3       	ldi	r18, 0x38	; 56
    5b56:	fc 01       	movw	r30, r24
    5b58:	24 a7       	std	Z+44, r18	; 0x2c
	DMA.CH1.DESTADDR1 = ((uint16_t)(&DACB.CH0DATA) >> 8) & 0xFF;
    5b5a:	80 e0       	ldi	r24, 0x00	; 0
    5b5c:	91 e0       	ldi	r25, 0x01	; 1
    5b5e:	23 e0       	ldi	r18, 0x03	; 3
    5b60:	fc 01       	movw	r30, r24
    5b62:	25 a7       	std	Z+45, r18	; 0x2d
	DMA.CH1.DESTADDR2 = 0;
    5b64:	80 e0       	ldi	r24, 0x00	; 0
    5b66:	91 e0       	ldi	r25, 0x01	; 1
    5b68:	fc 01       	movw	r30, r24
    5b6a:	16 a6       	std	Z+46, r1	; 0x2e
    
    DMA.CH2.REPCNT = 0;
    5b6c:	80 e0       	ldi	r24, 0x00	; 0
    5b6e:	91 e0       	ldi	r25, 0x01	; 1
    5b70:	fc 01       	movw	r30, r24
    5b72:	16 aa       	std	Z+54, r1	; 0x36
    DMA.CH2.CTRLB|=0x01;
    5b74:	80 e0       	ldi	r24, 0x00	; 0
    5b76:	91 e0       	ldi	r25, 0x01	; 1
    5b78:	20 e0       	ldi	r18, 0x00	; 0
    5b7a:	31 e0       	ldi	r19, 0x01	; 1
    5b7c:	f9 01       	movw	r30, r18
    5b7e:	21 a9       	ldd	r18, Z+49	; 0x31
    5b80:	21 60       	ori	r18, 0x01	; 1
    5b82:	fc 01       	movw	r30, r24
    5b84:	21 ab       	std	Z+49, r18	; 0x31
    DMA.CH2.CTRLA = DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;					// ADC result is 2 byte 12 bit word
    5b86:	80 e0       	ldi	r24, 0x00	; 0
    5b88:	91 e0       	ldi	r25, 0x01	; 1
    5b8a:	25 e2       	ldi	r18, 0x25	; 37
    5b8c:	fc 01       	movw	r30, r24
    5b8e:	20 ab       	std	Z+48, r18	; 0x30
    DMA.CH2.ADDRCTRL =	DMA_CH_SRCRELOAD_TRANSACTION_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc;	// reload source after every burst, reload dest after every transaction
    5b90:	80 e0       	ldi	r24, 0x00	; 0
    5b92:	91 e0       	ldi	r25, 0x01	; 1
    5b94:	29 ed       	ldi	r18, 0xD9	; 217
    5b96:	fc 01       	movw	r30, r24
    5b98:	22 ab       	std	Z+50, r18	; 0x32
    DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_DACB_CH0_gc;
    5b9a:	80 e0       	ldi	r24, 0x00	; 0
    5b9c:	91 e0       	ldi	r25, 0x01	; 1
    5b9e:	25 e2       	ldi	r18, 0x25	; 37
    5ba0:	fc 01       	movw	r30, r24
    5ba2:	23 ab       	std	Z+51, r18	; 0x33
    DMA.CH2.TRFCNT = NR_OF_GENERATOR_SAMPLES*2;	// always the number of bytes, even if burst length > 1
    5ba4:	80 e0       	ldi	r24, 0x00	; 0
    5ba6:	91 e0       	ldi	r25, 0x01	; 1
    5ba8:	20 e4       	ldi	r18, 0x40	; 64
    5baa:	30 e0       	ldi	r19, 0x00	; 0
    5bac:	fc 01       	movw	r30, r24
    5bae:	24 ab       	std	Z+52, r18	; 0x34
    5bb0:	35 ab       	std	Z+53, r19	; 0x35
    DMA.CH2.SRCADDR0 = ((uint16_t)(&dacBuffer2[0]) >> 0) & 0xFF;
    5bb2:	80 e0       	ldi	r24, 0x00	; 0
    5bb4:	91 e0       	ldi	r25, 0x01	; 1
    5bb6:	2e e3       	ldi	r18, 0x3E	; 62
    5bb8:	3e e2       	ldi	r19, 0x2E	; 46
    5bba:	fc 01       	movw	r30, r24
    5bbc:	20 af       	std	Z+56, r18	; 0x38
    DMA.CH2.SRCADDR1 = ((uint16_t)(&dacBuffer2[0]) >>  8) & 0xFF;
    5bbe:	80 e0       	ldi	r24, 0x00	; 0
    5bc0:	91 e0       	ldi	r25, 0x01	; 1
    5bc2:	2e e3       	ldi	r18, 0x3E	; 62
    5bc4:	3e e2       	ldi	r19, 0x2E	; 46
    5bc6:	23 2f       	mov	r18, r19
    5bc8:	33 27       	eor	r19, r19
    5bca:	fc 01       	movw	r30, r24
    5bcc:	21 af       	std	Z+57, r18	; 0x39
    DMA.CH2.SRCADDR2 =0;
    5bce:	80 e0       	ldi	r24, 0x00	; 0
    5bd0:	91 e0       	ldi	r25, 0x01	; 1
    5bd2:	fc 01       	movw	r30, r24
    5bd4:	12 ae       	std	Z+58, r1	; 0x3a
    DMA.CH2.DESTADDR0 = ((uint16_t)(&DACB.CH1DATA) >> 0) & 0xFF;
    5bd6:	80 e0       	ldi	r24, 0x00	; 0
    5bd8:	91 e0       	ldi	r25, 0x01	; 1
    5bda:	2a e3       	ldi	r18, 0x3A	; 58
    5bdc:	fc 01       	movw	r30, r24
    5bde:	24 af       	std	Z+60, r18	; 0x3c
    DMA.CH2.DESTADDR1 = ((uint16_t)(&DACB.CH1DATA) >> 8) & 0xFF;
    5be0:	80 e0       	ldi	r24, 0x00	; 0
    5be2:	91 e0       	ldi	r25, 0x01	; 1
    5be4:	23 e0       	ldi	r18, 0x03	; 3
    5be6:	fc 01       	movw	r30, r24
    5be8:	25 af       	std	Z+61, r18	; 0x3d
    DMA.CH2.DESTADDR2 = 0;
    5bea:	80 e0       	ldi	r24, 0x00	; 0
    5bec:	91 e0       	ldi	r25, 0x01	; 1
    5bee:	fc 01       	movw	r30, r24
    5bf0:	16 ae       	std	Z+62, r1	; 0x3e
    
    DMA.CH3.REPCNT = 0;
    5bf2:	80 e0       	ldi	r24, 0x00	; 0
    5bf4:	91 e0       	ldi	r25, 0x01	; 1
    5bf6:	8a 5b       	subi	r24, 0xBA	; 186
    5bf8:	9f 4f       	sbci	r25, 0xFF	; 255
    5bfa:	fc 01       	movw	r30, r24
    5bfc:	10 82       	st	Z, r1
    DMA.CH3.CTRLB |= 0x01;
    5bfe:	80 e0       	ldi	r24, 0x00	; 0
    5c00:	91 e0       	ldi	r25, 0x01	; 1
    5c02:	20 e0       	ldi	r18, 0x00	; 0
    5c04:	31 e0       	ldi	r19, 0x01	; 1
    5c06:	2f 5b       	subi	r18, 0xBF	; 191
    5c08:	3f 4f       	sbci	r19, 0xFF	; 255
    5c0a:	f9 01       	movw	r30, r18
    5c0c:	20 81       	ld	r18, Z
    5c0e:	21 60       	ori	r18, 0x01	; 1
    5c10:	8f 5b       	subi	r24, 0xBF	; 191
    5c12:	9f 4f       	sbci	r25, 0xFF	; 255
    5c14:	fc 01       	movw	r30, r24
    5c16:	20 83       	st	Z, r18
    DMA.CH3.CTRLA = DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
    5c18:	80 e0       	ldi	r24, 0x00	; 0
    5c1a:	91 e0       	ldi	r25, 0x01	; 1
    5c1c:	80 5c       	subi	r24, 0xC0	; 192
    5c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    5c20:	25 e2       	ldi	r18, 0x25	; 37
    5c22:	fc 01       	movw	r30, r24
    5c24:	20 83       	st	Z, r18
    DMA.CH3.ADDRCTRL = DMA_CH_SRCRELOAD_TRANSACTION_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc;
    5c26:	80 e0       	ldi	r24, 0x00	; 0
    5c28:	91 e0       	ldi	r25, 0x01	; 1
    5c2a:	8e 5b       	subi	r24, 0xBE	; 190
    5c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    5c2e:	29 ed       	ldi	r18, 0xD9	; 217
    5c30:	fc 01       	movw	r30, r24
    5c32:	20 83       	st	Z, r18
    DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_DACB_CH0_gc;
    5c34:	80 e0       	ldi	r24, 0x00	; 0
    5c36:	91 e0       	ldi	r25, 0x01	; 1
    5c38:	8d 5b       	subi	r24, 0xBD	; 189
    5c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c3c:	25 e2       	ldi	r18, 0x25	; 37
    5c3e:	fc 01       	movw	r30, r24
    5c40:	20 83       	st	Z, r18
    DMA.CH3.TRFCNT = NR_OF_GENERATOR_SAMPLES*2;
    5c42:	80 e0       	ldi	r24, 0x00	; 0
    5c44:	91 e0       	ldi	r25, 0x01	; 1
    5c46:	8c 5b       	subi	r24, 0xBC	; 188
    5c48:	9f 4f       	sbci	r25, 0xFF	; 255
    5c4a:	20 e4       	ldi	r18, 0x40	; 64
    5c4c:	30 e0       	ldi	r19, 0x00	; 0
    5c4e:	fc 01       	movw	r30, r24
    5c50:	20 83       	st	Z, r18
    5c52:	31 83       	std	Z+1, r19	; 0x01
    DMA.CH3.SRCADDR0 = ((uint16_t)(&dacBuffer3[0]) >> 0) & 0xFF;
    5c54:	80 e0       	ldi	r24, 0x00	; 0
    5c56:	91 e0       	ldi	r25, 0x01	; 1
    5c58:	2e e7       	ldi	r18, 0x7E	; 126
    5c5a:	3e e2       	ldi	r19, 0x2E	; 46
    5c5c:	88 5b       	subi	r24, 0xB8	; 184
    5c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    5c60:	fc 01       	movw	r30, r24
    5c62:	20 83       	st	Z, r18
    DMA.CH3.SRCADDR1 = ((uint16_t)(&dacBuffer3[0]) >>  8) & 0xFF;
    5c64:	80 e0       	ldi	r24, 0x00	; 0
    5c66:	91 e0       	ldi	r25, 0x01	; 1
    5c68:	2e e7       	ldi	r18, 0x7E	; 126
    5c6a:	3e e2       	ldi	r19, 0x2E	; 46
    5c6c:	23 2f       	mov	r18, r19
    5c6e:	33 27       	eor	r19, r19
    5c70:	87 5b       	subi	r24, 0xB7	; 183
    5c72:	9f 4f       	sbci	r25, 0xFF	; 255
    5c74:	fc 01       	movw	r30, r24
    5c76:	20 83       	st	Z, r18
    DMA.CH3.SRCADDR2 =0;
    5c78:	80 e0       	ldi	r24, 0x00	; 0
    5c7a:	91 e0       	ldi	r25, 0x01	; 1
    5c7c:	86 5b       	subi	r24, 0xB6	; 182
    5c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    5c80:	fc 01       	movw	r30, r24
    5c82:	10 82       	st	Z, r1
    DMA.CH3.DESTADDR0 = ((uint16_t)(&DACB.CH1DATA) >> 0) & 0xFF;
    5c84:	80 e0       	ldi	r24, 0x00	; 0
    5c86:	91 e0       	ldi	r25, 0x01	; 1
    5c88:	84 5b       	subi	r24, 0xB4	; 180
    5c8a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c8c:	2a e3       	ldi	r18, 0x3A	; 58
    5c8e:	fc 01       	movw	r30, r24
    5c90:	20 83       	st	Z, r18
    DMA.CH3.DESTADDR1 = ((uint16_t)(&DACB.CH1DATA) >> 8) & 0xFF;
    5c92:	80 e0       	ldi	r24, 0x00	; 0
    5c94:	91 e0       	ldi	r25, 0x01	; 1
    5c96:	83 5b       	subi	r24, 0xB3	; 179
    5c98:	9f 4f       	sbci	r25, 0xFF	; 255
    5c9a:	23 e0       	ldi	r18, 0x03	; 3
    5c9c:	fc 01       	movw	r30, r24
    5c9e:	20 83       	st	Z, r18
    DMA.CH3.DESTADDR2 = 0;
    5ca0:	80 e0       	ldi	r24, 0x00	; 0
    5ca2:	91 e0       	ldi	r25, 0x01	; 1
    5ca4:	82 5b       	subi	r24, 0xB2	; 178
    5ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ca8:	fc 01       	movw	r30, r24
    5caa:	10 82       	st	Z, r1
	
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
    5cac:	80 e0       	ldi	r24, 0x00	; 0
    5cae:	91 e0       	ldi	r25, 0x01	; 1
    5cb0:	20 e0       	ldi	r18, 0x00	; 0
    5cb2:	31 e0       	ldi	r19, 0x01	; 1
    5cb4:	f9 01       	movw	r30, r18
    5cb6:	20 89       	ldd	r18, Z+16	; 0x10
    5cb8:	20 68       	ori	r18, 0x80	; 128
    5cba:	fc 01       	movw	r30, r24
    5cbc:	20 8b       	std	Z+16, r18	; 0x10
	DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm; 
    5cbe:	80 e0       	ldi	r24, 0x00	; 0
    5cc0:	91 e0       	ldi	r25, 0x01	; 1
    5cc2:	20 e0       	ldi	r18, 0x00	; 0
    5cc4:	31 e0       	ldi	r19, 0x01	; 1
    5cc6:	f9 01       	movw	r30, r18
    5cc8:	20 a1       	ldd	r18, Z+32	; 0x20
    5cca:	20 68       	ori	r18, 0x80	; 128
    5ccc:	fc 01       	movw	r30, r24
    5cce:	20 a3       	std	Z+32, r18	; 0x20
    DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;
    5cd0:	80 e0       	ldi	r24, 0x00	; 0
    5cd2:	91 e0       	ldi	r25, 0x01	; 1
    5cd4:	20 e0       	ldi	r18, 0x00	; 0
    5cd6:	31 e0       	ldi	r19, 0x01	; 1
    5cd8:	f9 01       	movw	r30, r18
    5cda:	20 a9       	ldd	r18, Z+48	; 0x30
    5cdc:	20 68       	ori	r18, 0x80	; 128
    5cde:	fc 01       	movw	r30, r24
    5ce0:	20 ab       	std	Z+48, r18	; 0x30
    DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;
    5ce2:	80 e0       	ldi	r24, 0x00	; 0
    5ce4:	91 e0       	ldi	r25, 0x01	; 1
    5ce6:	20 e0       	ldi	r18, 0x00	; 0
    5ce8:	31 e0       	ldi	r19, 0x01	; 1
    5cea:	20 5c       	subi	r18, 0xC0	; 192
    5cec:	3f 4f       	sbci	r19, 0xFF	; 255
    5cee:	f9 01       	movw	r30, r18
    5cf0:	20 81       	ld	r18, Z
    5cf2:	20 68       	ori	r18, 0x80	; 128
    5cf4:	80 5c       	subi	r24, 0xC0	; 192
    5cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    5cf8:	fc 01       	movw	r30, r24
    5cfa:	20 83       	st	Z, r18
}
    5cfc:	00 00       	nop
    5cfe:	df 91       	pop	r29
    5d00:	cf 91       	pop	r28
    5d02:	08 95       	ret

00005d04 <initDACTimer>:
void initDACTimer(void) {
    5d04:	cf 93       	push	r28
    5d06:	df 93       	push	r29
    5d08:	cd b7       	in	r28, 0x3d	; 61
    5d0a:	de b7       	in	r29, 0x3e	; 62
	TC0_ConfigClockSource(&TCD0, TC_CLKSEL_DIV1_gc);
    5d0c:	61 e0       	ldi	r22, 0x01	; 1
    5d0e:	80 e0       	ldi	r24, 0x00	; 0
    5d10:	99 e0       	ldi	r25, 0x09	; 9
    5d12:	0e 94 3d 03 	call	0x67a	; 0x67a <TC0_ConfigClockSource>
	TC0_ConfigWGM(&TCD0, TC_WGMODE_SINGLESLOPE_gc);
    5d16:	63 e0       	ldi	r22, 0x03	; 3
    5d18:	80 e0       	ldi	r24, 0x00	; 0
    5d1a:	99 e0       	ldi	r25, 0x09	; 9
    5d1c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <TC0_ConfigWGM>
	TC_SetPeriod(&TCD0, 32000000/(GENERATOR_FREQUENCY_INITIAL_VALUE*NR_OF_GENERATOR_SAMPLES));
    5d20:	80 e0       	ldi	r24, 0x00	; 0
    5d22:	99 e0       	ldi	r25, 0x09	; 9
    5d24:	28 ee       	ldi	r18, 0xE8	; 232
    5d26:	33 e0       	ldi	r19, 0x03	; 3
    5d28:	fc 01       	movw	r30, r24
    5d2a:	26 a3       	std	Z+38, r18	; 0x26
    5d2c:	37 a3       	std	Z+39, r19	; 0x27
	EVSYS.CH0MUX = EVSYS_CHMUX_TCD0_OVF_gc; //Setup Eventsystem with timer TCD0 overflow
    5d2e:	80 e8       	ldi	r24, 0x80	; 128
    5d30:	91 e0       	ldi	r25, 0x01	; 1
    5d32:	20 ed       	ldi	r18, 0xD0	; 208
    5d34:	fc 01       	movw	r30, r24
    5d36:	20 83       	st	Z, r18
}
    5d38:	00 00       	nop
    5d3a:	df 91       	pop	r29
    5d3c:	cf 91       	pop	r28
    5d3e:	08 95       	ret

00005d40 <vQuamGen>:

void vQuamGen(void *pvParameters) {
    5d40:	ef 92       	push	r14
    5d42:	ff 92       	push	r15
    5d44:	0f 93       	push	r16
    5d46:	cf 93       	push	r28
    5d48:	df 93       	push	r29
    5d4a:	1f 92       	push	r1
    5d4c:	1f 92       	push	r1
    5d4e:	cd b7       	in	r28, 0x3d	; 61
    5d50:	de b7       	in	r29, 0x3e	; 62
    5d52:	89 83       	std	Y+1, r24	; 0x01
    5d54:	9a 83       	std	Y+2, r25	; 0x02
	initDAC();
    5d56:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <initDAC>
	initDACTimer();
    5d5a:	0e 94 82 2e 	call	0x5d04	; 0x5d04 <initDACTimer>
	initGenDMA();
    5d5e:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <initGenDMA>
    
       xQAMchannel_1=xEventGroupCreate();
    5d62:	0e 94 db 03 	call	0x7b6	; 0x7b6 <xEventGroupCreate>
    5d66:	80 93 cb 2e 	sts	0x2ECB, r24	; 0x802ecb <xQAMchannel_1>
    5d6a:	90 93 cc 2e 	sts	0x2ECC, r25	; 0x802ecc <xQAMchannel_1+0x1>
       xQAMchannel_2=xEventGroupCreate();
    5d6e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <xEventGroupCreate>
    5d72:	80 93 cd 2e 	sts	0x2ECD, r24	; 0x802ecd <xQAMchannel_2>
    5d76:	90 93 ce 2e 	sts	0x2ECE, r25	; 0x802ece <xQAMchannel_2+0x1>
       xQueue_Data = xQueueCreate( 1, sizeof(uint8_t)*NR_OF_DATA_SAMPLES);
    5d7a:	40 e0       	ldi	r20, 0x00	; 0
    5d7c:	60 e2       	ldi	r22, 0x20	; 32
    5d7e:	81 e0       	ldi	r24, 0x01	; 1
    5d80:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <xQueueGenericCreate>
    5d84:	80 93 cf 2e 	sts	0x2ECF, r24	; 0x802ecf <xQueue_Data>
    5d88:	90 93 d0 2e 	sts	0x2ED0, r25	; 0x802ed0 <xQueue_Data+0x1>
    
        xTaskCreate(vsendFrame, NULL, configMINIMAL_STACK_SIZE+400, NULL, 2, &xsendFrame);
    5d8c:	0f 2e       	mov	r0, r31
    5d8e:	f1 ed       	ldi	r31, 0xD1	; 209
    5d90:	ef 2e       	mov	r14, r31
    5d92:	fe e2       	ldi	r31, 0x2E	; 46
    5d94:	ff 2e       	mov	r15, r31
    5d96:	f0 2d       	mov	r31, r0
    5d98:	02 e0       	ldi	r16, 0x02	; 2
    5d9a:	20 e0       	ldi	r18, 0x00	; 0
    5d9c:	30 e0       	ldi	r19, 0x00	; 0
    5d9e:	48 e5       	ldi	r20, 0x58	; 88
    5da0:	52 e0       	ldi	r21, 0x02	; 2
    5da2:	60 e0       	ldi	r22, 0x00	; 0
    5da4:	70 e0       	ldi	r23, 0x00	; 0
    5da6:	88 ec       	ldi	r24, 0xC8	; 200
    5da8:	90 e3       	ldi	r25, 0x30	; 48
    5daa:	0e 94 94 11 	call	0x2328	; 0x2328 <xTaskCreate>
	
	for(;;) {
		vTaskDelay(1000/portTICK_RATE_MS);
    5dae:	68 ee       	ldi	r22, 0xE8	; 232
    5db0:	73 e0       	ldi	r23, 0x03	; 3
    5db2:	80 e0       	ldi	r24, 0x00	; 0
    5db4:	90 e0       	ldi	r25, 0x00	; 0
    5db6:	0e 94 67 13 	call	0x26ce	; 0x26ce <vTaskDelay>
	}
    5dba:	f9 cf       	rjmp	.-14     	; 0x5dae <vQuamGen+0x6e>

00005dbc <fillBuffer>:
}

void fillBuffer(uint16_t buffer[NR_OF_GENERATOR_SAMPLES]) {
    5dbc:	cf 93       	push	r28
    5dbe:	df 93       	push	r29
    5dc0:	cd b7       	in	r28, 0x3d	; 61
    5dc2:	de b7       	in	r29, 0x3e	; 62
    5dc4:	27 97       	sbiw	r28, 0x07	; 7
    5dc6:	cd bf       	out	0x3d, r28	; 61
    5dc8:	de bf       	out	0x3e, r29	; 62
    5dca:	8e 83       	std	Y+6, r24	; 0x06
    5dcc:	9f 83       	std	Y+7, r25	; 0x07
    
    uint16_t Amp=1;
    5dce:	81 e0       	ldi	r24, 0x01	; 1
    5dd0:	90 e0       	ldi	r25, 0x00	; 0
    5dd2:	89 83       	std	Y+1, r24	; 0x01
    5dd4:	9a 83       	std	Y+2, r25	; 0x02
    uint8_t  EventGroupBits= xEventGroupGetBitsFromISR(xQAMchannel_1);
    5dd6:	80 91 cb 2e 	lds	r24, 0x2ECB	; 0x802ecb <xQAMchannel_1>
    5dda:	90 91 cc 2e 	lds	r25, 0x2ECC	; 0x802ecc <xQAMchannel_1+0x1>
    5dde:	0e 94 81 05 	call	0xb02	; 0xb02 <xEventGroupGetBitsFromISR>
    5de2:	dc 01       	movw	r26, r24
    5de4:	cb 01       	movw	r24, r22
    5de6:	8d 83       	std	Y+5, r24	; 0x05
    if (EventGroupBits&AMPLITUDE_1)
    5de8:	8d 81       	ldd	r24, Y+5	; 0x05
    5dea:	88 2f       	mov	r24, r24
    5dec:	90 e0       	ldi	r25, 0x00	; 0
    5dee:	81 70       	andi	r24, 0x01	; 1
    5df0:	99 27       	eor	r25, r25
    5df2:	89 2b       	or	r24, r25
    5df4:	29 f0       	breq	.+10     	; 0x5e00 <fillBuffer+0x44>
    {
        Amp=1;
    5df6:	81 e0       	ldi	r24, 0x01	; 1
    5df8:	90 e0       	ldi	r25, 0x00	; 0
    5dfa:	89 83       	std	Y+1, r24	; 0x01
    5dfc:	9a 83       	std	Y+2, r25	; 0x02
    5dfe:	0b c0       	rjmp	.+22     	; 0x5e16 <fillBuffer+0x5a>
    }
    
    else if (EventGroupBits&AMPLITUDE_2)
    5e00:	8d 81       	ldd	r24, Y+5	; 0x05
    5e02:	88 2f       	mov	r24, r24
    5e04:	90 e0       	ldi	r25, 0x00	; 0
    5e06:	82 70       	andi	r24, 0x02	; 2
    5e08:	99 27       	eor	r25, r25
    5e0a:	89 2b       	or	r24, r25
    5e0c:	21 f0       	breq	.+8      	; 0x5e16 <fillBuffer+0x5a>
    {
        Amp=2;
    5e0e:	82 e0       	ldi	r24, 0x02	; 2
    5e10:	90 e0       	ldi	r25, 0x00	; 0
    5e12:	89 83       	std	Y+1, r24	; 0x01
    5e14:	9a 83       	std	Y+2, r25	; 0x02
    }
	for(int i = 0; i < NR_OF_GENERATOR_SAMPLES;i++) {
    5e16:	1b 82       	std	Y+3, r1	; 0x03
    5e18:	1c 82       	std	Y+4, r1	; 0x04
    5e1a:	24 c0       	rjmp	.+72     	; 0x5e64 <fillBuffer+0xa8>
		buffer[i] = 0x800 + (Amp*sinLookup1000[i]);
    5e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    5e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    5e20:	88 0f       	add	r24, r24
    5e22:	99 1f       	adc	r25, r25
    5e24:	2e 81       	ldd	r18, Y+6	; 0x06
    5e26:	3f 81       	ldd	r19, Y+7	; 0x07
    5e28:	82 0f       	add	r24, r18
    5e2a:	93 1f       	adc	r25, r19
    5e2c:	2b 81       	ldd	r18, Y+3	; 0x03
    5e2e:	3c 81       	ldd	r19, Y+4	; 0x04
    5e30:	22 0f       	add	r18, r18
    5e32:	33 1f       	adc	r19, r19
    5e34:	2f 53       	subi	r18, 0x3F	; 63
    5e36:	3f 4d       	sbci	r19, 0xDF	; 223
    5e38:	f9 01       	movw	r30, r18
    5e3a:	20 81       	ld	r18, Z
    5e3c:	31 81       	ldd	r19, Z+1	; 0x01
    5e3e:	b9 01       	movw	r22, r18
    5e40:	49 81       	ldd	r20, Y+1	; 0x01
    5e42:	5a 81       	ldd	r21, Y+2	; 0x02
    5e44:	64 9f       	mul	r22, r20
    5e46:	90 01       	movw	r18, r0
    5e48:	65 9f       	mul	r22, r21
    5e4a:	30 0d       	add	r19, r0
    5e4c:	74 9f       	mul	r23, r20
    5e4e:	30 0d       	add	r19, r0
    5e50:	11 24       	eor	r1, r1
    5e52:	38 5f       	subi	r19, 0xF8	; 248
    5e54:	fc 01       	movw	r30, r24
    5e56:	20 83       	st	Z, r18
    5e58:	31 83       	std	Z+1, r19	; 0x01
    
    else if (EventGroupBits&AMPLITUDE_2)
    {
        Amp=2;
    }
	for(int i = 0; i < NR_OF_GENERATOR_SAMPLES;i++) {
    5e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    5e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    5e5e:	01 96       	adiw	r24, 0x01	; 1
    5e60:	8b 83       	std	Y+3, r24	; 0x03
    5e62:	9c 83       	std	Y+4, r25	; 0x04
    5e64:	8b 81       	ldd	r24, Y+3	; 0x03
    5e66:	9c 81       	ldd	r25, Y+4	; 0x04
    5e68:	80 97       	sbiw	r24, 0x20	; 32
    5e6a:	c0 f2       	brcs	.-80     	; 0x5e1c <fillBuffer+0x60>
		buffer[i] = 0x800 + (Amp*sinLookup1000[i]);
	}
        xEventGroupSetBits(xQAMchannel_1,DATEN_AUFBEREITET);
    5e6c:	80 91 cb 2e 	lds	r24, 0x2ECB	; 0x802ecb <xQAMchannel_1>
    5e70:	90 91 cc 2e 	lds	r25, 0x2ECC	; 0x802ecc <xQAMchannel_1+0x1>
    5e74:	44 e0       	ldi	r20, 0x04	; 4
    5e76:	50 e0       	ldi	r21, 0x00	; 0
    5e78:	60 e0       	ldi	r22, 0x00	; 0
    5e7a:	70 e0       	ldi	r23, 0x00	; 0
    5e7c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <xEventGroupSetBits>
}
    5e80:	00 00       	nop
    5e82:	27 96       	adiw	r28, 0x07	; 7
    5e84:	cd bf       	out	0x3d, r28	; 61
    5e86:	de bf       	out	0x3e, r29	; 62
    5e88:	df 91       	pop	r29
    5e8a:	cf 91       	pop	r28
    5e8c:	08 95       	ret

00005e8e <fillBuffer_1>:

// Mit ISR EventGroups arbeiten, da der Interrupt Buffer füllt
void fillBuffer_1(uint16_t buffer[NR_OF_GENERATOR_SAMPLES]) {
    5e8e:	cf 93       	push	r28
    5e90:	df 93       	push	r29
    5e92:	00 d0       	rcall	.+0      	; 0x5e94 <fillBuffer_1+0x6>
    5e94:	00 d0       	rcall	.+0      	; 0x5e96 <fillBuffer_1+0x8>
    5e96:	cd b7       	in	r28, 0x3d	; 61
    5e98:	de b7       	in	r29, 0x3e	; 62
    5e9a:	8d 83       	std	Y+5, r24	; 0x05
    5e9c:	9e 83       	std	Y+6, r25	; 0x06
    uint8_t Amp_1=1;
    5e9e:	81 e0       	ldi	r24, 0x01	; 1
    5ea0:	89 83       	std	Y+1, r24	; 0x01
    uint8_t  EventGroupBits= xEventGroupGetBitsFromISR(xQAMchannel_2);
    5ea2:	80 91 cd 2e 	lds	r24, 0x2ECD	; 0x802ecd <xQAMchannel_2>
    5ea6:	90 91 ce 2e 	lds	r25, 0x2ECE	; 0x802ece <xQAMchannel_2+0x1>
    5eaa:	0e 94 81 05 	call	0xb02	; 0xb02 <xEventGroupGetBitsFromISR>
    5eae:	dc 01       	movw	r26, r24
    5eb0:	cb 01       	movw	r24, r22
    5eb2:	8c 83       	std	Y+4, r24	; 0x04
    
    if (EventGroupBits&AMPLITUDE_1)
    5eb4:	8c 81       	ldd	r24, Y+4	; 0x04
    5eb6:	88 2f       	mov	r24, r24
    5eb8:	90 e0       	ldi	r25, 0x00	; 0
    5eba:	81 70       	andi	r24, 0x01	; 1
    5ebc:	99 27       	eor	r25, r25
    5ebe:	89 2b       	or	r24, r25
    5ec0:	19 f0       	breq	.+6      	; 0x5ec8 <fillBuffer_1+0x3a>
    {
        Amp_1=1;
    5ec2:	81 e0       	ldi	r24, 0x01	; 1
    5ec4:	89 83       	std	Y+1, r24	; 0x01
    5ec6:	09 c0       	rjmp	.+18     	; 0x5eda <fillBuffer_1+0x4c>
    }

    else if (EventGroupBits&AMPLITUDE_2)
    5ec8:	8c 81       	ldd	r24, Y+4	; 0x04
    5eca:	88 2f       	mov	r24, r24
    5ecc:	90 e0       	ldi	r25, 0x00	; 0
    5ece:	82 70       	andi	r24, 0x02	; 2
    5ed0:	99 27       	eor	r25, r25
    5ed2:	89 2b       	or	r24, r25
    5ed4:	11 f0       	breq	.+4      	; 0x5eda <fillBuffer_1+0x4c>
    {
        Amp_1=2;
    5ed6:	82 e0       	ldi	r24, 0x02	; 2
    5ed8:	89 83       	std	Y+1, r24	; 0x01
    }
            
    for(int i = 0; i < NR_OF_GENERATOR_SAMPLES;i++) {
    5eda:	1a 82       	std	Y+2, r1	; 0x02
    5edc:	1b 82       	std	Y+3, r1	; 0x03
    5ede:	24 c0       	rjmp	.+72     	; 0x5f28 <fillBuffer_1+0x9a>
       buffer[i] = 0x800 + (Amp_1*sinLookup2000[i]); 
    5ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ee2:	9b 81       	ldd	r25, Y+3	; 0x03
    5ee4:	88 0f       	add	r24, r24
    5ee6:	99 1f       	adc	r25, r25
    5ee8:	2d 81       	ldd	r18, Y+5	; 0x05
    5eea:	3e 81       	ldd	r19, Y+6	; 0x06
    5eec:	82 0f       	add	r24, r18
    5eee:	93 1f       	adc	r25, r19
    5ef0:	29 81       	ldd	r18, Y+1	; 0x01
    5ef2:	62 2f       	mov	r22, r18
    5ef4:	70 e0       	ldi	r23, 0x00	; 0
    5ef6:	2a 81       	ldd	r18, Y+2	; 0x02
    5ef8:	3b 81       	ldd	r19, Y+3	; 0x03
    5efa:	22 0f       	add	r18, r18
    5efc:	33 1f       	adc	r19, r19
    5efe:	2f 5f       	subi	r18, 0xFF	; 255
    5f00:	3e 4d       	sbci	r19, 0xDE	; 222
    5f02:	f9 01       	movw	r30, r18
    5f04:	40 81       	ld	r20, Z
    5f06:	51 81       	ldd	r21, Z+1	; 0x01
    5f08:	64 9f       	mul	r22, r20
    5f0a:	90 01       	movw	r18, r0
    5f0c:	65 9f       	mul	r22, r21
    5f0e:	30 0d       	add	r19, r0
    5f10:	74 9f       	mul	r23, r20
    5f12:	30 0d       	add	r19, r0
    5f14:	11 24       	eor	r1, r1
    5f16:	38 5f       	subi	r19, 0xF8	; 248
    5f18:	fc 01       	movw	r30, r24
    5f1a:	20 83       	st	Z, r18
    5f1c:	31 83       	std	Z+1, r19	; 0x01
    else if (EventGroupBits&AMPLITUDE_2)
    {
        Amp_1=2;
    }
            
    for(int i = 0; i < NR_OF_GENERATOR_SAMPLES;i++) {
    5f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    5f20:	9b 81       	ldd	r25, Y+3	; 0x03
    5f22:	01 96       	adiw	r24, 0x01	; 1
    5f24:	8a 83       	std	Y+2, r24	; 0x02
    5f26:	9b 83       	std	Y+3, r25	; 0x03
    5f28:	8a 81       	ldd	r24, Y+2	; 0x02
    5f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    5f2c:	80 97       	sbiw	r24, 0x20	; 32
    5f2e:	c0 f2       	brcs	.-80     	; 0x5ee0 <fillBuffer_1+0x52>
       buffer[i] = 0x800 + (Amp_1*sinLookup2000[i]); 
    }
       xEventGroupSetBits(xQAMchannel_2,DATEN_AUFBEREITET);
    5f30:	80 91 cd 2e 	lds	r24, 0x2ECD	; 0x802ecd <xQAMchannel_2>
    5f34:	90 91 ce 2e 	lds	r25, 0x2ECE	; 0x802ece <xQAMchannel_2+0x1>
    5f38:	44 e0       	ldi	r20, 0x04	; 4
    5f3a:	50 e0       	ldi	r21, 0x00	; 0
    5f3c:	60 e0       	ldi	r22, 0x00	; 0
    5f3e:	70 e0       	ldi	r23, 0x00	; 0
    5f40:	0e 94 ad 05 	call	0xb5a	; 0xb5a <xEventGroupSetBits>
   
}
    5f44:	00 00       	nop
    5f46:	26 96       	adiw	r28, 0x06	; 6
    5f48:	cd bf       	out	0x3d, r28	; 61
    5f4a:	de bf       	out	0x3e, r29	; 62
    5f4c:	df 91       	pop	r29
    5f4e:	cf 91       	pop	r28
    5f50:	08 95       	ret

00005f52 <__vector_6>:

ISR(DMA_CH0_vect)
{
    5f52:	1f 92       	push	r1
    5f54:	0f 92       	push	r0
    5f56:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5f5a:	0f 92       	push	r0
    5f5c:	11 24       	eor	r1, r1
    5f5e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5f62:	0f 92       	push	r0
    5f64:	2f 93       	push	r18
    5f66:	3f 93       	push	r19
    5f68:	4f 93       	push	r20
    5f6a:	5f 93       	push	r21
    5f6c:	6f 93       	push	r22
    5f6e:	7f 93       	push	r23
    5f70:	8f 93       	push	r24
    5f72:	9f 93       	push	r25
    5f74:	af 93       	push	r26
    5f76:	bf 93       	push	r27
    5f78:	ef 93       	push	r30
    5f7a:	ff 93       	push	r31
    5f7c:	cf 93       	push	r28
    5f7e:	df 93       	push	r29
    5f80:	cd b7       	in	r28, 0x3d	; 61
    5f82:	de b7       	in	r29, 0x3e	; 62
	DMA.CH0.CTRLB|=0x10;
    5f84:	80 e0       	ldi	r24, 0x00	; 0
    5f86:	91 e0       	ldi	r25, 0x01	; 1
    5f88:	20 e0       	ldi	r18, 0x00	; 0
    5f8a:	31 e0       	ldi	r19, 0x01	; 1
    5f8c:	f9 01       	movw	r30, r18
    5f8e:	21 89       	ldd	r18, Z+17	; 0x11
    5f90:	20 61       	ori	r18, 0x10	; 16
    5f92:	fc 01       	movw	r30, r24
    5f94:	21 8b       	std	Z+17, r18	; 0x11
	fillBuffer(&dacBuffer0[0]);
    5f96:	8e eb       	ldi	r24, 0xBE	; 190
    5f98:	9d e2       	ldi	r25, 0x2D	; 45
    5f9a:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <fillBuffer>
}
    5f9e:	00 00       	nop
    5fa0:	df 91       	pop	r29
    5fa2:	cf 91       	pop	r28
    5fa4:	ff 91       	pop	r31
    5fa6:	ef 91       	pop	r30
    5fa8:	bf 91       	pop	r27
    5faa:	af 91       	pop	r26
    5fac:	9f 91       	pop	r25
    5fae:	8f 91       	pop	r24
    5fb0:	7f 91       	pop	r23
    5fb2:	6f 91       	pop	r22
    5fb4:	5f 91       	pop	r21
    5fb6:	4f 91       	pop	r20
    5fb8:	3f 91       	pop	r19
    5fba:	2f 91       	pop	r18
    5fbc:	0f 90       	pop	r0
    5fbe:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5fc2:	0f 90       	pop	r0
    5fc4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5fc8:	0f 90       	pop	r0
    5fca:	1f 90       	pop	r1
    5fcc:	18 95       	reti

00005fce <__vector_7>:

ISR(DMA_CH1_vect)
{
    5fce:	1f 92       	push	r1
    5fd0:	0f 92       	push	r0
    5fd2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    5fd6:	0f 92       	push	r0
    5fd8:	11 24       	eor	r1, r1
    5fda:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5fde:	0f 92       	push	r0
    5fe0:	2f 93       	push	r18
    5fe2:	3f 93       	push	r19
    5fe4:	4f 93       	push	r20
    5fe6:	5f 93       	push	r21
    5fe8:	6f 93       	push	r22
    5fea:	7f 93       	push	r23
    5fec:	8f 93       	push	r24
    5fee:	9f 93       	push	r25
    5ff0:	af 93       	push	r26
    5ff2:	bf 93       	push	r27
    5ff4:	ef 93       	push	r30
    5ff6:	ff 93       	push	r31
    5ff8:	cf 93       	push	r28
    5ffa:	df 93       	push	r29
    5ffc:	cd b7       	in	r28, 0x3d	; 61
    5ffe:	de b7       	in	r29, 0x3e	; 62
	DMA.CH1.CTRLB|=0x10;
    6000:	80 e0       	ldi	r24, 0x00	; 0
    6002:	91 e0       	ldi	r25, 0x01	; 1
    6004:	20 e0       	ldi	r18, 0x00	; 0
    6006:	31 e0       	ldi	r19, 0x01	; 1
    6008:	f9 01       	movw	r30, r18
    600a:	21 a1       	ldd	r18, Z+33	; 0x21
    600c:	20 61       	ori	r18, 0x10	; 16
    600e:	fc 01       	movw	r30, r24
    6010:	21 a3       	std	Z+33, r18	; 0x21
	fillBuffer(&dacBuffer1[0]);
    6012:	8e ef       	ldi	r24, 0xFE	; 254
    6014:	9d e2       	ldi	r25, 0x2D	; 45
    6016:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <fillBuffer>
}
    601a:	00 00       	nop
    601c:	df 91       	pop	r29
    601e:	cf 91       	pop	r28
    6020:	ff 91       	pop	r31
    6022:	ef 91       	pop	r30
    6024:	bf 91       	pop	r27
    6026:	af 91       	pop	r26
    6028:	9f 91       	pop	r25
    602a:	8f 91       	pop	r24
    602c:	7f 91       	pop	r23
    602e:	6f 91       	pop	r22
    6030:	5f 91       	pop	r21
    6032:	4f 91       	pop	r20
    6034:	3f 91       	pop	r19
    6036:	2f 91       	pop	r18
    6038:	0f 90       	pop	r0
    603a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    603e:	0f 90       	pop	r0
    6040:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6044:	0f 90       	pop	r0
    6046:	1f 90       	pop	r1
    6048:	18 95       	reti

0000604a <__vector_8>:

ISR(DMA_CH2_vect)
{
    604a:	1f 92       	push	r1
    604c:	0f 92       	push	r0
    604e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6052:	0f 92       	push	r0
    6054:	11 24       	eor	r1, r1
    6056:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    605a:	0f 92       	push	r0
    605c:	2f 93       	push	r18
    605e:	3f 93       	push	r19
    6060:	4f 93       	push	r20
    6062:	5f 93       	push	r21
    6064:	6f 93       	push	r22
    6066:	7f 93       	push	r23
    6068:	8f 93       	push	r24
    606a:	9f 93       	push	r25
    606c:	af 93       	push	r26
    606e:	bf 93       	push	r27
    6070:	ef 93       	push	r30
    6072:	ff 93       	push	r31
    6074:	cf 93       	push	r28
    6076:	df 93       	push	r29
    6078:	cd b7       	in	r28, 0x3d	; 61
    607a:	de b7       	in	r29, 0x3e	; 62
    
    DMA.CH2.CTRLB|=0x10;
    607c:	80 e0       	ldi	r24, 0x00	; 0
    607e:	91 e0       	ldi	r25, 0x01	; 1
    6080:	20 e0       	ldi	r18, 0x00	; 0
    6082:	31 e0       	ldi	r19, 0x01	; 1
    6084:	f9 01       	movw	r30, r18
    6086:	21 a9       	ldd	r18, Z+49	; 0x31
    6088:	20 61       	ori	r18, 0x10	; 16
    608a:	fc 01       	movw	r30, r24
    608c:	21 ab       	std	Z+49, r18	; 0x31
    fillBuffer_1(&dacBuffer2[0]);
    608e:	8e e3       	ldi	r24, 0x3E	; 62
    6090:	9e e2       	ldi	r25, 0x2E	; 46
    6092:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <fillBuffer_1>
}
    6096:	00 00       	nop
    6098:	df 91       	pop	r29
    609a:	cf 91       	pop	r28
    609c:	ff 91       	pop	r31
    609e:	ef 91       	pop	r30
    60a0:	bf 91       	pop	r27
    60a2:	af 91       	pop	r26
    60a4:	9f 91       	pop	r25
    60a6:	8f 91       	pop	r24
    60a8:	7f 91       	pop	r23
    60aa:	6f 91       	pop	r22
    60ac:	5f 91       	pop	r21
    60ae:	4f 91       	pop	r20
    60b0:	3f 91       	pop	r19
    60b2:	2f 91       	pop	r18
    60b4:	0f 90       	pop	r0
    60b6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    60ba:	0f 90       	pop	r0
    60bc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    60c0:	0f 90       	pop	r0
    60c2:	1f 90       	pop	r1
    60c4:	18 95       	reti

000060c6 <__vector_9>:

ISR(DMA_CH3_vect)
{
    60c6:	1f 92       	push	r1
    60c8:	0f 92       	push	r0
    60ca:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    60ce:	0f 92       	push	r0
    60d0:	11 24       	eor	r1, r1
    60d2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    60d6:	0f 92       	push	r0
    60d8:	2f 93       	push	r18
    60da:	3f 93       	push	r19
    60dc:	4f 93       	push	r20
    60de:	5f 93       	push	r21
    60e0:	6f 93       	push	r22
    60e2:	7f 93       	push	r23
    60e4:	8f 93       	push	r24
    60e6:	9f 93       	push	r25
    60e8:	af 93       	push	r26
    60ea:	bf 93       	push	r27
    60ec:	ef 93       	push	r30
    60ee:	ff 93       	push	r31
    60f0:	cf 93       	push	r28
    60f2:	df 93       	push	r29
    60f4:	cd b7       	in	r28, 0x3d	; 61
    60f6:	de b7       	in	r29, 0x3e	; 62
    DMA.CH3.CTRLB|=0x10;
    60f8:	80 e0       	ldi	r24, 0x00	; 0
    60fa:	91 e0       	ldi	r25, 0x01	; 1
    60fc:	20 e0       	ldi	r18, 0x00	; 0
    60fe:	31 e0       	ldi	r19, 0x01	; 1
    6100:	2f 5b       	subi	r18, 0xBF	; 191
    6102:	3f 4f       	sbci	r19, 0xFF	; 255
    6104:	f9 01       	movw	r30, r18
    6106:	20 81       	ld	r18, Z
    6108:	20 61       	ori	r18, 0x10	; 16
    610a:	8f 5b       	subi	r24, 0xBF	; 191
    610c:	9f 4f       	sbci	r25, 0xFF	; 255
    610e:	fc 01       	movw	r30, r24
    6110:	20 83       	st	Z, r18
    fillBuffer_1(&dacBuffer3[0]);
    6112:	8e e7       	ldi	r24, 0x7E	; 126
    6114:	9e e2       	ldi	r25, 0x2E	; 46
    6116:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <fillBuffer_1>
}
    611a:	00 00       	nop
    611c:	df 91       	pop	r29
    611e:	cf 91       	pop	r28
    6120:	ff 91       	pop	r31
    6122:	ef 91       	pop	r30
    6124:	bf 91       	pop	r27
    6126:	af 91       	pop	r26
    6128:	9f 91       	pop	r25
    612a:	8f 91       	pop	r24
    612c:	7f 91       	pop	r23
    612e:	6f 91       	pop	r22
    6130:	5f 91       	pop	r21
    6132:	4f 91       	pop	r20
    6134:	3f 91       	pop	r19
    6136:	2f 91       	pop	r18
    6138:	0f 90       	pop	r0
    613a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    613e:	0f 90       	pop	r0
    6140:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6144:	0f 90       	pop	r0
    6146:	1f 90       	pop	r1
    6148:	18 95       	reti

0000614a <vsendCommand>:

void vsendCommand(uint8_t Data[])
{
    614a:	0f 93       	push	r16
    614c:	cf 93       	push	r28
    614e:	df 93       	push	r29
    6150:	1f 92       	push	r1
    6152:	1f 92       	push	r1
    6154:	cd b7       	in	r28, 0x3d	; 61
    6156:	de b7       	in	r29, 0x3e	; 62
    6158:	89 83       	std	Y+1, r24	; 0x01
    615a:	9a 83       	std	Y+2, r25	; 0x02

    if( xQueue_Data != 0 )
    615c:	80 91 cf 2e 	lds	r24, 0x2ECF	; 0x802ecf <xQueue_Data>
    6160:	90 91 d0 2e 	lds	r25, 0x2ED0	; 0x802ed0 <xQueue_Data+0x1>
    6164:	89 2b       	or	r24, r25
    6166:	69 f0       	breq	.+26     	; 0x6182 <vsendCommand+0x38>
    {
        /* Put data to send to xQueue_Data. */
        xQueueSend(xQueue_Data,(void *)Data,pdMS_TO_TICKS(10));
    6168:	80 91 cf 2e 	lds	r24, 0x2ECF	; 0x802ecf <xQueue_Data>
    616c:	90 91 d0 2e 	lds	r25, 0x2ED0	; 0x802ed0 <xQueue_Data+0x1>
    6170:	69 81       	ldd	r22, Y+1	; 0x01
    6172:	7a 81       	ldd	r23, Y+2	; 0x02
    6174:	00 e0       	ldi	r16, 0x00	; 0
    6176:	2a e0       	ldi	r18, 0x0A	; 10
    6178:	30 e0       	ldi	r19, 0x00	; 0
    617a:	40 e0       	ldi	r20, 0x00	; 0
    617c:	50 e0       	ldi	r21, 0x00	; 0
    617e:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <xQueueGenericSend>
    }    
}
    6182:	00 00       	nop
    6184:	0f 90       	pop	r0
    6186:	0f 90       	pop	r0
    6188:	df 91       	pop	r29
    618a:	cf 91       	pop	r28
    618c:	0f 91       	pop	r16
    618e:	08 95       	ret

00006190 <vsendFrame>:

void vsendFrame(void *pvParameters)
{
    6190:	cf 93       	push	r28
    6192:	df 93       	push	r29
    6194:	cd b7       	in	r28, 0x3d	; 61
    6196:	de b7       	in	r29, 0x3e	; 62
    6198:	ad 97       	sbiw	r28, 0x2d	; 45
    619a:	cd bf       	out	0x3d, r28	; 61
    619c:	de bf       	out	0x3e, r29	; 62
    619e:	8c a7       	std	Y+44, r24	; 0x2c
    61a0:	9d a7       	std	Y+45, r25	; 0x2d
(void) pvParameters;
    
uint8_t ucSendByteValue;                    // Variable current byte to send is stored
uint8_t ucSendBitPackageCounter = 0;        // Counts the sent bit packages, for QAM4 for 1 byte there are 4 packages (4 x 2bit = 8bit)
    61a2:	1a 82       	std	Y+2, r1	; 0x02
uint8_t ucReadyForNewDataByte = 1;          // Indicates if new data byte can be provided.
    61a4:	81 e0       	ldi	r24, 0x01	; 1
    61a6:	8b 83       	std	Y+3, r24	; 0x03
uint8_t ucNewDataByteValue = 0;             // Stores the new data byte value, which should be sent next.
    61a8:	1c 82       	std	Y+4, r1	; 0x04
uint8_t ucDataByteCounter = 0;              // Counts the sent data of the data array.
    61aa:	1d 82       	std	Y+5, r1	; 0x05
uint8_t ucDataBytesToSend;                  // Stores the value of how many data bytes should be sent. Extracted from command byte (1st array in data queue).
uint8_t ucQAMChannelsReady = 0;             // Status register to check if both QAM channels got the new amplitude levels.
    61ac:	1f 82       	std	Y+7, r1	; 0x07
uint8_t ucIdleSendByteFlag = 0;             // Byte for differentiation of idle bytes to be sent between 0xAF and 0x05.
    61ae:	18 86       	std	Y+8, r1	; 0x08
uint8_t ucChecksumValue = 0;                // Used for checksum calculation.
    61b0:	19 86       	std	Y+9, r1	; 0x09
uint8_t Data[NR_OF_DATA_SAMPLES + 1] = {};  // Data bytes received from queue.                
    61b2:	21 e2       	ldi	r18, 0x21	; 33
    61b4:	ce 01       	movw	r24, r28
    61b6:	0b 96       	adiw	r24, 0x0b	; 11
    61b8:	fc 01       	movw	r30, r24
    61ba:	32 2f       	mov	r19, r18
    61bc:	11 92       	st	Z+, r1
    61be:	3a 95       	dec	r19
    61c0:	e9 f7       	brne	.-6      	; 0x61bc <vsendFrame+0x2c>

    
    eProtokollStates Protokoll = Idle;
    61c2:	1a 86       	std	Y+10, r1	; 0x0a
    {
        
        /************************************************************************/
        /* State machine for setting up data.                                   */
        /************************************************************************/
        switch(Protokoll)
    61c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    61c6:	88 2f       	mov	r24, r24
    61c8:	90 e0       	ldi	r25, 0x00	; 0
    61ca:	81 30       	cpi	r24, 0x01	; 1
    61cc:	91 05       	cpc	r25, r1
    61ce:	b1 f1       	breq	.+108    	; 0x623c <vsendFrame+0xac>
    61d0:	82 30       	cpi	r24, 0x02	; 2
    61d2:	91 05       	cpc	r25, r1
    61d4:	1c f4       	brge	.+6      	; 0x61dc <vsendFrame+0x4c>
    61d6:	89 2b       	or	r24, r25
    61d8:	41 f0       	breq	.+16     	; 0x61ea <vsendFrame+0x5a>
    61da:	61 c0       	rjmp	.+194    	; 0x629e <vsendFrame+0x10e>
    61dc:	82 30       	cpi	r24, 0x02	; 2
    61de:	91 05       	cpc	r25, r1
    61e0:	b1 f1       	breq	.+108    	; 0x624e <vsendFrame+0xbe>
    61e2:	03 97       	sbiw	r24, 0x03	; 3
    61e4:	09 f4       	brne	.+2      	; 0x61e8 <vsendFrame+0x58>
    61e6:	52 c0       	rjmp	.+164    	; 0x628c <vsendFrame+0xfc>
    61e8:	5a c0       	rjmp	.+180    	; 0x629e <vsendFrame+0x10e>
        {
            case Idle:
            {
                if (ucIdleSendByteFlag == 0)
    61ea:	88 85       	ldd	r24, Y+8	; 0x08
    61ec:	88 23       	and	r24, r24
    61ee:	51 f4       	brne	.+20     	; 0x6204 <vsendFrame+0x74>
                {
                    /* Send first idle byte. */
                    if (ucReadyForNewDataByte)
    61f0:	8b 81       	ldd	r24, Y+3	; 0x03
    61f2:	88 23       	and	r24, r24
    61f4:	09 f4       	brne	.+2      	; 0x61f8 <vsendFrame+0x68>
    61f6:	55 c0       	rjmp	.+170    	; 0x62a2 <vsendFrame+0x112>
                    {
                        ucIdleSendByteFlag = 1;
    61f8:	81 e0       	ldi	r24, 0x01	; 1
    61fa:	88 87       	std	Y+8, r24	; 0x08
                        ucNewDataByteValue = 0xAF;
    61fc:	8f ea       	ldi	r24, 0xAF	; 175
    61fe:	8c 83       	std	Y+4, r24	; 0x04
                        ucReadyForNewDataByte = 0;
    6200:	1b 82       	std	Y+3, r1	; 0x03
                            ucDataBytesToSend = Data[0] & DATABYTETOSENDMASK;
                            Protokoll = sendSyncByte;
                        }                                
                    }
                }
                break;
    6202:	4f c0       	rjmp	.+158    	; 0x62a2 <vsendFrame+0x112>
                    }
                }
                else
                {
                    /* Send second idle byte. */
                    if (ucReadyForNewDataByte)
    6204:	8b 81       	ldd	r24, Y+3	; 0x03
    6206:	88 23       	and	r24, r24
    6208:	09 f4       	brne	.+2      	; 0x620c <vsendFrame+0x7c>
    620a:	4b c0       	rjmp	.+150    	; 0x62a2 <vsendFrame+0x112>
                    {
                        ucIdleSendByteFlag = 0;
    620c:	18 86       	std	Y+8, r1	; 0x08
                        ucNewDataByteValue = 0x05;
    620e:	85 e0       	ldi	r24, 0x05	; 5
    6210:	8c 83       	std	Y+4, r24	; 0x04
                        ucReadyForNewDataByte = 0;
    6212:	1b 82       	std	Y+3, r1	; 0x03
                        
                        
                        /* Check if new Data was received. */
                        if (xQueueReceive(xQueue_Data,Data, pdMS_TO_TICKS(0)) == pdTRUE)
    6214:	80 91 cf 2e 	lds	r24, 0x2ECF	; 0x802ecf <xQueue_Data>
    6218:	90 91 d0 2e 	lds	r25, 0x2ED0	; 0x802ed0 <xQueue_Data+0x1>
    621c:	be 01       	movw	r22, r28
    621e:	65 5f       	subi	r22, 0xF5	; 245
    6220:	7f 4f       	sbci	r23, 0xFF	; 255
    6222:	20 e0       	ldi	r18, 0x00	; 0
    6224:	30 e0       	ldi	r19, 0x00	; 0
    6226:	a9 01       	movw	r20, r18
    6228:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <xQueueReceive>
    622c:	81 30       	cpi	r24, 0x01	; 1
    622e:	c9 f5       	brne	.+114    	; 0x62a2 <vsendFrame+0x112>
                        {
                            ucDataBytesToSend = Data[0] & DATABYTETOSENDMASK;
    6230:	8b 85       	ldd	r24, Y+11	; 0x0b
    6232:	8f 71       	andi	r24, 0x1F	; 31
    6234:	8e 83       	std	Y+6, r24	; 0x06
                            Protokoll = sendSyncByte;
    6236:	81 e0       	ldi	r24, 0x01	; 1
    6238:	8a 87       	std	Y+10, r24	; 0x0a
                        }                                
                    }
                }
                break;
    623a:	33 c0       	rjmp	.+102    	; 0x62a2 <vsendFrame+0x112>
            }
            
            case sendSyncByte:
            {
                if (ucReadyForNewDataByte)
    623c:	8b 81       	ldd	r24, Y+3	; 0x03
    623e:	88 23       	and	r24, r24
    6240:	91 f1       	breq	.+100    	; 0x62a6 <vsendFrame+0x116>
                {
                    ucNewDataByteValue = 0xFF;
    6242:	8f ef       	ldi	r24, 0xFF	; 255
    6244:	8c 83       	std	Y+4, r24	; 0x04
                    ucReadyForNewDataByte = 0;
    6246:	1b 82       	std	Y+3, r1	; 0x03
                    Protokoll = sendDatenbuffer;
    6248:	82 e0       	ldi	r24, 0x02	; 2
    624a:	8a 87       	std	Y+10, r24	; 0x0a
                }
                
                break;
    624c:	2c c0       	rjmp	.+88     	; 0x62a6 <vsendFrame+0x116>
            }                          
            
            case sendDatenbuffer:
            {  
                if (ucReadyForNewDataByte)
    624e:	8b 81       	ldd	r24, Y+3	; 0x03
    6250:	88 23       	and	r24, r24
    6252:	59 f1       	breq	.+86     	; 0x62aa <vsendFrame+0x11a>
                {
                    if (ucDataByteCounter <= ucDataBytesToSend)
    6254:	9d 81       	ldd	r25, Y+5	; 0x05
    6256:	8e 81       	ldd	r24, Y+6	; 0x06
    6258:	89 17       	cp	r24, r25
    625a:	a0 f0       	brcs	.+40     	; 0x6284 <vsendFrame+0xf4>
                    {
                        ucNewDataByteValue = Data[ucDataByteCounter];
    625c:	8d 81       	ldd	r24, Y+5	; 0x05
    625e:	88 2f       	mov	r24, r24
    6260:	90 e0       	ldi	r25, 0x00	; 0
    6262:	9e 01       	movw	r18, r28
    6264:	25 5f       	subi	r18, 0xF5	; 245
    6266:	3f 4f       	sbci	r19, 0xFF	; 255
    6268:	82 0f       	add	r24, r18
    626a:	93 1f       	adc	r25, r19
    626c:	fc 01       	movw	r30, r24
    626e:	80 81       	ld	r24, Z
    6270:	8c 83       	std	Y+4, r24	; 0x04
                        
                        /* Continuous checksum calculation over all sent data bytes. */
                        ucChecksumValue ^= ucNewDataByteValue;
    6272:	99 85       	ldd	r25, Y+9	; 0x09
    6274:	8c 81       	ldd	r24, Y+4	; 0x04
    6276:	89 27       	eor	r24, r25
    6278:	89 87       	std	Y+9, r24	; 0x09
                        ucReadyForNewDataByte = 0;
    627a:	1b 82       	std	Y+3, r1	; 0x03
                        ucDataByteCounter++;
    627c:	8d 81       	ldd	r24, Y+5	; 0x05
    627e:	8f 5f       	subi	r24, 0xFF	; 255
    6280:	8d 83       	std	Y+5, r24	; 0x05
                        ucDataByteCounter = 0;
                        Protokoll = sendChecksum;
                    }
                }

                break;
    6282:	13 c0       	rjmp	.+38     	; 0x62aa <vsendFrame+0x11a>
                        ucReadyForNewDataByte = 0;
                        ucDataByteCounter++;
                    } 
                    else
                    {
                        ucDataByteCounter = 0;
    6284:	1d 82       	std	Y+5, r1	; 0x05
                        Protokoll = sendChecksum;
    6286:	83 e0       	ldi	r24, 0x03	; 3
    6288:	8a 87       	std	Y+10, r24	; 0x0a
                    }
                }

                break;
    628a:	0f c0       	rjmp	.+30     	; 0x62aa <vsendFrame+0x11a>
            }
            case sendChecksum:
            {
                if (ucReadyForNewDataByte)
    628c:	8b 81       	ldd	r24, Y+3	; 0x03
    628e:	88 23       	and	r24, r24
    6290:	71 f0       	breq	.+28     	; 0x62ae <vsendFrame+0x11e>
                {
                    ucNewDataByteValue = ucChecksumValue;
    6292:	89 85       	ldd	r24, Y+9	; 0x09
    6294:	8c 83       	std	Y+4, r24	; 0x04
                    ucChecksumValue = 0;
    6296:	19 86       	std	Y+9, r1	; 0x09
                    ucReadyForNewDataByte = 0;
    6298:	1b 82       	std	Y+3, r1	; 0x03
                    Protokoll = Idle;
    629a:	1a 86       	std	Y+10, r1	; 0x0a
                }
                break;
    629c:	08 c0       	rjmp	.+16     	; 0x62ae <vsendFrame+0x11e>
            }
            default:
            {
                Protokoll = Idle;
    629e:	1a 86       	std	Y+10, r1	; 0x0a
                break;
    62a0:	07 c0       	rjmp	.+14     	; 0x62b0 <vsendFrame+0x120>
                            ucDataBytesToSend = Data[0] & DATABYTETOSENDMASK;
                            Protokoll = sendSyncByte;
                        }                                
                    }
                }
                break;
    62a2:	00 00       	nop
    62a4:	05 c0       	rjmp	.+10     	; 0x62b0 <vsendFrame+0x120>
                    ucNewDataByteValue = 0xFF;
                    ucReadyForNewDataByte = 0;
                    Protokoll = sendDatenbuffer;
                }
                
                break;
    62a6:	00 00       	nop
    62a8:	03 c0       	rjmp	.+6      	; 0x62b0 <vsendFrame+0x120>
                        ucDataByteCounter = 0;
                        Protokoll = sendChecksum;
                    }
                }

                break;
    62aa:	00 00       	nop
    62ac:	01 c0       	rjmp	.+2      	; 0x62b0 <vsendFrame+0x120>
                    ucNewDataByteValue = ucChecksumValue;
                    ucChecksumValue = 0;
                    ucReadyForNewDataByte = 0;
                    Protokoll = Idle;
                }
                break;
    62ae:	00 00       	nop
        /************************************************************************/
        /* Data send part.                                                      */
        /************************************************************************/
        
        /* Check if all data bit packages of one byte were sent. */
        if (ucSendBitPackageCounter > 3)
    62b0:	8a 81       	ldd	r24, Y+2	; 0x02
    62b2:	84 30       	cpi	r24, 0x04	; 4
    62b4:	28 f0       	brcs	.+10     	; 0x62c0 <vsendFrame+0x130>
        {
            /* Then the new data byte can be loaded. */
            ucSendByteValue = ucNewDataByteValue;
    62b6:	8c 81       	ldd	r24, Y+4	; 0x04
    62b8:	89 83       	std	Y+1, r24	; 0x01
            ucSendBitPackageCounter = 0;
    62ba:	1a 82       	std	Y+2, r1	; 0x02
            ucReadyForNewDataByte = 1;
    62bc:	81 e0       	ldi	r24, 0x01	; 1
    62be:	8b 83       	std	Y+3, r24	; 0x03
        }
        
        /* Check if QAM channel 1 got amplitude value. */
        if (xEventGroupGetBits(xQAMchannel_1) & DATEN_AUFBEREITET)
    62c0:	80 91 cb 2e 	lds	r24, 0x2ECB	; 0x802ecb <xQAMchannel_1>
    62c4:	90 91 cc 2e 	lds	r25, 0x2ECC	; 0x802ecc <xQAMchannel_1+0x1>
    62c8:	40 e0       	ldi	r20, 0x00	; 0
    62ca:	50 e0       	ldi	r21, 0x00	; 0
    62cc:	ba 01       	movw	r22, r20
    62ce:	0e 94 36 05 	call	0xa6c	; 0xa6c <xEventGroupClearBits>
    62d2:	dc 01       	movw	r26, r24
    62d4:	cb 01       	movw	r24, r22
    62d6:	84 70       	andi	r24, 0x04	; 4
    62d8:	99 27       	eor	r25, r25
    62da:	aa 27       	eor	r26, r26
    62dc:	bb 27       	eor	r27, r27
    62de:	89 2b       	or	r24, r25
    62e0:	8a 2b       	or	r24, r26
    62e2:	8b 2b       	or	r24, r27
    62e4:	e9 f1       	breq	.+122    	; 0x6360 <vsendFrame+0x1d0>
        {
            /* Then flag can be deleted an status can be stored temporarily. */
            xEventGroupClearBits(xQAMchannel_1, DATEN_AUFBEREITET);
    62e6:	80 91 cb 2e 	lds	r24, 0x2ECB	; 0x802ecb <xQAMchannel_1>
    62ea:	90 91 cc 2e 	lds	r25, 0x2ECC	; 0x802ecc <xQAMchannel_1+0x1>
    62ee:	44 e0       	ldi	r20, 0x04	; 4
    62f0:	50 e0       	ldi	r21, 0x00	; 0
    62f2:	60 e0       	ldi	r22, 0x00	; 0
    62f4:	70 e0       	ldi	r23, 0x00	; 0
    62f6:	0e 94 36 05 	call	0xa6c	; 0xa6c <xEventGroupClearBits>
            ucQAMChannelsReady |= QAMCHANNEL_1_READY;
    62fa:	8f 81       	ldd	r24, Y+7	; 0x07
    62fc:	81 60       	ori	r24, 0x01	; 1
    62fe:	8f 83       	std	Y+7, r24	; 0x07
            
            /* New amplitude level for next transmission can be prepared. */
            if (ucSendByteValue & 0b00000001)
    6300:	89 81       	ldd	r24, Y+1	; 0x01
    6302:	88 2f       	mov	r24, r24
    6304:	90 e0       	ldi	r25, 0x00	; 0
    6306:	81 70       	andi	r24, 0x01	; 1
    6308:	99 27       	eor	r25, r25
    630a:	89 2b       	or	r24, r25
    630c:	a9 f0       	breq	.+42     	; 0x6338 <vsendFrame+0x1a8>
            {
                xEventGroupSetBits(xQAMchannel_1, AMPLITUDE_2);
    630e:	80 91 cb 2e 	lds	r24, 0x2ECB	; 0x802ecb <xQAMchannel_1>
    6312:	90 91 cc 2e 	lds	r25, 0x2ECC	; 0x802ecc <xQAMchannel_1+0x1>
    6316:	42 e0       	ldi	r20, 0x02	; 2
    6318:	50 e0       	ldi	r21, 0x00	; 0
    631a:	60 e0       	ldi	r22, 0x00	; 0
    631c:	70 e0       	ldi	r23, 0x00	; 0
    631e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <xEventGroupSetBits>
                xEventGroupClearBits(xQAMchannel_1, AMPLITUDE_1);
    6322:	80 91 cb 2e 	lds	r24, 0x2ECB	; 0x802ecb <xQAMchannel_1>
    6326:	90 91 cc 2e 	lds	r25, 0x2ECC	; 0x802ecc <xQAMchannel_1+0x1>
    632a:	41 e0       	ldi	r20, 0x01	; 1
    632c:	50 e0       	ldi	r21, 0x00	; 0
    632e:	60 e0       	ldi	r22, 0x00	; 0
    6330:	70 e0       	ldi	r23, 0x00	; 0
    6332:	0e 94 36 05 	call	0xa6c	; 0xa6c <xEventGroupClearBits>
    6336:	14 c0       	rjmp	.+40     	; 0x6360 <vsendFrame+0x1d0>
            } 
            else
            {
                xEventGroupSetBits(xQAMchannel_1, AMPLITUDE_1);
    6338:	80 91 cb 2e 	lds	r24, 0x2ECB	; 0x802ecb <xQAMchannel_1>
    633c:	90 91 cc 2e 	lds	r25, 0x2ECC	; 0x802ecc <xQAMchannel_1+0x1>
    6340:	41 e0       	ldi	r20, 0x01	; 1
    6342:	50 e0       	ldi	r21, 0x00	; 0
    6344:	60 e0       	ldi	r22, 0x00	; 0
    6346:	70 e0       	ldi	r23, 0x00	; 0
    6348:	0e 94 ad 05 	call	0xb5a	; 0xb5a <xEventGroupSetBits>
                xEventGroupClearBits(xQAMchannel_1, AMPLITUDE_2);
    634c:	80 91 cb 2e 	lds	r24, 0x2ECB	; 0x802ecb <xQAMchannel_1>
    6350:	90 91 cc 2e 	lds	r25, 0x2ECC	; 0x802ecc <xQAMchannel_1+0x1>
    6354:	42 e0       	ldi	r20, 0x02	; 2
    6356:	50 e0       	ldi	r21, 0x00	; 0
    6358:	60 e0       	ldi	r22, 0x00	; 0
    635a:	70 e0       	ldi	r23, 0x00	; 0
    635c:	0e 94 36 05 	call	0xa6c	; 0xa6c <xEventGroupClearBits>
            }
        }
        
        /* Check if QAM channel 2 got amplitude value. */
        if (xEventGroupGetBits(xQAMchannel_2)&DATEN_AUFBEREITET)
    6360:	80 91 cd 2e 	lds	r24, 0x2ECD	; 0x802ecd <xQAMchannel_2>
    6364:	90 91 ce 2e 	lds	r25, 0x2ECE	; 0x802ece <xQAMchannel_2+0x1>
    6368:	40 e0       	ldi	r20, 0x00	; 0
    636a:	50 e0       	ldi	r21, 0x00	; 0
    636c:	ba 01       	movw	r22, r20
    636e:	0e 94 36 05 	call	0xa6c	; 0xa6c <xEventGroupClearBits>
    6372:	dc 01       	movw	r26, r24
    6374:	cb 01       	movw	r24, r22
    6376:	84 70       	andi	r24, 0x04	; 4
    6378:	99 27       	eor	r25, r25
    637a:	aa 27       	eor	r26, r26
    637c:	bb 27       	eor	r27, r27
    637e:	89 2b       	or	r24, r25
    6380:	8a 2b       	or	r24, r26
    6382:	8b 2b       	or	r24, r27
    6384:	e9 f1       	breq	.+122    	; 0x6400 <vsendFrame+0x270>
        {
            /* Then flag can be deleted an status can be stored temporarily. */
            xEventGroupClearBits(xQAMchannel_2,DATEN_AUFBEREITET);
    6386:	80 91 cd 2e 	lds	r24, 0x2ECD	; 0x802ecd <xQAMchannel_2>
    638a:	90 91 ce 2e 	lds	r25, 0x2ECE	; 0x802ece <xQAMchannel_2+0x1>
    638e:	44 e0       	ldi	r20, 0x04	; 4
    6390:	50 e0       	ldi	r21, 0x00	; 0
    6392:	60 e0       	ldi	r22, 0x00	; 0
    6394:	70 e0       	ldi	r23, 0x00	; 0
    6396:	0e 94 36 05 	call	0xa6c	; 0xa6c <xEventGroupClearBits>
            ucQAMChannelsReady |= QAMCHANNEL_2_READY;
    639a:	8f 81       	ldd	r24, Y+7	; 0x07
    639c:	82 60       	ori	r24, 0x02	; 2
    639e:	8f 83       	std	Y+7, r24	; 0x07
            
            /* New amplitude level for next transmission can be prepared. */
            if (ucSendByteValue & 0b00000010)
    63a0:	89 81       	ldd	r24, Y+1	; 0x01
    63a2:	88 2f       	mov	r24, r24
    63a4:	90 e0       	ldi	r25, 0x00	; 0
    63a6:	82 70       	andi	r24, 0x02	; 2
    63a8:	99 27       	eor	r25, r25
    63aa:	89 2b       	or	r24, r25
    63ac:	a9 f0       	breq	.+42     	; 0x63d8 <vsendFrame+0x248>
            {
                xEventGroupSetBits(xQAMchannel_2, AMPLITUDE_2);
    63ae:	80 91 cd 2e 	lds	r24, 0x2ECD	; 0x802ecd <xQAMchannel_2>
    63b2:	90 91 ce 2e 	lds	r25, 0x2ECE	; 0x802ece <xQAMchannel_2+0x1>
    63b6:	42 e0       	ldi	r20, 0x02	; 2
    63b8:	50 e0       	ldi	r21, 0x00	; 0
    63ba:	60 e0       	ldi	r22, 0x00	; 0
    63bc:	70 e0       	ldi	r23, 0x00	; 0
    63be:	0e 94 ad 05 	call	0xb5a	; 0xb5a <xEventGroupSetBits>
                xEventGroupClearBits(xQAMchannel_2, AMPLITUDE_1);
    63c2:	80 91 cd 2e 	lds	r24, 0x2ECD	; 0x802ecd <xQAMchannel_2>
    63c6:	90 91 ce 2e 	lds	r25, 0x2ECE	; 0x802ece <xQAMchannel_2+0x1>
    63ca:	41 e0       	ldi	r20, 0x01	; 1
    63cc:	50 e0       	ldi	r21, 0x00	; 0
    63ce:	60 e0       	ldi	r22, 0x00	; 0
    63d0:	70 e0       	ldi	r23, 0x00	; 0
    63d2:	0e 94 36 05 	call	0xa6c	; 0xa6c <xEventGroupClearBits>
    63d6:	14 c0       	rjmp	.+40     	; 0x6400 <vsendFrame+0x270>
            }
            else
            {
                xEventGroupSetBits(xQAMchannel_2, AMPLITUDE_1);
    63d8:	80 91 cd 2e 	lds	r24, 0x2ECD	; 0x802ecd <xQAMchannel_2>
    63dc:	90 91 ce 2e 	lds	r25, 0x2ECE	; 0x802ece <xQAMchannel_2+0x1>
    63e0:	41 e0       	ldi	r20, 0x01	; 1
    63e2:	50 e0       	ldi	r21, 0x00	; 0
    63e4:	60 e0       	ldi	r22, 0x00	; 0
    63e6:	70 e0       	ldi	r23, 0x00	; 0
    63e8:	0e 94 ad 05 	call	0xb5a	; 0xb5a <xEventGroupSetBits>
                xEventGroupClearBits(xQAMchannel_2, AMPLITUDE_2);
    63ec:	80 91 cd 2e 	lds	r24, 0x2ECD	; 0x802ecd <xQAMchannel_2>
    63f0:	90 91 ce 2e 	lds	r25, 0x2ECE	; 0x802ece <xQAMchannel_2+0x1>
    63f4:	42 e0       	ldi	r20, 0x02	; 2
    63f6:	50 e0       	ldi	r21, 0x00	; 0
    63f8:	60 e0       	ldi	r22, 0x00	; 0
    63fa:	70 e0       	ldi	r23, 0x00	; 0
    63fc:	0e 94 36 05 	call	0xa6c	; 0xa6c <xEventGroupClearBits>
            }
        }        
        
        /* Check if both channels got the new amplitude level. */
        if((ucQAMChannelsReady & QAMCHANNEL_1_READY) && (ucQAMChannelsReady & QAMCHANNEL_2_READY))
    6400:	8f 81       	ldd	r24, Y+7	; 0x07
    6402:	88 2f       	mov	r24, r24
    6404:	90 e0       	ldi	r25, 0x00	; 0
    6406:	81 70       	andi	r24, 0x01	; 1
    6408:	99 27       	eor	r25, r25
    640a:	89 2b       	or	r24, r25
    640c:	79 f0       	breq	.+30     	; 0x642c <vsendFrame+0x29c>
    640e:	8f 81       	ldd	r24, Y+7	; 0x07
    6410:	88 2f       	mov	r24, r24
    6412:	90 e0       	ldi	r25, 0x00	; 0
    6414:	82 70       	andi	r24, 0x02	; 2
    6416:	99 27       	eor	r25, r25
    6418:	89 2b       	or	r24, r25
    641a:	41 f0       	breq	.+16     	; 0x642c <vsendFrame+0x29c>
        {
            /* Then new bit package can be prepared. */
            ucQAMChannelsReady = 0;
    641c:	1f 82       	std	Y+7, r1	; 0x07
            ucSendBitPackageCounter++;
    641e:	8a 81       	ldd	r24, Y+2	; 0x02
    6420:	8f 5f       	subi	r24, 0xFF	; 255
    6422:	8a 83       	std	Y+2, r24	; 0x02
            ucSendByteValue = ucSendByteValue >> 2;
    6424:	89 81       	ldd	r24, Y+1	; 0x01
    6426:	86 95       	lsr	r24
    6428:	86 95       	lsr	r24
    642a:	89 83       	std	Y+1, r24	; 0x01
        }
        vTaskDelay(pdMS_TO_TICKS(1));
    642c:	61 e0       	ldi	r22, 0x01	; 1
    642e:	70 e0       	ldi	r23, 0x00	; 0
    6430:	80 e0       	ldi	r24, 0x00	; 0
    6432:	90 e0       	ldi	r25, 0x00	; 0
    6434:	0e 94 67 13 	call	0x26ce	; 0x26ce <vTaskDelay>
    }
    6438:	c5 ce       	rjmp	.-630    	; 0x61c4 <vsendFrame+0x34>

0000643a <getResetReason>:
 *  Author: mburger
 */ 
 #include "avr_compiler.h"
 #include "utils.h"

 resetReason_t getResetReason(void) {
    643a:	cf 93       	push	r28
    643c:	df 93       	push	r29
    643e:	1f 92       	push	r1
    6440:	cd b7       	in	r28, 0x3d	; 61
    6442:	de b7       	in	r29, 0x3e	; 62
	 resetReason_t returnValue = RESETREASON_POWERONRESET;
    6444:	82 e0       	ldi	r24, 0x02	; 2
    6446:	89 83       	std	Y+1, r24	; 0x01
	 // software reset ?
	 if( RST.STATUS & RST_SRF_bm )
    6448:	88 e7       	ldi	r24, 0x78	; 120
    644a:	90 e0       	ldi	r25, 0x00	; 0
    644c:	fc 01       	movw	r30, r24
    644e:	80 81       	ld	r24, Z
    6450:	88 2f       	mov	r24, r24
    6452:	90 e0       	ldi	r25, 0x00	; 0
    6454:	80 72       	andi	r24, 0x20	; 32
    6456:	99 27       	eor	r25, r25
    6458:	89 2b       	or	r24, r25
    645a:	41 f0       	breq	.+16     	; 0x646c <getResetReason+0x32>
	 {
		 // reset this bit
		 RST.STATUS = RST_SRF_bm;
    645c:	88 e7       	ldi	r24, 0x78	; 120
    645e:	90 e0       	ldi	r25, 0x00	; 0
    6460:	20 e2       	ldi	r18, 0x20	; 32
    6462:	fc 01       	movw	r30, r24
    6464:	20 83       	st	Z, r18
		 returnValue = RESETREASON_SOFTWARERESET;
    6466:	81 e0       	ldi	r24, 0x01	; 1
    6468:	89 83       	std	Y+1, r24	; 0x01
    646a:	35 c0       	rjmp	.+106    	; 0x64d6 <getResetReason+0x9c>
	 }
	 // power on reset ?
	 else if( RST.STATUS & RST_PORF_bm)
    646c:	88 e7       	ldi	r24, 0x78	; 120
    646e:	90 e0       	ldi	r25, 0x00	; 0
    6470:	fc 01       	movw	r30, r24
    6472:	80 81       	ld	r24, Z
    6474:	88 2f       	mov	r24, r24
    6476:	90 e0       	ldi	r25, 0x00	; 0
    6478:	81 70       	andi	r24, 0x01	; 1
    647a:	99 27       	eor	r25, r25
    647c:	89 2b       	or	r24, r25
    647e:	41 f0       	breq	.+16     	; 0x6490 <getResetReason+0x56>
	 {
		 // reset this bit
		 RST.STATUS = RST_PORF_bm;
    6480:	88 e7       	ldi	r24, 0x78	; 120
    6482:	90 e0       	ldi	r25, 0x00	; 0
    6484:	21 e0       	ldi	r18, 0x01	; 1
    6486:	fc 01       	movw	r30, r24
    6488:	20 83       	st	Z, r18
		 returnValue = RESETREASON_POWERONRESET;
    648a:	82 e0       	ldi	r24, 0x02	; 2
    648c:	89 83       	std	Y+1, r24	; 0x01
    648e:	23 c0       	rjmp	.+70     	; 0x64d6 <getResetReason+0x9c>
	 }
	 // debugger reset ?
	 else if( RST.STATUS & RST_PDIRF_bm)
    6490:	88 e7       	ldi	r24, 0x78	; 120
    6492:	90 e0       	ldi	r25, 0x00	; 0
    6494:	fc 01       	movw	r30, r24
    6496:	80 81       	ld	r24, Z
    6498:	88 2f       	mov	r24, r24
    649a:	90 e0       	ldi	r25, 0x00	; 0
    649c:	80 71       	andi	r24, 0x10	; 16
    649e:	99 27       	eor	r25, r25
    64a0:	89 2b       	or	r24, r25
    64a2:	41 f0       	breq	.+16     	; 0x64b4 <getResetReason+0x7a>
	 {
		 // reset this bit
		 RST.STATUS = RST_PDIRF_bm;
    64a4:	88 e7       	ldi	r24, 0x78	; 120
    64a6:	90 e0       	ldi	r25, 0x00	; 0
    64a8:	20 e1       	ldi	r18, 0x10	; 16
    64aa:	fc 01       	movw	r30, r24
    64ac:	20 83       	st	Z, r18
		 returnValue = RESETREASON_DEBUGGERRESET;
    64ae:	83 e0       	ldi	r24, 0x03	; 3
    64b0:	89 83       	std	Y+1, r24	; 0x01
    64b2:	11 c0       	rjmp	.+34     	; 0x64d6 <getResetReason+0x9c>
	 }
	 // external reset ?
	 else if( RST.STATUS & RST_EXTRF_bm)
    64b4:	88 e7       	ldi	r24, 0x78	; 120
    64b6:	90 e0       	ldi	r25, 0x00	; 0
    64b8:	fc 01       	movw	r30, r24
    64ba:	80 81       	ld	r24, Z
    64bc:	88 2f       	mov	r24, r24
    64be:	90 e0       	ldi	r25, 0x00	; 0
    64c0:	82 70       	andi	r24, 0x02	; 2
    64c2:	99 27       	eor	r25, r25
    64c4:	89 2b       	or	r24, r25
    64c6:	39 f0       	breq	.+14     	; 0x64d6 <getResetReason+0x9c>
	 {
		 // reset this bit
		 RST.STATUS = RST_EXTRF_bm;
    64c8:	88 e7       	ldi	r24, 0x78	; 120
    64ca:	90 e0       	ldi	r25, 0x00	; 0
    64cc:	22 e0       	ldi	r18, 0x02	; 2
    64ce:	fc 01       	movw	r30, r24
    64d0:	20 83       	st	Z, r18
		 returnValue = RESETREASON_EXTERNALRESET;
    64d2:	84 e0       	ldi	r24, 0x04	; 4
    64d4:	89 83       	std	Y+1, r24	; 0x01
	 }
	 return returnValue;
    64d6:	89 81       	ldd	r24, Y+1	; 0x01
    64d8:	0f 90       	pop	r0
    64da:	df 91       	pop	r29
    64dc:	cf 91       	pop	r28
    64de:	08 95       	ret

000064e0 <__subsf3>:
    64e0:	50 58       	subi	r21, 0x80	; 128

000064e2 <__addsf3>:
    64e2:	bb 27       	eor	r27, r27
    64e4:	aa 27       	eor	r26, r26
    64e6:	0e 94 88 32 	call	0x6510	; 0x6510 <__addsf3x>
    64ea:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__fp_round>
    64ee:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <__fp_pscA>
    64f2:	38 f0       	brcs	.+14     	; 0x6502 <__addsf3+0x20>
    64f4:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__fp_pscB>
    64f8:	20 f0       	brcs	.+8      	; 0x6502 <__addsf3+0x20>
    64fa:	39 f4       	brne	.+14     	; 0x650a <__addsf3+0x28>
    64fc:	9f 3f       	cpi	r25, 0xFF	; 255
    64fe:	19 f4       	brne	.+6      	; 0x6506 <__addsf3+0x24>
    6500:	26 f4       	brtc	.+8      	; 0x650a <__addsf3+0x28>
    6502:	0c 94 f1 33 	jmp	0x67e2	; 0x67e2 <__fp_nan>
    6506:	0e f4       	brtc	.+2      	; 0x650a <__addsf3+0x28>
    6508:	e0 95       	com	r30
    650a:	e7 fb       	bst	r30, 7
    650c:	0c 94 eb 33 	jmp	0x67d6	; 0x67d6 <__fp_inf>

00006510 <__addsf3x>:
    6510:	e9 2f       	mov	r30, r25
    6512:	0e 94 13 34 	call	0x6826	; 0x6826 <__fp_split3>
    6516:	58 f3       	brcs	.-42     	; 0x64ee <__addsf3+0xc>
    6518:	ba 17       	cp	r27, r26
    651a:	62 07       	cpc	r22, r18
    651c:	73 07       	cpc	r23, r19
    651e:	84 07       	cpc	r24, r20
    6520:	95 07       	cpc	r25, r21
    6522:	20 f0       	brcs	.+8      	; 0x652c <__addsf3x+0x1c>
    6524:	79 f4       	brne	.+30     	; 0x6544 <__addsf3x+0x34>
    6526:	a6 f5       	brtc	.+104    	; 0x6590 <__addsf3x+0x80>
    6528:	0c 94 35 34 	jmp	0x686a	; 0x686a <__fp_zero>
    652c:	0e f4       	brtc	.+2      	; 0x6530 <__addsf3x+0x20>
    652e:	e0 95       	com	r30
    6530:	0b 2e       	mov	r0, r27
    6532:	ba 2f       	mov	r27, r26
    6534:	a0 2d       	mov	r26, r0
    6536:	0b 01       	movw	r0, r22
    6538:	b9 01       	movw	r22, r18
    653a:	90 01       	movw	r18, r0
    653c:	0c 01       	movw	r0, r24
    653e:	ca 01       	movw	r24, r20
    6540:	a0 01       	movw	r20, r0
    6542:	11 24       	eor	r1, r1
    6544:	ff 27       	eor	r31, r31
    6546:	59 1b       	sub	r21, r25
    6548:	99 f0       	breq	.+38     	; 0x6570 <__addsf3x+0x60>
    654a:	59 3f       	cpi	r21, 0xF9	; 249
    654c:	50 f4       	brcc	.+20     	; 0x6562 <__addsf3x+0x52>
    654e:	50 3e       	cpi	r21, 0xE0	; 224
    6550:	68 f1       	brcs	.+90     	; 0x65ac <__addsf3x+0x9c>
    6552:	1a 16       	cp	r1, r26
    6554:	f0 40       	sbci	r31, 0x00	; 0
    6556:	a2 2f       	mov	r26, r18
    6558:	23 2f       	mov	r18, r19
    655a:	34 2f       	mov	r19, r20
    655c:	44 27       	eor	r20, r20
    655e:	58 5f       	subi	r21, 0xF8	; 248
    6560:	f3 cf       	rjmp	.-26     	; 0x6548 <__addsf3x+0x38>
    6562:	46 95       	lsr	r20
    6564:	37 95       	ror	r19
    6566:	27 95       	ror	r18
    6568:	a7 95       	ror	r26
    656a:	f0 40       	sbci	r31, 0x00	; 0
    656c:	53 95       	inc	r21
    656e:	c9 f7       	brne	.-14     	; 0x6562 <__addsf3x+0x52>
    6570:	7e f4       	brtc	.+30     	; 0x6590 <__addsf3x+0x80>
    6572:	1f 16       	cp	r1, r31
    6574:	ba 0b       	sbc	r27, r26
    6576:	62 0b       	sbc	r22, r18
    6578:	73 0b       	sbc	r23, r19
    657a:	84 0b       	sbc	r24, r20
    657c:	ba f0       	brmi	.+46     	; 0x65ac <__addsf3x+0x9c>
    657e:	91 50       	subi	r25, 0x01	; 1
    6580:	a1 f0       	breq	.+40     	; 0x65aa <__addsf3x+0x9a>
    6582:	ff 0f       	add	r31, r31
    6584:	bb 1f       	adc	r27, r27
    6586:	66 1f       	adc	r22, r22
    6588:	77 1f       	adc	r23, r23
    658a:	88 1f       	adc	r24, r24
    658c:	c2 f7       	brpl	.-16     	; 0x657e <__addsf3x+0x6e>
    658e:	0e c0       	rjmp	.+28     	; 0x65ac <__addsf3x+0x9c>
    6590:	ba 0f       	add	r27, r26
    6592:	62 1f       	adc	r22, r18
    6594:	73 1f       	adc	r23, r19
    6596:	84 1f       	adc	r24, r20
    6598:	48 f4       	brcc	.+18     	; 0x65ac <__addsf3x+0x9c>
    659a:	87 95       	ror	r24
    659c:	77 95       	ror	r23
    659e:	67 95       	ror	r22
    65a0:	b7 95       	ror	r27
    65a2:	f7 95       	ror	r31
    65a4:	9e 3f       	cpi	r25, 0xFE	; 254
    65a6:	08 f0       	brcs	.+2      	; 0x65aa <__addsf3x+0x9a>
    65a8:	b0 cf       	rjmp	.-160    	; 0x650a <__addsf3+0x28>
    65aa:	93 95       	inc	r25
    65ac:	88 0f       	add	r24, r24
    65ae:	08 f0       	brcs	.+2      	; 0x65b2 <__addsf3x+0xa2>
    65b0:	99 27       	eor	r25, r25
    65b2:	ee 0f       	add	r30, r30
    65b4:	97 95       	ror	r25
    65b6:	87 95       	ror	r24
    65b8:	08 95       	ret

000065ba <__cmpsf2>:
    65ba:	0e 94 c7 33 	call	0x678e	; 0x678e <__fp_cmp>
    65be:	08 f4       	brcc	.+2      	; 0x65c2 <__cmpsf2+0x8>
    65c0:	81 e0       	ldi	r24, 0x01	; 1
    65c2:	08 95       	ret

000065c4 <__divsf3>:
    65c4:	0e 94 f6 32 	call	0x65ec	; 0x65ec <__divsf3x>
    65c8:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__fp_round>
    65cc:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__fp_pscB>
    65d0:	58 f0       	brcs	.+22     	; 0x65e8 <__divsf3+0x24>
    65d2:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <__fp_pscA>
    65d6:	40 f0       	brcs	.+16     	; 0x65e8 <__divsf3+0x24>
    65d8:	29 f4       	brne	.+10     	; 0x65e4 <__divsf3+0x20>
    65da:	5f 3f       	cpi	r21, 0xFF	; 255
    65dc:	29 f0       	breq	.+10     	; 0x65e8 <__divsf3+0x24>
    65de:	0c 94 eb 33 	jmp	0x67d6	; 0x67d6 <__fp_inf>
    65e2:	51 11       	cpse	r21, r1
    65e4:	0c 94 36 34 	jmp	0x686c	; 0x686c <__fp_szero>
    65e8:	0c 94 f1 33 	jmp	0x67e2	; 0x67e2 <__fp_nan>

000065ec <__divsf3x>:
    65ec:	0e 94 13 34 	call	0x6826	; 0x6826 <__fp_split3>
    65f0:	68 f3       	brcs	.-38     	; 0x65cc <__divsf3+0x8>

000065f2 <__divsf3_pse>:
    65f2:	99 23       	and	r25, r25
    65f4:	b1 f3       	breq	.-20     	; 0x65e2 <__divsf3+0x1e>
    65f6:	55 23       	and	r21, r21
    65f8:	91 f3       	breq	.-28     	; 0x65de <__divsf3+0x1a>
    65fa:	95 1b       	sub	r25, r21
    65fc:	55 0b       	sbc	r21, r21
    65fe:	bb 27       	eor	r27, r27
    6600:	aa 27       	eor	r26, r26
    6602:	62 17       	cp	r22, r18
    6604:	73 07       	cpc	r23, r19
    6606:	84 07       	cpc	r24, r20
    6608:	38 f0       	brcs	.+14     	; 0x6618 <__divsf3_pse+0x26>
    660a:	9f 5f       	subi	r25, 0xFF	; 255
    660c:	5f 4f       	sbci	r21, 0xFF	; 255
    660e:	22 0f       	add	r18, r18
    6610:	33 1f       	adc	r19, r19
    6612:	44 1f       	adc	r20, r20
    6614:	aa 1f       	adc	r26, r26
    6616:	a9 f3       	breq	.-22     	; 0x6602 <__divsf3_pse+0x10>
    6618:	35 d0       	rcall	.+106    	; 0x6684 <__divsf3_pse+0x92>
    661a:	0e 2e       	mov	r0, r30
    661c:	3a f0       	brmi	.+14     	; 0x662c <__divsf3_pse+0x3a>
    661e:	e0 e8       	ldi	r30, 0x80	; 128
    6620:	32 d0       	rcall	.+100    	; 0x6686 <__divsf3_pse+0x94>
    6622:	91 50       	subi	r25, 0x01	; 1
    6624:	50 40       	sbci	r21, 0x00	; 0
    6626:	e6 95       	lsr	r30
    6628:	00 1c       	adc	r0, r0
    662a:	ca f7       	brpl	.-14     	; 0x661e <__divsf3_pse+0x2c>
    662c:	2b d0       	rcall	.+86     	; 0x6684 <__divsf3_pse+0x92>
    662e:	fe 2f       	mov	r31, r30
    6630:	29 d0       	rcall	.+82     	; 0x6684 <__divsf3_pse+0x92>
    6632:	66 0f       	add	r22, r22
    6634:	77 1f       	adc	r23, r23
    6636:	88 1f       	adc	r24, r24
    6638:	bb 1f       	adc	r27, r27
    663a:	26 17       	cp	r18, r22
    663c:	37 07       	cpc	r19, r23
    663e:	48 07       	cpc	r20, r24
    6640:	ab 07       	cpc	r26, r27
    6642:	b0 e8       	ldi	r27, 0x80	; 128
    6644:	09 f0       	breq	.+2      	; 0x6648 <__divsf3_pse+0x56>
    6646:	bb 0b       	sbc	r27, r27
    6648:	80 2d       	mov	r24, r0
    664a:	bf 01       	movw	r22, r30
    664c:	ff 27       	eor	r31, r31
    664e:	93 58       	subi	r25, 0x83	; 131
    6650:	5f 4f       	sbci	r21, 0xFF	; 255
    6652:	3a f0       	brmi	.+14     	; 0x6662 <__divsf3_pse+0x70>
    6654:	9e 3f       	cpi	r25, 0xFE	; 254
    6656:	51 05       	cpc	r21, r1
    6658:	78 f0       	brcs	.+30     	; 0x6678 <__divsf3_pse+0x86>
    665a:	0c 94 eb 33 	jmp	0x67d6	; 0x67d6 <__fp_inf>
    665e:	0c 94 36 34 	jmp	0x686c	; 0x686c <__fp_szero>
    6662:	5f 3f       	cpi	r21, 0xFF	; 255
    6664:	e4 f3       	brlt	.-8      	; 0x665e <__divsf3_pse+0x6c>
    6666:	98 3e       	cpi	r25, 0xE8	; 232
    6668:	d4 f3       	brlt	.-12     	; 0x665e <__divsf3_pse+0x6c>
    666a:	86 95       	lsr	r24
    666c:	77 95       	ror	r23
    666e:	67 95       	ror	r22
    6670:	b7 95       	ror	r27
    6672:	f7 95       	ror	r31
    6674:	9f 5f       	subi	r25, 0xFF	; 255
    6676:	c9 f7       	brne	.-14     	; 0x666a <__divsf3_pse+0x78>
    6678:	88 0f       	add	r24, r24
    667a:	91 1d       	adc	r25, r1
    667c:	96 95       	lsr	r25
    667e:	87 95       	ror	r24
    6680:	97 f9       	bld	r25, 7
    6682:	08 95       	ret
    6684:	e1 e0       	ldi	r30, 0x01	; 1
    6686:	66 0f       	add	r22, r22
    6688:	77 1f       	adc	r23, r23
    668a:	88 1f       	adc	r24, r24
    668c:	bb 1f       	adc	r27, r27
    668e:	62 17       	cp	r22, r18
    6690:	73 07       	cpc	r23, r19
    6692:	84 07       	cpc	r24, r20
    6694:	ba 07       	cpc	r27, r26
    6696:	20 f0       	brcs	.+8      	; 0x66a0 <__divsf3_pse+0xae>
    6698:	62 1b       	sub	r22, r18
    669a:	73 0b       	sbc	r23, r19
    669c:	84 0b       	sbc	r24, r20
    669e:	ba 0b       	sbc	r27, r26
    66a0:	ee 1f       	adc	r30, r30
    66a2:	88 f7       	brcc	.-30     	; 0x6686 <__divsf3_pse+0x94>
    66a4:	e0 95       	com	r30
    66a6:	08 95       	ret

000066a8 <__fixsfsi>:
    66a8:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__fixunssfsi>
    66ac:	68 94       	set
    66ae:	b1 11       	cpse	r27, r1
    66b0:	0c 94 36 34 	jmp	0x686c	; 0x686c <__fp_szero>
    66b4:	08 95       	ret

000066b6 <__fixunssfsi>:
    66b6:	0e 94 1b 34 	call	0x6836	; 0x6836 <__fp_splitA>
    66ba:	88 f0       	brcs	.+34     	; 0x66de <__fixunssfsi+0x28>
    66bc:	9f 57       	subi	r25, 0x7F	; 127
    66be:	98 f0       	brcs	.+38     	; 0x66e6 <__fixunssfsi+0x30>
    66c0:	b9 2f       	mov	r27, r25
    66c2:	99 27       	eor	r25, r25
    66c4:	b7 51       	subi	r27, 0x17	; 23
    66c6:	b0 f0       	brcs	.+44     	; 0x66f4 <__fixunssfsi+0x3e>
    66c8:	e1 f0       	breq	.+56     	; 0x6702 <__fixunssfsi+0x4c>
    66ca:	66 0f       	add	r22, r22
    66cc:	77 1f       	adc	r23, r23
    66ce:	88 1f       	adc	r24, r24
    66d0:	99 1f       	adc	r25, r25
    66d2:	1a f0       	brmi	.+6      	; 0x66da <__fixunssfsi+0x24>
    66d4:	ba 95       	dec	r27
    66d6:	c9 f7       	brne	.-14     	; 0x66ca <__fixunssfsi+0x14>
    66d8:	14 c0       	rjmp	.+40     	; 0x6702 <__fixunssfsi+0x4c>
    66da:	b1 30       	cpi	r27, 0x01	; 1
    66dc:	91 f0       	breq	.+36     	; 0x6702 <__fixunssfsi+0x4c>
    66de:	0e 94 35 34 	call	0x686a	; 0x686a <__fp_zero>
    66e2:	b1 e0       	ldi	r27, 0x01	; 1
    66e4:	08 95       	ret
    66e6:	0c 94 35 34 	jmp	0x686a	; 0x686a <__fp_zero>
    66ea:	67 2f       	mov	r22, r23
    66ec:	78 2f       	mov	r23, r24
    66ee:	88 27       	eor	r24, r24
    66f0:	b8 5f       	subi	r27, 0xF8	; 248
    66f2:	39 f0       	breq	.+14     	; 0x6702 <__fixunssfsi+0x4c>
    66f4:	b9 3f       	cpi	r27, 0xF9	; 249
    66f6:	cc f3       	brlt	.-14     	; 0x66ea <__fixunssfsi+0x34>
    66f8:	86 95       	lsr	r24
    66fa:	77 95       	ror	r23
    66fc:	67 95       	ror	r22
    66fe:	b3 95       	inc	r27
    6700:	d9 f7       	brne	.-10     	; 0x66f8 <__fixunssfsi+0x42>
    6702:	3e f4       	brtc	.+14     	; 0x6712 <__fixunssfsi+0x5c>
    6704:	90 95       	com	r25
    6706:	80 95       	com	r24
    6708:	70 95       	com	r23
    670a:	61 95       	neg	r22
    670c:	7f 4f       	sbci	r23, 0xFF	; 255
    670e:	8f 4f       	sbci	r24, 0xFF	; 255
    6710:	9f 4f       	sbci	r25, 0xFF	; 255
    6712:	08 95       	ret

00006714 <__floatunsisf>:
    6714:	e8 94       	clt
    6716:	09 c0       	rjmp	.+18     	; 0x672a <__floatsisf+0x12>

00006718 <__floatsisf>:
    6718:	97 fb       	bst	r25, 7
    671a:	3e f4       	brtc	.+14     	; 0x672a <__floatsisf+0x12>
    671c:	90 95       	com	r25
    671e:	80 95       	com	r24
    6720:	70 95       	com	r23
    6722:	61 95       	neg	r22
    6724:	7f 4f       	sbci	r23, 0xFF	; 255
    6726:	8f 4f       	sbci	r24, 0xFF	; 255
    6728:	9f 4f       	sbci	r25, 0xFF	; 255
    672a:	99 23       	and	r25, r25
    672c:	a9 f0       	breq	.+42     	; 0x6758 <__floatsisf+0x40>
    672e:	f9 2f       	mov	r31, r25
    6730:	96 e9       	ldi	r25, 0x96	; 150
    6732:	bb 27       	eor	r27, r27
    6734:	93 95       	inc	r25
    6736:	f6 95       	lsr	r31
    6738:	87 95       	ror	r24
    673a:	77 95       	ror	r23
    673c:	67 95       	ror	r22
    673e:	b7 95       	ror	r27
    6740:	f1 11       	cpse	r31, r1
    6742:	f8 cf       	rjmp	.-16     	; 0x6734 <__floatsisf+0x1c>
    6744:	fa f4       	brpl	.+62     	; 0x6784 <__floatsisf+0x6c>
    6746:	bb 0f       	add	r27, r27
    6748:	11 f4       	brne	.+4      	; 0x674e <__floatsisf+0x36>
    674a:	60 ff       	sbrs	r22, 0
    674c:	1b c0       	rjmp	.+54     	; 0x6784 <__floatsisf+0x6c>
    674e:	6f 5f       	subi	r22, 0xFF	; 255
    6750:	7f 4f       	sbci	r23, 0xFF	; 255
    6752:	8f 4f       	sbci	r24, 0xFF	; 255
    6754:	9f 4f       	sbci	r25, 0xFF	; 255
    6756:	16 c0       	rjmp	.+44     	; 0x6784 <__floatsisf+0x6c>
    6758:	88 23       	and	r24, r24
    675a:	11 f0       	breq	.+4      	; 0x6760 <__floatsisf+0x48>
    675c:	96 e9       	ldi	r25, 0x96	; 150
    675e:	11 c0       	rjmp	.+34     	; 0x6782 <__floatsisf+0x6a>
    6760:	77 23       	and	r23, r23
    6762:	21 f0       	breq	.+8      	; 0x676c <__floatsisf+0x54>
    6764:	9e e8       	ldi	r25, 0x8E	; 142
    6766:	87 2f       	mov	r24, r23
    6768:	76 2f       	mov	r23, r22
    676a:	05 c0       	rjmp	.+10     	; 0x6776 <__floatsisf+0x5e>
    676c:	66 23       	and	r22, r22
    676e:	71 f0       	breq	.+28     	; 0x678c <__floatsisf+0x74>
    6770:	96 e8       	ldi	r25, 0x86	; 134
    6772:	86 2f       	mov	r24, r22
    6774:	70 e0       	ldi	r23, 0x00	; 0
    6776:	60 e0       	ldi	r22, 0x00	; 0
    6778:	2a f0       	brmi	.+10     	; 0x6784 <__floatsisf+0x6c>
    677a:	9a 95       	dec	r25
    677c:	66 0f       	add	r22, r22
    677e:	77 1f       	adc	r23, r23
    6780:	88 1f       	adc	r24, r24
    6782:	da f7       	brpl	.-10     	; 0x677a <__floatsisf+0x62>
    6784:	88 0f       	add	r24, r24
    6786:	96 95       	lsr	r25
    6788:	87 95       	ror	r24
    678a:	97 f9       	bld	r25, 7
    678c:	08 95       	ret

0000678e <__fp_cmp>:
    678e:	99 0f       	add	r25, r25
    6790:	00 08       	sbc	r0, r0
    6792:	55 0f       	add	r21, r21
    6794:	aa 0b       	sbc	r26, r26
    6796:	e0 e8       	ldi	r30, 0x80	; 128
    6798:	fe ef       	ldi	r31, 0xFE	; 254
    679a:	16 16       	cp	r1, r22
    679c:	17 06       	cpc	r1, r23
    679e:	e8 07       	cpc	r30, r24
    67a0:	f9 07       	cpc	r31, r25
    67a2:	c0 f0       	brcs	.+48     	; 0x67d4 <__fp_cmp+0x46>
    67a4:	12 16       	cp	r1, r18
    67a6:	13 06       	cpc	r1, r19
    67a8:	e4 07       	cpc	r30, r20
    67aa:	f5 07       	cpc	r31, r21
    67ac:	98 f0       	brcs	.+38     	; 0x67d4 <__fp_cmp+0x46>
    67ae:	62 1b       	sub	r22, r18
    67b0:	73 0b       	sbc	r23, r19
    67b2:	84 0b       	sbc	r24, r20
    67b4:	95 0b       	sbc	r25, r21
    67b6:	39 f4       	brne	.+14     	; 0x67c6 <__fp_cmp+0x38>
    67b8:	0a 26       	eor	r0, r26
    67ba:	61 f0       	breq	.+24     	; 0x67d4 <__fp_cmp+0x46>
    67bc:	23 2b       	or	r18, r19
    67be:	24 2b       	or	r18, r20
    67c0:	25 2b       	or	r18, r21
    67c2:	21 f4       	brne	.+8      	; 0x67cc <__fp_cmp+0x3e>
    67c4:	08 95       	ret
    67c6:	0a 26       	eor	r0, r26
    67c8:	09 f4       	brne	.+2      	; 0x67cc <__fp_cmp+0x3e>
    67ca:	a1 40       	sbci	r26, 0x01	; 1
    67cc:	a6 95       	lsr	r26
    67ce:	8f ef       	ldi	r24, 0xFF	; 255
    67d0:	81 1d       	adc	r24, r1
    67d2:	81 1d       	adc	r24, r1
    67d4:	08 95       	ret

000067d6 <__fp_inf>:
    67d6:	97 f9       	bld	r25, 7
    67d8:	9f 67       	ori	r25, 0x7F	; 127
    67da:	80 e8       	ldi	r24, 0x80	; 128
    67dc:	70 e0       	ldi	r23, 0x00	; 0
    67de:	60 e0       	ldi	r22, 0x00	; 0
    67e0:	08 95       	ret

000067e2 <__fp_nan>:
    67e2:	9f ef       	ldi	r25, 0xFF	; 255
    67e4:	80 ec       	ldi	r24, 0xC0	; 192
    67e6:	08 95       	ret

000067e8 <__fp_pscA>:
    67e8:	00 24       	eor	r0, r0
    67ea:	0a 94       	dec	r0
    67ec:	16 16       	cp	r1, r22
    67ee:	17 06       	cpc	r1, r23
    67f0:	18 06       	cpc	r1, r24
    67f2:	09 06       	cpc	r0, r25
    67f4:	08 95       	ret

000067f6 <__fp_pscB>:
    67f6:	00 24       	eor	r0, r0
    67f8:	0a 94       	dec	r0
    67fa:	12 16       	cp	r1, r18
    67fc:	13 06       	cpc	r1, r19
    67fe:	14 06       	cpc	r1, r20
    6800:	05 06       	cpc	r0, r21
    6802:	08 95       	ret

00006804 <__fp_round>:
    6804:	09 2e       	mov	r0, r25
    6806:	03 94       	inc	r0
    6808:	00 0c       	add	r0, r0
    680a:	11 f4       	brne	.+4      	; 0x6810 <__fp_round+0xc>
    680c:	88 23       	and	r24, r24
    680e:	52 f0       	brmi	.+20     	; 0x6824 <__fp_round+0x20>
    6810:	bb 0f       	add	r27, r27
    6812:	40 f4       	brcc	.+16     	; 0x6824 <__fp_round+0x20>
    6814:	bf 2b       	or	r27, r31
    6816:	11 f4       	brne	.+4      	; 0x681c <__fp_round+0x18>
    6818:	60 ff       	sbrs	r22, 0
    681a:	04 c0       	rjmp	.+8      	; 0x6824 <__fp_round+0x20>
    681c:	6f 5f       	subi	r22, 0xFF	; 255
    681e:	7f 4f       	sbci	r23, 0xFF	; 255
    6820:	8f 4f       	sbci	r24, 0xFF	; 255
    6822:	9f 4f       	sbci	r25, 0xFF	; 255
    6824:	08 95       	ret

00006826 <__fp_split3>:
    6826:	57 fd       	sbrc	r21, 7
    6828:	90 58       	subi	r25, 0x80	; 128
    682a:	44 0f       	add	r20, r20
    682c:	55 1f       	adc	r21, r21
    682e:	59 f0       	breq	.+22     	; 0x6846 <__fp_splitA+0x10>
    6830:	5f 3f       	cpi	r21, 0xFF	; 255
    6832:	71 f0       	breq	.+28     	; 0x6850 <__fp_splitA+0x1a>
    6834:	47 95       	ror	r20

00006836 <__fp_splitA>:
    6836:	88 0f       	add	r24, r24
    6838:	97 fb       	bst	r25, 7
    683a:	99 1f       	adc	r25, r25
    683c:	61 f0       	breq	.+24     	; 0x6856 <__fp_splitA+0x20>
    683e:	9f 3f       	cpi	r25, 0xFF	; 255
    6840:	79 f0       	breq	.+30     	; 0x6860 <__fp_splitA+0x2a>
    6842:	87 95       	ror	r24
    6844:	08 95       	ret
    6846:	12 16       	cp	r1, r18
    6848:	13 06       	cpc	r1, r19
    684a:	14 06       	cpc	r1, r20
    684c:	55 1f       	adc	r21, r21
    684e:	f2 cf       	rjmp	.-28     	; 0x6834 <__fp_split3+0xe>
    6850:	46 95       	lsr	r20
    6852:	f1 df       	rcall	.-30     	; 0x6836 <__fp_splitA>
    6854:	08 c0       	rjmp	.+16     	; 0x6866 <__fp_splitA+0x30>
    6856:	16 16       	cp	r1, r22
    6858:	17 06       	cpc	r1, r23
    685a:	18 06       	cpc	r1, r24
    685c:	99 1f       	adc	r25, r25
    685e:	f1 cf       	rjmp	.-30     	; 0x6842 <__fp_splitA+0xc>
    6860:	86 95       	lsr	r24
    6862:	71 05       	cpc	r23, r1
    6864:	61 05       	cpc	r22, r1
    6866:	08 94       	sec
    6868:	08 95       	ret

0000686a <__fp_zero>:
    686a:	e8 94       	clt

0000686c <__fp_szero>:
    686c:	bb 27       	eor	r27, r27
    686e:	66 27       	eor	r22, r22
    6870:	77 27       	eor	r23, r23
    6872:	cb 01       	movw	r24, r22
    6874:	97 f9       	bld	r25, 7
    6876:	08 95       	ret

00006878 <__gesf2>:
    6878:	0e 94 c7 33 	call	0x678e	; 0x678e <__fp_cmp>
    687c:	08 f4       	brcc	.+2      	; 0x6880 <__gesf2+0x8>
    687e:	8f ef       	ldi	r24, 0xFF	; 255
    6880:	08 95       	ret

00006882 <__mulsf3>:
    6882:	0e 94 54 34 	call	0x68a8	; 0x68a8 <__mulsf3x>
    6886:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__fp_round>
    688a:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <__fp_pscA>
    688e:	38 f0       	brcs	.+14     	; 0x689e <__mulsf3+0x1c>
    6890:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__fp_pscB>
    6894:	20 f0       	brcs	.+8      	; 0x689e <__mulsf3+0x1c>
    6896:	95 23       	and	r25, r21
    6898:	11 f0       	breq	.+4      	; 0x689e <__mulsf3+0x1c>
    689a:	0c 94 eb 33 	jmp	0x67d6	; 0x67d6 <__fp_inf>
    689e:	0c 94 f1 33 	jmp	0x67e2	; 0x67e2 <__fp_nan>
    68a2:	11 24       	eor	r1, r1
    68a4:	0c 94 36 34 	jmp	0x686c	; 0x686c <__fp_szero>

000068a8 <__mulsf3x>:
    68a8:	0e 94 13 34 	call	0x6826	; 0x6826 <__fp_split3>
    68ac:	70 f3       	brcs	.-36     	; 0x688a <__mulsf3+0x8>

000068ae <__mulsf3_pse>:
    68ae:	95 9f       	mul	r25, r21
    68b0:	c1 f3       	breq	.-16     	; 0x68a2 <__mulsf3+0x20>
    68b2:	95 0f       	add	r25, r21
    68b4:	50 e0       	ldi	r21, 0x00	; 0
    68b6:	55 1f       	adc	r21, r21
    68b8:	62 9f       	mul	r22, r18
    68ba:	f0 01       	movw	r30, r0
    68bc:	72 9f       	mul	r23, r18
    68be:	bb 27       	eor	r27, r27
    68c0:	f0 0d       	add	r31, r0
    68c2:	b1 1d       	adc	r27, r1
    68c4:	63 9f       	mul	r22, r19
    68c6:	aa 27       	eor	r26, r26
    68c8:	f0 0d       	add	r31, r0
    68ca:	b1 1d       	adc	r27, r1
    68cc:	aa 1f       	adc	r26, r26
    68ce:	64 9f       	mul	r22, r20
    68d0:	66 27       	eor	r22, r22
    68d2:	b0 0d       	add	r27, r0
    68d4:	a1 1d       	adc	r26, r1
    68d6:	66 1f       	adc	r22, r22
    68d8:	82 9f       	mul	r24, r18
    68da:	22 27       	eor	r18, r18
    68dc:	b0 0d       	add	r27, r0
    68de:	a1 1d       	adc	r26, r1
    68e0:	62 1f       	adc	r22, r18
    68e2:	73 9f       	mul	r23, r19
    68e4:	b0 0d       	add	r27, r0
    68e6:	a1 1d       	adc	r26, r1
    68e8:	62 1f       	adc	r22, r18
    68ea:	83 9f       	mul	r24, r19
    68ec:	a0 0d       	add	r26, r0
    68ee:	61 1d       	adc	r22, r1
    68f0:	22 1f       	adc	r18, r18
    68f2:	74 9f       	mul	r23, r20
    68f4:	33 27       	eor	r19, r19
    68f6:	a0 0d       	add	r26, r0
    68f8:	61 1d       	adc	r22, r1
    68fa:	23 1f       	adc	r18, r19
    68fc:	84 9f       	mul	r24, r20
    68fe:	60 0d       	add	r22, r0
    6900:	21 1d       	adc	r18, r1
    6902:	82 2f       	mov	r24, r18
    6904:	76 2f       	mov	r23, r22
    6906:	6a 2f       	mov	r22, r26
    6908:	11 24       	eor	r1, r1
    690a:	9f 57       	subi	r25, 0x7F	; 127
    690c:	50 40       	sbci	r21, 0x00	; 0
    690e:	9a f0       	brmi	.+38     	; 0x6936 <__mulsf3_pse+0x88>
    6910:	f1 f0       	breq	.+60     	; 0x694e <__mulsf3_pse+0xa0>
    6912:	88 23       	and	r24, r24
    6914:	4a f0       	brmi	.+18     	; 0x6928 <__mulsf3_pse+0x7a>
    6916:	ee 0f       	add	r30, r30
    6918:	ff 1f       	adc	r31, r31
    691a:	bb 1f       	adc	r27, r27
    691c:	66 1f       	adc	r22, r22
    691e:	77 1f       	adc	r23, r23
    6920:	88 1f       	adc	r24, r24
    6922:	91 50       	subi	r25, 0x01	; 1
    6924:	50 40       	sbci	r21, 0x00	; 0
    6926:	a9 f7       	brne	.-22     	; 0x6912 <__mulsf3_pse+0x64>
    6928:	9e 3f       	cpi	r25, 0xFE	; 254
    692a:	51 05       	cpc	r21, r1
    692c:	80 f0       	brcs	.+32     	; 0x694e <__mulsf3_pse+0xa0>
    692e:	0c 94 eb 33 	jmp	0x67d6	; 0x67d6 <__fp_inf>
    6932:	0c 94 36 34 	jmp	0x686c	; 0x686c <__fp_szero>
    6936:	5f 3f       	cpi	r21, 0xFF	; 255
    6938:	e4 f3       	brlt	.-8      	; 0x6932 <__mulsf3_pse+0x84>
    693a:	98 3e       	cpi	r25, 0xE8	; 232
    693c:	d4 f3       	brlt	.-12     	; 0x6932 <__mulsf3_pse+0x84>
    693e:	86 95       	lsr	r24
    6940:	77 95       	ror	r23
    6942:	67 95       	ror	r22
    6944:	b7 95       	ror	r27
    6946:	f7 95       	ror	r31
    6948:	e7 95       	ror	r30
    694a:	9f 5f       	subi	r25, 0xFF	; 255
    694c:	c1 f7       	brne	.-16     	; 0x693e <__mulsf3_pse+0x90>
    694e:	fe 2b       	or	r31, r30
    6950:	88 0f       	add	r24, r24
    6952:	91 1d       	adc	r25, r1
    6954:	96 95       	lsr	r25
    6956:	87 95       	ror	r24
    6958:	97 f9       	bld	r25, 7
    695a:	08 95       	ret

0000695c <__tablejump2__>:
    695c:	ee 0f       	add	r30, r30
    695e:	ff 1f       	adc	r31, r31
    6960:	88 1f       	adc	r24, r24
    6962:	8b bf       	out	0x3b, r24	; 59
    6964:	07 90       	elpm	r0, Z+
    6966:	f6 91       	elpm	r31, Z
    6968:	e0 2d       	mov	r30, r0
    696a:	19 94       	eijmp

0000696c <memcpy>:
    696c:	fb 01       	movw	r30, r22
    696e:	dc 01       	movw	r26, r24
    6970:	02 c0       	rjmp	.+4      	; 0x6976 <memcpy+0xa>
    6972:	01 90       	ld	r0, Z+
    6974:	0d 92       	st	X+, r0
    6976:	41 50       	subi	r20, 0x01	; 1
    6978:	50 40       	sbci	r21, 0x00	; 0
    697a:	d8 f7       	brcc	.-10     	; 0x6972 <memcpy+0x6>
    697c:	08 95       	ret

0000697e <memset>:
    697e:	dc 01       	movw	r26, r24
    6980:	01 c0       	rjmp	.+2      	; 0x6984 <memset+0x6>
    6982:	6d 93       	st	X+, r22
    6984:	41 50       	subi	r20, 0x01	; 1
    6986:	50 40       	sbci	r21, 0x00	; 0
    6988:	e0 f7       	brcc	.-8      	; 0x6982 <memset+0x4>
    698a:	08 95       	ret

0000698c <strlen>:
    698c:	fc 01       	movw	r30, r24
    698e:	01 90       	ld	r0, Z+
    6990:	00 20       	and	r0, r0
    6992:	e9 f7       	brne	.-6      	; 0x698e <strlen+0x2>
    6994:	80 95       	com	r24
    6996:	90 95       	com	r25
    6998:	8e 0f       	add	r24, r30
    699a:	9f 1f       	adc	r25, r31
    699c:	08 95       	ret

0000699e <itoa>:
    699e:	45 32       	cpi	r20, 0x25	; 37
    69a0:	51 05       	cpc	r21, r1
    69a2:	20 f4       	brcc	.+8      	; 0x69ac <itoa+0xe>
    69a4:	42 30       	cpi	r20, 0x02	; 2
    69a6:	10 f0       	brcs	.+4      	; 0x69ac <itoa+0xe>
    69a8:	0c 94 da 34 	jmp	0x69b4	; 0x69b4 <__itoa_ncheck>
    69ac:	fb 01       	movw	r30, r22
    69ae:	10 82       	st	Z, r1
    69b0:	cb 01       	movw	r24, r22
    69b2:	08 95       	ret

000069b4 <__itoa_ncheck>:
    69b4:	bb 27       	eor	r27, r27
    69b6:	4a 30       	cpi	r20, 0x0A	; 10
    69b8:	31 f4       	brne	.+12     	; 0x69c6 <__itoa_ncheck+0x12>
    69ba:	99 23       	and	r25, r25
    69bc:	22 f4       	brpl	.+8      	; 0x69c6 <__itoa_ncheck+0x12>
    69be:	bd e2       	ldi	r27, 0x2D	; 45
    69c0:	90 95       	com	r25
    69c2:	81 95       	neg	r24
    69c4:	9f 4f       	sbci	r25, 0xFF	; 255
    69c6:	0c 94 e6 34 	jmp	0x69cc	; 0x69cc <__utoa_common>

000069ca <__utoa_ncheck>:
    69ca:	bb 27       	eor	r27, r27

000069cc <__utoa_common>:
    69cc:	fb 01       	movw	r30, r22
    69ce:	55 27       	eor	r21, r21
    69d0:	aa 27       	eor	r26, r26
    69d2:	88 0f       	add	r24, r24
    69d4:	99 1f       	adc	r25, r25
    69d6:	aa 1f       	adc	r26, r26
    69d8:	a4 17       	cp	r26, r20
    69da:	10 f0       	brcs	.+4      	; 0x69e0 <__utoa_common+0x14>
    69dc:	a4 1b       	sub	r26, r20
    69de:	83 95       	inc	r24
    69e0:	50 51       	subi	r21, 0x10	; 16
    69e2:	b9 f7       	brne	.-18     	; 0x69d2 <__utoa_common+0x6>
    69e4:	a0 5d       	subi	r26, 0xD0	; 208
    69e6:	aa 33       	cpi	r26, 0x3A	; 58
    69e8:	08 f0       	brcs	.+2      	; 0x69ec <__utoa_common+0x20>
    69ea:	a9 5d       	subi	r26, 0xD9	; 217
    69ec:	a1 93       	st	Z+, r26
    69ee:	00 97       	sbiw	r24, 0x00	; 0
    69f0:	79 f7       	brne	.-34     	; 0x69d0 <__utoa_common+0x4>
    69f2:	b1 11       	cpse	r27, r1
    69f4:	b1 93       	st	Z+, r27
    69f6:	11 92       	st	Z+, r1
    69f8:	cb 01       	movw	r24, r22
    69fa:	0c 94 ff 34 	jmp	0x69fe	; 0x69fe <strrev>

000069fe <strrev>:
    69fe:	dc 01       	movw	r26, r24
    6a00:	fc 01       	movw	r30, r24
    6a02:	67 2f       	mov	r22, r23
    6a04:	71 91       	ld	r23, Z+
    6a06:	77 23       	and	r23, r23
    6a08:	e1 f7       	brne	.-8      	; 0x6a02 <strrev+0x4>
    6a0a:	32 97       	sbiw	r30, 0x02	; 2
    6a0c:	04 c0       	rjmp	.+8      	; 0x6a16 <strrev+0x18>
    6a0e:	7c 91       	ld	r23, X
    6a10:	6d 93       	st	X+, r22
    6a12:	70 83       	st	Z, r23
    6a14:	62 91       	ld	r22, -Z
    6a16:	ae 17       	cp	r26, r30
    6a18:	bf 07       	cpc	r27, r31
    6a1a:	c8 f3       	brcs	.-14     	; 0x6a0e <strrev+0x10>
    6a1c:	08 95       	ret

00006a1e <_exit>:
    6a1e:	f8 94       	cli

00006a20 <__stop_program>:
    6a20:	ff cf       	rjmp	.-2      	; 0x6a20 <__stop_program>
